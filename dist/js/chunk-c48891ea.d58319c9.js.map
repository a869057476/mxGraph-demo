{"version":3,"sources":["webpack:///./src/utils/mxgraph.js","webpack:///./node_modules/mxgraph/javascript/dist/build.js"],"names":["mxgraph","mx","mxImageBasePath","mxBasePath","window","mxGraph","mxGraphModel","mxEditor","mxGeometry","mxDefaultKeyHandler","mxDefaultPopupMenu","mxStylesheet","mxDefaultToolbar","mxToolbar","mxCell","mxCodec","mxEvent","mxUtils","mxConstants","this","opts","name","__mxOutput","mxClient","VERSION","IS_IE","navigator","userAgent","indexOf","IS_IE6","IS_IE11","match","IS_EDGE","IS_QUIRKS","document","documentMode","IS_EM","createElement","VML_PREFIX","OFFICE_PREFIX","IS_NS","IS_OP","IS_OT","IS_SF","test","vendor","IS_ANDROID","appVersion","IS_IOS","platform","IS_GC","IS_CHROMEAPP","chrome","app","runtime","IS_FF","InstallTrigger","IS_MT","IS_VML","appName","toUpperCase","IS_SVG","NO_FO","createElementNS","IS_WIN","IS_MAC","IS_CHROMEOS","IS_TOUCH","documentElement","IS_POINTER","PointerEvent","IS_LOCAL","location","href","defaultBundles","isBrowserSupported","link","rel","doc","id","write","setAttribute","head","getElementsByTagName","appendChild","loadResources","fn","lan","pending","length","callback","i","mxResources","add","include","src","mxLoadResources","mxForceIncludes","mxResourceExtension","mxLoadStylesheets","substring","basePath","imageBasePath","mxLanguage","language","userLanguage","mxDefaultLanguage","defaultLanguage","mxLanguages","languages","namespaces","styleSheets","node","type","styleSheet","cssText","createStyleSheet","module","exports","undefined","mxLog","consoleName","TRACE","DEBUG","WARN","buffer","init","body","title","table","tbody","tr","td","style","verticalAlign","textarea","height","resize","value","compatMode","width","addButton","evt","info","content","getInnerHtml","debug","copy","err","alert","popup","h","w","innerHeight","innerWidth","clientHeight","clientWidth","mxWindow","Math","max","setMaximizable","setScrollable","setResizable","setClosable","destroyOnClose","elt","getElement","resizeHandler","sender","offsetHeight","addListener","RESIZE_END","MAXIMIZE","NORMALIZE","writeln","toString","lab","funct","button","isVisible","show","setVisible","visible","enter","string","Date","getTime","leave","t0","dt","apply","arguments","warn","visibility","scrollTop","scrollHeight","mxObjectIdentity","FIELD_NAME","counter","get","obj","ctor","getFunctionName","constructor","clear","mxDictionary","prototype","map","key","put","previous","remove","getKeys","result","push","getValues","visit","visitor","resources","extension","resourcesEncoded","loadDefaultBundle","loadSpecialBundle","isLanguageSupported","getDefaultBundle","basename","getSpecialBundle","dash","toLowerCase","NONE","defaultBundle","specialBundle","req","parse","getText","load","isReady","e","text","lines","split","charAt","index","idx","charCodeAt","replace","unescape","params","defaultValue","replacePlaceholders","c","parseInt","join","mxPoint","x","y","mxRectangle","call","equals","clone","setRect","getCenterX","getCenterY","rect","minX","min","minY","maxX","maxY","intersect","r1","r2","b1","b2","grow","amount","getPoint","rotate90","t","tmp","fromRectangle","mxEffects","animateChanges","graph","changes","done","maxStep","step","animate","isRequired","change","mxGeometryChange","mxTerminalChange","mxValueChange","mxChildChange","mxStyleChange","state","getView","getState","cell","child","model","isEdge","setOpacity","shape","scale","dx","geometry","dy","sx","sy","cellRenderer","redraw","cascadeOpacity","setTimeout","delay","opacity","childCount","getChildCount","getChildAt","childState","edges","getEdges","edgeState","fadeOut","from","isEnabled","f","parentNode","removeChild","errorResource","closeResource","errorImage","removeCursors","element","cursor","children","childNodes","getCurrentStyle","currentStyle","getComputedStyle","parseCssNumber","parseFloat","isNaN","setPrefixedStyle","prefix","hasScrollbars","overflow","bind","scope","eval","expr","_mxJavaScriptExpression","message","findNode","attr","nodeType","NODETYPE_ELEMENT","getAttribute","firstChild","nextSibling","str","trim","ltrim","idx2","array","forEach","splice","isNode","nodeName","attributeName","attributeValue","isAncestorNode","ancestor","parent","getChildNodes","importNode","allChildren","importNodeImplementation","newNode","attributes","createTextNode","nodeValue","createXmlDocument","implementation","createDocument","createMsXmlDocument","ActiveXObject","async","validateOnParse","resolveExternals","parseXml","DOMParser","xml","parser","parseFromString","loadXML","clearSelection","selection","empty","getSelection","removeAllRanges","removeWhitespace","before","previousSibling","NODETYPE_TEXT","next","getTextContent","htmlEntities","s","newline","String","isVml","tagUrn","getXml","linefeed","getPrettyXml","XMLSerializer","xmlSerializer","serializeToString","tab","indent","ns","namespaceURI","NODETYPE_DOCUMENT","NODETYPE_DOCUMENT_FRAGMENT","NODETYPE_COMMENT","NODETYPE_CDATA","attrs","val","extractTextWithWhitespace","elems","blocks","ret","doExtract","elts","innerHTML","elem","replaceTrailingNewlines","pattern","postfix","innerText","textContent","setTextContent","serializer","getOuterHtml","outerHTML","ownerDocument","br","count","label","para","p","addTransparentBackgroundFilter","filter","linkAction","editor","action","pad","execute","linkInvoke","functName","arg","a","color","textDecoration","paddingLeft","getDocumentSize","b","d","fit","ds","left","offsetLeft","offsetWidth","offset","getDocumentScrollOrigin","sl","st","right","top","offsetTop","bottom","url","mxXmlRequest","send","onload","onerror","binary","timeout","ontimeout","headers","setRequestHeaders","request","setRequestHeader","setBinary","getAll","urls","remain","errors","status","getStatus","post","submit","target","simulate","loadInto","onreadystatechange","readyState","addEventListener","getValue","getNumber","Number","getColor","transients","shallow","equalPoints","equalEntries","removeDuplicates","arr","dict","extend","superCtor","output","toRadians","deg","PI","toDegree","rad","arcToCurves","x0","y0","angle","largeArcFlag","sweepFlag","fS","psai","abs","sds","ctx","cty","cpsi","cos","spsi","sin","rxd","ryd","rxdd","rydd","r1x","r2y","lamda","sqrt","seif","txd","tyd","tx","ty","atan2","s1","dr","sse","seg","ceil","segr","cpsir1","cpsir2","spsir1","spsir2","mc","ms","x2","y2","x3","y3","n","getBoundingBox","rotation","cx","p1","p2","p3","p4","getRotatedPoint","pt","x1","y1","getPortConstraints","terminal","edge","source","STYLE_PORT_CONSTRAINT","STYLE_SOURCE_PORT_CONSTRAINT","STYLE_TARGET_PORT_CONSTRAINT","directions","returnValue","DIRECTION_MASK_NONE","constraintRotationEnabled","STYLE_PORT_CONSTRAINT_ROTATION","STYLE_ROTATION","quad","DIRECTION_NORTH","DIRECTION_MASK_NORTH","DIRECTION_MASK_EAST","DIRECTION_MASK_SOUTH","DIRECTION_MASK_WEST","DIRECTION_WEST","DIRECTION_SOUTH","DIRECTION_EAST","reversePortConstraints","constraint","findNearestSegment","absolutePoints","last","current","dist","ptSegDistSq","getDirectedBounds","m","flipH","flipV","STYLE_DIRECTION","STYLE_FLIPH","STYLE_FLIPV","round","m2","getPerimeterPoint","pts","center","point","intersection","ip","distSq","rectangleIntersectsSegment","bounds","contains","intersects","tw","th","rw","rh","rx","ry","intersectsHotspot","hotspot","cy","start","STYLE_STARTSIZE","view","STYLE_HORIZONTAL","alpha","getOffset","container","scrollOffset","fixed","position","r","getBoundingClientRect","scrollLeft","wnd","defaultView","parentWindow","pageXOffset","pageYOffset","getScrollOrigin","includeAncestors","includeDocument","origin","convertPoint","chars","RegExp","rtrim","isNumeric","isFinite","isInteger","mod","denom","nume_a","nume_b","ua","ub","px","py","projlenSq","dotprod","lenSq","ptLineDist","relativeCcw","ccw","createImage","imageNode","borderStyle","sortCells","cells","ascending","lookup","sort","o1","o2","mxCellPath","create","PATH_SEPARATOR","comp","compare","getStylename","pairs","stylename","getStylenames","indexOfStylename","tokens","pos","addStylename","removeStylename","removeAllStylenames","setCellStyles","beginUpdate","setStyle","getStyle","endUpdate","isValue","sep","setCellStyleFlags","flag","setStyleFlag","cont","getAlignmentAsPoint","align","valign","ALIGN_LEFT","ALIGN_RIGHT","ALIGN_TOP","ALIGN_BOTTOM","getSizeForString","fontSize","fontFamily","textWidth","fontStyle","DEFAULT_FONTSIZE","DEFAULT_FONTFAMILY","div","lineHeight","LINE_HEIGHT","FONT_BOLD","fontWeight","FONT_ITALIC","txtDecor","FONT_UNDERLINE","FONT_STRIKETHROUGH","display","zoom","whiteSpace","size","getViewXml","getModel","getRoot","eventsEnabled","isEventsEnabled","setEventsEnabled","drawPane","overlayPane","dialect","DIALECT_SVG","NS_SVG","canvas","cloneNode","translate","getTranslate","temp","mxTemporaryCellStates","enc","encode","destroy","getScaleForPageCount","pageCount","pageFormat","border","PAGE_FORMAT_A4_PORTRAIT","availablePageWidth","availablePageHeight","graphBounds","getGraphBounds","sc","getScale","graphWidth","graphHeight","pageFormatAspectRatio","graphAspectRatio","pagesAspectRatio","pageRoot","pagesAspectRatioSqrt","numRowPages","numColumnPages","scaleChange","currentTotalPages","numLoops","roundRowDownProportion","floor","roundColumnDownProportion","posterWidth","open","html","base","close","links","styles","outer","svg","ownerSVGElement","minWidth","minHeight","printScreen","print","focus","isInternalWindow","pre","prompt","confirm","error","icon","padding","img","makeDraggable","graphF","dragElement","autoscroll","scalePreview","highlightDropTargets","getDropTarget","dragSource","mxDragSource","dragOffset","TOOLTIP_VERTICAL_OFFSET","setGuidesEnabled","getGraphForEvent","createDragElement","createPreviewElement","DEFAULT_HOTSPOT","MIN_HOTSPOT_SIZE","MAX_HOTSPOT_SIZE","RENDERING_HINT_EXACT","RENDERING_HINT_FASTER","RENDERING_HINT_FASTEST","DIALECT_VML","DIALECT_MIXEDHTML","DIALECT_PREFERHTML","DIALECT_STRICTHTML","NS_XHTML","NS_XLINK","SHADOWCOLOR","VML_SHADOWCOLOR","SHADOW_OFFSET_X","SHADOW_OFFSET_Y","SHADOW_OPACITY","NODETYPE_ATTRIBUTE","NODETYPE_ENTITY_REFERENCE","NODETYPE_ENTITY","NODETYPE_PROCESSING_INSTRUCTION","NODETYPE_DOCUMENTTYPE","NODETYPE_NOTATION","DEFAULT_VALID_COLOR","DEFAULT_INVALID_COLOR","OUTLINE_HIGHLIGHT_COLOR","OUTLINE_HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_SIZE","HIGHLIGHT_OPACITY","CURSOR_MOVABLE_VERTEX","CURSOR_MOVABLE_EDGE","CURSOR_LABEL_HANDLE","CURSOR_TERMINAL_HANDLE","CURSOR_BEND_HANDLE","CURSOR_VIRTUAL_BEND_HANDLE","CURSOR_CONNECT","HIGHLIGHT_COLOR","CONNECT_TARGET_COLOR","INVALID_CONNECT_TARGET_COLOR","DROP_TARGET_COLOR","VALID_COLOR","INVALID_COLOR","EDGE_SELECTION_COLOR","VERTEX_SELECTION_COLOR","VERTEX_SELECTION_STROKEWIDTH","EDGE_SELECTION_STROKEWIDTH","VERTEX_SELECTION_DASHED","EDGE_SELECTION_DASHED","GUIDE_COLOR","GUIDE_STROKEWIDTH","OUTLINE_COLOR","OUTLINE_STROKEWIDTH","HANDLE_SIZE","LABEL_HANDLE_SIZE","HANDLE_FILLCOLOR","HANDLE_STROKECOLOR","LABEL_HANDLE_FILLCOLOR","CONNECT_HANDLE_FILLCOLOR","LOCKED_HANDLE_FILLCOLOR","OUTLINE_HANDLE_FILLCOLOR","OUTLINE_HANDLE_STROKECOLOR","DEFAULT_TEXT_DIRECTION","WORD_WRAP","ABSOLUTE_LINE_HEIGHT","DEFAULT_FONTSTYLE","DEFAULT_STARTSIZE","DEFAULT_MARKERSIZE","DEFAULT_IMAGESIZE","ENTITY_SEGMENT","RECTANGLE_ROUNDING_FACTOR","LINE_ARCSIZE","ARROW_SPACING","ARROW_WIDTH","ARROW_SIZE","PAGE_FORMAT_A4_LANDSCAPE","PAGE_FORMAT_LETTER_PORTRAIT","PAGE_FORMAT_LETTER_LANDSCAPE","STYLE_PERIMETER","STYLE_SOURCE_PORT","STYLE_TARGET_PORT","STYLE_OPACITY","STYLE_FILL_OPACITY","STYLE_STROKE_OPACITY","STYLE_TEXT_OPACITY","STYLE_TEXT_DIRECTION","STYLE_OVERFLOW","STYLE_ORTHOGONAL","STYLE_EXIT_X","STYLE_EXIT_Y","STYLE_EXIT_DX","STYLE_EXIT_DY","STYLE_EXIT_PERIMETER","STYLE_ENTRY_X","STYLE_ENTRY_Y","STYLE_ENTRY_DX","STYLE_ENTRY_DY","STYLE_ENTRY_PERIMETER","STYLE_WHITE_SPACE","STYLE_FILLCOLOR","STYLE_POINTER_EVENTS","STYLE_SWIMLANE_FILLCOLOR","STYLE_MARGIN","STYLE_GRADIENTCOLOR","STYLE_GRADIENT_DIRECTION","STYLE_STROKECOLOR","STYLE_SEPARATORCOLOR","STYLE_STROKEWIDTH","STYLE_ALIGN","STYLE_VERTICAL_ALIGN","STYLE_LABEL_WIDTH","STYLE_LABEL_POSITION","STYLE_VERTICAL_LABEL_POSITION","STYLE_IMAGE_ASPECT","STYLE_IMAGE_ALIGN","STYLE_IMAGE_VERTICAL_ALIGN","STYLE_GLASS","STYLE_IMAGE","STYLE_IMAGE_WIDTH","STYLE_IMAGE_HEIGHT","STYLE_IMAGE_BACKGROUND","STYLE_IMAGE_BORDER","STYLE_NOLABEL","STYLE_NOEDGESTYLE","STYLE_LABEL_BACKGROUNDCOLOR","STYLE_LABEL_BORDERCOLOR","STYLE_LABEL_PADDING","STYLE_INDICATOR_SHAPE","STYLE_INDICATOR_IMAGE","STYLE_INDICATOR_COLOR","STYLE_INDICATOR_STROKECOLOR","STYLE_INDICATOR_GRADIENTCOLOR","STYLE_INDICATOR_SPACING","STYLE_INDICATOR_WIDTH","STYLE_INDICATOR_HEIGHT","STYLE_INDICATOR_DIRECTION","STYLE_SHADOW","STYLE_SEGMENT","STYLE_ENDARROW","STYLE_STARTARROW","STYLE_ENDSIZE","STYLE_SWIMLANE_LINE","STYLE_ENDFILL","STYLE_STARTFILL","STYLE_DASHED","STYLE_DASH_PATTERN","STYLE_FIX_DASH","STYLE_ROUNDED","STYLE_CURVED","STYLE_ARCSIZE","STYLE_ABSOLUTE_ARCSIZE","STYLE_SOURCE_PERIMETER_SPACING","STYLE_TARGET_PERIMETER_SPACING","STYLE_PERIMETER_SPACING","STYLE_SPACING","STYLE_SPACING_TOP","STYLE_SPACING_LEFT","STYLE_SPACING_BOTTOM","STYLE_SPACING_RIGHT","STYLE_ANCHOR_POINT_DIRECTION","STYLE_ELBOW","STYLE_FONTCOLOR","STYLE_FONTFAMILY","STYLE_FONTSIZE","STYLE_FONTSTYLE","STYLE_ASPECT","STYLE_AUTOSIZE","STYLE_FOLDABLE","STYLE_EDITABLE","STYLE_BACKGROUND_OUTLINE","STYLE_BENDABLE","STYLE_MOVABLE","STYLE_RESIZABLE","STYLE_RESIZE_WIDTH","STYLE_RESIZE_HEIGHT","STYLE_ROTATABLE","STYLE_CLONEABLE","STYLE_DELETABLE","STYLE_SHAPE","STYLE_EDGE","STYLE_JETTY_SIZE","STYLE_SOURCE_JETTY_SIZE","STYLE_TARGET_JETTY_SIZE","STYLE_LOOP","STYLE_ORTHOGONAL_LOOP","STYLE_ROUTING_CENTER_X","STYLE_ROUTING_CENTER_Y","SHAPE_RECTANGLE","SHAPE_ELLIPSE","SHAPE_DOUBLE_ELLIPSE","SHAPE_RHOMBUS","SHAPE_LINE","SHAPE_IMAGE","SHAPE_ARROW","SHAPE_ARROW_CONNECTOR","SHAPE_LABEL","SHAPE_CYLINDER","SHAPE_SWIMLANE","SHAPE_CONNECTOR","SHAPE_ACTOR","SHAPE_CLOUD","SHAPE_TRIANGLE","SHAPE_HEXAGON","ARROW_CLASSIC","ARROW_CLASSIC_THIN","ARROW_BLOCK","ARROW_BLOCK_THIN","ARROW_OPEN","ARROW_OPEN_THIN","ARROW_OVAL","ARROW_DIAMOND","ARROW_DIAMOND_THIN","ALIGN_CENTER","ALIGN_MIDDLE","TEXT_DIRECTION_DEFAULT","TEXT_DIRECTION_AUTO","TEXT_DIRECTION_LTR","TEXT_DIRECTION_RTL","DIRECTION_MASK_ALL","ELBOW_VERTICAL","ELBOW_HORIZONTAL","EDGESTYLE_ELBOW","EDGESTYLE_ENTITY_RELATION","EDGESTYLE_LOOP","EDGESTYLE_SIDETOSIDE","EDGESTYLE_TOPTOBOTTOM","EDGESTYLE_ORTHOGONAL","EDGESTYLE_SEGMENT","PERIMETER_ELLIPSE","PERIMETER_RECTANGLE","PERIMETER_RHOMBUS","PERIMETER_HEXAGON","PERIMETER_TRIANGLE","mxEventObject","properties","mxMouseEvent","sourceState","mxEventSource","eventSource","setEventSource","consumed","getName","getProperties","getProperty","isConsumed","consume","graphX","graphY","getEvent","getSource","isSource","getX","getClientX","getY","getClientY","getGraphX","getGraphY","getCell","isPopupTrigger","preventDefault","touches","isMouseEvent","eventListeners","getEventSource","removeListener","fireEvent","args","listen","updateListenerList","eventName","mxListenerList","entry","attachEvent","updateListener","listenerCount","removeEventListener","detachEvent","removeAllListeners","list","addGestureListeners","startListener","moveListener","endListener","removeGestureListeners","redirectMouseEvents","down","move","up","dblClick","fireMouseEvent","MOUSE_DOWN","MOUSE_MOVE","MOUSE_UP","release","addMouseWheelListener","wheelHandler","event","ctrlKey","deltaY","deltaX","diff","evtCache","dx0","dy0","pointerId","clientX","clientY","PINCH_THRESHOLD","disableContextMenu","srcElement","isTouchEvent","pointerType","MSPOINTER_TYPE_TOUCH","mozInputSource","isPenEvent","MSPOINTER_TYPE_PEN","isMultiTouchEvent","MSPOINTER_TYPE_MOUSE","isLeftMouseButton","which","buttons","isMiddleMouseButton","isRightMouseButton","isControlDown","isShiftDown","isMetaDown","isAltDown","shiftKey","altKey","metaKey","getMainEvent","changedTouches","stopPropagation","cancelBubble","LABEL_HANDLE","ROTATION_HANDLE","CUSTOM_HANDLE","VIRTUAL_HANDLE","ACTIVATE","RESIZE_START","RESIZE","MOVE_START","MOVE","MOVE_END","PAN_START","PAN","PAN_END","MINIMIZE","HIDE","SHOW","CLOSE","DESTROY","REFRESH","SIZE","SELECT","FIRED","FIRE_MOUSE_EVENT","GESTURE","TAP_AND_HOLD","GET","RECEIVE","CONNECT","DISCONNECT","SUSPEND","RESUME","MARK","ROOT","POST","OPEN","SAVE","BEFORE_ADD_VERTEX","ADD_VERTEX","AFTER_ADD_VERTEX","DONE","EXECUTE","EXECUTED","BEGIN_UPDATE","START_EDIT","END_UPDATE","END_EDIT","BEFORE_UNDO","UNDO","REDO","CHANGE","NOTIFY","LAYOUT_CELLS","CLICK","SCALE","TRANSLATE","SCALE_AND_TRANSLATE","UP","DOWN","ADD","REMOVE","CLEAR","ADD_CELLS","CELLS_ADDED","MOVE_CELLS","CELLS_MOVED","RESIZE_CELLS","CELLS_RESIZED","TOGGLE_CELLS","CELLS_TOGGLED","ORDER_CELLS","CELLS_ORDERED","REMOVE_CELLS","CELLS_REMOVED","GROUP_CELLS","UNGROUP_CELLS","REMOVE_CELLS_FROM_PARENT","FOLD_CELLS","CELLS_FOLDED","ALIGN_CELLS","LABEL_CHANGED","CONNECT_CELL","CELL_CONNECTED","SPLIT_EDGE","FLIP_EDGE","START_EDITING","EDITING_STARTED","EDITING_STOPPED","ADD_OVERLAY","REMOVE_OVERLAY","UPDATE_CELL_SIZE","ESCAPE","DOUBLE_CLICK","START","RESET","method","username","password","withCredentials","decodeSimulateValues","isBinary","responseText","getDocumentElement","responseXML","XMLHttpRequest","overrideMimeType","old","onbeforeunload","form","pars","decodeURIComponent","mxClipboard","STEPSIZE","insertCount","setCells","getCells","isEmpty","cut","removeCells","getSelectionCells","getExportableCells","getTopmostCells","cloneCells","paste","getImportableCells","delta","getDefaultParent","importCells","setSelectionCells","minimizable","movable","replaceNode","installMaximizeHandler","installMinimizeHandler","installCloseHandler","setMinimizable","setTitle","installMoveHandler","replaceChild","mxForm","className","mxImage","mxDivResizer","resizeWidth","resizeHeight","handlingResize","dropHandler","mouseDown","eventConsumer","evtName","me","mxUndoableEdit","significant","mxUndoManager","closeImage","minimizeImage","normalizeImage","maximizeImage","resizeImage","minimumSize","contentHeightCorrection","touchAction","contentWrapper","activator","activate","hide","scrollable","activeWindow","zIndex","previousWindow","isResizable","resizable","startX","startY","dragHandler","setSize","minimize","getMinimumSize","marginLeft","minimized","maxDisplay","maximize","minSize","maximizable","maximized","minDisplay","docHeight","setLocation","closeImg","setImage","image","marginRight","marginTop","insertBefore","closable","getTable","addButtons","okFunct","cancelFunct","addText","input","addField","addCheckbox","checked","addTextarea","rows","addCombo","isMultiSelect","select","addOption","combo","isSelected","option","getDocumentWidth","getDocumentHeight","l","previewElement","previewOffset","enabled","currentGraph","currentDropTarget","currentPoint","currentGuide","currentHighlight","guidesEnabled","gridEnabled","dragElementZIndex","dragElementOpacity","checkEventSource","setEnabled","isGuidesEnabled","isGridEnabled","setGridEnabled","getCellAt","isActive","mouseMoveHandler","reset","dragExit","removeDragElement","removeListeners","stopDrag","startDrag","mouseMove","mouseUpHandler","mouseUp","pointerEvents","getElementForEvent","elementFromPoint","graphContainsEvent","dragEnter","dragOver","drop","isMouseDown","isMouseTrigger","mxGuide","graphHandler","getGuideStates","mxCellHighlight","panDx","panDy","autoScroll","scrollPointToVisible","autoExtend","isDropEnabled","highlight","isGridEnabledEvent","hideGuide","isEnabledForEvent","off","gridSize","snap","dropTarget","noReset","updateDefaultMode","addItem","pressedIcon","factoryMethod","initialClassName","mouseHandler","backgroundColor","menu","mxPopupMenu","currentImg","isMenuShowing","hideMenu","addActionCombo","options","selectedIndex","addSwitchMode","altIcon","selectedMode","defaultMode","selectMode","addMode","toggle","defaultFunction","domNode","resetMode","forced","addSeparator","addBreak","addLine","hr","undone","redone","isSignificant","notify","die","undo","redo","history","indexOfNextAdd","canUndo","edit","canRedo","undoableEditHappened","undoableEdit","shift","edits","mxUrlConverter","mxPanningManager","thread","active","tdx","tdy","t0x","t0y","scrollbars","mouseListener","stop","addMouseListener","mouseUpListener","createThread","setInterval","panGraph","getDx","getDy","panTo","handleMouseOut","damper","clearInterval","setTranslate","removeMouseListener","mxAutoSaveManager","changeHandler","graphModelChanged","setGraph","mxAnimation","mxMorphing","steps","ease","mxImageBundle","alt","images","mxImageExport","mxAbstractCanvas2D","converter","createUrlConverter","mxXmlCanvas2D","root","writeDefaults","mxSvgCanvas2D","styleEnabled","gradients","defs","createStyle","baseUrl","baseDomain","updateBaseUrl","protocol","host","pathname","lastIndexOf","getBaseUrl","setBaseUrl","getBaseDomain","setBaseDomain","isRelativeUrl","convert","submenuImage","useLeftButtonForPopup","itemCount","autoExpand","smartSeparators","labels","iconCls","noHover","willAddSeparator","containsItems","col1","col2","col3","paddingRight","textAlign","createSubmenu","currentSelection","eventReceiver","activeRow","hideSubmenu","showSubmenu","createRange","addCheckmark","item","backgroundImage","backgroundRepeat","backgroundPosition","row","force","showMenu","autoSaveDelay","autoSaveThrottle","autoSaveThreshold","ignoredChanges","lastSnapshot","save","now","isRunning","startAnimation","updateAnimation","stopAnimation","mxCellStatePreview","animateCell","recurse","getDelta","isVertex","moveState","stopRecursion","getOriginForCell","getParent","geo","getCellGeometry","relative","pgeo","putImage","fallback","getImage","includeOverlays","drawState","visitStatesRecursive","drawCellState","drawOverlays","getLinkForCellState","setLink","drawShape","drawText","mxShape","checkBounds","beforePaint","paint","afterPaint","restore","overlays","states","path","rotateHtml","lastX","lastY","moveOp","lineOp","quadOp","curveOp","closeOp","createState","fillAlpha","strokeAlpha","fillColor","gradientFillAlpha","gradientColor","gradientAlpha","gradientDirection","strokeColor","strokeWidth","dashed","dashPattern","fixDash","lineCap","lineJoin","miterLimit","fontColor","fontBackgroundColor","fontBorderColor","shadow","shadowColor","shadowAlpha","shadowDx","shadowDy","rotationCx","rotationCy","format","addOp","rotatePoint","theta","pop","rotate","setAlpha","setFillAlpha","setStrokeAlpha","setFillColor","setGradient","color1","color2","direction","alpha1","alpha2","setStrokeColor","setStrokeWidth","setDashed","setDashPattern","setLineCap","setLineJoin","setMiterLimit","setFontColor","setFontBackgroundColor","setFontBorderColor","setFontSize","setFontFamily","setFontStyle","setShadow","setShadowColor","setShadowAlpha","setShadowOffset","begin","moveTo","lineTo","quadTo","curveTo","arcTo","curves","end","textEnabled","compressed","toFixed","roundrect","ellipse","aspect","wrap","clip","dir","stroke","fill","fillAndStroke","useDomParser","useAbsoluteIds","matchHtmlAlignment","foEnabled","foAltText","foOffset","textOffset","imageOffset","strokeTolerance","minStrokeWidth","refCount","lineHeightCorrection","pointerEventsValue","fontMetricsPadding","cacheOffsetSize","hash","tagName","namespace","getAlternateText","fo","createAlternateContent","anchor","createGradientId","getSvgGradient","gradient","tmpId","getElementById","createSvgGradient","op","addNode","filled","stroked","updateFill","updateStroke","transform","createShadow","createTolerance","originalRoot","getCurrentStrokeWidth","sw","updateStrokeAttributes","createDashPattern","pat","tol","removeAttribute","setAttributeNS","convertHtml","xd","xb","adoptNode","ta","createDiv","div2","div3","updateText","updateTextNodes","addForeignObject","group","g","createCss","getTextCss","flex","block","box","yp","bg","ofl","fw","fh","bgc","lh","css","deco","plainText","createClip","updateFont","textHeight","addTextBackground","bbox","getBBox","ie","mxVmlCanvas2D","setStates","stencil","initStyles","mxStencil","desc","parseDescription","parseConstraints","rotatedHtmlBackground","vmlScale","createVmlElement","coordsize","strokeweight","strokecolor","createStroke","createFill","createTransparentFill","flip","endcap","joinstyle","miterlimit","dashstyle","getVmlDashStyle","tok","createShadowStroke","createShadowFill","cpx0","cpy0","qpx1","qpy1","cpx3","cpy3","cpx1","cpy1","cpx2","cpy2","createRect","margin","inner","wordWrap","rot","maxHeight","real_cos","real_sin","sizeDiv","oh","top_fix","left_fix","divParent","textpathok","v","tp","on","horizontal","vertical","guideX","guideY","rounded","tolerance","getGuideTolerance","createGuideShape","guide","mxPolyline","isDashed","isStateIgnored","tt","overrideX","stateX","valueX","overrideY","stateY","valueY","ttX","ttY","middle","snapX","centerAlign","override","getOverlayPane","snapY","snapDelta","points","getGuideColor","scrollWidth","antiAlias","minSvgStrokeWidth","boundingBox","svgStrokeTolerance","svgPointerEvents","shapePointerEvents","stencilPointerEvents","outline","useSvgBoundingBox","strokewidth","fillOpacity","strokeOpacity","isParseVml","isHtmlAllowed","getSvgScreenOffset","createSvg","createHtml","createVml","reconfigure","updateBoundsFromPoints","redrawShape","redrawHtmlShape","updateBoundingBox","lastChild","getLabelBounds","isPaintBoundsInverted","getLabelMargins","createVmlGroup","createCanvas","insertAdjacentHTML","destroyCanvas","createSvgCanvas","updateVmlContainer","createVmlCanvas","updateHtmlBounds","updateHtmlFilters","updateHtmlColors","isShadow","east","south","west","north","borderColor","borderWidth","setTransparentBackgroundImage","mxRefCount","releaseSvgGradients","oldGradients","strokeDrawn","updateTransform","configureCanvas","bb","createBoundingBox","createTransparentSvgRectangle","paintEdgeShape","paintVertexShape","getGradientBounds","getShapeRotation","paintBackground","paintForeground","getArcSize","paintGlassEffect","arc","isRounded","addPoints","arcSize","exclude","initialMove","pe","slice","p0","wp","nx1","ny1","nx2","ny2","resetStyles","spacing","startSize","endSize","startArrow","endArrow","glass","setCursor","getCursor","isRoundable","augmentBoundingBox","getRotation","getTextRotation","mxText","verticalTextRotation","grads","defaultLocalized","allowEval","constraints","w0","h0","bgNode","fgNode","conns","parseConstraint","perimeter","mxConnectionConstraint","evaluateTextAttribute","attribute","evaluateAttribute","loc","stack","computeAspect","minScale","drawChildren","disableShadow","drawNode","inverse","parseRegularly","pointCount","segs","childNode","childName","ps","arcsize","factor","mxStencilRegistry","getStencil","stencils","addStencil","mxMarker","markers","addMarker","createMarker","unitX","unitY","mxActor","mxCloud","mxRectangleShape","mxEllipse","mxDoubleEllipse","mxRhombus","mxArrow","arrowWidth","mxArrowConnector","arrowSpacing","family","spacingTop","spacingRight","spacingBottom","spacingLeft","background","clipped","labelPadding","textDirection","updateMargin","mxTriangle","mxHexagon","mxLine","mxImageShape","mxLabel","mxCylinder","mxConnector","mxSwimlane","mxGraphLayout","WeightedCellSorter","weightedValue","mxStackLayout","mxPartitionLayout","mxCompactTreeLayout","invert","mxRadialTreeLayout","mxFastOrganicLayout","mxCircleLayout","radius","mxParallelEdgeLayout","mxCompositeLayout","layouts","master","mxEdgeLabelLayout","mxGraphAbstractHierarchyCell","mxGraphHierarchyNode","connectsAsTarget","connectsAsSource","mxGraphHierarchyEdge","ids","mxGraphHierarchyModel","layout","vertices","roots","tightenToSource","getGraph","vertexMapper","edgeMapper","maxRank","internalVertices","getChildVertices","SOURCESCANSTARTRANK","createInternalCells","j","internalEdge","realEdges","realEdge","targetCell","getVisibleTerminal","internalTargetCell","mxSwimlaneModel","mxHierarchicalLayoutStage","mxMedianHybridCrossingReduction","MedianCellSorter","mxMinimumCycleRemover","mxCoordinateAssignment","intraCellSpacing","interRankCellSpacing","orientation","initialX","parallelEdgeSpacing","mxSwimlaneOrdering","mxHierarchicalLayout","deterministic","createArrow","widthFactor","endOffsetX","endOffsetY","createOpenArrow","diamond","swFactor","tk","redrawPath","events","hw","hh","prev","paintLine","paintCurvedLine","ix","iy","arrow","nx","ny","basex","basey","floorx","floory","p0x","p0y","p1x","p1y","p2x","p2y","p3x","p3y","p5x","p5y","getEdgeWidth","isMarkerStart","getStartArrowWidth","isMarkerEnd","getEndArrowWidth","startWidth","endWidth","edgeWidth","openEnded","isOpenEnded","markerStart","markerEnd","isArrowRounded","i0","orthx","orthy","fns","startNx","startNy","paintMarker","outStartX","outStartY","inEndX","inEndY","dx1","dy1","dist1","tmp1","dist2","strokeWidthFactor","angleFactor","outX","outY","inX","inY","c1x","c1y","c2x","c2y","inStartX","inStartY","ptX","ptY","widthArrowRatio","spaceX","spaceY","baseSpacingTop","baseSpacingBottom","baseSpacingLeft","baseSpacingRight","replaceLinefeeds","ignoreClippedStringSize","ignoreStringSize","textWidthPadding","lastValue","cacheEnabled","update","realHtml","fmt","getAutoDirection","redrawHtmlShapeWithCss3","updateSize","textDiv","updateHtmlFilter","updateHtmlTransform","exec","getContentNode","ow","updateInnerHtml","divs","unrotatedBoundingBox","getHtmlValue","updateValue","bd","enableWrap","maxWidth","getSpacing","mid","preserveImageAspect","useVml","imageSize","indicatorSize","indicatorSpacing","indicatorShape","indicator","indicatorColor","indicatorStrokeColor","indicatorGradientColor","indicatorDirection","paintImage","paintIndicator","getImageBounds","getIndicatorBounds","indicatorImage","hasChildNodes","getCylinderSize","isForeground","sourceMarker","targetMarker","getTitleSize","isHorizontal","shapeVertical","realHorizontal","realFlipH","realFlipV","getSwimlaneArcSize","swimlaneLine","paintRoundedSwimlane","paintSwimlane","paintSeparator","paintDivider","useBoundingBox","moveCell","resizeCell","getConstraint","getCurrentCellStyle","traverse","vertex","directed","func","visited","edgeCount","getEdgeCount","getEdgeAt","getTerminal","isAncestor","traverseAncestors","isVertexMovable","isCellMovable","isVertexIgnored","isCellVisible","isEdgeIgnored","setEdgeStyleEnabled","setOrthogonalEdge","getParentOffset","parentGeo","getGeometry","setEdgePoints","setRelative","parentOffset","setGeometry","setVertexLocation","getVertexBounds","arrangeGroups","topBorder","rightBorder","bottomBorder","leftBorder","updateGroupBounds","nudge","rankIndex","marginBottom","keepFirstLocation","resizeParent","resizeParentMax","resizeLast","borderCollapse","allowGaps","pstate","getIndex","getParentSize","isLayer","currentRoot","getLayoutCells","c1","c2","geo1","geo2","fillValue","isSwimlane","getCellStyle","horz","childStyle","setChildGeometry","isCellCollapsed","updateParentGeometry","pgeo2","resizeVertices","other","getStartSize","maintainParentLocation","groupPadding","groupPaddingTop","groupPaddingRight","groupPaddingBottom","groupPaddingLeft","parentsChanged","moveTree","levelDistance","nodeDistance","resetEdges","prefHozEdgeSep","prefVertEdgeOff","minEdgeJetty","channelBuffer","edgeRouting","sortEdges","alignRanks","maxRankHeight","getConnections","findTreeRoots","Object","parentX","parentY","dfs","findRankHeights","setCellHeights","horizontalLayout","verticalLayout","moveNode","adjustParents","localEdgeProcessing","sortOutgoingEdges","e1","e2","end1","end2","rank","createNode","out","attachParent","layoutLeaf","offsetX","offsetY","siblingOffset","contour","upperHead","createLine","lowerHead","upperTail","lowerTail","sum","merge","total","upper","lower","bridge","a1","a2","line1","line2","line","processNodeOutgoing","parentCell","sortedCells","sortingCriterion","availableWidth","requiredWidth","edgeSpacing","currentXOffset","currentYOffset","maxYOffset","parentBounds","childCell","childBounds","getEdgesBetween","newPoints","angleOffset","rootx","rooty","autoRadius","rowMinX","rowMaxX","rowMinCenX","rowMaxCenX","rowRadi","rootBounds","centerX","centerY","vertexBounds","calcRowDims","maxLeftGrad","maxRightGrad","leftGrad","rightGrad","xLeftLimit","xRightLimit","fullWidth","xProportion","totalTheta","averTheta","nextTheta","lastTheta","rowNum","rowHasChildren","useInputOrigin","disableEdgeStyle","forceConstant","forceConstantSquared","minDistanceLimit","maxDistanceLimit","minDistanceLimitSquared","initialTemp","temperature","maxIterations","iteration","vertexArray","dispX","dispY","cellLocation","radiusSquared","isMoveable","neighbours","indices","allowedToRun","initialBounds","getBoundingBoxFromGeometry","getOpposites","resetEdge","calcRepulsion","calcAttraction","calcPositions","reduceTemperature","minx","miny","moveCells","deltaLength","newXDisp","newYDisp","k","xDelta","yDelta","deltaLengthSquared","displacementX","displacementY","vertexCount","random","deltaLengthWithRadius","moveCircle","getRadius","circle","phi","checkOverlap","findParallels","parallels","addCell","getEdgeId","trg","route","scx","scy","tcx","tcy","len","placeLabels","avoid","labRect","dy2","dx2","minRank","nextLayerConnectedCells","previousLayerConnectedCells","getNextLayerConnectedCells","layer","getPreviousLayerConnectedCells","getGeneralPurposeVariable","setGeneralPurposeVariable","setX","setY","hashCode","getRankValue","otherNode","getCoreCell","isReversed","ranks","dfsCount","undirectedEdges","directedEdges","initialRank","startNodes","internalNode","internalNodes","startNodesCopy","edgesToBeMarked","layerDeterminingEdges","allEdgesScanned","minimumLayer","removedCell","currentMaxLayer","fixRanks","rankList","rootsArray","oldRootsArray","seen","parentToCellRankDifference","dfsRoots","trackAncestors","seenNodes","extendedDfs","connectingEdge","rootId","outgoingEdges","targetNode","ancestors","childHash","hashCodeLength","ranksPerGroup","swimlanes","swimlaneIndex","ii","maxChainDfs","lowerRank","upperRank","chainCount","slIndex","incomingEdges","nestedBestRanks","currentBestCrossings","iterationsWithoutImprovement","maxNoImprovementIterations","calculateCrossings","weightedMedian","transpose","candidateCrossings","numRanks","totalCrossings","calculateRankCrossing","previousRank","tmpIndices","rankPosition","connectedCells","nodeIndices","connectedNode","otherCellRankPosition","concat","firstIndex","treeSize","tree","treeIndex","mainLoopIteration","improved","maxCount","orderedCells","tempRank","leftCellAboveConnections","leftCellBelowConnections","rightCellAboveConnections","rightCellBelowConnections","leftAbovePositions","leftBelowPositions","rightAbovePositions","rightBelowPositions","leftCell","rightCell","totalCurrentCrossings","totalSwitchedCrossings","ik","downwardSweep","medianRank","rankValue","numCellsForRank","medianValues","reservedPositions","nextLevelConnectedCells","nextRankValue","sorterEntry","medianValue","arrayCount","medianPoint","leftMedian","rightMedian","unseenNodesArray","unseenNodes","modelRoots","seenNodesCopy","jettyPositions","limitX","currentXDelta","widestRank","rankTopY","rankBottomY","widestRankValue","rankWidths","rankY","fineTuning","nextLayerConnectedCache","previousLayerConnectedCache","printStatus","initialCoords","minNode","bestXDelta","medianPos","minPath","setCellLocations","nodeList","nodeWrapper","maxTries","cellWrapper","numNextLayerConnected","numPreviousLayerConnected","medianNextLevel","medianXValue","medianPreviousLevel","numConnectedNeighbours","currentPosition","cellMedian","positionChanged","leftLimit","rankSize","rightLimit","connectedCell","connectedCellWrapper","rankMedianPosition","weightedValues","cellMap","currentCell","calculatedWeightedValue","numConnectionsNextLevel","leftBuffer","rightBuffer","collection","totalWeight","facade","calculateWidestRank","rankCoordinates","localX","boundsWarning","numEdges","lastRankMaxCellHeight","maxCellHeight","distanceToNextRank","referenceX","edgeStraight","refSegCount","upSegCount","downSegCount","upXPositions","downXPositions","currentX","nextX","repositionValid","rankArray","MAX_VALUE","edgeStyle","mxHierarchicalEdgeStyle","ORTHOGONAL","POLYLINE","CURVE","setEdgePosition","cellIndex","currentCells","currentRank","sorter","connectedEdgeCount","connectedEdges","connections","innerCell","connIndex","numActualEdges","parallelEdgeCount","jettys","layoutReversed","realSource","reversed","arrayOffset","jetty","modelSource","isPort","loopStart","loopLimit","loopDelta","positionX","topChannelY","bottomChannelY","modelTarget","realTarget","processReversedEdge","realCell","positionY","reversedOverSwimlane","cellId","STRAIGHT","mxSwimlaneLayout","currentEdit","createUndoableEdit","setRoot","mxRootChange","previousIndex","mxCollapseChange","collapsed","mxVisibleChange","mxCellAttributeChange","onInit","moveParent","parentBorder","interHierarchySpacing","edgesCache","edgeSourceTermCache","edgesTargetTermCache","Array","rootsCopy","run","findRoots","best","maxDiff","fanOut","fanIn","cachedEdges","isCollapsed","terminalCache","term","hierarchyVertices","allVertexSet","filledVertexSet","filterDescendants","filledVertexSetEmpty","candidateRoots","vertexSet","cycleStage","layeringStage","crossingStage","placementStage","allVertices","currentComp","vertexID","edgeIsSource","netCount","isSource2","otherTerm","dummyVertexWidth","dummyVertices","getChildCells","insertVertex","layoutBounds","lane","childrenY","maxChildrenY","newGeo","leftGroupBorder","isValidAncestor","laneCounter","otherVertex","otherIndex","maintainEdgeParent","ignoreRelativeEdgeParent","createIds","nextId","updateLevel","endingUpdate","createRoot","isCreateIds","setCreateIds","insert","filterCells","getDescendants","rootChanged","oldRoot","cellAdded","isRoot","parentChanged","updateEdgeParents","getId","setId","createId","collision","updateEdgeParent","getNearestCommonAncestor","origin1","getOrigin","origin2","cell1","cell2","getParentPath","cellRemoved","parentForCellChanged","oldIndex","par","getChildren","getChildEdges","setTerminal","terminalChanged","setTerminals","terminalForCellChanged","insertEdge","removeEdge","getDirectedEdgeCount","outgoing","ignoredEdge","getIncomingEdges","getOutgoingEdges","incoming","includeLoops","tmp2","directedMatch","oppositeMatch","sources","targets","terminals","topmost","isConnectable","setValue","valueForCellChanged","valueChanged","geometryForCellChanged","styleForCellChanged","setCollapsed","collapsedStateForCellChanged","visibleStateForCellChanged","mergeChildren","to","cloneAllEdges","mapping","mergeChildrenImpl","getParents","parents","cloneCell","includeChildren","clones","cloneCellImpl","restoreClone","ident","cellCloned","cloneChild","connect","isConnect","connectable","mxTransient","newValue","setVertex","setEdge","setConnectable","setParent","removeFromParent","getEdgeIndex","isOutgoing","removeFromTerminal","hasAttribute","userObject","cloneValue","TRANSLATE_CONTROL_POINTS","alternateBounds","sourcePoint","targetPoint","swap","getTerminalPoint","setTerminalPoint","ct","fixedAspect","resolve","t1","t2","mxPerimeter","RectanglePerimeter","orthogonal","pi","pi2","beta","tan","EllipsePerimeter","det","xout1","xout2","yout1","yout2","pow","xout","yout","RhombusPerimeter","TrianglePerimeter","corner","HexagonPerimeter","mxPrintPreview","pageSelector","pageScale","putDefaultVertexStyle","createDefaultVertexStyle","putDefaultEdgeStyle","createDefaultEdgeStyle","mxCellState","absoluteOffset","mxGraphSelectionModel","mxSelectionChange","selectionModel","added","removed","mxCellEditor","zoomHandler","isEditing","editingCell","stopEditing","mxCellRenderer","autoOrigin","printOverlays","printControls","printBackgroundImage","targetWindow","clipping","getWindow","getDoctype","appendGraph","forcePageBreaks","keepOpen","previousInitializeOverlay","initializeOverlay","overlay","getDrawPane","initControl","control","handleEvents","clickHandler","isNewWindow","writeHead","currentScale","availableHeight","hpages","vpages","writePageSelector","createPageSelector","addPage","pageBreakAfter","addPageBreak","cov","getCoverPages","apx","getAppendices","pageNum","renderPage","addGraphFragment","insertBackgroundImage","closeDocument","writePostfix","js","pageNumber","pageBreakInside","innerDiv","viewport","useCssTransforms","previousContainer","getCanvas","backgroundPane","getBackgroundPane","realScale","graphEnabled","tempClip","rendering","orig","svgs","getLinkForCell","putCellStyle","getDefaultVertexStyle","getDefaultEdgeStyle","defaultStyle","tmpStyle","invalidStyle","invalid","visibleSourceState","visibleTargetState","terminalDistance","segments","unscaledWidth","unscaledHeight","getPerimeterBounds","setAbsoluteTerminalPoint","getVisibleTerminalState","setVisibleTerminalState","terminalState","getCellBounds","cellBounds","getPaintBounds","paintBounds","updateCachedBounds","setState","doneResource","updatingSelectionResource","singleSelection","isSingleSelection","setSingleSelection","changeSelection","setCell","getFirstSelectableCell","isCellSelectable","addCells","removeCell","trigger","modified","autoSize","selectText","emptyLabelText","escapeCancelsEditing","textNode","minResize","wordWrapPadding","blurEnabled","initialValue","contentEditable","isLegacyEditor","installListeners","applyValue","labelChanged","setAlign","getInitialValue","getEditingValue","getCurrentValue","isCancelEditingKeyEvent","focusLost","isStopEditingEvent","keyCode","keypressHandler","clearOnChange","getEmptyLabelText","keyupHandler","resizeThread","clearTimeout","isEnterStopsCellEditing","isEventSource","lw","bds","hpos","vpos","legacySpacing","isWrapping","getEditorBounds","isInvokesStopCellEditing","getBackgroundColor","absoluteRoot","startEditing","tooltipHandler","hideTooltip","bold","italic","isHideLabel","isSelectText","execCommand","cancel","initial","blur","prepareTextarea","getEditingCell","defaultShapes","defaultEdgeShape","defaultVertexShape","defaultTextShape","legacyControlPosition","forceControlClickHandler","registerShape","initializeShape","configureShape","createShape","getShapeConstructor","createIndicatorShape","getShape","getIndicatorShape","getIndicatorColor","getIndicatorGradientColor","getIndicatorImage","postConfigureShape","resolveColor","checkPlaceholderStyles","values","field","referenced","getSwimlane","swimlaneIndicatorColorAttribute","rstate","rshape","getLabelValue","getLabel","createLabel","isForceHtml","isHtmlLabel","getVerticalAlign","isLabelClipped","initializeLabel","forceGetCell","isLabelEvent","nativeDblClickEnabled","createCellOverlays","getCellOverlays","installCellOverlayListeners","createControl","getFoldingImage","foldingEnabled","createControlClickHandler","collapse","foldCells","innerNode","first","isShapeEvent","redrawLabel","wrapping","isTextShapeInvalid","nextScale","getTextScale","isClipping","vis","redrawLabelShape","check","property","rotateLabelBounds","redrawCellOverlays","getBounds","redrawControl","getControlBounds","insertStateAfter","htmlNode","shapes","getShapesForState","shapeChanged","selectionCellsHandler","updateHandler","isShapeInvalid","doRedrawShape","mxEdgeStyle","EntityRelation","segment","isSourceLeft","sourceGeometry","isTargetLeft","targetGeometry","getRoutingCenterY","xe","ye","dep","midY","Loop","transformControlPoint","getRoutingCenterX","ElbowConnector","SideToSide","TopToBottom","SegmentConnector","sourceScaled","targetScaled","controlHints","scalePointArray","scaleCellState","lastPushed","hint","pushPoint","lastInx","hints","currentTerm","currentPt","hozChan","vertChan","currentHint","fixedVertAlign","fixedHozAlign","inHozChan","inVertChan","orthBuffer","orthPointsFallback","dirVectors","wayPoints1","routePatterns","inlineRoutePatterns","vertexSeperations","limits","LEFT_MASK","TOP_MASK","RIGHT_MASK","BOTTOM_MASK","LEFT","TOP","RIGHT","BOTTOM","SIDE_MASK","CENTER_MASK","SOURCE_MASK","TARGET_MASK","VERTEX_MASK","getJettySize","OrthConnector","sourceEdge","targetEdge","sourceX","sourceY","sourceWidth","sourceHeight","targetX","targetY","targetWidth","targetHeight","sourceBuffer","targetBuffer","totalBuffer","tooShort","portConstraint","newRect","sourceCenX","sourceCenY","targetCenX","targetCenY","sourceTopDist","sourceLeftDist","sourceBottomDist","sourceRightDist","dirPref","horPref","vertPref","preferredHorizDist","preferredVertDist","prefOrdering","preferredOrderSet","sourceIndex","targetIndex","routePattern","currentIndex","lastOrientation","initialOrientation","currentOrientation","nextDirection","directionIndex","tar","sou","side","limit","souTar","targetOrientation","sameOrient","getRoutePattern","mxStyleRegistry","putValue","mxGraphView","mxCurrentRootChange","isUp","renderHint","stylesheet","mouseListeners","multiplicities","imageBundles","createCellRenderer","setSelectionModel","createSelectionModel","setStylesheet","createStylesheet","createGraphView","graphModelChangeListener","createHandlers","revalidate","mxCellOverlay","tooltip","mxOutline","mxMultiplicity","validNeighbors","countError","typeError","validNeighborsAllowed","mxLayoutManager","undoHandler","beforeUndo","moveHandler","cellsMoved","cellsResized","mxSwimlaneManager","addEnabled","resizeEnabled","addHandler","isAddEnabled","cellsAdded","isResizeEnabled","isCellVisibleFn","oldValidateCellState","validateCellState","oldBounds","oldStates","getStates","oldScale","oldDoRedrawShape","self","oldPaint","resurse","setScale","resetValidationState","validateCell","setGraphBounds","deltas","mxGraphHandler","panHandler","suspended","updatePreview","updateHint","escapeHandler","refreshHandler","refreshThread","currentDx","currentDy","pBounds","getPreviewBounds","livePreviewUsed","setHandlesVisibleForCells","getHandledSelectionCells","keyHandler","isCloneEvent","isCellsCloneable","isCloneEnabled","cloning","checkPreview","mxPanningHandler","forcePanningHandler","isForcePanningEvent","gestureHandler","eo","isPinchEnabled","initialScale","mouseDownEvent","zoomGraph","mxPopupMenuHandler","inTolerance","mxCellMarker","validColor","invalidColor","mxSelectionCellsHandler","handlers","refresh","getSelectionModel","mxConnectionHandler","mxConstraintHandler","resetHandler","currentFocus","mxRubberband","forceRubberbandHandler","isForceRubberbandEvent","repaint","mxHandle","mxVertexHandler","livePreview","invalidate","validate","mxEdgeHandler","dirty","isRendering","mxElbowEdgeHandler","mxEdgeSegmentHandler","mxKeyHandler","normalKeys","shiftKeys","controlKeys","controlShiftKeys","keydownHandler","keyDown","mxTooltipHandler","mxCellTracker","highlightColor","repaintHandler","handler","escape","hideProperties","config","actions","addActions","cycleAttributeValues","popupHandler","undoManager","createGraph","toolbar","createToolbar","configure","cycleAttributeName","EMPTY_POINT","updatingDocumentResource","captureDocumentGesture","optimizeVmlReflows","updateStyle","lastNode","lastHtmlNode","lastForegroundNode","lastForegroundHtmlNode","setCurrentRoot","sizeDidChange","scaleAndTranslate","previousScale","previousTranslate","viewStateChanged","removeState","includeEdges","invalidating","prevDisplay","placeholder","getEmptyBounds","validateBackground","createBackgroundPageShape","validateBackgroundImage","validateBackgroundPage","getBackgroundImage","redrawBackgroundImage","pageVisible","getBackgroundPageBounds","backgroundPageShape","isHideOnHover","updateCellState","stateValidated","pState","getChildOffsetForCell","updateVertexState","updateEdgeState","updateVertexLabelOffset","updateFixedTerminalPoints","updatePoints","updateFloatingTerminalPoints","updateEdgeBounds","updateEdgeLabelOffset","fg","keepEdgesInForeground","keepEdgesInBackground","updateFixedTerminalPoint","getConnectionConstraint","getFixedTerminalPoint","getConnectionPoint","updateBoundsFromStencil","asp","getEdgeStyle","getTerminalPort","srcBounds","trgBounds","ignoreScale","isLoopStyleEnabled","tc","defaultLoopStyle","isAllowEval","updateFloatingTerminalPoint","getFloatingTerminalPoint","getNextPoint","orth","isOrthogonal","getPerimeterFunction","opposite","markerSize","gx","gy","getRelativePoint","totalLength","minDist","xSegment","ySegment","projlen","yDistance","setRendering","setAllowEval","getCellStates","getDecoratorPane","decoratorPane","isContainerEvent","isScrollEvent","outWidth","inWidth","outHeight","inHeight","fireGestureEvent","popupMenuHandler","endHandler","createHtmlPane","updateContainerStyle","onResize","updateHtmlCanvasSize","pane","createVmlPane","getTranslateForRoot","cellEditor","portsEnabled","doubleTapEnabled","doubleTapTimeout","doubleTapTolerance","lastTouchY","lastTouchTime","tapAndHoldEnabled","tapAndHoldDelay","tapAndHoldInProgress","tapAndHoldValid","initialTouchX","initialTouchY","defaultOverlap","defaultParent","alternateEdgeStyle","pageBreaksVisible","pageBreakColor","pageBreakDashed","minPageBreakDist","preferPageSize","escapeEnabled","invokesStopCellEditing","enterStopsCellEditing","useScrollbarsForPanning","exportEnabled","importEnabled","cellsLocked","cellsCloneable","cellsEditable","cellsDeletable","cellsMovable","edgeLabelsMovable","vertexLabelsMovable","dropEnabled","splitEnabled","cellsResizable","cellsBendable","cellsSelectable","cellsDisconnectable","autoSizeCells","autoSizeCellsOnAdd","ignoreScrollbars","translateToScrollPosition","timerAutoScroll","allowAutoPanning","maximumGraphBounds","minimumGraphSize","minimumContainerSize","maximumContainerSize","resizeContainer","allowNegativeCoordinates","constrainChildren","constrainRelativeChildren","extendParents","extendParentsOnAdd","extendParentsOnMove","recursiveResize","collapseToPreferredSize","zoomFactor","keepSelectionVisibleOnZoom","centerZoom","resetViewOnRootChange","resetEdgesOnResize","resetEdgesOnMove","resetEdgesOnConnect","allowLoops","multigraph","connectableEdges","allowDanglingEdges","cloneInvalidEdges","disconnectOnMove","labelsVisible","htmlLabels","swimlaneSelectionEnabled","swimlaneNesting","minFitScale","maxFitScale","collapsedImage","expandedImage","warningImage","alreadyConnectedResource","containsValidationErrorsResource","collapseExpandResource","createCellEditor","relatedTarget","createTooltipHandler","createSelectionCellsHandler","connectionHandler","createConnectionHandler","createGraphHandler","panningHandler","createPanningHandler","panningEnabled","createPopupMenuHandler","getStylesheet","getSelectionCellsForChanges","ignoreFn","processChange","updateSelection","removeSelectionCells","setDefaultParent","removeStateForCell","newParent","home","addCellOverlay","removeCellOverlay","removeCellOverlays","clearCellOverlays","setCellWarning","warning","isSelect","setSelectionCell","startEditingAtCell","getSelectionCell","isCellEditable","convertValueToString","cellLabelChanged","isAutoSizeCell","cellSizeUpdated","click","mxe","isTransparentClickEvent","selected","isCellSelected","isSwimlaneSelectionEnabled","getSwimlaneAt","isToggleEvent","reverse","selectCellForEvent","isSiblingSelected","tapAndHold","panningTrigger","marker","currentColor","markedState","mark","createEdgeState","panningManager","createPanningManager","getBorderSizes","borderLeftStyle","borderLeftWidth","paddingTop","borderTopStyle","borderTopWidth","borderRightStyle","borderRightWidth","paddingBottom","borderBottomStyle","borderBottomWidth","getPreferredPageSize","page","hCount","vCount","keepOrigin","ignoreWidth","ignoreHeight","getBorder","cssBorder","w1","h1","w2","h2","s2","doResizeContainer","updatePageBreaks","gb","horizontalCount","verticalCount","horizontalPageBreaks","verticalPageBreaks","drawPageBreaks","breaks","pageBreak","ignoreState","postProcessCellStyle","getImageFromBundles","encodeURIComponent","comma","setCellStyle","toggleCellStyle","toggleCellStyles","toggleCellStyleFlags","alignCells","param","flipEdge","addImageBundle","bundle","removeImageBundle","orderCells","back","cellsOrdered","groupCells","getCellsForGroup","createGroupCell","getBoundsForGroup","ungroupCells","getCellsForUngroup","removeCellsAfterUngroup","cellsRemoved","addAllEdges","removeCellsFromParent","moveGroup","getActualStartSize","allowInvalidEdges","keepPosition","trans","getEdgeValidationError","createVertex","createEdge","addEdge","absolute","constrain","parentState","zero","oldState","isAllowNegativeCoordinates","autoSizeCell","isExtendParentsOnAdd","isExtendParent","extendParent","constrainChild","cellConnected","updateCellSize","getDeletableCells","getAllEdges","disconnectTerminal","connected","tstate","splitEdge","newEdge","toggleCells","cellsToggled","checkFoldable","getFoldableCells","cellsFolded","isCellFoldable","swapBounds","willCollapse","updateAlternateBounds","getPreferredSizeForCell","allCells","ignoreChildren","cellStyle","gs2","resizeCells","isRecursiveResize","cellResized","ignoreRelative","resizeChildCells","constrainChildCells","scaleCell","isCellResizable","origCells","isCloneInvalidEdges","setAllowNegativeCoordinates","isDisconnectOnMove","isAllowDanglingEdges","isExtendParentsOnMove","disconnect","disconnectGraph","translateCell","getCellContainmentArea","getMaximumGraphBounds","sizeFirst","isConstrainRelativeChildren","isConstrainChild","overlap","getOverlap","getOutlineConstraint","getAllConnectionConstraints","setConnectionConstraint","connectCell","isPortsEnabled","getTerminalForPort","isCellDisconnectable","getCurrentRoot","enterGroup","isValidRoot","exitGroup","includeDescendants","addPoint","ignoreGrid","ignoreHorizontal","ignoreVertical","shiftPreview1","shiftPreview2","zoomIn","zoomOut","zoomActual","zoomTo","cw","ch","sh","scrollRectToVisible","zoomToRect","scaleX","scaleY","aspectFactor","rectRight","rectBottom","newHeight","deltaHeightBuffer","upperBuffer","newWidth","deltaWidthBuffer","newScale","scrollCellToVisible","tr2","isChanged","widthLimit","heightLimit","ddx","ddy","isCellConnectable","isLoop","isConstrainedEvent","isIgnoreTerminalEvent","validationAlert","isEdgeValid","isValidConnection","sourceOut","targetIn","validateEdge","validateGraph","context","isValid","getCellValidationError","outCount","inCount","rule","setBackgroundImage","isHtmlLabels","setHtmlLabels","getTooltip","tip","getHandler","getTooltipForNode","getTooltipForCell","getCursorForMouseEvent","getCursorForCell","swimlane","getSwimlaneDirection","isTransparentState","setBorder","isResizeContainer","setResizeContainer","isEscapeEnabled","setEscapeEnabled","setInvokesStopCellEditing","setEnterStopsCellEditing","isCellLocked","isCellsLocked","setCellsLocked","getCloneableCells","isCellCloneable","setCellsCloneable","canExportCell","canImportCell","isCellsSelectable","setCellsSelectable","isCellDeletable","isCellsDeletable","setCellsDeletable","isLabelMovable","isCellRotatable","getMovableCells","isCellsMovable","setCellsMovable","setPortsEnabled","getGridSize","setGridSize","getTolerance","setTolerance","isVertexLabelsMovable","setVertexLabelsMovable","isEdgeLabelsMovable","setEdgeLabelsMovable","isSwimlaneNesting","setSwimlaneNesting","setSwimlaneSelectionEnabled","isMultigraph","setMultigraph","isAllowLoops","setAllowDanglingEdges","setConnectableEdges","isConnectableEdges","setCloneInvalidEdges","setAllowLoops","setDisconnectOnMove","setDropEnabled","isSplitEnabled","setSplitEnabled","isCellsResizable","setCellsResizable","isTerminalPointMovable","isCellBendable","isCellsBendable","setCellsBendable","isCellsEditable","setCellsEditable","isCellsDisconnectable","setCellsDisconnectable","isValidSource","isValidTarget","setTooltips","setPanning","isAutoSizeCells","setAutoSizeCells","isExtendParents","setExtendParents","setExtendParentsOnAdd","setExtendParentsOnMove","setRecursiveResize","isConstrainChildren","setConstrainChildren","setConstrainRelativeChildren","isAllowOverlapParent","isValidDropTarget","isSplitTarget","hitsSwimlaneContent","getPointForEvent","addOffset","hit","getCellsBeyond","rightHalfpane","bottomHalfpane","isolate","isSelectionEmpty","getSelectionCount","addSelectionCell","addSelectionCells","removeSelectionCell","selectRegion","selectCellsForEvent","selectNextCell","selectCell","selectPreviousCell","selectParentCell","selectChildCell","isNext","isParent","isChild","sel","selectAll","descendants","selectVertices","selectGroups","selectCells","selectEdges","createHandler","createEdgeHandler","createVertexHandler","createElbowEdgeHandler","createEdgeSegmentHandler","listener","updateMouseEvent","getStateForTouchEvent","isEventIgnored","mouseEvent","lastEvent","mouseMoveRedirect","mouseUpRedirect","isSyntheticEventIgnored","detail","lastMouseX","lastMouseY","ignoreMouseEvents","isEventSourceIgnored","candidate","getEventState","currentTime","fireDoubleClick","lastTouchEvent","lastTouchX","doubleClickCounter","doubleClickFired","lastTouchCell","valid","tapAndHoldThread","consumeMouseEvent","destroyed","graphRenderHint","showViewport","sizerSize","updateOnPan","sizerImage","forceVmlHandles","outlineGraphModelChanged","selectionBorder","redirect","redirect2","sizer","createSizer","setZoomEnabled","getSourceContainerSize","getOutlineOffset","getSourceGraphBounds","sourceScale","scaledGraphBounds","unscaledGraphBounds","unscaledFinderBounds","union","completeWidth","completeHeight","outlineScale","navView","scale2","scale3","allowHandleBoundsCheck","getTranslateForEvent","viewRatio","checkTerminal","checkNeighbors","sourceValue","targetValue","checkType","attrValue","bubbling","isBubbling","setBubbling","hasLayout","getLayout","executeLayoutForCells","getCellsForChanges","getCellsForChange","addCellsWithLayout","addDescendantsWithLayout","addAncestorsWithLayout","sorted","layoutCells","bubble","executeLayout","setHorizontal","setAddEnabled","setResizeEnabled","isSwimlaneIgnored","isCellHorizontal","swimlaneAdded","parentHorizontal","resizeSwimlane","addEdges","translateState","revalidateState","maxCells","highlightEnabled","cloneEnabled","moveEnabled","handlesVisible","updateCursor","selectEnabled","removeEmptyParents","connectOnDrop","scrollOnMove","previewColor","htmlPreview","scaleGrid","rotationEnabled","maxLivePreview","allowLivePreview","setCloneEnabled","isMoveEnabled","setMoveEnabled","isSelectEnabled","setSelectEnabled","isRemoveCellsFromParent","setRemoveCellsFromParent","isPropagateSelectionCell","immediate","getInitialCellForEvent","isDelayedSelection","isHandled","selectDelayed","delayedSelection","cellWasClicked","initialCell","createPreviewShape","cellCount","addStates","ignore","opps","isCellMoving","useGuidesForEvent","vector","removeHint","roundLength","livePreviewActive","resetLivePreview","setHighlightColor","remote","updateLivePreview","updatePreviewShape","realState","tempState","originalPointerEvents","pt0","ptn","redrawHandles","resetPreviewStates","suspend","resume","setHandlesVisible","destroyShapes","guides","shouldRemoveCellsFromParent","shouldRemoveParent","useLeftButtonForPanning","usePopupTrigger","ignoreCell","previewEnabled","useGrid","pinchEnabled","maxScale","isPanningEnabled","setPanningEnabled","setPinchEnabled","isPanningTrigger","consumePanningTrigger","selectOnPopup","clearSelectionOnBackground","triggerX","triggerY","screenX","screenY","isSelectOnPopup","popupTrigger","getCellForPopupEvent","hotspotEnabled","validState","setHotspot","getHotspot","setHotspotEnabled","isHotspotEnabled","hasValidState","getValidState","getMarkedState","unmark","process","setCurrentState","isValidState","getMarkerColor","markCell","getStateToMark","maxHandlers","oldHandlers","isHandlerActive","updateParentHighlight","moveIconFront","moveIconBack","connectImage","targetConnectImage","createTarget","constraintHandler","waypointsEnabled","ignoreMouseDown","connectIconOffset","drillHandler","mouseDownCounter","movePreviewAway","outlineConnect","insertBeforeSource","isInsertBefore","isCreateTarget","setCreateTarget","iconState","redrawIcons","icons","isConnectableCell","isConnecting","validateConnection","getConnectImage","isMoveIconToFrontForState","createIcons","currentState","getIconPosition","destroyIcons","selectedIcon","isStartEvent","currentConstraint","sourceConstraint","waypoints","isImmediateConnectSource","isOutlineConnectEvent","clientLeft","clientTop","gridX","gridY","isHighlightAt","updateCurrentState","isCellEnabled","setFocus","convertWaypoint","snapToPreview","pt2","getTargetPerimeterPoint","getSourcePerimeterPoint","originalPoint","drawPreview","hitsIcon","updateIcons","realPoints","targetPerimeter","sourcePerimeter","isStopEvent","addWaypointForEvent","checkConstraints","getEdgeColor","terminalInserted","createTargetVertex","getAlignmentTolerance","pointImage","focusIcons","focusHighlight","currentFocusArea","focusPoints","getImageForConstraint","destroyFocusHighlight","isKeepFocusEvent","getCellForEvent","existingEdge","mouseleaveHandler","grid","mouse","minDistSq","hl","createHighlightShape","cp","defaultOpacity","sharedDiv","currentY","createMouseEvent","getPosition","setPosition","copyStyle","processEvent","getTotalRotation","flipPoint","snapPoint","isHtmlRequired","initShape","singleSizer","handleImage","parentHighlightEnabled","rotationRaster","rotationCursor","movePreviewToFront","manageSizers","constrainGroupByChildren","rotationHandleVSpacing","horizontalOffset","verticalOffset","selectionBounds","getSelectionBounds","createSelectionShape","sizers","labelShape","isRotationHandleVisible","rotationShape","customHandles","createCustomHandles","updateMinBounds","isCenteredEvent","minBounds","createParentHighlightShape","getSelectionColor","getSelectionStrokeWidth","isSelectionDashed","createSizerShape","isSizerVisible","moveSizerTo","getHandleForEvent","checkShape","real","isCustomHandleEvent","handle","isLivePreviewBorder","childOffsetX","childOffsetY","isGhostPreview","ghostPreview","createGhostPreview","preview","getRotationHandlePosition","startAngle","atan","startDist","hideSizers","edgeHandlers","checkTolerance","roundAngle","moveToFront","moveLabel","rotateVertex","resizeVertex","currentAlpha","raster","unscaledBounds","dx3","dy3","dx4","dy4","dx5","dy5","rotateCell","rotateClick","constrained","moveChildren","centered","cdx","cdy","ignoreHandles","getHandlePadding","getSizerBounds","isCustomHandleVisible","crs","da","isParentHighlightVisible","isDestroyed","parentHighlight","getSelectionBorderBounds","bends","removeEnabled","dblClickRemoveEnabled","mergeRemoveEnabled","straightRemoveEnabled","virtualBendsEnabled","virtualBendOpacity","preferHtml","snapToTerminals","manageLabelHandle","abspoints","getSelectionPoints","targetState","createBends","isVirtualBendsEnabled","virtualBends","createVirtualBends","createLabelHandleShape","initBend","isAddPointEvent","isRemovePointEvent","otherCell","isHandleVisible","bend","createHandleShape","removePoint","isHandleEnabled","labelHandleImage","isAddVirtualBendEvent","isTarget","isLabel","clonePreviewState","getSnapToTerminalTolerance","isSnapToTerminalsEvent","snapToPoint","snapToTerminal","getPreviewTerminalState","getPreviewPoints","checkRemove","updatePreviewState","targetConstraint","setPreviewColor","changeTerminalPoint","changePoints","isClone","addPointAt","getHandleFillColor","checkLabelHandle","xn","yn","bn","redrawInnerBends","destroyBends","flipEnabled","doubleClickOrientationResource","createVirtualBend","dblClickHandler","getCursorForBend","getCurrentPoints","pt1","rpts","straight","bindKey","code","bindShiftKey","bindControlKey","bindControlShiftKey","getFunction","isGraphEvent","boundFunction","ignoreTouchEvents","hideOnHover","setHideOnHover","getStateForEvent","stateSource","resetTimer","restart","keepOnTop","drawHighlight","getStrokeWidth","bindAction","createMenu","conditions","createConditions","addItems","condition","as","enabledCond","addAction","isCell","condNodes","insertFunction","pressed","addActionOption","mode","setMode","addPrototype","ptype","factory","installDropHandler","addVertex","horizontalFlow","edgeGeometry","sprite","loader","askZoomResource","lastSavedResource","currentFileResource","propertiesResource","tasksResource","helpResource","outlineResource","dblClickAction","swimlaneRequired","forcedInserting","templates","defaultEdge","defaultEdgeStyle","defaultGroup","groupBorderSize","filename","postParameterName","escapePostData","urlPost","urlImage","layoutDiagram","swimlaneSpacing","maintainSwimlanes","layoutSwimlanes","cycleAttributeIndex","tasks","tasksWindowImage","tasksTop","help","helpWindowImage","urlHelp","helpWidth","helpHeight","propertiesWidth","propertiesHeight","movePropertiesDialog","validating","isModified","setModified","getUrlImage","showProperties","showTasks","showHelp","showOutline","dec","decode","resetHistory","resetFirstTime","cookie","actionname","addTemplate","template","getTemplate","installDblClickHandler","installUndoHandler","installDrillHandler","installChangeHandler","installInsertHandler","createPopupMenu","createSwimlaneManager","createLayoutManager","swimlaneMgr","layoutMgr","swimlaneLayout","createSwimlaneLayout","diagramLayout","createDiagramLayout","setGraphContainer","rubberband","insertHandler","gs","setToolbarContainer","setStatusContainer","tstamp","toLocaleString","setStatus","setTitleContainer","getTitle","treeLayout","getRootTitle","createGroup","readGraphModel","getUrlPost","data","writeGraphModel","postDiagram","swapStyles","second","createProperties","isPropertiesVisible","yField","xField","widthField","heightField","texts","okFunction","cancelFunction","createTasks","refreshTasks","frame","modename","consumeCycleAttribute","cycleAttribute","isConstrainedMoving","mxCodecRegistry","codecs","aliases","register","codec","classname","addAlias","codecname","getCodec","mxObjectCodec","objects","idrefs","elements","encodeDefaults","putObject","getObject","updateElements","addElement","Error","reference","into","encodeCell","isCellCodec","decodeCell","restoreStructures","decoder","insertIntoGraph","cloneTemplate","getFieldName","attributename","mapped","getAttributeName","fieldname","isExcluded","isReference","beforeEncode","encodeObject","afterEncode","encodeValue","writeAttribute","writePrimitiveAttribute","writeComplexAttribute","convertAttributeToXml","isBooleanAttribute","convertAttributeFromXml","isNumericAttribute","beforeDecode","decodeNode","afterDecode","decodeAttributes","decodeChildren","decodeAttribute","isIgnoredAttribute","processInclude","decodeChild","getFieldTemplate","addObjectValue","isWrite","ref","object","mxCellCodec","rootNode","decodeRoot","rootCell","mxModelCodec","mxRootChangeCodec","childRef","mxChildChangeCodec","mxTerminalChangeCodec","mxGenericChangeCodec","variable","mxGraphCodec","mxGraphViewCodec","mxStylesheetCodec","styleNode","getStringValue","mxDefaultKeyHandlerCodec","mxDefaultToolbarCodec","act","inc","mxDefaultPopupMenuCodec","role","decodeTemplates","decodeUi","setMapContainer","mxEditorCodec"],"mappings":"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","file":"js/chunk-c48891ea.d58319c9.js","sourcesContent":["/*\r\n * @Descripttion:\r\n * @version:\r\n * @Author: huangwei\r\n * @Date: 2020-06-27 17:14:13\r\n * @LastEditors: huangwei\r\n * @LastEditTime: 2021-02-15 20:14:19\r\n */\r\nimport mx from 'mxgraph'\r\nconst mxgraph = mx({\r\n  mxImageBasePath: './src/images',\r\n  mxBasePath: './src'\r\n})\r\nwindow.mxGraph = mxgraph.mxGraph\r\nwindow.mxGraphModel = mxgraph.mxGraphModel\r\nwindow.mxEditor = mxgraph.mxEditor\r\nwindow.mxGeometry = mxgraph.mxGeometry\r\nwindow.mxDefaultKeyHandler = mxgraph.mxDefaultKeyHandler\r\nwindow.mxDefaultPopupMenu = mxgraph.mxDefaultPopupMenu\r\nwindow.mxStylesheet = mxgraph.mxStylesheet\r\nwindow.mxDefaultToolbar = mxgraph.mxDefaultToolbar\r\nwindow.mxToolbar = mxgraph.mxToolbar\r\nwindow.mxCell = mxgraph.mxCell\r\nwindow.mxCodec = mxgraph.mxCodec\r\nwindow.mxEvent = mxgraph.mxEvent\r\nwindow.mxUtils = mxgraph.mxUtils\r\nwindow.mxConstants = mxgraph.mxConstants\r\n\r\nexport default mxgraph\r\n","(function (root, factory) {\nif (typeof define === 'function' && define.amd) {\ndefine([], factory);\n} else if (typeof module === 'object' && module.exports) {\nmodule.exports = factory();\n} else {\nroot.mxgraph = factory();\n}\n}(this, function () {\nreturn function (opts) {\nfor (var name in opts) { this[name] = opts[name]; }\nvar __mxOutput = {};\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\nvar mxClient =\n{\n\t/**\n\t * Class: mxClient\n\t *\n\t * Bootstrapping mechanism for the mxGraph thin client. The production version\n\t * of this file contains all code required to run the mxGraph thin client, as\n\t * well as global constants to identify the browser and operating system in\n\t * use. You may have to load chrome://global/content/contentAreaUtils.js in\n\t * your page to disable certain security restrictions in Mozilla.\n\t * \n\t * Variable: VERSION\n\t *\n\t * Contains the current version of the mxGraph library. The strings that\n\t * communicate versions of mxGraph use the following format.\n\t * \n\t * versionMajor.versionMinor.buildNumber.revisionNumber\n\t * \n\t * Current version is 4.2.2.\n\t */\n\tVERSION: '4.2.2',\n\n\t/**\n\t * Variable: IS_IE\n\t *\n\t * True if the current browser is Internet Explorer 10 or below. Use <mxClient.IS_IE11>\n\t * to detect IE 11.\n\t */\n\tIS_IE: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE') >= 0,\n\n\t/**\n\t * Variable: IS_IE6\n\t *\n\t * True if the current browser is Internet Explorer 6.x.\n\t */\n\tIS_IE6: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE 6') >= 0,\n\n\t/**\n\t * Variable: IS_IE11\n\t *\n\t * True if the current browser is Internet Explorer 11.x.\n\t */\n\tIS_IE11: navigator.userAgent != null && !!navigator.userAgent.match(/Trident\\/7\\./),\n\n\t/**\n\t * Variable: IS_EDGE\n\t *\n\t * True if the current browser is Microsoft Edge.\n\t */\n\tIS_EDGE: navigator.userAgent != null && !!navigator.userAgent.match(/Edge\\//),\n\n\t/**\n\t * Variable: IS_QUIRKS\n\t *\n\t * True if the current browser is Internet Explorer and it is in quirks mode.\n\t */\n\tIS_QUIRKS: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE') >= 0 &&\n\t\t(document.documentMode == null || document.documentMode == 5),\n\n\t/**\n\t * Variable: IS_EM\n\t * \n\t * True if the browser is IE11 in enterprise mode (IE8 standards mode).\n\t */\n\tIS_EM: 'spellcheck' in document.createElement('textarea') && document.documentMode == 8,\n\n\t/**\n\t * Variable: VML_PREFIX\n\t * \n\t * Prefix for VML namespace in node names. Default is 'v'.\n\t */\n\tVML_PREFIX: 'v',\n\n\t/**\n\t * Variable: OFFICE_PREFIX\n\t * \n\t * Prefix for VML office namespace in node names. Default is 'o'.\n\t */\n\tOFFICE_PREFIX: 'o',\n\n\t/**\n\t * Variable: IS_NS\n\t *\n\t * True if the current browser is Netscape (including Firefox).\n\t */\n  \tIS_NS: navigator.userAgent != null &&\n  \t\tnavigator.userAgent.indexOf('Mozilla/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('MSIE') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\n\t/**\n\t * Variable: IS_OP\n\t *\n\t * True if the current browser is Opera.\n\t */\n  \tIS_OP: navigator.userAgent != null &&\n  \t\t(navigator.userAgent.indexOf('Opera/') >= 0 ||\n  \t\tnavigator.userAgent.indexOf('OPR/') >= 0),\n\n\t/**\n\t * Variable: IS_OT\n\t *\n\t * True if -o-transform is available as a CSS style, ie for Opera browsers\n\t * based on a Presto engine with version 2.5 or later.\n\t */\n  \tIS_OT: navigator.userAgent != null &&\n  \t\tnavigator.userAgent.indexOf('Presto/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.4.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.3.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.2.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.0.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/1.') < 0,\n  \t\n\t/**\n\t * Variable: IS_SF\n\t *\n\t * True if the current browser is Safari.\n\t */\n  \tIS_SF: /Apple Computer, Inc/.test(navigator.vendor),\n\n\t/**\n\t * Variable: IS_ANDROID\n\t * \n\t * Returns true if the user agent contains Android.\n\t */\n  \tIS_ANDROID: navigator.appVersion.indexOf('Android') >= 0,\n\n\t/**\n\t * Variable: IS_IOS\n\t * \n\t * Returns true if the user agent is an iPad, iPhone or iPod.\n\t */\n  \tIS_IOS: (/iP(hone|od|ad)/.test(navigator.platform)),\n\n\t/**\n\t * Variable: IS_GC\n\t *\n\t * True if the current browser is Google Chrome.\n\t */\n  \tIS_GC: /Google Inc/.test(navigator.vendor),\n\t\n\t/**\n\t * Variable: IS_CHROMEAPP\n\t *\n\t * True if the this is running inside a Chrome App.\n\t */\n  \tIS_CHROMEAPP: window.chrome != null && chrome.app != null && chrome.app.runtime != null,\n\n\t/**\n\t * Variable: IS_FF\n\t *\n\t * True if the current browser is Firefox.\n\t */\n  \tIS_FF: typeof InstallTrigger !== 'undefined',\n  \t\n\t/**\n\t * Variable: IS_MT\n\t *\n\t * True if -moz-transform is available as a CSS style. This is the case\n\t * for all Firefox-based browsers newer than or equal 3, such as Camino,\n\t * Iceweasel, Seamonkey and Iceape.\n\t */\n  \tIS_MT: (navigator.userAgent.indexOf('Firefox/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Firefox/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Firefox/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceweasel/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('SeaMonkey/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('SeaMonkey/1.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceape/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceape/1.') < 0),\n\n\t/**\n\t * Variable: IS_VML\n\t *\n\t * True if the browser supports VML.\n\t */\n  \tIS_VML: navigator.appName.toUpperCase() == 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: IS_SVG\n\t *\n\t * True if the browser supports SVG.\n\t */\n  \tIS_SVG: navigator.appName.toUpperCase() != 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: NO_FO\n\t *\n\t * True if foreignObject support is not available. This is the case for\n\t * Opera, older SVG-based browsers and all versions of IE.\n\t */\n  \tNO_FO: !document.createElementNS || document.createElementNS('http://www.w3.org/2000/svg',\n  \t\t'foreignObject') != '[object SVGForeignObjectElement]' || navigator.userAgent.indexOf('Opera/') >= 0,\n\n\t/**\n\t * Variable: IS_WIN\n\t *\n\t * True if the client is a Windows.\n\t */\n  \tIS_WIN: navigator.appVersion.indexOf('Win') > 0,\n\n\t/**\n\t * Variable: IS_MAC\n\t *\n\t * True if the client is a Mac.\n\t */\n  \tIS_MAC: navigator.appVersion.indexOf('Mac') > 0,\n\t\n\t/**\n\t * Variable: IS_CHROMEOS\n\t *\n\t * True if the client is a Chrome OS.\n\t */\n  \tIS_CHROMEOS: /\\bCrOS\\b/.test(navigator.appVersion),\n\n\t/**\n\t * Variable: IS_TOUCH\n\t * \n\t * True if this device supports touchstart/-move/-end events (Apple iOS,\n\t * Android, Chromebook and Chrome Browser on touch-enabled devices).\n\t */\n  \tIS_TOUCH: 'ontouchstart' in document.documentElement,\n\n\t/**\n\t * Variable: IS_POINTER\n\t * \n\t * True if this device supports Microsoft pointer events (always false on Macs).\n\t */\n  \tIS_POINTER: window.PointerEvent != null && !(navigator.appVersion.indexOf('Mac') > 0),\n\n\t/**\n\t * Variable: IS_LOCAL\n\t *\n\t * True if the documents location does not start with http:// or https://.\n\t */\n  \tIS_LOCAL: document.location.href.indexOf('http://') < 0 &&\n  \t\t\t  document.location.href.indexOf('https://') < 0,\n\n\t/**\n\t * Variable: defaultBundles\n\t * \n\t * Contains the base names of the default bundles if mxLoadResources is false.\n\t */\n  \tdefaultBundles: [],\n\n\t/**\n\t * Function: isBrowserSupported\n\t *\n\t * Returns true if the current browser is supported, that is, if\n\t * <mxClient.IS_VML> or <mxClient.IS_SVG> is true.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * if (!mxClient.isBrowserSupported())\n\t * {\n\t *   mxUtils.error('Browser is not supported!', 200, false);\n\t * }\n\t * (end)\n\t */\n\tisBrowserSupported: function()\n\t{\n\t\treturn mxClient.IS_VML || mxClient.IS_SVG;\n\t},\n\n\t/**\n\t * Function: link\n\t *\n\t * Adds a link node to the head of the document. Use this\n\t * to add a stylesheet to the page as follows:\n\t *\n\t * (code)\n\t * mxClient.link('stylesheet', filename);\n\t * (end)\n\t *\n\t * where filename is the (relative) URL of the stylesheet. The charset\n\t * is hardcoded to ISO-8859-1 and the type is text/css.\n\t * \n\t * Parameters:\n\t * \n\t * rel - String that represents the rel attribute of the link node.\n\t * href - String that represents the href attribute of the link node.\n\t * doc - Optional parent document of the link node.\n\t * id - unique id for the link element to check if it already exists\n\t */\n\tlink: function(rel, href, doc, id)\n\t{\n\t\tdoc = doc || document;\n\n\t\t// Workaround for Operation Aborted in IE6 if base tag is used in head\n\t\tif (mxClient.IS_IE6)\n\t\t{\n\t\t\tdoc.write('<link rel=\"' + rel + '\" href=\"' + href + '\" charset=\"UTF-8\" type=\"text/css\"/>');\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tvar link = doc.createElement('link');\n\t\t\t\n\t\t\tlink.setAttribute('rel', rel);\n\t\t\tlink.setAttribute('href', href);\n\t\t\tlink.setAttribute('charset', 'UTF-8');\n\t\t\tlink.setAttribute('type', 'text/css');\n\t\t\t\n\t\t\tif (id)\n\t\t\t{\n\t\t\t\tlink.setAttribute('id', id);\n\t\t\t}\n\t\t\t\n\t\t\tvar head = doc.getElementsByTagName('head')[0];\n\t   \t\thead.appendChild(link);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: loadResources\n\t * \n\t * Helper method to load the default bundles if mxLoadResources is false.\n\t * \n\t * Parameters:\n\t * \n\t * fn - Function to call after all resources have been loaded.\n\t * lan - Optional string to pass to <mxResources.add>.\n\t */\n\tloadResources: function(fn, lan)\n\t{\n\t\tvar pending = mxClient.defaultBundles.length;\n\t\t\n\t\tfunction callback()\n\t\t{\n\t\t\tif (--pending == 0)\n\t\t\t{\n\t\t\t\tfn();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < mxClient.defaultBundles.length; i++)\n\t\t{\n\t\t\tmxResources.add(mxClient.defaultBundles[i], lan, callback);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: include\n\t *\n\t * Dynamically adds a script node to the document header.\n\t * \n\t * In production environments, the includes are resolved in the mxClient.js\n\t * file to reduce the number of requests required for client startup. This\n\t * function should only be used in development environments, but not in\n\t * production systems.\n\t */\n\tinclude: function(src)\n\t{\n\t\tdocument.write('<script src=\"'+src+'\"></script>');\n\t}\n};\n\n/**\n * Variable: mxLoadResources\n * \n * Optional global config variable to toggle loading of the two resource files\n * in <mxGraph> and <mxEditor>. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient. If this is false, you can use <mxClient.loadResources>\n * with its callback to load the default bundles asynchronously.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadResources) == 'undefined')\n{\n\tmxLoadResources = true;\n}\n\n/**\n * Variable: mxForceIncludes\n * \n * Optional global config variable to force loading the JavaScript files in\n * development mode. Default is undefined. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = true;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxForceIncludes) == 'undefined')\n{\n\tmxForceIncludes = false;\n}\n\n/**\n * Variable: mxResourceExtension\n * \n * Optional global config variable to specify the extension of resource files.\n * Default is true. NOTE: This is a global variable, not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxResourceExtension = '.txt';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxResourceExtension) == 'undefined')\n{\n\tmxResourceExtension = '.txt';\n}\n\n/**\n * Variable: mxLoadStylesheets\n * \n * Optional global config variable to toggle loading of the CSS files when\n * the library is initialized. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadStylesheets = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadStylesheets) == 'undefined')\n{\n\tmxLoadStylesheets = true;\n}\n\n/**\n * Variable: basePath\n *\n * Basepath for all URLs in the core without trailing slash. Default is '.'.\n * Set mxBasePath prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxBasePath = '/path/to/core/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxBasePath) != 'undefined' && mxBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxBasePath.substring(mxBasePath.length - 1) == '/')\n\t{\n\t\tmxBasePath = mxBasePath.substring(0, mxBasePath.length - 1);\n\t}\n\n\tmxClient.basePath = mxBasePath;\n}\nelse\n{\n\tmxClient.basePath = '.';\n}\n\n/**\n * Variable: imageBasePath\n *\n * Basepath for all images URLs in the core without trailing slash. Default is\n * <mxClient.basePath> + '/images'. Set mxImageBasePath prior to loading the\n * mxClient library as follows to override this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxImageBasePath = '/path/to/image/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxImageBasePath) != 'undefined' && mxImageBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxImageBasePath.substring(mxImageBasePath.length - 1) == '/')\n\t{\n\t\tmxImageBasePath = mxImageBasePath.substring(0, mxImageBasePath.length - 1);\n\t}\n\n\tmxClient.imageBasePath = mxImageBasePath;\n}\nelse\n{\n\tmxClient.imageBasePath = mxClient.basePath + '/images';\t\n}\n\n/**\n * Variable: language\n *\n * Defines the language of the client, eg. en for english, de for german etc.\n * The special value 'none' will disable all built-in internationalization and\n * resource loading. See <mxResources.getSpecialBundle> for handling identifiers\n * with and without a dash.\n * \n * Set mxLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguage = 'en';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * If internationalization is disabled, then the following variables should be\n * overridden to reflect the current language of the system. These variables are\n * cleared when i18n is disabled.\n * <mxEditor.askZoomResource>, <mxEditor.lastSavedResource>,\n * <mxEditor.currentFileResource>, <mxEditor.propertiesResource>,\n * <mxEditor.tasksResource>, <mxEditor.helpResource>, <mxEditor.outlineResource>,\n * <mxElbowEdgeHandler.doubleClickOrientationResource>, <mxUtils.errorResource>,\n * <mxUtils.closeResource>, <mxGraphSelectionModel.doneResource>,\n * <mxGraphSelectionModel.updatingSelectionResource>, <mxGraphView.doneResource>,\n * <mxGraphView.updatingDocumentResource>, <mxCellRenderer.collapseExpandResource>,\n * <mxGraph.containsValidationErrorsResource> and\n * <mxGraph.alreadyConnectedResource>.\n */\nif (typeof(mxLanguage) != 'undefined' && mxLanguage != null)\n{\n\tmxClient.language = mxLanguage;\n}\nelse\n{\n\tmxClient.language = (mxClient.IS_IE) ? navigator.userLanguage : navigator.language;\n}\n\n/**\n * Variable: defaultLanguage\n * \n * Defines the default language which is used in the common resource files. Any\n * resources for this language will only load the common resource file, but not\n * the language-specific resource file. Default is 'en'.\n * \n * Set mxDefaultLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxDefaultLanguage = 'de';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxDefaultLanguage) != 'undefined' && mxDefaultLanguage != null)\n{\n\tmxClient.defaultLanguage = mxDefaultLanguage;\n}\nelse\n{\n\tmxClient.defaultLanguage = 'en';\n}\n\n// Adds all required stylesheets and namespaces\nif (mxLoadStylesheets)\n{\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css');\n}\n\n/**\n * Variable: languages\n *\n * Defines the optional array of all supported language extensions. The default\n * language does not have to be part of this list. See\n * <mxResources.isLanguageSupported>.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguages = ['de', 'it', 'fr'];\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * This is used to avoid unnecessary requests to language files, ie. if a 404\n * will be returned.\n */\nif (typeof(mxLanguages) != 'undefined' && mxLanguages != null)\n{\n\tmxClient.languages = mxLanguages;\n}\n\n// Adds required namespaces, stylesheets and memory handling for older IE browsers\nif (mxClient.IS_VML)\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tmxClient.IS_VML = false;\n\t}\n\telse\n\t{\n\t\t// Enables support for IE8 standards mode. Note that this requires all attributes for VML\n\t\t// elements to be set using direct notation, ie. node.attr = value, not setAttribute.\n\t\tif (document.namespaces != null)\n\t\t{\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml', '#default#VML');\n\t\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office', '#default#VML');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml');\n\t\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office');\n\t\t\t}\n\t\t}\n\n\t\t// Workaround for limited number of stylesheets in IE (does not work in standards mode)\n\t\tif (mxClient.IS_QUIRKS && document.styleSheets.length >= 30)\n\t\t{\n\t\t\t(function()\n\t\t\t{\n\t\t\t\tvar node = document.createElement('style');\n\t\t\t\tnode.type = 'text/css';\n\t\t\t\tnode.styleSheet.cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t        \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t        document.getElementsByTagName('head')[0].appendChild(node);\n\t\t\t})();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t    \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t}\n\t    \n\t    if (mxLoadStylesheets)\n\t    {\n\t    \tmxClient.link('stylesheet', mxClient.basePath + '/css/explorer.css');\n\t    }\n\t}\n}\n\n// PREPROCESSOR-REMOVE-START\n// If script is loaded via CommonJS, do not write <script> tags to the page\n// for dependencies. These are already included in the build.\nif (mxForceIncludes || !(typeof module === 'object' && module.exports != null))\n{\n// PREPROCESSOR-REMOVE-END\n\tmxClient.include(mxClient.basePath+'/js/util/mxLog.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxObjectIdentity.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDictionary.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxResources.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPoint.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxRectangle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEffects.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUtils.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxConstants.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventObject.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMouseEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlRequest.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxClipboard.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxWindow.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxForm.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImage.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDivResizer.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDragSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoableEdit.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUrlConverter.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPanningManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAutoSaveManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAnimation.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMorphing.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageBundle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageExport.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAbstractCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxSvgCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxVmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxGuide.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencil.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencilRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxActor.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCloud.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRectangleShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxDoubleEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRhombus.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxPolyline.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrow.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrowConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxText.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxTriangle.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxHexagon.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLine.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxImageShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLabel.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCylinder.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxSwimlane.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxGraphLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxStackLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxPartitionLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompactTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxRadialTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxFastOrganicLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCircleLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxParallelEdgeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompositeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxEdgeLabelLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphAbstractHierarchyCell.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyNode.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyEdge.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxSwimlaneModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxHierarchicalLayoutStage.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMedianHybridCrossingReduction.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMinimumCycleRemover.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxCoordinateAssignment.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxSwimlaneOrdering.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxHierarchicalLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxSwimlaneLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGraphModel.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCell.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGeometry.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCellPath.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPerimeter.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPrintPreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStylesheet.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellState.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphSelectionModel.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellRenderer.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxEdgeStyle.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStyleRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphView.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraph.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellOverlay.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxOutline.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxMultiplicity.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxLayoutManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxSwimlaneManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxTemporaryCellStates.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellStatePreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxConnectionConstraint.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxGraphHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPanningHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPopupMenuHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxSelectionCellsHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConnectionHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConstraintHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxRubberband.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxHandle.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxVertexHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxElbowEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeSegmentHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxTooltipHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellTracker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellHighlight.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodecRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxObjectCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCellCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxModelCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxRootChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxChildChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxTerminalChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGenericChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphViewCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxStylesheetCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultKeyHandlerCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultToolbarCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultPopupMenuCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxEditorCodec.js');\n// PREPROCESSOR-REMOVE-START\n}\n// PREPROCESSOR-REMOVE-END\n\n__mxOutput.mxClient = typeof mxClient !== 'undefined' ? mxClient : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxLog =\n{\n\t/**\n\t * Class: mxLog\n\t * \n\t * A singleton class that implements a simple console.\n\t * \n\t * Variable: consoleName\n\t * \n\t * Specifies the name of the console window. Default is 'Console'.\n\t */\n\tconsoleName: 'Console',\n\t\n\t/**\n\t * Variable: TRACE\n\t * \n\t * Specified if the output for <enter> and <leave> should be visible in the\n\t * console. Default is false.\n\t */\n\tTRACE: false,\n\n\t/**\n\t * Variable: DEBUG\n\t * \n\t * Specifies if the output for <debug> should be visible in the console.\n\t * Default is true.\n\t */\n\tDEBUG: true,\n\n\t/**\n\t * Variable: WARN\n\t * \n\t * Specifies if the output for <warn> should be visible in the console.\n\t * Default is true.\n\t */\n\tWARN: true,\n\n\t/**\n\t * Variable: buffer\n\t * \n\t * Buffer for pre-initialized content.\n\t */\n\tbuffer: '',\n\t\n\t/**\n\t * Function: init\n\t *\n\t * Initializes the DOM node for the console. This requires document.body to\n\t * point to a non-null value. This is called from within <setVisible> if the\n\t * log has not yet been initialized.\n\t */\n\tinit: function()\n\t{\n\t\tif (mxLog.window == null && document.body != null)\n\t\t{\n\t\t\tvar title = mxLog.consoleName + ' - mxGraph ' + mxClient.VERSION;\n\n\t\t\t// Creates a table that maintains the layout\n\t\t\tvar table = document.createElement('table');\n\t\t\ttable.setAttribute('width', '100%');\n\t\t\ttable.setAttribute('height', '100%');\n\n\t\t\tvar tbody = document.createElement('tbody');\n\t\t\tvar tr = document.createElement('tr');\n\t\t\tvar td = document.createElement('td');\n\t\t\ttd.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t// Adds the actual console as a textarea\n\t\t\tmxLog.textarea = document.createElement('textarea');\n\t\t\tmxLog.textarea.setAttribute('wrap', 'off');\n\t\t\tmxLog.textarea.setAttribute('readOnly', 'true');\n\t\t\tmxLog.textarea.style.height = '100%';\n\t\t\tmxLog.textarea.style.resize = 'none';\n\t\t\tmxLog.textarea.value = mxLog.buffer;\n\n\t\t\t// Workaround for wrong width in standards mode\n\t\t\tif (mxClient.IS_NS && document.compatMode != 'BackCompat')\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '99%';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '100%';\n\t\t\t}\n\t\t\t\n\t\t\ttd.appendChild(mxLog.textarea);\n\t\t\ttr.appendChild(td);\n\t\t\ttbody.appendChild(tr);\n\n\t\t\t// Creates the container div\n\t\t\ttr = document.createElement('tr');\n\t\t\tmxLog.td = document.createElement('td');\n\t\t\tmxLog.td.style.verticalAlign = 'top';\n\t\t\tmxLog.td.setAttribute('height', '30px');\n\t\t\t\n\t\t\ttr.appendChild(mxLog.td);\n\t\t\ttbody.appendChild(tr);\n\t\t\ttable.appendChild(tbody);\n\n\t\t\t// Adds various debugging buttons\n\t\t\tmxLog.addButton('Info', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.info();\n\t\t\t});\n\t\t\n\t\t\tmxLog.addButton('DOM', function (evt)\n\t\t\t{\n\t\t\t\tvar content = mxUtils.getInnerHtml(document.body);\n\t\t\t\tmxLog.debug(content);\n\t\t\t});\n\t\n\t\t\tmxLog.addButton('Trace', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.TRACE = !mxLog.TRACE;\n\t\t\t\t\n\t\t\t\tif (mxLog.TRACE)\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing enabled');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing disabled');\n\t\t\t\t}\n\t\t\t});\t\n\n\t\t\tmxLog.addButton('Copy', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.copy(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\n\t\t\tmxLog.addButton('Show', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.popup(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\n\t\t\t\n\t\t\tmxLog.addButton('Clear', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.textarea.value = '';\n\t\t\t});\n\n\t\t\t// Cross-browser code to get window size\n\t\t\tvar h = 0;\n\t\t\tvar w = 0;\n\t\t\t\n\t\t\tif (typeof(window.innerWidth) === 'number')\n\t\t\t{\n\t\t\t\th = window.innerHeight;\n\t\t\t\tw = window.innerWidth;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\th = (document.documentElement.clientHeight || document.body.clientHeight);\n\t\t\t\tw = document.body.clientWidth;\n\t\t\t}\n\n\t\t\tmxLog.window = new mxWindow(title, table, Math.max(0, w - 320), Math.max(0, h - 210), 300, 160);\n\t\t\tmxLog.window.setMaximizable(true);\n\t\t\tmxLog.window.setScrollable(false);\n\t\t\tmxLog.window.setResizable(true);\n\t\t\tmxLog.window.setClosable(true);\n\t\t\tmxLog.window.destroyOnClose = false;\n\t\t\t\n\t\t\t// Workaround for ignored textarea height in various setups\n\t\t\tif (((mxClient.IS_NS || mxClient.IS_IE) && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_SF && document.compatMode != 'BackCompat') ||\n\t\t\t\tdocument.documentMode == 11)\n\t\t\t{\n\t\t\t\tvar elt = mxLog.window.getElement();\n\t\t\t\t\n\t\t\t\tvar resizeHandler = function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tmxLog.textarea.style.height = Math.max(0, elt.offsetHeight - 70) + 'px';\n\t\t\t\t}; \n\t\t\t\t\n\t\t\t\tmxLog.window.addListener(mxEvent.RESIZE_END, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.MAXIMIZE, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.NORMALIZE, resizeHandler);\n\n\t\t\t\tmxLog.textarea.style.height = '92px';\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: info\n\t * \n\t * Writes the current navigator information to the console.\n\t */\n\tinfo: function()\n\t{\n\t\tmxLog.writeln(mxUtils.toString(navigator));\n\t},\n\t\t\t\n\t/**\n\t * Function: addButton\n\t * \n\t * Adds a button to the console using the given label and function.\n\t */\n\taddButton: function(lab, funct)\n\t{\n\t\tvar button = document.createElement('button');\n\t\tmxUtils.write(button, lab);\n\t\tmxEvent.addListener(button, 'click', funct);\n\t\tmxLog.td.appendChild(button);\n\t},\n\t\t\t\t\n\t/**\n\t * Function: isVisible\n\t * \n\t * Returns true if the console is visible.\n\t */\n\tisVisible: function()\n\t{\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\treturn mxLog.window.isVisible();\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n\t\n\n\t/**\n\t * Function: show\n\t * \n\t * Shows the console.\n\t */\n\tshow: function()\n\t{\n\t\tmxLog.setVisible(true);\n\t},\n\n\t/**\n\t * Function: setVisible\n\t * \n\t * Shows or hides the console.\n\t */\n\tsetVisible: function(visible)\n\t{\n\t\tif (mxLog.window == null)\n\t\t{\n\t\t\tmxLog.init();\n\t\t}\n\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\tmxLog.window.setVisible(visible);\n\t\t}\n\t},\n\n\t/**\n\t * Function: enter\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and returns the current \n\t * time in milliseconds.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * var t0 = mxLog.enter('Hello');\n\t * // Do something\n\t * mxLog.leave('World!', t0);\n\t * (end)\n\t */\n\tenter: function(string)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tmxLog.writeln('Entering '+string);\n\t\t\t\n\t\t\treturn new Date().getTime();\n\t\t}\n\t},\n\n\t/**\n\t * Function: leave\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and computes the difference\n\t * between the current time and t0 in milliseconds.\n\t * See <enter> for an example.\n\t */\n\tleave: function(string, t0)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tvar dt = (t0 != 0) ? ' ('+(new Date().getTime() - t0)+' ms)' : '';\n\t\t\tmxLog.writeln('Leaving '+string+dt);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: debug\n\t * \n\t * Adds all arguments to the console if <DEBUG> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.debug('Hello, World!');\n\t * (end)\n\t */\n\tdebug: function()\n\t{\n\t\tif (mxLog.DEBUG)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: warn\n\t * \n\t * Adds all arguments to the console if <WARN> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.warn('Hello, World!');\n\t * (end)\n\t */\n\twarn: function()\n\t{\n\t\tif (mxLog.WARN)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\n\t/**\n\t * Function: write\n\t * \n\t * Adds the specified strings to the console.\n\t */\n\twrite: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (mxLog.textarea != null)\n\t\t{\n\t\t\tmxLog.textarea.value = mxLog.textarea.value + string;\n\n\t\t\t// Workaround for no update in Presto 2.5.22 (Opera 10.5)\n\t\t\tif (navigator.userAgent != null &&\n\t\t\t\tnavigator.userAgent.indexOf('Presto/2.5') >= 0)\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.visibility = 'hidden';\n\t\t\t\tmxLog.textarea.style.visibility = 'visible';\n\t\t\t}\n\t\t\t\n\t\t\tmxLog.textarea.scrollTop = mxLog.textarea.scrollHeight;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxLog.buffer += string;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Adds the specified strings to the console, appending a linefeed at the\n\t * end of each string.\n\t */\n\twriteln: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\n\t\tmxLog.write(string + '\\n');\n\t}\n\t\n};\n\n__mxOutput.mxLog = typeof mxLog !== 'undefined' ? mxLog : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxObjectIdentity =\n{\n\t/**\n\t * Class: mxObjectIdentity\n\t * \n\t * Identity for JavaScript objects and functions. This is implemented using\n\t * a simple incrementing counter which is stored in each object under\n\t * <FIELD_NAME>.\n\t * \n\t * The identity for an object does not change during its lifecycle.\n\t * \n\t * Variable: FIELD_NAME\n\t * \n\t * Name of the field to be used to store the object ID. Default is\n\t * <code>mxObjectId</code>.\n\t */\n\tFIELD_NAME: 'mxObjectId',\n\n\t/**\n\t * Variable: counter\n\t * \n\t * Current counter.\n\t */\n\tcounter: 0,\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the ID for the given object or function or null if no object\n\t * is specified.\n\t */\n\tget: function(obj)\n\t{\n\t\tif (obj != null)\n\t\t{\n\t\t\tif (obj[mxObjectIdentity.FIELD_NAME] == null)\n\t\t\t{\n\t\t\t\tif (typeof obj === 'object')\n\t\t\t\t{\n\t\t\t\t\tvar ctor = mxUtils.getFunctionName(obj.constructor);\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = ctor + '#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t\telse if (typeof obj === 'function')\n\t\t\t\t{\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = 'Function#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: clear\n\t * \n\t * Deletes the ID from the given object or function.\n\t */\n\tclear: function(obj)\n\t{\n\t\tif (typeof(obj) === 'object' || typeof obj === 'function')\n\t\t{\n\t\t\tdelete obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxObjectIdentity = typeof mxObjectIdentity !== 'undefined' ? mxObjectIdentity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDictionary\n *\n * A wrapper class for an associative array with object keys. Note: This\n * implementation uses <mxObjectIdentitiy> to turn object keys into strings.\n * \n * Constructor: mxEventSource\n *\n * Constructs a new dictionary which allows object to be used as keys.\n */\nfunction mxDictionary()\n{\n\tthis.clear();\n};\n\n/**\n * Function: map\n *\n * Stores the (key, value) pairs in this dictionary.\n */\nmxDictionary.prototype.map = null;\n\n/**\n * Function: clear\n *\n * Clears the dictionary.\n */\nmxDictionary.prototype.clear = function()\n{\n\tthis.map = {};\n};\n\n/**\n * Function: get\n *\n * Returns the value for the given key.\n */\nmxDictionary.prototype.get = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\t\n\treturn this.map[id];\n};\n\n/**\n * Function: put\n *\n * Stores the value under the given key and returns the previous\n * value for that key.\n */\nmxDictionary.prototype.put = function(key, value)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tthis.map[id] = value;\n\t\n\treturn previous;\n};\n\n/**\n * Function: remove\n *\n * Removes the value for the given key and returns the value that\n * has been removed.\n */\nmxDictionary.prototype.remove = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tdelete this.map[id];\n\t\n\treturn previous;\n};\n\n/**\n * Function: getKeys\n *\n * Returns all keys as an array.\n */\nmxDictionary.prototype.getKeys = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(key);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getValues\n *\n * Returns all values as an array.\n */\nmxDictionary.prototype.getValues = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(this.map[key]);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: visit\n *\n * Visits all entries in the dictionary using the given function with the\n * following signature: function(key, value) where key is a string and\n * value is an object.\n * \n * Parameters:\n * \n * visitor - A function that takes the key and value as arguments.\n */\nmxDictionary.prototype.visit = function(visitor)\n{\n\tfor (var key in this.map)\n\t{\n\t\tvisitor(key, this.map[key]);\n\t}\n};\n\n__mxOutput.mxDictionary = typeof mxDictionary !== 'undefined' ? mxDictionary : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\nvar mxResources =\n{\n\t/**\n\t * Class: mxResources\n\t * \n\t * Implements internationalization. You can provide any number of \n\t * resource files on the server using the following format for the \n\t * filename: name[-en].properties. The en stands for any lowercase \n\t * 2-character language shortcut (eg. de for german, fr for french).\n\t *\n\t * If the optional language extension is omitted, then the file is used as a \n\t * default resource which is loaded in all cases. If a properties file for a \n\t * specific language exists, then it is used to override the settings in the \n\t * default resource. All entries in the file are of the form key=value. The\n\t * values may then be accessed in code via <get>. Lines without \n\t * equal signs in the properties files are ignored.\n\t *\n\t * Resource files may either be added programmatically using\n\t * <add> or via a resource tag in the UI section of the \n\t * editor configuration file, eg:\n\t * \n\t * (code)\n\t * <mxEditor>\n\t *   <ui>\n\t *     <resource basename=\"examples/resources/mxWorkflow\"/>\n\t * (end)\n\t * \n\t * The above element will load examples/resources/mxWorkflow.properties as well\n\t * as the language specific file for the current language, if it exists.\n\t * \n\t * Values may contain placeholders of the form {1}...{n} where each placeholder\n\t * is replaced with the value of the corresponding array element in the params\n\t * argument passed to <mxResources.get>. The placeholder {1} maps to the first\n\t * element in the array (at index 0).\n\t * \n\t * See <mxClient.language> for more information on specifying the default\n\t * language or disabling all loading of resources.\n\t * \n\t * Lines that start with a # sign will be ignored.\n\t * \n\t * Special characters\n\t * \n\t * To use unicode characters, use the standard notation (eg. \\u8fd1) or %u as a\n\t * prefix (eg. %u20AC will display a Euro sign). For normal hex encoded strings,\n\t * use % as a prefix, eg. %F6 will display a \"o umlaut\" (&ouml;).\n\t * \n\t * See <resourcesEncoded> to disable this. If you disable this, make sure that\n\t * your files are UTF-8 encoded.\n\t * \n\t * Asynchronous loading\n\t * \n\t * By default, the core adds two resource files synchronously at load time.\n\t * To load these files asynchronously, set <mxLoadResources> to false\n\t * before loading mxClient.js and use <mxResources.loadResources> instead.\n\t * \n\t * Variable: resources\n\t * \n\t * Object that maps from keys to values.\n\t */\n\tresources: {},\n\n\t/**\n\t * Variable: extension\n\t * \n\t * Specifies the extension used for language files. Default is <mxResourceExtension>.\n\t */\n\textension: mxResourceExtension,\n\n\t/**\n\t * Variable: resourcesEncoded\n\t * \n\t * Specifies whether or not values in resource files are encoded with \\u or\n\t * percentage. Default is false.\n\t */\n\tresourcesEncoded: false,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the default file for a given basename should be loaded.\n\t * Default is true.\n\t */\n\tloadDefaultBundle: true,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the specific language file file for a given basename should\n\t * be loaded. Default is true.\n\t */\n\tloadSpecialBundle: true,\n\n\t/**\n\t * Function: isLanguageSupported\n\t * \n\t * Hook for subclassers to disable support for a given language. This\n\t * implementation returns true if lan is in <mxClient.languages>.\n\t * \n\t * Parameters:\n\t *\n\t * lan - The current language.\n\t */\n\tisLanguageSupported: function(lan)\n\t{\n\t\tif (mxClient.languages != null)\n\t\t{\n\t\t\treturn mxUtils.indexOf(mxClient.languages, lan) >= 0;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getDefaultBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + <extension> or null if\n\t * <loadDefaultBundle> is false.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The current language.\n\t */\n\tgetDefaultBundle: function(basename, lan)\n\t{\n\t\tif (mxResources.loadDefaultBundle || !mxResources.isLanguageSupported(lan))\n\t\t{\n\t\t\treturn basename + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: getSpecialBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + '_' + lan + <extension> or null if\n\t * <loadSpecialBundle> is false or lan equals <mxClient.defaultLanguage>.\n\t * \n\t * If <mxResources.languages> is not null and <mxClient.language> contains\n\t * a dash, then this method checks if <isLanguageSupported> returns true\n\t * for the full language (including the dash). If that returns false the\n\t * first part of the language (up to the dash) will be tried as an extension.\n\t * \n\t * If <mxResources.language> is null then the first part of the language is\n\t * used to maintain backwards compatibility.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t */\n\tgetSpecialBundle: function(basename, lan)\n\t{\n\t\tif (mxClient.languages == null || !this.isLanguageSupported(lan))\n\t\t{\n\t\t\tvar dash = lan.indexOf('-');\n\t\t\t\n\t\t\tif (dash > 0)\n\t\t\t{\n\t\t\t\tlan = lan.substring(0, dash);\n\t\t\t}\n\t\t}\n\n\t\tif (mxResources.loadSpecialBundle && mxResources.isLanguageSupported(lan) && lan != mxClient.defaultLanguage)\n\t\t{\n\t\t\treturn basename + '_' + lan + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: add\n\t * \n\t * Adds the default and current language properties file for the specified\n\t * basename. Existing keys are overridden as new files are added. If no\n\t * callback is used then the request is synchronous.\n\t *\n\t * Example:\n\t * \n\t * At application startup, additional resources may be \n\t * added using the following code:\n\t * \n\t * (code)\n\t * mxResources.add('resources/editor');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t * callback - Optional callback for asynchronous loading.\n\t */\n\tadd: function(basename, lan, callback)\n\t{\n\t\tlan = (lan != null) ? lan : ((mxClient.language != null) ?\n\t\t\tmxClient.language.toLowerCase() : mxConstants.NONE);\n\t\t\n\t\tif (lan != mxConstants.NONE)\n\t\t{\n\t\t\tvar defaultBundle = mxResources.getDefaultBundle(basename, lan);\n\t\t\tvar specialBundle = mxResources.getSpecialBundle(basename, lan);\n\t\t\t\n\t\t\tvar loadSpecialBundle = function()\n\t\t\t{\n\t\t\t\tif (specialBundle != null)\n\t\t\t\t{\n\t\t\t\t\tif (callback)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxUtils.get(specialBundle, function(req)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t}, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t   \t\tvar req = mxUtils.load(specialBundle);\n\t\t\t\t\t   \t\t\n\t\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t\t   \t\t{\n\t\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t\t   \t\t}\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\tcatch (e)\n\t\t\t\t   \t\t{\n\t\t\t\t   \t\t\t// ignore\n\t\t\t\t\t   \t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (callback != null)\n\t\t\t\t{\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (defaultBundle != null)\n\t\t\t{\n\t\t\t\tif (callback)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.get(defaultBundle, function(req)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t}, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t   \t\tvar req = mxUtils.load(defaultBundle);\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t   \t\t{\n\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tloadSpecialBundle();\n\t\t\t\t  \t}\n\t\t\t\t  \tcatch (e)\n\t\t\t\t  \t{\n\t\t\t\t  \t\t// ignore\n\t\t\t\t  \t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Overlays the language specific file (_lan-extension)\n\t\t\t\tloadSpecialBundle();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: parse\n\t * \n\t * Parses the key, value pairs in the specified\n\t * text and stores them as local resources.\n\t */\n\tparse: function(text)\n\t{\n\t\tif (text != null)\n\t\t{\n\t\t\tvar lines = text.split('\\n');\n\t\t\t\n\t\t\tfor (var i = 0; i < lines.length; i++)\n\t\t\t{\n\t\t\t\tif (lines[i].charAt(0) != '#')\n\t\t\t\t{\n\t\t\t\t\tvar index = lines[i].indexOf('=');\n\t\t\t\t\t\n\t\t\t\t\tif (index > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar key = lines[i].substring(0, index);\n\t\t\t\t\t\tvar idx = lines[i].length;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (lines[i].charCodeAt(idx - 1) == 13)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tidx--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar value = lines[i].substring(index + 1, idx);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.resourcesEncoded)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue = value.replace(/\\\\(?=u[a-fA-F\\d]{4})/g,\"%\");\n\t\t\t\t\t\t\tmxResources.resources[key] = unescape(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.resources[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the value for the specified resource key.\n\t *\n\t * Example:\n\t * To read the value for 'welomeMessage', use the following:\n\t * (code)\n\t * var result = mxResources.get('welcomeMessage') || '';\n\t * (end)\n\t *\n\t * This would require an entry of the following form in\n\t * one of the English language resource files:\n\t * (code)\n\t * welcomeMessage=Welcome to mxGraph!\n\t * (end)\n\t * \n\t * The part behind the || is the string value to be used if the given\n\t * resource is not available.\n\t * \n\t * Parameters:\n\t * \n\t * key - String that represents the key of the resource to be returned.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t * defaultValue - Optional string that specifies the default return value.\n\t */\n\tget: function(key, params, defaultValue)\n\t{\n\t\tvar value = mxResources.resources[key];\n\t\t\n\t\t// Applies the default value if no resource was found\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\t\n\t\t// Replaces the placeholders with the values in the array\n\t\tif (value != null && params != null)\n\t\t{\n\t\t\tvalue = mxResources.replacePlaceholders(value, params);\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: replacePlaceholders\n\t * \n\t * Replaces the given placeholders with the given parameters.\n\t * \n\t * Parameters:\n\t * \n\t * value - String that contains the placeholders.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t */\n\treplacePlaceholders: function(value, params)\n\t{\n\t\tvar result = [];\n\t\tvar index = null;\n\t\t\n\t\tfor (var i = 0; i < value.length; i++)\n\t\t{\n\t\t\tvar c = value.charAt(i);\n\n\t\t\tif (c == '{')\n\t\t\t{\n\t\t\t\tindex = '';\n\t\t\t}\n\t\t\telse if (index != null && \tc == '}')\n\t\t\t{\n\t\t\t\tindex = parseInt(index)-1;\n\t\t\t\t\n\t\t\t\tif (index >= 0 && index < params.length)\n\t\t\t\t{\n\t\t\t\t\tresult.push(params[index]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tindex = null;\n\t\t\t}\n\t\t\telse if (index != null)\n\t\t\t{\n\t\t\t\tindex += c;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(c);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\n\t/**\n\t * Function: loadResources\n\t * \n\t * Loads all required resources asynchronously. Use this to load the graph and\n\t * editor resources if <mxLoadResources> is false.\n\t * \n\t * Parameters:\n\t * \n\t * callback - Callback function for asynchronous loading.\n\t */\n\tloadResources: function(callback)\n\t{\n\t\tmxResources.add(mxClient.basePath+'/resources/editor', null, function()\n\t\t{\n\t\t\tmxResources.add(mxClient.basePath+'/resources/graph', null, callback);\n\t\t});\n\t}\n\n};\n\n__mxOutput.mxResources = typeof mxResources !== 'undefined' ? mxResources : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPoint\n *\n * Implements a 2-dimensional vector with double precision coordinates.\n * \n * Constructor: mxPoint\n *\n * Constructs a new point for the optional x and y coordinates. If no\n * coordinates are given, then the default values for <x> and <y> are used.\n */\nfunction mxPoint(x, y)\n{\n\tthis.x = (x != null) ? x : 0;\n\tthis.y = (y != null) ? y : 0;\n};\n\n/**\n * Variable: x\n *\n * Holds the x-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.x = null;\n\n/**\n * Variable: y\n *\n * Holds the y-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.y = null;\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this point.\n */\nmxPoint.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxPoint.prototype.clone = function()\n{\n\t// Handles subclasses as well\n\treturn mxUtils.clone(this);\n};\n\n__mxOutput.mxPoint = typeof mxPoint !== 'undefined' ? mxPoint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangle\n *\n * Extends <mxPoint> to implement a 2-dimensional rectangle with double\n * precision coordinates.\n * \n * Constructor: mxRectangle\n *\n * Constructs a new rectangle for the optional parameters. If no parameters\n * are given then the respective default values are used.\n */\nfunction mxRectangle(x, y, width, height)\n{\n\tmxPoint.call(this, x, y);\n\n\tthis.width = (width != null) ? width : 0;\n\tthis.height = (height != null) ? height : 0;\n};\n\n/**\n * Extends mxPoint.\n */\nmxRectangle.prototype = new mxPoint();\nmxRectangle.prototype.constructor = mxRectangle;\n\n/**\n * Variable: width\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxRectangle.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxRectangle.prototype.height = null;\n\n/**\n * Function: setRect\n * \n * Sets this rectangle to the specified values\n */\nmxRectangle.prototype.setRect = function(x, y, w, h)\n{\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n};\n\n/**\n * Function: getCenterX\n * \n * Returns the x-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterX = function ()\n{\n\treturn this.x + this.width/2;\n};\n\n/**\n * Function: getCenterY\n * \n * Returns the y-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterY = function ()\n{\n\treturn this.y + this.height/2;\n};\n\n/**\n * Function: add\n *\n * Adds the given rectangle to this rectangle.\n */\nmxRectangle.prototype.add = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar minX = Math.min(this.x, rect.x);\n\t\tvar minY = Math.min(this.y, rect.y);\n\t\tvar maxX = Math.max(this.x + this.width, rect.x + rect.width);\n\t\tvar maxY = Math.max(this.y + this.height, rect.y + rect.height);\n\t\t\n\t\tthis.x = minX;\n\t\tthis.y = minY;\n\t\tthis.width = maxX - minX;\n\t\tthis.height = maxY - minY;\n\t}\n};\n\n/**\n * Function: intersect\n * \n * Changes this rectangle to where it overlaps with the given rectangle.\n */\nmxRectangle.prototype.intersect = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar r1 = this.x + this.width;\n\t\tvar r2 = rect.x + rect.width;\n\t\t\n\t\tvar b1 = this.y + this.height;\n\t\tvar b2 = rect.y + rect.height;\n\t\t\n\t\tthis.x = Math.max(this.x, rect.x);\n\t\tthis.y = Math.max(this.y, rect.y);\n\t\tthis.width = Math.min(r1, r2) - this.x;\n\t\tthis.height = Math.min(b1, b2) - this.y;\n\t}\n};\n\n/**\n * Function: grow\n *\n * Grows the rectangle by the given amount, that is, this method subtracts\n * the given amount from the x- and y-coordinates and adds twice the amount\n * to the width and height.\n */\nmxRectangle.prototype.grow = function(amount)\n{\n\tthis.x -= amount;\n\tthis.y -= amount;\n\tthis.width += 2 * amount;\n\tthis.height += 2 * amount;\n\t\n\treturn this;\n};\n\n/**\n * Function: getPoint\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxRectangle.prototype.getPoint = function()\n{\n\treturn new mxPoint(this.x, this.y);\n};\n\n/**\n * Function: rotate90\n * \n * Rotates this rectangle by 90 degree around its center point.\n */\nmxRectangle.prototype.rotate90 = function()\n{\n\tvar t = (this.width - this.height) / 2;\n\tthis.x += t;\n\tthis.y -= t;\n\tvar tmp = this.width;\n\tthis.width = this.height;\n\tthis.height = tmp;\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this rectangle.\n */\nmxRectangle.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y &&\n\t\tobj.width == this.width && obj.height == this.height;\n};\n\n/**\n * Function: fromRectangle\n * \n * Returns a new <mxRectangle> which is a copy of the given rectangle.\n */\nmxRectangle.fromRectangle = function(rect)\n{\n\treturn new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n};\n\n__mxOutput.mxRectangle = typeof mxRectangle !== 'undefined' ? mxRectangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEffects =\n{\n\n\t/**\n\t * Class: mxEffects\n\t * \n\t * Provides animation effects.\n\t */\n\n\t/**\n\t * Function: animateChanges\n\t * \n\t * Asynchronous animated move operation. See also: <mxMorphing>.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n\t * {\n\t *   var changes = evt.getProperty('edit').changes;\n\t * \n\t *   if (changes.length < 10)\n\t *   {\n\t *     mxEffects.animateChanges(graph, changes);\n\t *   }\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that received the changes.\n\t * changes - Array of changes to be animated.\n\t * done - Optional function argument that is invoked after the\n\t * last step of the animation.\n\t */\n\tanimateChanges: function(graph, changes, done)\n\t{\n\t\tvar maxStep = 10;\n\t\tvar step = 0;\n\n\t\tvar animate = function() \n\t\t{\n\t\t\tvar isRequired = false;\n\t\t\t\n\t\t\tfor (var i = 0; i < changes.length; i++)\n\t\t\t{\n\t\t\t\tvar change = changes[i];\n\t\t\t\t\n\t\t\t\tif (change instanceof mxGeometryChange ||\n\t\t\t\t\tchange instanceof mxTerminalChange ||\n\t\t\t\t\tchange instanceof mxValueChange ||\n\t\t\t\t\tchange instanceof mxChildChange ||\n\t\t\t\t\tchange instanceof mxStyleChange)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.getView().getState(change.cell || change.child, false);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tisRequired = true;\n\t\t\t\t\t\n\t\t\t\t\t\tif (change.constructor != mxGeometryChange || graph.model.isEdge(change.cell))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxUtils.setOpacity(state.shape.node, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar scale = graph.getView().scale;\t\t\t\t\t\n\n\t\t\t\t\t\t\tvar dx = (change.geometry.x - change.previous.x) * scale;\n\t\t\t\t\t\t\tvar dy = (change.geometry.y - change.previous.y) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar sx = (change.geometry.width - change.previous.width) * scale;\n\t\t\t\t\t\t\tvar sy = (change.geometry.height - change.previous.height) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (step == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x -= dx;\n\t\t\t\t\t\t\t\tstate.y -= dy;\n\t\t\t\t\t\t\t\tstate.width -= sx;\n\t\t\t\t\t\t\t\tstate.height -= sy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x += dx / maxStep;\n\t\t\t\t\t\t\t\tstate.y += dy / maxStep;\n\t\t\t\t\t\t\t\tstate.width += sx / maxStep;\n\t\t\t\t\t\t\t\tstate.height += sy / maxStep;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tgraph.cellRenderer.redraw(state);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Fades all connected edges and children\n\t\t\t\t\t\t\tmxEffects.cascadeOpacity(graph, change.cell, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (step < maxStep && isRequired)\n\t\t\t{\n\t\t\t\tstep++;\n\t\t\t\twindow.setTimeout(animate, delay);\n\t\t\t}\n\t\t\telse if (done != null)\n\t\t\t{\n\t\t\t\tdone();\n\t\t\t}\n\t\t};\n\t\t\n\t\tvar delay = 30;\n\t\tanimate();\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * Sets the opacity on the given cell and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells.\n\t * cell - <mxCell> to set the opacity for.\n\t * opacity - New value for the opacity in %.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\t// Fades all children\n\t\tvar childCount = graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar child = graph.model.getChildAt(cell, i);\n\t\t\tvar childState = graph.getView().getState(child);\n\t\t\t\n\t\t\tif (childState != null)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(childState.shape.node, opacity);\n\t\t\t\tmxEffects.cascadeOpacity(graph, child, opacity);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Fades all connected edges\n\t\tvar edges = graph.model.getEdges(cell);\n\t\t\n\t\tif (edges != null)\n\t\t{\n\t\t\tfor (var i=0; i<edges.length; i++)\n\t\t\t{\n\t\t\t\tvar edgeState = graph.getView().getState(edges[i]);\n\t\t\t\t\n\t\t\t\tif (edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.setOpacity(edgeState.shape.node, opacity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * Asynchronous fade-out operation.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tstep = step || 40;\n\t\tdelay = delay || 30;\n\t\t\n\t\tvar opacity = from || 100;\n\t\t\n\t\tmxUtils.setOpacity(node, opacity);\n\t\t\n\t\tif (isEnabled || isEnabled == null)\n\t\t{\n\t\t\tvar f = function()\n\t\t\t{\n\t\t\t    opacity = Math.max(opacity-step, 0);\n\t\t\t\tmxUtils.setOpacity(node, opacity);\n\t\t\t\t\n\t\t\t\tif (opacity > 0)\n\t\t\t\t{\n\t\t\t\t\twindow.setTimeout(f, delay);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\t\t\n\t\t\t\t\tif (remove && node.parentNode)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\twindow.setTimeout(f, delay);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\n\t\t\tif (remove && node.parentNode)\n\t\t\t{\n\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t}\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxEffects = typeof mxEffects !== 'undefined' ? mxEffects : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxUtils =\n{\n\t/**\n\t * Class: mxUtils\n\t * \n\t * A singleton class that provides cross-browser helper methods.\n\t * This is a global functionality. To access the functions in this\n\t * class, use the global classname appended by the functionname.\n\t * You may have to load chrome://global/content/contentAreaUtils.js\n\t * to disable certain security restrictions in Mozilla for the <open>,\n\t * <save>, <saveAs> and <copy> function.\n\t * \n\t * For example, the following code displays an error message:\n\t * \n\t * (code)\n\t * mxUtils.error('Browser is not supported!', 200, false);\n\t * (end)\n\t * \n\t * Variable: errorResource\n\t * \n\t * Specifies the resource key for the title of the error window. If the\n\t * resource for this key does not exist then the value is used as\n\t * the title. Default is 'error'.\n\t */\n\terrorResource: (mxClient.language != 'none') ? 'error' : '',\n\t\n\t/**\n\t * Variable: closeResource\n\t * \n\t * Specifies the resource key for the label of the close button. If the\n\t * resource for this key does not exist then the value is used as\n\t * the label. Default is 'close'.\n\t */\n\tcloseResource: (mxClient.language != 'none') ? 'close' : '',\n\n\t/**\n\t * Variable: errorImage\n\t * \n\t * Defines the image used for error dialogs.\n\t */\n\terrorImage: mxClient.imageBasePath + '/error.gif',\n\t\n\t/**\n\t * Function: removeCursors\n\t * \n\t * Removes the cursors from the style of the given DOM node and its\n\t * descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the cursor style from.\n\t */\n\tremoveCursors: function(element)\n\t{\n\t\tif (element.style != null)\n\t\t{\n\t\t\telement.style.cursor = '';\n\t\t}\n\t\t\n\t\tvar children = element.childNodes;\n\t\t\n\t\tif (children != null)\n\t\t{\n\t        var childCount = children.length;\n\t        \n\t        for (var i = 0; i < childCount; i += 1)\n\t        {\n\t            mxUtils.removeCursors(children[i]);\n\t        }\n\t    }\n\t},\n\n\t/**\n\t * Function: getCurrentStyle\n\t * \n\t * Returns the current style of the specified element.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node whose current style should be returned.\n\t */\n\tgetCurrentStyle: function()\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 9))\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ? element.currentStyle : null;\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ?\n\t\t\t\t\twindow.getComputedStyle(element, '') :\n\t\t\t\t\tnull;\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: parseCssNumber\n\t * \n\t * Parses the given CSS numeric value adding handling for the values thin,\n\t * medium and thick (2, 4 and 6).\n\t */\n\tparseCssNumber: function(value)\n\t{\n\t\tif (value == 'thin')\n\t\t{\n\t\t\tvalue = '2';\n\t\t}\n\t\telse if (value == 'medium')\n\t\t{\n\t\t\tvalue = '4';\n\t\t}\n\t\telse if (value == 'thick')\n\t\t{\n\t\t\tvalue = '6';\n\t\t}\n\t\t\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: setPrefixedStyle\n\t * \n\t * Adds the given style with the standard name and an optional vendor prefix for the current\n\t * browser.\n\t * \n\t * (code)\n\t * mxUtils.setPrefixedStyle(node.style, 'transformOrigin', '0% 0%');\n\t * (end)\n\t */\n\tsetPrefixedStyle: function()\n\t{\n\t\tvar prefix = null;\n\t\t\n\t\tif (mxClient.IS_OT)\n\t\t{\n\t\t\tprefix = 'O';\n\t\t}\n\t\telse if (mxClient.IS_SF || mxClient.IS_GC)\n\t\t{\n\t\t\tprefix = 'Webkit';\n\t\t}\n\t\telse if (mxClient.IS_MT)\n\t\t{\n\t\t\tprefix = 'Moz';\n\t\t}\n\t\telse if (mxClient.IS_IE && document.documentMode >= 9 && document.documentMode < 10)\n\t\t{\n\t\t\tprefix = 'ms';\n\t\t}\n\n\t\treturn function(style, name, value)\n\t\t{\n\t\t\tstyle[name] = value;\n\t\t\t\n\t\t\tif (prefix != null && name.length > 0)\n\t\t\t{\n\t\t\t\tname = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);\n\t\t\t\tstyle[name] = value;\n\t\t\t}\n\t\t};\n\t}(),\n\t\n\t/**\n\t * Function: hasScrollbars\n\t * \n\t * Returns true if the overflow CSS property of the given node is either\n\t * scroll or auto.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose style should be checked for scrollbars.\n\t */\n\thasScrollbars: function(node)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(node);\n\n\t\treturn style != null && (style.overflow == 'scroll' || style.overflow == 'auto');\n\t},\n\t\n\t/**\n\t * Function: bind\n\t * \n\t * Returns a wrapper function that locks the execution scope of the given\n\t * function to the specified scope. Inside funct, the \"this\" keyword\n\t * becomes a reference to that scope.\n\t */\n\tbind: function(scope, funct)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\treturn funct.apply(scope, arguments);\n\t\t};\n\t},\n\t\n\t/**\n\t * Function: eval\n\t * \n\t * Evaluates the given expression using eval and returns the JavaScript\n\t * object that represents the expression result. Supports evaluation of\n\t * expressions that define functions and returns the function object for\n\t * these expressions.\n\t * \n\t * Parameters:\n\t * \n\t * expr - A string that represents a JavaScript expression.\n\t */\n\teval: function(expr)\n\t{\n\t\tvar result = null;\n\n\t\tif (expr.indexOf('function') >= 0)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\teval('var _mxJavaScriptExpression='+expr);\n\t\t\t\tresult = _mxJavaScriptExpression;\n\t\t\t\t// TODO: Use delete here?\n\t\t\t\t_mxJavaScriptExpression = null;\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tresult = eval(expr);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNode\n\t * \n\t * Returns the first node where attr equals value.\n\t * This implementation does not use XPath.\n\t */\n\tfindNode: function(node, attr, value)\n\t{\n\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\tvar tmp = node.getAttribute(attr);\n\t\n\t\t\tif (tmp != null && tmp == value)\n\t\t\t{\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tvar result = mxUtils.findNode(node, attr, value);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: getFunctionName\n\t * \n\t * Returns the name for the given function.\n\t * \n\t * Parameters:\n\t * \n\t * f - JavaScript object that represents a function.\n\t */\n\tgetFunctionName: function(f)\n\t{\n\t\tvar str = null;\n\n\t\tif (f != null)\n\t\t{\n\t\t\tif (f.name != null)\n\t\t\t{\n\t\t\t\tstr = f.name;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstr = mxUtils.trim(f.toString());\n\t\t\t\t\n\t\t\t\tif (/^function\\s/.test(str))\n\t\t\t\t{\n\t\t\t\t\tstr = mxUtils.ltrim(str.substring(9));\n\t\t\t\t\tvar idx2 = str.indexOf('(');\n\t\t\t\t\t\n\t\t\t\t\tif (idx2 > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstr = str.substring(0, idx2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn str;\n\t},\n\n\t/**\n\t * Function: indexOf\n\t * \n\t * Returns the index of obj in array or -1 if the array does not contain\n\t * the given object.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array to check for the given obj.\n\t * obj - Object to find in the given array.\n\t */\n\tindexOf: function(array, obj)\n\t{\n\t\tif (array != null && obj != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tif (array[i] == obj)\n\t\t\t\t{\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn -1;\n\t},\n\n\t/**\n\t * Function: forEach\n\t * \n\t * Calls the given function for each element of the given array and returns\n\t * the array.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array that contains the elements.\n\t * fn - Function to be called for each object.\n\t */\n\tforEach: function(array, fn)\n\t{\n\t\tif (array != null && fn != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tfn(array[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn array;\n\t},\n\n\t/**\n\t * Function: remove\n\t * \n\t * Removes all occurrences of the given object in the given array or\n\t * object. If there are multiple occurrences of the object, be they\n\t * associative or as an array entry, all occurrences are removed from\n\t * the array or deleted from the object. By removing the object from\n\t * the array, all elements following the removed element are shifted\n\t * by one step towards the beginning of the array.\n\t * \n\t * The length of arrays is not modified inside this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to find in the given array.\n\t * array - Array to check for the given obj.\n\t */\n\tremove: function(obj, array)\n\t{\n\t\tvar result = null;\n\t\t\n\t\tif (typeof(array) == 'object')\n\t\t{\n\t\t\tvar index = mxUtils.indexOf(array, obj);\n\t\t\t\n\t\t\twhile (index >= 0)\n\t\t\t{\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\tresult = obj;\n\t\t\t\tindex = mxUtils.indexOf(array, obj);\n\t\t\t}\n\t\t}\n\n\t\tfor (var key in array)\n\t\t{\n\t\t\tif (array[key] == obj)\n\t\t\t{\n\t\t\t\tdelete array[key];\n\t\t\t\tresult = obj;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNode\n\t * \n\t * Returns true if the given value is an XML node with the node name\n\t * and if the optional attribute has the specified value.\n\t * \n\t * This implementation assumes that the given value is a DOM node if the\n\t * nodeType property is numeric, that is, if isNaN returns false for\n\t * value.nodeType.\n\t * \n\t * Parameters:\n\t * \n\t * value - Object that should be examined as a node.\n\t * nodeName - String that specifies the node name.\n\t * attributeName - Optional attribute name to check.\n\t * attributeValue - Optional attribute value to check.\n\t */\n\t isNode: function(value, nodeName, attributeName, attributeValue)\n\t {\n\t \tif (value != null && !isNaN(value.nodeType) && (nodeName == null ||\n\t \t\tvalue.nodeName.toLowerCase() == nodeName.toLowerCase()))\n \t\t{\n \t\t\treturn attributeName == null ||\n \t\t\t\tvalue.getAttribute(attributeName) == attributeValue;\n \t\t}\n\t \t\n\t \treturn false;\n\t },\n\t\n\t/**\n\t * Function: isAncestorNode\n\t * \n\t * Returns true if the given ancestor is an ancestor of the\n\t * given DOM node in the DOM. This also returns true if the\n\t * child is the ancestor.\n\t * \n\t * Parameters:\n\t * \n\t * ancestor - DOM node that represents the ancestor.\n\t * child - DOM node that represents the child.\n\t */\n\t isAncestorNode: function(ancestor, child)\n\t {\n\t \tvar parent = child;\n\t \t\n\t \twhile (parent != null)\n\t \t{\n\t \t\tif (parent == ancestor)\n\t \t\t{\n\t \t\t\treturn true;\n\t \t\t}\n\n\t \t\tparent = parent.parentNode;\n\t \t}\n\t \t\n\t \treturn false;\n\t },\n\n\t/**\n\t * Function: getChildNodes\n\t * \n\t * Returns an array of child nodes that are of the given node type.\n\t * \n\t * Parameters:\n\t * \n\t * node - Parent DOM node to return the children from.\n\t * nodeType - Optional node type to return. Default is\n\t * <mxConstants.NODETYPE_ELEMENT>.\n\t */\n\tgetChildNodes: function(node, nodeType)\n\t{\n\t\tnodeType = nodeType || mxConstants.NODETYPE_ELEMENT;\n\t\t\n\t\tvar children = [];\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == nodeType)\n\t\t\t{\n\t\t\t\tchildren.push(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t\t\n\t\treturn children;\n\t},\n\n\t/**\n\t * Function: importNode\n\t * \n\t * Cross browser implementation for document.importNode. Uses document.importNode\n\t * in all browsers but IE, where the node is cloned by creating a new node and\n\t * copying all attributes and children into it using importNode, recursively.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNode: function(doc, node, allChildren)\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 10))\n\t\t{\n\t\t\treturn mxUtils.importNodeImplementation(doc, node, allChildren);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn doc.importNode(node, allChildren);\n\t\t}\n\t},\n\n\t/**\n\t * Function: importNodeImplementation\n\t * \n\t * Full DOM API implementation for importNode without using importNode API call.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNodeImplementation: function(doc, node, allChildren)\n\t{\n\t\tswitch (node.nodeType)\n\t\t{\n\t\t\tcase 1: /* element */\n\t\t\t{\n\t\t\t\tvar newNode = doc.createElement(node.nodeName);\n\t\t\t\t\n\t\t\t\tif (node.attributes && node.attributes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < node.attributes.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewNode.setAttribute(node.attributes[i].nodeName,\n\t\t\t\t\t\t\tnode.getAttribute(node.attributes[i].nodeName));\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (allChildren && node.childNodes && node.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < node.childNodes.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewNode.appendChild(mxUtils.importNodeImplementation(doc, node.childNodes[i], allChildren));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn newNode;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3: /* text */\n\t\t    case 4: /* cdata-section */\n\t\t    case 8: /* comment */\n\t\t    {\n\t\t    \treturn doc.createTextNode((node.nodeValue != null) ? node.nodeValue : node.value);\n\t\t    \tbreak;\n\t\t    }\n\t\t};\n\t},\n\n\t/**\n\t * Function: createXmlDocument\n\t * \n\t * Returns a new, empty XML document.\n\t */\n\tcreateXmlDocument: function()\n\t{\n\t\tvar doc = null;\n\t\t\n\t\tif (document.implementation && document.implementation.createDocument)\n\t\t{\n\t\t\tdoc = document.implementation.createDocument('', '', null);\n\t\t}\n\t\telse if (\"ActiveXObject\" in window)\n\t\t{\n\t\t\tdoc = mxUtils.createMsXmlDocument();\n\t \t}\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: createMsXmlDocument\n\t * \n\t * Returns a new, empty Microsoft.XMLDOM document using ActiveXObject.\n\t */\n\tcreateMsXmlDocument: function()\n\t{\n\t\tvar doc = new ActiveXObject('Microsoft.XMLDOM');\n\t\tdoc.async = false;\n\n\t\t// Workaround for parsing errors with SVG DTD\n\t\tdoc.validateOnParse = false;\n\t\tdoc.resolveExternals = false;\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: parseXml\n\t * \n\t * Parses the specified XML string into a new XML document and returns the\n\t * new document.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var doc = mxUtils.parseXml(\n\t *   '<mxGraphModel><root><MyDiagram id=\"0\"><mxCell/></MyDiagram>'+\n\t *   '<MyLayer id=\"1\"><mxCell parent=\"0\" /></MyLayer><MyObject id=\"2\">'+\n\t *   '<mxCell style=\"strokeColor=blue;fillColor=red\" parent=\"1\" vertex=\"1\">'+\n\t *   '<mxGeometry x=\"10\" y=\"10\" width=\"80\" height=\"30\" as=\"geometry\"/>'+\n\t *   '</mxCell></MyObject></root></mxGraphModel>');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * xml - String that contains the XML data.\n\t */\n\tparseXml: function()\n\t{\n\t\tif (window.DOMParser)\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\n\t\t\t\treturn parser.parseFromString(xml, 'text/xml');\n\t\t\t};\n\t\t}\n\t\telse // IE<=9\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar doc = mxUtils.createMsXmlDocument();\n\t\t\t\tdoc.loadXML(xml);\n\t\t\t\t\n\t\t\t\treturn doc;\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: clearSelection\n\t * \n\t * Clears the current selection in the page.\n\t */\n\tclearSelection: function()\n\t{\n\t\tif (document.selection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tdocument.selection.empty();\n\t\t\t};\n\t\t}\n\t\telse if (window.getSelection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tif (window.getSelection().empty)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().empty();\n\t\t\t\t}\n\t\t\t\telse if (window.getSelection().removeAllRanges)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function() { };\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeWhitespace\n\t * \n\t * Removes the sibling text nodes for the given node that only consists\n\t * of tabs, newlines and spaces.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose siblings should be removed.\n\t * before - Optional boolean that specifies the direction of the traversal.\n\t */\n\tremoveWhitespace: function(node, before)\n\t{\n\t\tvar tmp = (before) ? node.previousSibling : node.nextSibling;\n\t\t\n\t\twhile (tmp != null && tmp.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tvar next = (before) ? tmp.previousSibling : tmp.nextSibling;\n\t\t\tvar text = mxUtils.getTextContent(tmp);\n\t\t\t\n\t\t\tif (mxUtils.trim(text).length == 0)\n\t\t\t{\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = next;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: htmlEntities\n\t * \n\t * Replaces characters (less than, greater than, newlines and quotes) with\n\t * their HTML entities in the given string and returns the result.\n\t * \n\t * Parameters:\n\t * \n\t * s - String that contains the characters to be converted.\n\t * newline - If newlines should be replaced. Default is true.\n\t */\n\thtmlEntities: function(s, newline)\n\t{\n\t\ts = String(s || '');\n\t\t\n\t\ts = s.replace(/&/g,'&amp;'); // 38 26\n\t\ts = s.replace(/\"/g,'&quot;'); // 34 22\n\t\ts = s.replace(/\\'/g,'&#39;'); // 39 27\n\t\ts = s.replace(/</g,'&lt;'); // 60 3C\n\t\ts = s.replace(/>/g,'&gt;'); // 62 3E\n\n\t\tif (newline == null || newline)\n\t\t{\n\t\t\ts = s.replace(/\\n/g, '&#xa;');\n\t\t}\n\t\t\n\t\treturn s;\n\t},\n\t\n\t/**\n\t * Function: isVml\n\t * \n\t * Returns true if the given node is in the VML namespace.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose tag urn should be checked.\n\t */\n\tisVml: function(node)\n\t{\n\t\treturn node != null && node.tagUrn == 'urn:schemas-microsoft-com:vml';\n\t},\n\n\t/**\n\t * Function: getXml\n\t * \n\t * Returns the XML content of the specified node. For Internet Explorer,\n\t * all \\r\\n\\t[\\t]* are removed from the XML string and the remaining \\r\\n\n\t * are replaced by \\n. All \\n are then replaced with linefeed, or &#xa; if\n\t * no linefeed is defined.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * linefeed - Optional string that linefeeds are converted into. Default is\n\t * &#xa;\n\t */\n\tgetXml: function(node, linefeed)\n\t{\n\t\tvar xml = '';\n\t\t\n\t\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t\t{\n\t\t\txml = mxUtils.getPrettyXml(node, '', '', '');\n\t\t}\n\t\telse if (window.XMLSerializer != null)\n\t\t{\n\t\t\tvar xmlSerializer = new XMLSerializer();\n\t\t\txml = xmlSerializer.serializeToString(node);     \n\t\t}\n\t\telse if (node.xml != null)\n\t\t{\n\t\t\txml = node.xml.replace(/\\r\\n\\t[\\t]*/g, '').\n\t\t\t\treplace(/>\\r\\n/g, '>').\n\t\t\t\treplace(/\\r\\n/g, '\\n');\n\t\t}\n\n\t\t// Replaces linefeeds with HTML Entities.\n\t\tlinefeed = linefeed || '&#xa;';\n\t\txml = xml.replace(/\\n/g, linefeed);\n\t\t  \n\t\treturn xml;\n\t},\n\t\n\t/**\n\t * Function: getPrettyXML\n\t * \n\t * Returns a pretty printed string that represents the XML tree for the\n\t * given node. This method should only be used to print XML for reading,\n\t * use <getXml> instead to obtain a string for processing.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * tab - Optional string that specifies the indentation for one level.\n\t * Default is two spaces.\n\t * indent - Optional string that represents the current indentation.\n\t * Default is an empty string.\n\t * newline - Option string that represents a linefeed. Default is '\\n'.\n\t */\n\tgetPrettyXml: function(node, tab, indent, newline, ns)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (node != null)\n\t\t{\n\t\t\ttab = (tab != null) ? tab : '  ';\n\t\t\tindent = (indent != null) ? indent : '';\n\t\t\tnewline = (newline != null) ? newline : '\\n';\n\t\t\t\n\t\t\tif (node.namespaceURI != null && node.namespaceURI != ns)\n\t\t\t{\n\t\t\t\tns = node.namespaceURI;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('xmlns') == null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('xmlns', node.namespaceURI);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (node.nodeType == mxConstants.NODETYPE_DOCUMENT)\n\t\t\t{\n\t\t\t\tresult.push(mxUtils.getPrettyXml(node.documentElement, tab, indent, newline, ns));\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_DOCUMENT_FRAGMENT)\n\t\t\t{\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent, newline, ns));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_COMMENT)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.getTextContent(node);\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + '<!--' + value + '-->' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.trim(mxUtils.getTextContent(node));\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + mxUtils.htmlEntities(value, false) + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_CDATA)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.getTextContent(node);\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + '<![CDATA[' + value + ']]' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(indent + '<' + node.nodeName);\n\t\t\t\t\n\t\t\t\t// Creates the string with the node attributes\n\t\t\t\t// and converts all HTML entities in the values\n\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\n\t\t\t\tif (attrs != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar val = mxUtils.htmlEntities(attrs[i].value);\n\t\t\t\t\t\tresult.push(' ' + attrs[i].nodeName + '=\"' + val + '\"');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Recursively creates the XML string for each child\n\t\t\t\t// node and appends it here with an indentation\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tresult.push('>' + newline);\n\t\t\t\t\t\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent + tab, newline, ns));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresult.push(indent + '</'+ node.nodeName + '>' + newline);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult.push(' />' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\t\n\t/**\n\t * Function: extractTextWithWhitespace\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * elems - DOM nodes to return the text for.\n\t */\n\textractTextWithWhitespace: function(elems)\n\t{\n\t    // Known block elements for handling linefeeds (list is not complete)\n\t\tvar blocks = ['BLOCKQUOTE', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'OL', 'P', 'PRE', 'TABLE', 'UL'];\n\t\tvar ret = [];\n\t\t\n\t\tfunction doExtract(elts)\n\t\t{\n\t\t\t// Single break should be ignored\n\t\t\tif (elts.length == 1 && (elts[0].nodeName == 'BR' ||\n\t\t\t\telts[0].innerHTML == '\\n'))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t    for (var i = 0; i < elts.length; i++)\n\t\t    {\n\t\t        var elem = elts[i];\n\n\t\t\t\t// DIV with a br or linefeed forces a linefeed\n\t\t\t\tif (elem.nodeName == 'BR' || elem.innerHTML == '\\n' ||\n\t\t\t\t\t((elts.length == 1 || i == 0) && (elem.nodeName == 'DIV' &&\n\t\t\t\t\telem.innerHTML.toLowerCase() == '<br>')))\n\t\t    \t{\n\t    \t\t\tret.push('\\n');\n\t\t    \t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t        if (elem.nodeType === 3 || elem.nodeType === 4)\n\t\t\t        {\n\t\t\t        \tif (elem.nodeValue.length > 0)\n\t\t\t        \t{\n\t\t\t        \t\tret.push(elem.nodeValue);\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        else if (elem.nodeType !== 8 && elem.childNodes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdoExtract(elem.childNodes);\n\t\t\t\t\t}\n\t\t\t        \n\t        \t\tif (i < elts.length - 1 && mxUtils.indexOf(blocks, elts[i + 1].nodeName) >= 0)\n\t        \t\t{\n\t        \t\t\tret.push('\\n');\t\t\n\t        \t\t}\n\t\t\t\t}\n\t\t    }\n\t\t};\n\t\t\n\t\tdoExtract(elems);\n\t    \n\t    return ret.join('');\n\t},\n\n\t/**\n\t * Function: replaceTrailingNewlines\n\t * \n\t * Replaces each trailing newline with the given pattern.\n\t */\n\treplaceTrailingNewlines: function(str, pattern)\n\t{\n\t\t// LATER: Check is this can be done with a regular expression\n\t\tvar postfix = '';\n\t\t\n\t\twhile (str.length > 0 && str.charAt(str.length - 1) == '\\n')\n\t\t{\n\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\tpostfix += pattern;\n\t\t}\n\t\t\n\t\treturn str + postfix;\n\t},\n\n\t/**\n\t * Function: getTextContent\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the text content for.\n\t */\n\tgetTextContent: function(node)\n\t{\n\t\t// Only IE10-\n\t\tif (mxClient.IS_IE && node.innerText !== undefined)\n\t\t{\n\t\t\treturn node.innerText;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (node != null) ? node[(node.textContent === undefined) ? 'text' : 'textContent'] : '';\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setTextContent\n\t * \n\t * Sets the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the text content for.\n\t * text - String that represents the text content.\n\t */\n\tsetTextContent: function(node, text)\n\t{\n\t\tif (node.innerText !== undefined)\n\t\t{\n\t\t\tnode.innerText = text;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode[(node.textContent === undefined) ? 'text' : 'textContent'] = text;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getInnerHtml\n\t * \n\t * Returns the inner HTML for the given node as a string or an empty string\n\t * if no node was specified. The inner HTML is the text representing all\n\t * children of the node, but not the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the inner HTML for.\n\t */\n\tgetInnerHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\treturn node.innerHTML;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getOuterHtml\n\t * \n\t * Returns the outer HTML for the given node as a string or an empty\n\t * string if no node was specified. The outer HTML is the text representing\n\t * all children of the node including the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the outer HTML for.\n\t */\n\tgetOuterHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tif (node.outerHTML != null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn node.outerHTML;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = [];\n\t\t\t\t\t\ttmp.push('<'+node.nodeName);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (attrs != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar value = attrs[i].value;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (value != null && value.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.push(' ');\n\t\t\t\t\t\t\t\t\ttmp.push(attrs[i].nodeName);\n\t\t\t\t\t\t\t\t\ttmp.push('=\"');\n\t\t\t\t\t\t\t\t\ttmp.push(value);\n\t\t\t\t\t\t\t\t\ttmp.push('\"');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (node.innerHTML.length == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('/>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('>');\n\t\t\t\t\t\t\ttmp.push(node.innerHTML);\n\t\t\t\t\t\t\ttmp.push('</'+node.nodeName+'>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn tmp.join('');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: write\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twrite: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent with an additional linefeed. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twriteln: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t\tparent.appendChild(document.createElement('br'));\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: br\n\t * \n\t * Appends a linebreak to the given parent and returns the linebreak.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the linebreak to.\n\t */\n\tbr: function(parent, count)\n\t{\n\t\tcount = count || 1;\n\t\tvar br = null;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tif (parent != null)\n\t\t\t{\n\t\t\t\tbr = parent.ownerDocument.createElement('br');\n\t\t\t\tparent.appendChild(br);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn br;\n\t},\n\t\t\n\t/**\n\t * Function: button\n\t * \n\t * Returns a new button with the given level and function as an onclick\n\t * event handler.\n\t * \n\t * (code)\n\t * document.body.appendChild(mxUtils.button('Test', function(evt)\n\t * {\n\t *   alert('Hello, World!');\n\t * }));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * label - String that represents the label of the button.\n\t * funct - Function to be called if the button is pressed.\n\t * doc - Optional document to be used for creating the button. Default is the\n\t * current document.\n\t */\n\tbutton: function(label, funct, doc)\n\t{\n\t\tdoc = (doc != null) ? doc : document;\n\t\t\n\t\tvar button = doc.createElement('button');\n\t\tmxUtils.write(button, label);\n\n\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t{\n\t\t\tfunct(evt);\n\t\t});\n\t\t\n\t\treturn button;\n\t},\n\t\n\t/**\n\t * Function: para\n\t * \n\t * Appends a new paragraph with the given text to the specified parent and\n\t * returns the paragraph.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text for the new paragraph.\n\t */\n\tpara: function(parent, text)\n\t{\n\t\tvar p = document.createElement('p');\n\t\tmxUtils.write(p, text);\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(p);\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: addTransparentBackgroundFilter\n\t * \n\t * Adds a transparent background to the filter of the given node. This\n\t * background can be used in IE8 standards mode (native IE8 only) to pass\n\t * events through the node.\n\t */\n\taddTransparentBackgroundFilter: function(node)\n\t{\n\t\tnode.style.filter += 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\\'' +\n\t\t\tmxClient.imageBasePath + '/transparent.gif\\', sizingMethod=\\'scale\\')';\n\t},\n\n\t/**\n\t * Function: linkAction\n\t * \n\t * Adds a hyperlink to the specified parent that invokes action on the\n\t * specified editor.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> that will execute the action.\n\t * action - String that defines the name of the action to be executed.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkAction: function(parent, text, editor, action, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor.execute(action);\n\t\t}, pad);\n\t},\n\n\t/**\n\t * Function: linkInvoke\n\t * \n\t * Adds a hyperlink to the specified parent that invokes the specified\n\t * function on the editor passing along the specified argument. The\n\t * function name is the name of a function of the editor instance,\n\t * not an action name.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> instance to execute the function on.\n\t * functName - String that represents the name of the function.\n\t * arg - Object that represents the argument to the function.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkInvoke: function(parent, text, editor, functName, arg, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor[functName](arg);\n\t\t}, pad);\n\t},\n\t\n\t/**\n\t * Function: link\n\t * \n\t * Adds a hyperlink to the specified parent and invokes the given function\n\t * when the link is clicked.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * funct - Function to execute when the link is clicked.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlink: function(parent, text, funct, pad)\n\t{\n\t\tvar a = document.createElement('span');\n\t\t\n\t\ta.style.color = 'blue';\n\t\ta.style.textDecoration = 'underline';\n\t\ta.style.cursor = 'pointer';\n\t\t\n\t\tif (pad != null)\n\t\t{\n\t\t\ta.style.paddingLeft = pad+'px';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(a, 'click', funct);\n\t\tmxUtils.write(a, text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(a);\n\t\t}\n\t\t\n\t\treturn a;\n\t},\n\n\t/**\n\t * Function: getDocumentSize\n\t * \n\t * Returns the client size for the current document as an <mxRectangle>.\n\t */\n\tgetDocumentSize: function()\n\t{\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\ttry\n\t\t{\n\t\t\treturn new mxRectangle(0, 0, b.clientWidth || d.clientWidth, Math.max(b.clientHeight || 0, d.clientHeight));\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\treturn new mxRectangle();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: fit\n\t * \n\t * Makes sure the given node is inside the visible area of the window. This\n\t * is done by setting the left and top in the style. \n\t */\n\tfit: function(node)\n\t{\n\t\tvar ds = mxUtils.getDocumentSize();\n\t\tvar left = parseInt(node.offsetLeft);\n\t\tvar width = parseInt(node.offsetWidth);\n\t\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(node.ownerDocument);\n\t\tvar sl = offset.x;\n\t\tvar st = offset.y;\n\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\tvar right = (sl) + ds.width;\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\tnode.style.left = Math.max(sl, right - width) + 'px';\n\t\t}\n\t\t\n\t\tvar top = parseInt(node.offsetTop);\n\t\tvar height = parseInt(node.offsetHeight);\n\t\t\n\t\tvar bottom = st + ds.height;\n\t\t\n\t\tif (top + height > bottom)\n\t\t{\n\t\t\tnode.style.top = Math.max(st, bottom - height) + 'px';\n\t\t}\n\t},\n\n\t/**\n\t * Function: load\n\t * \n\t * Loads the specified URL *synchronously* and returns the <mxXmlRequest>.\n\t * Throws an exception if the file cannot be loaded. See <mxUtils.get> for\n\t * an asynchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * try\n\t * {\n\t *   var req = mxUtils.load(filename);\n\t *   var root = req.getDocumentElement();\n\t *   // Process XML DOM...\n\t * }\n\t * catch (ex)\n\t * {\n\t *   mxUtils.alert('Cannot load '+filename+': '+ex);\n\t * }\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t */\n\tload: function(url)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET', false);\n\t\treq.send();\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Loads the specified URL *asynchronously* and invokes the given functions\n\t * depending on the request status. Returns the <mxXmlRequest> in use. Both\n\t * functions take the <mxXmlRequest> as the only parameter. See\n\t * <mxUtils.load> for a synchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *    var node = req.getDocumentElement();\n\t *    // Process XML DOM...\n\t * });\n\t * (end)\n\t * \n\t * So for example, to load a diagram into an existing graph model, the\n\t * following code is used.\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *   var node = req.getDocumentElement();\n\t *   var dec = new mxCodec(node.ownerDocument);\n\t *   dec.decode(node, graph.getModel());\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t * binary - Optional boolean parameter that specifies if the request is\n\t * binary.\n\t * timeout - Optional timeout in ms before calling ontimeout.\n\t * ontimeout - Optional function to execute on timeout.\n\t * headers - Optional with headers, eg. {'Authorization': 'token xyz'}\n\t */\n\tget: function(url, onload, onerror, binary, timeout, ontimeout, headers)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET');\n\t\tvar setRequestHeaders = req.setRequestHeaders;\n\t\t\n\t\tif (headers)\n\t\t{\n\t\t\treq.setRequestHeaders = function(request, params)\n\t\t\t{\n\t\t\t\tsetRequestHeaders.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tfor (var key in headers)\n\t\t\t\t{\n\t\t\t\t\trequest.setRequestHeader(key, headers[key]);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (binary != null)\n\t\t{\n\t\t\treq.setBinary(binary);\n\t\t}\n\t\t\n\t\treq.send(onload, onerror, timeout, ontimeout);\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: getAll\n\t * \n\t * Loads the URLs in the given array *asynchronously* and invokes the given function\n\t * if all requests returned with a valid 2xx status. The error handler is invoked\n\t * once on the first error or invalid response.\n\t *\n\t * Parameters:\n\t * \n\t * urls - Array of URLs to be loaded.\n\t * onload - Callback with array of <mxXmlRequests>.\n\t * onerror - Optional function to execute on error.\n\t */\n\tgetAll: function(urls, onload, onerror)\n\t{\n\t\tvar remain = urls.length;\n\t\tvar result = [];\n\t\tvar errors = 0;\n\t\tvar err = function()\n\t\t{\n\t\t\tif (errors == 0 && onerror != null)\n\t\t\t{\n\t\t\t\tonerror();\n\t\t\t}\n\n\t\t\terrors++;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < urls.length; i++)\n\t\t{\n\t\t\t(function(url, index)\n\t\t\t{\n\t\t\t\tmxUtils.get(url, function(req)\n\t\t\t\t{\n\t\t\t\t\tvar status = req.getStatus();\n\t\t\t\t\t\n\t\t\t\t\tif (status < 200 || status > 299)\n\t\t\t\t\t{\n\t\t\t\t\t\terr();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult[index] = req;\n\t\t\t\t\t\tremain--;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (remain == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonload(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, err);\n\t\t\t})(urls[i], i);\n\t\t}\n\t\t\n\t\tif (remain == 0)\n\t\t{\n\t\t\tonload(result);\t\t\t\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: post\n\t * \n\t * Posts the specified params to the given URL *asynchronously* and invokes\n\t * the given functions depending on the request status. Returns the\n\t * <mxXmlRequest> in use. Both functions take the <mxXmlRequest> as the\n\t * only parameter. Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.post(url, 'key=value', function(req)\n\t * {\n\t * \tmxUtils.alert('Ready: '+req.isReady()+' Status: '+req.getStatus());\n\t *  // Process req.getDocumentElement() using DOM API if OK...\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the post request.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t */\n\tpost: function(url, params, onload, onerror)\n\t{\n\t\treturn new mxXmlRequest(url, params).send(onload, onerror);\n\t},\n\t\n\t/**\n\t * Function: submit\n\t * \n\t * Submits the given parameters to the specified URL using\n\t * <mxXmlRequest.simulate> and returns the <mxXmlRequest>.\n\t * Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the form.\n\t * doc - Document to create the form in.\n\t * target - Target to send the form result to.\n\t */\n\tsubmit: function(url, params, doc, target)\n\t{\n\t\treturn new mxXmlRequest(url, params).simulate(doc, target);\n\t},\n\t\n\t/**\n\t * Function: loadInto\n\t * \n\t * Loads the specified URL *asynchronously* into the specified document,\n\t * invoking onload after the document has been loaded. This implementation\n\t * does not use <mxXmlRequest>, but the document.load method.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * doc - The document to load the URL into.\n\t * onload - Function to execute when the URL has been loaded.\n\t */\n\tloadInto: function(url, doc, onload)\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tdoc.onreadystatechange = function ()\n\t\t\t{\n\t\t\t\tif (doc.readyState == 4)\n\t\t\t\t{\n\t\t\t\t\tonload();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.addEventListener('load', onload, false);\n\t\t}\n\t\t\n\t\tdoc.load(url);\n\t},\n\t\n\t/**\n\t * Function: getValue\n\t * \n\t * Returns the value for the given key in the given associative array or\n\t * the given default value if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null.\n\t */\n\tgetValue: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\t\t\t\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: getNumber\n\t * \n\t * Returns the numeric value for the given key in the given associative\n\t * array or the given default value (or 0) if the value is null. The value\n\t * is converted to a numeric value using the Number function.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is 0.\n\t */\n\tgetNumber: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue || 0;\t\t\t\n\t\t}\n\t\t\n\t\treturn Number(value);\n\t},\n\t\n\t/**\n\t * Function: getColor\n\t * \n\t * Returns the color value for the given key in the given associative\n\t * array or the given default value if the value is null. If the value\n\t * is <mxConstants.NONE> then null is returned.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is null.\n\t */\n\tgetColor: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\telse if (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: clone\n\t * \n\t * Recursively clones the specified object ignoring all fieldnames in the\n\t * given array of transient fields. <mxObjectIdentity.FIELD_NAME> is always\n\t * ignored by this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to be cloned.\n\t * transients - Optional array of strings representing the fieldname to be\n\t * ignored.\n\t * shallow - Optional boolean argument to specify if a shallow clone should\n\t * be created, that is, one where all object references are not cloned or,\n\t * in other words, one where only atomic (strings, numbers) values are\n\t * cloned. Default is false.\n\t */\n\tclone: function(obj, transients, shallow)\n\t{\n\t\tshallow = (shallow != null) ? shallow : false;\n\t\tvar clone = null;\n\t\t\n\t\tif (obj != null && typeof(obj.constructor) == 'function')\n\t\t{\n\t\t\tclone = new obj.constructor();\n\t\t\t\n\t\t    for (var i in obj)\n\t\t    {\n\t\t    \tif (i != mxObjectIdentity.FIELD_NAME && (transients == null ||\n\t\t    \t\tmxUtils.indexOf(transients, i) < 0))\n\t\t    \t{\n\t\t\t    \tif (!shallow && typeof(obj[i]) == 'object')\n\t\t\t    \t{\n\t\t\t            clone[i] = mxUtils.clone(obj[i]);\n\t\t\t        }\n\t\t\t        else\n\t\t\t        {\n\t\t\t            clone[i] = obj[i];\n\t\t\t        }\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t    return clone;\n\t},\n\n\t/**\n\t * Function: equalPoints\n\t * \n\t * Compares all mxPoints in the given lists.\n\t * \n\t * Parameters:\n\t * \n\t * a - Array of <mxPoints> to be compared.\n\t * b - Array of <mxPoints> to be compared.\n\t */\n\tequalPoints: function(a, b)\n\t{\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var i = 0; i < a.length; i++)\n\t\t\t{\n\t\t\t\tif ((a[i] != null && b[i] == null) ||\n\t\t\t\t\t(a[i] == null && b[i] != null) ||\n\t\t\t\t\t(a[i] != null && b[i] != null &&\n\t\t\t\t\t(a[i].x != b[i].x || a[i].y != b[i].y)))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: equalEntries\n\t * \n\t * Returns true if all properties of the given objects are equal. Values\n\t * with NaN are equal to NaN and unequal to any other value.\n\t * \n\t * Parameters:\n\t * \n\t * a - First object to be compared.\n\t * b - Second object to be compared.\n\t */\n\tequalEntries: function(a, b)\n\t{\n\t\t// Counts keys in b to check if all values have been compared\n\t\tvar count = 0;\n\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var key in b)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tfor (var key in a)\n\t\t\t{\n\t\t\t\tcount--\n\t\t\t\t\n\t\t\t\tif ((!mxUtils.isNaN(a[key]) || !mxUtils.isNaN(b[key])) && a[key] != b[key])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn count == 0;\n\t},\n\t\n\t/**\n\t * Function: removeDuplicates\n\t * \n\t * Removes all duplicates from the given array.\n\t */\n\tremoveDuplicates: function(arr)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tif (!dict.get(arr[i]))\n\t\t\t{\n\t\t\t\tresult.push(arr[i]);\n\t\t\t\tdict.put(arr[i], true);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNaN\n\t *\n\t * Returns true if the given value is of type number and isNaN returns true.\n\t */\n\tisNaN: function(value)\n\t{\n\t\treturn typeof(value) == 'number' && isNaN(value);\n\t},\n\t\n\t/**\n\t * Function: extend\n\t *\n\t * Assigns a copy of the superclass prototype to the subclass prototype.\n\t * Note that this does not call the constructor of the superclass at this\n\t * point, the superclass constructor should be called explicitely in the\n\t * subclass constructor. Below is an example.\n\t * \n\t * (code)\n\t * MyGraph = function(container, model, renderHint, stylesheet)\n\t * {\n\t *   mxGraph.call(this, container, model, renderHint, stylesheet);\n\t * }\n\t * \n\t * mxUtils.extend(MyGraph, mxGraph);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * ctor - Constructor of the subclass.\n\t * superCtor - Constructor of the superclass.\n\t */\n\textend: function(ctor, superCtor)\n\t{\n\t\tvar f = function() {};\n\t\tf.prototype = superCtor.prototype;\n\t\t\n\t\tctor.prototype = new f();\n\t\tctor.prototype.constructor = ctor;\n\t},\n\n\t/**\n\t * Function: toString\n\t * \n\t * Returns a textual representation of the specified object.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to return the string representation for.\n\t */\n\ttoString: function(obj)\n\t{\n\t    var output = '';\n\t    \n\t    for (var i in obj)\n\t    {\n\t    \ttry\n\t    \t{\n\t\t\t    if (obj[i] == null)\n\t\t\t    {\n\t\t            output += i + ' = [null]\\n';\n\t\t\t    }\n\t\t\t    else if (typeof(obj[i]) == 'function')\n\t\t\t    {\n\t\t            output += i + ' => [Function]\\n';\n\t\t        }\n\t\t        else if (typeof(obj[i]) == 'object')\n\t\t        {\n\t\t        \tvar ctor = mxUtils.getFunctionName(obj[i].constructor); \n\t\t            output += i + ' => [' + ctor + ']\\n';\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            output += i + ' = ' + obj[i] + '\\n';\n\t\t        }\n\t    \t}\n\t    \tcatch (e)\n\t    \t{\n\t    \t\toutput += i + '=' + e.message;\n\t    \t}\n\t    }\n\t    \n\t    return output;\n\t},\n\n\t/**\n\t * Function: toRadians\n\t * \n\t * Converts the given degree to radians.\n\t */\n\ttoRadians: function(deg)\n\t{\n\t\treturn Math.PI * deg / 180;\n\t},\n\n\t/**\n\t * Function: toDegree\n\t * \n\t * Converts the given radians to degree.\n\t */\n\ttoDegree: function(rad)\n\t{\n\t\treturn rad * 180 / Math.PI;\n\t},\n\t\n\t/**\n\t * Function: arcToCurves\n\t * \n\t * Converts the given arc to a series of curves.\n\t */\n\tarcToCurves: function(x0, y0, r1, r2, angle, largeArcFlag, sweepFlag, x, y)\n\t{\n\t\tx -= x0;\n\t\ty -= y0;\n\t\t\n        if (r1 === 0 || r2 === 0) \n        {\n        \treturn result;\n        }\n        \n        var fS = sweepFlag;\n        var psai = angle;\n        r1 = Math.abs(r1);\n        r2 = Math.abs(r2);\n        var ctx = -x / 2;\n        var cty = -y / 2;\n        var cpsi = Math.cos(psai * Math.PI / 180);\n        var spsi = Math.sin(psai * Math.PI / 180);\n        var rxd = cpsi * ctx + spsi * cty;\n        var ryd = -1 * spsi * ctx + cpsi * cty;\n        var rxdd = rxd * rxd;\n        var rydd = ryd * ryd;\n        var r1x = r1 * r1;\n        var r2y = r2 * r2;\n        var lamda = rxdd / r1x + rydd / r2y;\n        var sds;\n        \n        if (lamda > 1) \n        {\n        \tr1 = Math.sqrt(lamda) * r1;\n        \tr2 = Math.sqrt(lamda) * r2;\n        \tsds = 0;\n        }  \n        else\n        {\n        \tvar seif = 1;\n            \n        \tif (largeArcFlag === fS) \n        \t{\n        \t\tseif = -1;\n        \t}\n            \n        \tsds = seif * Math.sqrt((r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd));\n        }\n        \n        var txd = sds * r1 * ryd / r2;\n        var tyd = -1 * sds * r2 * rxd / r1;\n        var tx = cpsi * txd - spsi * tyd + x / 2;\n        var ty = spsi * txd + cpsi * tyd + y / 2;\n        var rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);\n        var s1 = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        rad = Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) - Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);\n        var dr = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        \n        if (fS == 0 && dr > 0) \n        {\n        \tdr -= 2 * Math.PI;\n        }\n        else if (fS != 0 && dr < 0) \n        {\n        \tdr += 2 * Math.PI;\n        }\n        \n        var sse = dr * 2 / Math.PI;\n        var seg = Math.ceil(sse < 0 ? -1 * sse : sse);\n        var segr = dr / seg;\n        var t = 8/3 * Math.sin(segr / 4) * Math.sin(segr / 4) / Math.sin(segr / 2);\n        var cpsir1 = cpsi * r1;\n        var cpsir2 = cpsi * r2;\n        var spsir1 = spsi * r1;\n        var spsir2 = spsi * r2;\n        var mc = Math.cos(s1);\n        var ms = Math.sin(s1);\n        var x2 = -t * (cpsir1 * ms + spsir2 * mc);\n        var y2 = -t * (spsir1 * ms - cpsir2 * mc);\n        var x3 = 0;\n        var y3 = 0;\n\n\t\tvar result = [];\n        \n        for (var n = 0; n < seg; ++n) \n        {\n            s1 += segr;\n            mc = Math.cos(s1);\n            ms = Math.sin(s1);\n            \n            x3 = cpsir1 * mc - spsir2 * ms + tx;\n            y3 = spsir1 * mc + cpsir2 * ms + ty;\n            var dx = -t * (cpsir1 * ms + spsir2 * mc);\n            var dy = -t * (spsir1 * ms - cpsir2 * mc);\n            \n            // CurveTo updates x0, y0 so need to restore it\n            var index = n * 6;\n            result[index] = Number(x2 + x0);\n            result[index + 1] = Number(y2 + y0);\n            result[index + 2] = Number(x3 - dx + x0);\n            result[index + 3] = Number(y3 - dy + y0);\n            result[index + 4] = Number(x3 + x0);\n            result[index + 5] = Number(y3 + y0);\n            \n\t\t\tx2 = x3 + dx;\n            y2 = y3 + dy;\n        }\n        \n        return result;\n\t},\n\n\t/**\n\t * Function: getBoundingBox\n\t * \n\t * Returns the bounding box for the rotated rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * rect - <mxRectangle> to be rotated.\n\t * angle - Number that represents the angle (in degrees).\n\t * cx - Optional <mxPoint> that represents the rotation center. If no\n\t * rotation center is given then the center of rect is used.\n\t */\n\tgetBoundingBox: function(rect, rotation, cx)\n\t{\n        var result = null;\n\n        if (rect != null && rotation != null && rotation != 0)\n        {\n            var rad = mxUtils.toRadians(rotation);\n            var cos = Math.cos(rad);\n            var sin = Math.sin(rad);\n\n            cx = (cx != null) ? cx : new mxPoint(rect.x + rect.width / 2, rect.y + rect.height / 2);\n\n            var p1 = new mxPoint(rect.x, rect.y);\n            var p2 = new mxPoint(rect.x + rect.width, rect.y);\n            var p3 = new mxPoint(p2.x, rect.y + rect.height);\n            var p4 = new mxPoint(rect.x, p3.y);\n\n            p1 = mxUtils.getRotatedPoint(p1, cos, sin, cx);\n            p2 = mxUtils.getRotatedPoint(p2, cos, sin, cx);\n            p3 = mxUtils.getRotatedPoint(p3, cos, sin, cx);\n            p4 = mxUtils.getRotatedPoint(p4, cos, sin, cx);\n\n            result = new mxRectangle(p1.x, p1.y, 0, 0);\n            result.add(new mxRectangle(p2.x, p2.y, 0, 0));\n            result.add(new mxRectangle(p3.x, p3.y, 0, 0));\n            result.add(new mxRectangle(p4.x, p4.y, 0, 0));\n        }\n\n        return result;\n\t},\n\n\t/**\n\t * Function: getRotatedPoint\n\t * \n\t * Rotates the given point by the given cos and sin.\n\t */\n\tgetRotatedPoint: function(pt, cos, sin, c)\n\t{\n\t\tc = (c != null) ? c : new mxPoint();\n\t\tvar x = pt.x - c.x;\n\t\tvar y = pt.y - c.y;\n\n\t\tvar x1 = x * cos - y * sin;\n\t\tvar y1 = y * cos + x * sin;\n\n\t\treturn new mxPoint(x1 + c.x, y1 + c.y);\n\t},\n\t\n\t/**\n\t * Returns an integer mask of the port constraints of the given map\n\t * @param dict the style map to determine the port constraints for\n\t * @param defaultValue Default value to return if the key is undefined.\n\t * @return the mask of port constraint directions\n\t * \n\t * Parameters:\n\t * \n\t * terminal - <mxCelState> that represents the terminal.\n\t * edge - <mxCellState> that represents the edge.\n\t * source - Boolean that specifies if the terminal is the source terminal.\n\t * defaultValue - Default value to be returned.\n\t */\n\tgetPortConstraints: function(terminal, edge, source, defaultValue)\n\t{\n\t\tvar value = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT,\n\t\t\tmxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_SOURCE_PORT_CONSTRAINT :\n\t\t\t\tmxConstants.STYLE_TARGET_PORT_CONSTRAINT, null));\n\t\t\n\t\tif (value == null)\n\t\t{\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar directions = value.toString();\n\t\t\tvar returnValue = mxConstants.DIRECTION_MASK_NONE;\n\t\t\tvar constraintRotationEnabled = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT_ROTATION, 0);\n\t\t\tvar rotation = 0;\n\t\t\t\n\t\t\tif (constraintRotationEnabled == 1)\n\t\t\t{\n\t\t\t\trotation = mxUtils.getValue(terminal.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tvar quad = 0;\n\n\t\t\tif (rotation > 45)\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t\t\n\t\t\t\tif (rotation >= 135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (rotation < -45)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\tif (rotation <= -135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_NORTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_WEST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_SOUTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_EAST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: reversePortConstraints\n\t * \n\t * Reverse the port constraint bitmask. For example, north | east\n\t * becomes south | west\n\t */\n\treversePortConstraints: function(constraint)\n\t{\n\t\tvar result = 0;\n\t\t\n\t\tresult = (constraint & mxConstants.DIRECTION_MASK_WEST) << 3;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_NORTH) << 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_SOUTH) >> 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_EAST) >> 3;\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNearestSegment\n\t * \n\t * Finds the index of the nearest segment on the given cell state for\n\t * the specified coordinate pair.\n\t */\n\tfindNearestSegment: function(state, x, y)\n\t{\n\t\tvar index = -1;\n\t\t\n\t\tif (state.absolutePoints.length > 0)\n\t\t{\n\t\t\tvar last = state.absolutePoints[0];\n\t\t\tvar min = null;\n\t\t\t\n\t\t\tfor (var i = 1; i < state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tvar current = state.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(last.x, last.y,\n\t\t\t\t\tcurrent.x, current.y, x, y);\n\t\t\t\t\n\t\t\t\tif (min == null || dist < min)\n\t\t\t\t{\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t}\n\n\t\t\t\tlast = current;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn index;\n\t},\n\n\t/**\n\t * Function: getDirectedBounds\n\t * \n\t * Adds the given margins to the given rectangle and rotates and flips the\n\t * rectangle according to the respective styles in style.\n\t */\n\tgetDirectedBounds: function (rect, m, style, flipH, flipV)\n\t{\n\t\tvar d = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\tflipH = (flipH != null) ? flipH : mxUtils.getValue(style, mxConstants.STYLE_FLIPH, false);\n\t\tflipV = (flipV != null) ? flipV : mxUtils.getValue(style, mxConstants.STYLE_FLIPV, false);\n\n\t\tm.x = Math.round(Math.max(0, Math.min(rect.width, m.x)));\n\t\tm.y = Math.round(Math.max(0, Math.min(rect.height, m.y)));\n\t\tm.width = Math.round(Math.max(0, Math.min(rect.width, m.width)));\n\t\tm.height = Math.round(Math.max(0, Math.min(rect.height, m.height)));\n\t\t\n\t\tif ((flipV && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipH && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.width;\n\t\t\tm.width = tmp;\n\t\t}\n\t\t\t\n\t\tif ((flipH && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipV && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.y;\n\t\t\tm.y = m.height;\n\t\t\tm.height = tmp;\n\t\t}\n\t\t\n\t\tvar m2 = mxRectangle.fromRectangle(m);\n\t\t\n\t\tif (d == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tm2.y = m.x;\n\t\t\tm2.x = m.height;\n\t\t\tm2.width = m.y;\n\t\t\tm2.height = m.width;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tm2.y = m.height;\n\t\t\tm2.x = m.width;\n\t\t\tm2.width = m.x;\n\t\t\tm2.height = m.y;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tm2.y = m.width;\n\t\t\tm2.x = m.y;\n\t\t\tm2.width = m.height;\n\t\t\tm2.height = m.x;\n\t\t}\n\t\t\n\t\treturn new mxRectangle(rect.x + m2.x, rect.y + m2.y, rect.width - m2.width - m2.x, rect.height - m2.height - m2.y);\n\t},\n\n\t/**\n\t * Function: getPerimeterPoint\n\t * \n\t * Returns the intersection between the polygon defined by the array of\n\t * points and the line between center and point.\n\t */\n\tgetPerimeterPoint: function (pts, center, point)\n\t{\n\t\tvar min = null;\n\t\t\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tvar pt = mxUtils.intersection(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y,\n\t\t\t\tcenter.x, center.y, point.x, point.y);\n\t\t\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar dx = point.x - pt.x;\n\t\t\t\tvar dy = point.y - pt.y;\n\t\t\t\tvar ip = {p: pt, distSq: dy * dy + dx * dx};\n\t\t\t\t\n\t\t\t\tif (ip != null && (min == null || min.distSq > ip.distSq))\n\t\t\t\t{\n\t\t\t\t\tmin = ip;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (min != null) ? min.p : null;\n\t},\n\n\t/**\n\t * Function: rectangleIntersectsSegment\n\t * \n\t * Returns true if the given rectangle intersects the given segment.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the rectangle.\n\t * p1 - <mxPoint> that represents the first point of the segment.\n\t * p2 - <mxPoint> that represents the second point of the segment.\n\t */\n\trectangleIntersectsSegment: function(bounds, p1, p2)\n\t{\n\t\tvar top = bounds.y;\n\t\tvar left = bounds.x;\n\t\tvar bottom = top + bounds.height;\n\t\tvar right = left + bounds.width;\n\t\t\t\n\t\t// Find min and max X for the segment\n\t\tvar minX = p1.x;\n\t\tvar maxX = p2.x;\n\t\t\n\t\tif (p1.x > p2.x)\n\t\t{\n\t\t  minX = p2.x;\n\t\t  maxX = p1.x;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's x-projections\n\t\tif (maxX > right)\n\t\t{\n\t\t  maxX = right;\n\t\t}\n\t\t\n\t\tif (minX < left)\n\t\t{\n\t\t  minX = left;\n\t\t}\n\t\t\n\t\tif (minX > maxX) // If their projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\t// Find corresponding min and max Y for min and max X we found before\n\t\tvar minY = p1.y;\n\t\tvar maxY = p2.y;\n\t\tvar dx = p2.x - p1.x;\n\t\t\n\t\tif (Math.abs(dx) > 0.0000001)\n\t\t{\n\t\t  var a = (p2.y - p1.y) / dx;\n\t\t  var b = p1.y - a * p1.x;\n\t\t  minY = a * minX + b;\n\t\t  maxY = a * maxX + b;\n\t\t}\n\t\t\n\t\tif (minY > maxY)\n\t\t{\n\t\t  var tmp = maxY;\n\t\t  maxY = minY;\n\t\t  minY = tmp;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's y-projections\n\t\tif (maxY > bottom)\n\t\t{\n\t\t  maxY = bottom;\n\t\t}\n\t\t\n\t\tif (minY < top)\n\t\t{\n\t\t  minY = top;\n\t\t}\n\t\t\n\t\tif (minY > maxY) // If Y-projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\t\n\t/**\n\t * Function: contains\n\t * \n\t * Returns true if the specified point (x, y) is contained in the given rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the area.\n\t * x - X-coordinate of the point.\n\t * y - Y-coordinate of the point.\n\t */\n\tcontains: function(bounds, x, y)\n\t{\n\t\treturn (bounds.x <= x && bounds.x + bounds.width >= x &&\n\t\t\t\tbounds.y <= y && bounds.y + bounds.height >= y);\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersects: function(a, b)\n\t{\n\t\tvar tw = a.width;\n\t\tvar th = a.height;\n\t\tvar rw = b.width;\n\t\tvar rh = b.height;\n\t\t\n\t\tif (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0)\n\t\t{\n\t\t    return false;\n\t\t}\n\t\t\n\t\tvar tx = a.x;\n\t\tvar ty = a.y;\n\t\tvar rx = b.x;\n\t\tvar ry = b.y;\n\t\t\n\t\trw += rx;\n\t\trh += ry;\n\t\ttw += tx;\n\t\tth += ty;\n\n\t\treturn ((rw < rx || rw > tx) &&\n\t\t\t(rh < ry || rh > ty) &&\n\t\t\t(tw < tx || tw > rx) &&\n\t\t\t(th < ty || th > ry));\n\t},\n\n\t/**\n\t * Function: intersectsHotspot\n\t * \n\t * Returns true if the state and the hotspot intersect.\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState>\n\t * x - X-coordinate.\n\t * y - Y-coordinate.\n\t * hotspot - Optional size of the hostpot.\n\t * min - Optional min size of the hostpot.\n\t * max - Optional max size of the hostpot.\n\t */\n\tintersectsHotspot: function(state, x, y, hotspot, min, max)\n\t{\n\t\thotspot = (hotspot != null) ? hotspot : 1;\n\t\tmin = (min != null) ? min : 0;\n\t\tmax = (max != null) ? max : 0;\n\t\t\n\t\tif (hotspot > 0)\n\t\t{\n\t\t\tvar cx = state.getCenterX();\n\t\t\tvar cy = state.getCenterY();\n\t\t\tvar w = state.width;\n\t\t\tvar h = state.height;\n\t\t\t\n\t\t\tvar start = mxUtils.getValue(state.style, mxConstants.STYLE_STARTSIZE) * state.view.scale;\n\n\t\t\tif (start > 0)\n\t\t\t{\n\t\t\t\tif (mxUtils.getValue(state.style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tcy = state.y + start / 2;\n\t\t\t\t\th = start;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcx = state.x + start / 2;\n\t\t\t\t\tw = start;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw = Math.max(min, w * hotspot);\n\t\t\th = Math.max(min, h * hotspot);\n\t\t\t\n\t\t\tif (max > 0)\n\t\t\t{\n\t\t\t\tw = Math.min(w, max);\n\t\t\t\th = Math.min(h, max);\n\t\t\t}\n\t\t\t\n\t\t\tvar rect = new mxRectangle(cx - w / 2, cy - h / 2, w, h);\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\treturn mxUtils.contains(rect, x, y);\t\t\t\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getOffset\n\t * \n\t * Returns the offset for the specified container as an <mxPoint>. The\n\t * offset is the distance from the top left corner of the container to the\n\t * top left corner of the document.\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to return the offset for.\n\t * scollOffset - Optional boolean to add the scroll offset of the document.\n\t * Default is false.\n\t */\n\tgetOffset: function(container, scrollOffset)\n\t{\n\t\tvar offsetLeft = 0;\n\t\tvar offsetTop = 0;\n\t\t\n\t\t// Ignores document scroll origin for fixed elements\n\t\tvar fixed = false;\n\t\tvar node = container;\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\n\t\twhile (node != null && node != b && node != d && !fixed)\n\t\t{\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tif (!scrollOffset && !fixed)\n\t\t{\n\t\t\tvar offset = mxUtils.getDocumentScrollOrigin(container.ownerDocument);\n\t\t\toffsetLeft += offset.x;\n\t\t\toffsetTop += offset.y;\n\t\t}\n\t\t\n\t\tvar r = container.getBoundingClientRect();\n\t\t\n\t\tif (r != null)\n\t\t{\n\t\t\toffsetLeft += r.left;\n\t\t\toffsetTop += r.top;\n\t\t}\n\t\t\n\t\treturn new mxPoint(offsetLeft, offsetTop);\n\t},\n\n\t/**\n\t * Function: getDocumentScrollOrigin\n\t * \n\t * Returns the scroll origin of the given document or the current document\n\t * if no document is given.\n\t */\n\tgetDocumentScrollOrigin: function(doc)\n\t{\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\treturn new mxPoint(doc.body.scrollLeft, doc.body.scrollTop);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar wnd = doc.defaultView || doc.parentWindow;\n\t\t\t\n\t\t\tvar x = (wnd != null && window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;\n\t\t\tvar y = (wnd != null && window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getScrollOrigin\n\t * \n\t * Returns the top, left corner of the viewrect as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose scroll origin should be returned.\n\t * includeAncestors - Whether the scroll origin of the ancestors should be\n\t * included. Default is false.\n\t * includeDocument - Whether the scroll origin of the document should be\n\t * included. Default is true.\n\t */\n\tgetScrollOrigin: function(node, includeAncestors, includeDocument)\n\t{\n\t\tincludeAncestors = (includeAncestors != null) ? includeAncestors : false;\n\t\tincludeDocument = (includeDocument != null) ? includeDocument : true;\n\t\t\n\t\tvar doc = (node != null) ? node.ownerDocument : document;\n\t\tvar b = doc.body;\n\t\tvar d = doc.documentElement;\n\t\tvar result = new mxPoint();\n\t\tvar fixed = false;\n\n\t\twhile (node != null && node != b && node != d)\n\t\t{\n\t\t\tif (!isNaN(node.scrollLeft) && !isNaN(node.scrollTop))\n\t\t\t{\n\t\t\t\tresult.x += node.scrollLeft;\n\t\t\t\tresult.y += node.scrollTop;\n\t\t\t}\n\t\t\t\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\n\t\t\tnode = (includeAncestors) ? node.parentNode : null;\n\t\t}\n\n\t\tif (!fixed && includeDocument)\n\t\t{\n\t\t\tvar origin = mxUtils.getDocumentScrollOrigin(doc);\n\n\t\t\tresult.x += origin.x;\n\t\t\tresult.y += origin.y;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: convertPoint\n\t * \n\t * Converts the specified point (x, y) using the offset of the specified\n\t * container and returns a new <mxPoint> with the result.\n\t * \n\t * (code)\n\t * var pt = mxUtils.convertPoint(graph.container,\n\t *   mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to use for the offset.\n\t * x - X-coordinate of the point to be converted.\n\t * y - Y-coordinate of the point to be converted.\n\t */\n\tconvertPoint: function(container, x, y)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(container, false);\n\t\tvar offset = mxUtils.getOffset(container);\n\n\t\toffset.x -= origin.x;\n\t\toffset.y -= origin.y;\n\t\t\n\t\treturn new mxPoint(x - offset.x, y - offset.y);\n\t},\n\t\n\t/**\n\t * Function: ltrim\n\t * \n\t * Strips all whitespaces from the beginning of the string. Without the\n\t * second parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\tltrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"^[\" + chars + \"]+\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: rtrim\n\t * \n\t * Strips all whitespaces from the end of the string. Without the second\n\t * parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\trtrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"[\" + chars + \"]+$\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: trim\n\t * \n\t * Strips all whitespaces from both end of the string.\n\t * Without the second parameter, Javascript function will trim these\n\t * characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\ttrim: function(str, chars)\n\t{\n\t\treturn mxUtils.ltrim(mxUtils.rtrim(str, chars), chars);\n\t},\n\t\n\t/**\n\t * Function: isNumeric\n\t * \n\t * Returns true if the specified value is numeric, that is, if it is not\n\t * null, not an empty string, not a HEX number and isNaN returns false.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisNumeric: function(n)\n\t{\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n) && (typeof(n) != 'string' || n.toLowerCase().indexOf('0x') < 0);\n\t},\n\n\t/**\n\t * Function: isInteger\n\t * \n\t * Returns true if the given value is an valid integer number.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisInteger: function(n)\n\t{\n\t\treturn String(parseInt(n)) === String(n);\n\t},\n\n\t/**\n\t * Function: mod\n\t * \n\t * Returns the remainder of division of n by m. You should use this instead\n\t * of the built-in operation as the built-in operation does not properly\n\t * handle negative numbers.\n\t */\n\tmod: function(n, m)\n\t{\n\t\treturn ((n % m) + m) % m;\n\t},\n\n\t/**\n\t * Function: intersection\n\t * \n\t * Returns the intersection of two lines as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * x0 - X-coordinate of the first line's startpoint.\n\t * y0 - X-coordinate of the first line's startpoint.\n\t * x1 - X-coordinate of the first line's endpoint.\n\t * y1 - Y-coordinate of the first line's endpoint.\n\t * x2 - X-coordinate of the second line's startpoint.\n\t * y2 - Y-coordinate of the second line's startpoint.\n\t * x3 - X-coordinate of the second line's endpoint.\n\t * y3 - Y-coordinate of the second line's endpoint.\n\t */\n\tintersection: function (x0, y0, x1, y1, x2, y2, x3, y3)\n\t{\n\t\tvar denom = ((y3 - y2) * (x1 - x0)) - ((x3 - x2) * (y1 - y0));\n\t\tvar nume_a = ((x3 - x2) * (y0 - y2)) - ((y3 - y2) * (x0 - x2));\n\t\tvar nume_b = ((x1 - x0) * (y0 - y2)) - ((y1 - y0) * (x0 - x2));\n\n\t\tvar ua = nume_a / denom;\n\t\tvar ub = nume_b / denom;\n\t\t\n\t\tif(ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0)\n\t\t{\n\t\t\t// Get the intersection point\n\t\t\tvar x = x0 + ua * (x1 - x0);\n\t\t\tvar y = y0 + ua * (y1 - y0);\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t\t\n\t\t// No intersection\n\t\treturn null;\n\t},\n\t\n\t/**\n\t * Function: ptSegDistSq\n\t * \n\t * Returns the square distance between a segment and a point. To get the\n\t * distance between a point and a line (with infinite length) use\n\t * <mxUtils.ptLineDist>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\tptSegDistSq: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\n\t\tpx -= x1;\n\t\tpy -= y1;\n\n\t\tvar dotprod = px * x2 + py * y2;\n\t\tvar projlenSq;\n\n\t\tif (dotprod <= 0.0)\n\t\t{\n\t\t    projlenSq = 0.0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    px = x2 - px;\n\t\t    py = y2 - py;\n\t\t    dotprod = px * x2 + py * y2;\n\n\t\t    if (dotprod <= 0.0)\n\t\t    {\n\t\t\t\tprojlenSq = 0.0;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\t\tprojlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);\n\t\t    }\n\t\t}\n\n\t\tvar lenSq = px * px + py * py - projlenSq;\n\t\t\n\t\tif (lenSq < 0)\n\t\t{\n\t\t    lenSq = 0;\n\t\t}\n\t\t\n\t\treturn lenSq;\n    },\n\t\n\t/**\n\t * Function: ptLineDist\n\t * \n\t * Returns the distance between a line defined by two points and a point.\n\t * To get the distance between a point and a segment (with a specific\n\t * length) use <mxUtils.ptSeqDistSq>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of point 1 of the line.\n\t * y1 - Y-coordinate of point 1 of the line.\n\t * x2 - X-coordinate of point 1 of the line.\n\t * y2 - Y-coordinate of point 1 of the line.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n    ptLineDist: function(x1, y1, x2, y2, px, py)\n    {\n\t\treturn Math.abs((y2 - y1) * px - (x2 - x1) * py + x2 * y1 - y2 * x1) /\n\t\t\tMath.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n    },\n    \t\n\t/**\n\t * Function: relativeCcw\n\t * \n\t * Returns 1 if the given point on the right side of the segment, 0 if its\n\t * on the segment, and -1 if the point is on the left side of the segment.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\trelativeCcw: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\t\tpx -= x1;\n\t\tpy -= y1;\n\t\tvar ccw = px * y2 - py * x2;\n\t\t\n\t\tif (ccw == 0.0)\n\t\t{\n\t\t    ccw = px * x2 + py * y2;\n\t\t    \n\t\t    if (ccw > 0.0)\n\t\t    {\n\t\t\t\tpx -= x2;\n\t\t\t\tpy -= y2;\n\t\t\t\tccw = px * x2 + py * y2;\n\t\t\t\t\n\t\t\t\tif (ccw < 0.0)\n\t\t\t\t{\n\t\t\t\t    ccw = 0.0;\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t\treturn (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);\n    },\n    \n\t/**\n\t * Function: animateChanges\n\t * \n\t * See <mxEffects.animateChanges>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tanimateChanges: function(graph, changes)\n\t{\n\t\t// LATER: Deprecated, remove this function\n    \tmxEffects.animateChanges.apply(this, arguments);\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * See <mxEffects.cascadeOpacity>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\tmxEffects.cascadeOpacity.apply(this, arguments);\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * See <mxEffects.fadeOut>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tmxEffects.fadeOut.apply(this, arguments);\n\t},\n\t\n\t/**\n\t * Function: setOpacity\n\t * \n\t * Sets the opacity of the specified DOM node to the given value in %.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the opacity for.\n\t * value - Opacity in %. Possible values are between 0 and 100.\n\t */\n\tsetOpacity: function(node, value)\n\t{\n\t\tif (mxUtils.isVml(node))\n\t\t{\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\t// TODO: Why is the division by 5 needed in VML?\n\t\t\t    node.style.filter = 'alpha(opacity=' + (value/5) + ')';\n\t    \t}\n\t\t}\n\t\telse if (mxClient.IS_IE && (typeof(document.documentMode) === 'undefined' || document.documentMode < 9))\n\t    {\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t\t\t    node.style.filter = 'alpha(opacity=' + value + ')';\n\t    \t}\n\t\t}\n\t\telse\n\t\t{\n\t\t    node.style.opacity = (value / 100);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createImage\n\t * \n\t * Creates and returns an image (IMG node) or VML image (v:image) in IE6 in\n\t * quirks mode.\n\t * \n\t * Parameters:\n\t * \n\t * src - URL that points to the image to be displayed.\n\t */\n\tcreateImage: function(src)\n\t{\n        var imageNode = null;\n        \n\t\tif (mxClient.IS_IE6 && document.compatMode != 'CSS1Compat')\n\t\t{\n        \timageNode = document.createElement(mxClient.VML_PREFIX + ':image');\n        \timageNode.setAttribute('src', src);\n        \timageNode.style.borderStyle = 'none';\n        }\n\t\telse\n\t\t{\n\t\t\timageNode = document.createElement('img');\n\t\t\timageNode.setAttribute('src', src);\n\t\t\timageNode.setAttribute('border', '0');\n\t\t}\n\t\t\n\t\treturn imageNode;\n\t},\n\n\t/**\n\t * Function: sortCells\n\t * \n\t * Sorts the given cells according to the order in the cell hierarchy.\n\t * Ascending is optional and defaults to true.\n\t */\n\tsortCells: function(cells, ascending)\n\t{\n\t\tascending = (ascending != null) ? ascending : true;\n\t\tvar lookup = new mxDictionary();\n\t\tcells.sort(function(o1, o2)\n\t\t{\n\t\t\tvar p1 = lookup.get(o1);\n\t\t\t\n\t\t\tif (p1 == null)\n\t\t\t{\n\t\t\t\tp1 = mxCellPath.create(o1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o1, p1);\n\t\t\t}\n\t\t\t\n\t\t\tvar p2 = lookup.get(o2);\n\t\t\t\n\t\t\tif (p2 == null)\n\t\t\t{\n\t\t\t\tp2 = mxCellPath.create(o2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o2, p2);\n\t\t\t}\n\t\t\t\n\t\t\tvar comp = mxCellPath.compare(p1, p2);\n\t\t\t\n\t\t\treturn (comp == 0) ? 0 : (((comp > 0) == ascending) ? 1 : -1);\n\t\t});\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: getStylename\n\t * \n\t * Returns the stylename in a style of the form [(stylename|key=value);] or\n\t * an empty string if the given style does not contain a stylename.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylename: function(style)\n\t{\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\tvar stylename = pairs[0];\n\t\t\t\n\t\t\tif (stylename.indexOf('=') < 0)\n\t\t\t{\n\t\t\t\treturn stylename;\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn '';\n\t},\n\n\t/**\n\t * Function: getStylenames\n\t * \n\t * Returns the stylenames in a style of the form [(stylename|key=value);]\n\t * or an empty array if the given style does not contain any stylenames.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < pairs.length; i++)\n\t\t\t{\n\t\t\t\tif (pairs[i].indexOf('=') < 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(pairs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: indexOfStylename\n\t * \n\t * Returns the index of the given stylename in the given style. This\n\t * returns -1 if the given stylename does not occur (as a stylename) in the\n\t * given style, otherwise it returns the index of the first character.\n\t */\n\tindexOfStylename: function(style, stylename)\n\t{\n\t\tif (style != null && stylename != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\tvar pos = 0;\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] == stylename)\n\t\t\t\t{\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpos += tokens[i].length + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\t\n\t/**\n\t * Function: addStylename\n\t * \n\t * Adds the specified stylename to the given style if it does not already\n\t * contain the stylename.\n\t */\n\taddStylename: function(style, stylename)\n\t{\n\t\tif (mxUtils.indexOfStylename(style, stylename) < 0)\n\t\t{\n\t\t\tif (style == null)\n\t\t\t{\n\t\t\t\tstyle = '';\n\t\t\t}\n\t\t\telse if (style.length > 0 && style.charAt(style.length - 1) != ';')\n\t\t\t{\n\t\t\t\tstyle += ';';\n\t\t\t}\n\t\t\t\n\t\t\tstyle += stylename;\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: removeStylename\n\t * \n\t * Removes all occurrences of the specified stylename in the given style\n\t * and returns the updated style. Trailing semicolons are not preserved.\n\t */\n\tremoveStylename: function(style, stylename)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] != stylename)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\t\n\t/**\n\t * Function: removeAllStylenames\n\t * \n\t * Removes all stylenames from the given style and returns the updated\n\t * style.\n\t */\n\tremoveAllStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\t// Keeps the key, value assignments\n\t\t\t\tif (tokens[i].indexOf('=') >= 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\n\t/**\n\t * Function: setCellStyles\n\t * \n\t * Assigns the value for the given key in the styles of the given cells, or\n\t * removes the key from the styles if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> to execute the transaction in.\n\t * cells - Array of <mxCells> to be updated.\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetCellStyles: function(model, cells, key, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyle(model.getStyle(cells[i]), key, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyle\n\t * \n\t * Adds or removes the given key, value pair to the style and returns the\n\t * new style. If value is null or zero length then the key is removed from\n\t * the style. This is for cell styles, not for CSS styles.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetStyle: function(style, key, value)\n\t{\n\t\tvar isValue = value != null && (typeof(value.length) == 'undefined' || value.length > 0);\n\t\t\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (isValue)\n\t\t\t{\n\t\t\t\tstyle = key + '=' + value + ';';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (style.substring(0, key.length + 1) == key + '=')\n\t\t\t{\n\t\t\t\tvar next = style.indexOf(';');\n\t\t\t\t\n\t\t\t\tif (isValue)\n\t\t\t\t{\n\t\t\t\t\tstyle = key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = (next < 0 || next == style.length - 1) ? '' : style.substring(next + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar index = style.indexOf(';' + key + '=');\n\t\t\t\t\n\t\t\t\tif (index < 0)\n\t\t\t\t{\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sep = (style.charAt(style.length - 1) == ';') ? '' : ';';\n\t\t\t\t\t\tstyle = style + sep + key + '=' + value + ';';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar next = style.indexOf(';', index + 1);\n\t\t\t\t\t\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index + 1) + key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index) + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\n\t/**\n\t * Function: setCellStyleFlags\n\t * \n\t * Sets or toggles the flag bit for the given key in the cell's styles.\n\t * If value is null then the flag is toggled.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var cells = graph.getSelectionCells();\n\t * mxUtils.setCellStyleFlags(graph.model,\n\t * \t\t\tcells,\n\t * \t\t\tmxConstants.STYLE_FONTSTYLE,\n\t * \t\t\tmxConstants.FONT_BOLD);\n\t * (end)\n\t * \n\t * Toggles the bold font style.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> that contains the cells.\n\t * cells - Array of <mxCells> to change the style for.\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the flag.\n\t */\n\tsetCellStyleFlags: function(model, cells, key, flag, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyleFlag(\n\t\t\t\t\t\t\tmodel.getStyle(cells[i]),\n\t\t\t\t\t\t\tkey, flag, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyleFlag\n\t * \n\t * Sets or removes the given key from the specified style and returns the\n\t * new style. If value is null then the flag is toggled.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the given flag.\n\t */\n\tsetStyleFlag: function(style, key, flag, value)\n\t{\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (value || value == null)\n\t\t\t{\n\t\t\t\tstyle = key+'='+flag;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle = key+'=0';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar index = style.indexOf(key+'=');\n\t\t\t\n\t\t\tif (index < 0)\n\t\t\t{\n\t\t\t\tvar sep = (style.charAt(style.length-1) == ';') ? '' : ';';\n\n\t\t\t\tif (value || value == null)\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=' + flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=0';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar cont = style.indexOf(';', index);\n\t\t\t\tvar tmp = '';\n\t\t\t\t\n\t\t\t\tif (cont < 0)\n\t\t\t\t{\n\t\t\t\t\ttmp  = style.substring(index+key.length+1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = style.substring(index+key.length+1, cont);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value == null)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) ^ flag;\n\t\t\t\t}\n\t\t\t\telse if (value)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) | flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) & ~flag;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstyle = style.substring(0, index) + key + '=' + tmp +\n\t\t\t\t\t((cont >= 0) ? style.substring(cont) : '');\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: getAlignmentAsPoint\n\t * \n\t * Returns an <mxPoint> that represents the horizontal and vertical alignment\n\t * for numeric computations. X is -0.5 for center, -1 for right and 0 for\n\t * left alignment. Y is -0.5 for middle, -1 for bottom and 0 for top\n\t * alignment. Default values for missing arguments is top, left.\n\t */\n\tgetAlignmentAsPoint: function(align, valign)\n\t{\n\t\tvar dx = -0.5;\n\t\tvar dy = -0.5;\n\t\t\n\t\t// Horizontal alignment\n\t\tif (align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx = -1;\n\t\t}\n\n\t\t// Vertical alignment\n\t\tif (valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy = -1;\n\t\t}\n\t\t\n\t\treturn new mxPoint(dx, dy);\n\t},\n\t\n\t/**\n\t * Function: getSizeForString\n\t * \n\t * Returns an <mxRectangle> with the size (width and height in pixels) of\n\t * the given string. The string may contain HTML markup. Newlines should be\n\t * converted to <br> before calling this method. The caller is responsible\n\t * for sanitizing the HTML markup.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var label = graph.getLabel(cell).replace(/\\n/g, \"<br>\");\n\t * var size = graph.getSizeForString(label);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * text - String whose size should be returned.\n\t * fontSize - Integer that specifies the font size in pixels. Default is\n\t * <mxConstants.DEFAULT_FONTSIZE>.\n\t * fontFamily - String that specifies the name of the font family. Default\n\t * is <mxConstants.DEFAULT_FONTFAMILY>.\n\t * textWidth - Optional width for text wrapping.\n\t * fontStyle - Optional font style.\n\t */\n\tgetSizeForString: function(text, fontSize, fontFamily, textWidth, fontStyle)\n\t{\n\t\tfontSize = (fontSize != null) ? fontSize : mxConstants.DEFAULT_FONTSIZE;\n\t\tfontFamily = (fontFamily != null) ? fontFamily : mxConstants.DEFAULT_FONTFAMILY;\n\t\tvar div = document.createElement('div');\n\t\t\n\t\t// Sets the font size and family\n\t\tdiv.style.fontFamily = fontFamily;\n\t\tdiv.style.fontSize = Math.round(fontSize) + 'px';\n\t\tdiv.style.lineHeight = Math.round(fontSize * mxConstants.LINE_HEIGHT) + 'px';\n\t\t\n\t\t// Sets the font style\n\t\tif (fontStyle != null)\n\t\t{\n\t\t\tif ((fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tvar txtDecor = [];\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t\t{\n\t\t\t\ttxtDecor.push('underline');\n\t\t\t}\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t\t{\n\t\t\t\ttxtDecor.push('line-through');\n\t\t\t}\n\t\t\t\n\t\t\tif (txtDecor.length > 0)\n\t\t\t{\n\t\t\t\tdiv.style.textDecoration = txtDecor.join(' ');\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Disables block layout and outside wrapping and hides the div\n\t\tdiv.style.position = 'absolute';\n\t\tdiv.style.visibility = 'hidden';\n\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tdiv.style.zoom = '1';\n\t\t\n\t\tif (textWidth != null)\n\t\t{\n\t\t\tdiv.style.width = textWidth + 'px';\n\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\t// Adds the text and inserts into DOM for updating of size\n\t\tdiv.innerHTML = text;\n\t\tdocument.body.appendChild(div);\n\t\t\n\t\t// Gets the size and removes from DOM\n\t\tvar size = new mxRectangle(0, 0, div.offsetWidth, div.offsetHeight);\n\t\tdocument.body.removeChild(div);\n\t\t\n\t\treturn size;\n\t},\n\t\n\t/**\n\t * Function: getViewXml\n\t */\n\tgetViewXml: function(graph, scale, cells, x0, y0)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\tscale = (scale != null) ? scale : 1;\n\n\t\tif (cells == null)\n\t\t{\n\t\t\tvar model = graph.getModel();\n\t\t\tcells = [model.getRoot()];\n\t\t}\n\t\t\n\t\tvar view = graph.getView();\n\t\tvar result = null;\n\n\t\t// Disables events on the view\n\t\tvar eventsEnabled = view.isEventsEnabled();\n\t\tview.setEventsEnabled(false);\n\n\t\t// Workaround for label bounds not taken into account for image export.\n\t\t// Creates a temporary draw pane which is used for rendering the text.\n\t\t// Text rendering is required for finding the bounds of the labels.\n\t\tvar drawPane = view.drawPane;\n\t\tvar overlayPane = view.overlayPane;\n\n\t\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tview.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.drawPane);\n\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tview.drawPane = view.drawPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.drawPane);\n\t\t\t\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = view.overlayPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\n\t\t// Resets the translation\n\t\tvar translate = view.getTranslate();\n\t\tview.translate = new mxPoint(x0, y0);\n\n\t\t// Creates the temporary cell states in the view\n\t\tvar temp = new mxTemporaryCellStates(graph.getView(), scale, cells);\n\n\t\ttry\n\t\t{\n\t\t\tvar enc = new mxCodec();\n\t\t\tresult = enc.encode(graph.getView());\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttemp.destroy();\n\t\t\tview.translate = translate;\n\t\t\tview.canvas.removeChild(view.drawPane);\n\t\t\tview.canvas.removeChild(view.overlayPane);\n\t\t\tview.drawPane = drawPane;\n\t\t\tview.overlayPane = overlayPane;\n\t\t\tview.setEventsEnabled(eventsEnabled);\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getScaleForPageCount\n\t * \n\t * Returns the scale to be used for printing the graph with the given\n\t * bounds across the specifies number of pages with the given format. The\n\t * scale is always computed such that it given the given amount or fewer\n\t * pages in the print output. See <mxPrintPreview> for an example.\n\t * \n\t * Parameters:\n\t * \n\t * pageCount - Specifies the number of pages in the print output.\n\t * graph - <mxGraph> that should be printed.\n\t * pageFormat - Optional <mxRectangle> that specifies the page format.\n\t * Default is <mxConstants.PAGE_FORMAT_A4_PORTRAIT>.\n\t * border - The border along each side of every page.\n\t */\n\tgetScaleForPageCount: function(pageCount, graph, pageFormat, border)\n\t{\n\t\tif (pageCount < 1)\n\t\t{\n\t\t\t// We can't work with less than 1 page, return no scale\n\t\t\t// change\n\t\t\treturn 1;\n\t\t}\n\t\t\n\t\tpageFormat = (pageFormat != null) ? pageFormat : mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\t\tborder = (border != null) ? border : 0;\n\t\t\n\t\tvar availablePageWidth = pageFormat.width - (border * 2);\n\t\tvar availablePageHeight = pageFormat.height - (border * 2);\n\n\t\t// Work out the number of pages required if the\n\t\t// graph is not scaled.\n\t\tvar graphBounds = graph.getGraphBounds().clone();\n\t\tvar sc = graph.getView().getScale();\n\t\tgraphBounds.width /= sc;\n\t\tgraphBounds.height /= sc;\n\t\tvar graphWidth = graphBounds.width;\n\t\tvar graphHeight = graphBounds.height;\n\n\t\tvar scale = 1;\n\t\t\n\t\t// The ratio of the width/height for each printer page\n\t\tvar pageFormatAspectRatio = availablePageWidth / availablePageHeight;\n\t\t// The ratio of the width/height for the graph to be printer\n\t\tvar graphAspectRatio = graphWidth / graphHeight;\n\t\t\n\t\t// The ratio of horizontal pages / vertical pages for this \n\t\t// graph to maintain its aspect ratio on this page format\n\t\tvar pagesAspectRatio = graphAspectRatio / pageFormatAspectRatio;\n\t\t\n\t\t// Factor the square root of the page count up and down \n\t\t// by the pages aspect ratio to obtain a horizontal and \n\t\t// vertical page count that adds up to the page count\n\t\t// and has the correct aspect ratio\n\t\tvar pageRoot = Math.sqrt(pageCount);\n\t\tvar pagesAspectRatioSqrt = Math.sqrt(pagesAspectRatio);\n\t\tvar numRowPages = pageRoot * pagesAspectRatioSqrt;\n\t\tvar numColumnPages = pageRoot / pagesAspectRatioSqrt;\n\n\t\t// These value are rarely more than 2 rounding downs away from\n\t\t// a total that meets the page count. In cases of one being less \n\t\t// than 1 page, the other value can be too high and take more iterations \n\t\t// In this case, just change that value to be the page count, since \n\t\t// we know the other value is 1\n\t\tif (numRowPages < 1 && numColumnPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numColumnPages / pageCount;\n\t\t\tnumColumnPages = pageCount;\n\t\t\tnumRowPages /= scaleChange;\n\t\t}\n\t\t\n\t\tif (numColumnPages < 1 && numRowPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numRowPages / pageCount;\n\t\t\tnumRowPages = pageCount;\n\t\t\tnumColumnPages /= scaleChange;\n\t\t}\t\t\n\n\t\tvar currentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\n\t\tvar numLoops = 0;\n\t\t\n\t\t// Iterate through while the rounded up number of pages comes to\n\t\t// a total greater than the required number\n\t\twhile (currentTotalPages > pageCount)\n\t\t{\n\t\t\t// Round down the page count (rows or columns) that is\n\t\t\t// closest to its next integer down in percentage terms.\n\t\t\t// i.e. Reduce the page total by reducing the total\n\t\t\t// page area by the least possible amount\n\n\t\t\tvar roundRowDownProportion = Math.floor(numRowPages) / numRowPages;\n\t\t\tvar roundColumnDownProportion = Math.floor(numColumnPages) / numColumnPages;\n\t\t\t\n\t\t\t// If the round down proportion is, work out the proportion to\n\t\t\t// round down to 1 page less\n\t\t\tif (roundRowDownProportion == 1)\n\t\t\t{\n\t\t\t\troundRowDownProportion = Math.floor(numRowPages-1) / numRowPages;\n\t\t\t}\n\t\t\tif (roundColumnDownProportion == 1)\n\t\t\t{\n\t\t\t\troundColumnDownProportion = Math.floor(numColumnPages-1) / numColumnPages;\n\t\t\t}\n\t\t\t\n\t\t\t// Check which rounding down is smaller, but in the case of very small roundings\n\t\t\t// try the other dimension instead\n\t\t\tvar scaleChange = 1;\n\t\t\t\n\t\t\t// Use the higher of the two values\n\t\t\tif (roundRowDownProportion > roundColumnDownProportion)\n\t\t\t{\n\t\t\t\tscaleChange = roundRowDownProportion;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tscaleChange = roundColumnDownProportion;\n\t\t\t}\n\n\t\t\tnumRowPages = numRowPages * scaleChange;\n\t\t\tnumColumnPages = numColumnPages * scaleChange;\n\t\t\tcurrentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\t\t\t\n\t\t\tnumLoops++;\n\t\t\t\n\t\t\tif (numLoops > 10)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Work out the scale from the number of row pages required\n\t\t// The column pages will give the same value\n\t\tvar posterWidth = availablePageWidth * numRowPages;\n\t\tscale = posterWidth / graphWidth;\n\t\t\n\t\t// Allow for rounding errors\n\t\treturn scale * 0.99999;\n\t},\n\t\n\t/**\n\t * Function: show\n\t * \n\t * Copies the styles and the markup from the graph's container into the\n\t * given document and removes all cursor styles. The document is returned.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * If you experience problems with missing stylesheets in IE then try adding\n\t * the domain to the trusted sites.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be copied.\n\t * doc - Document where the new graph is created.\n\t * x0 - X-coordinate of the graph view origin. Default is 0.\n\t * y0 - Y-coordinate of the graph view origin. Default is 0.\n\t * w - Optional width of the graph view.\n\t * h - Optional height of the graph view.\n\t */\n\tshow: function(graph, doc, x0, y0, w, h)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\t\n\t\tif (doc == null)\n\t\t{\n\t\t\tvar wnd = window.open();\n\t\t\tdoc = wnd.document;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.open();\n\t\t}\n\n\t\t// Workaround for missing print output in IE9 standards\n\t\tif (document.documentMode == 9)\n\t\t{\n\t\t\tdoc.writeln('<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"><![endif]-->');\n\t\t}\n\t\t\n\t\tvar bounds = graph.getGraphBounds();\n\t\tvar dx = Math.ceil(x0 - bounds.x);\n\t\tvar dy = Math.ceil(y0 - bounds.y);\n\t\t\n\t\tif (w == null)\n\t\t{\n\t\t\tw = Math.ceil(bounds.width + x0) + Math.ceil(Math.ceil(bounds.x) - bounds.x);\n\t\t}\n\t\t\n\t\tif (h == null)\n\t\t{\n\t\t\th = Math.ceil(bounds.height + y0) + Math.ceil(Math.ceil(bounds.y) - bounds.y);\n\t\t}\n\t\t\n\t\t// Needs a special way of creating the page so that no click is required\n\t\t// to refresh the contents after the external CSS styles have been loaded.\n\t\t// To avoid a click or programmatic refresh, the styleSheets[].cssText\n\t\t// property is copied over from the original document.\n\t\tif (mxClient.IS_IE || document.documentMode == 11)\n\t\t{\n\t\t\tvar html = '<html><head>';\n\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\thtml += base[i].outerHTML;\n\t\t\t}\n\n\t\t\thtml += '<style>';\n\n\t\t\t// Copies the stylesheets without having to load them again\n\t\t\tfor (var i = 0; i < document.styleSheets.length; i++)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\thtml += document.styleSheets[i].cssText;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore security exception\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thtml += '</style></head><body style=\"margin:0px;\">';\n\t\t\t\n\t\t\t// Copies the contents of the graph container\n\t\t\thtml += '<div style=\"position:absolute;overflow:hidden;width:' + w + 'px;height:' + h + 'px;\"><div style=\"position:relative;left:' + dx + 'px;top:' + dy + 'px;\">';\n\t\t\thtml += graph.container.innerHTML;\n\t\t\thtml += '</div></div></body><html>';\n\n\t\t\tdoc.writeln(html);\n\t\t\tdoc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.writeln('<html><head>');\n\t\t\t\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(base[i]));\n\t\t\t}\n\t\t\t\n\t\t\tvar links = document.getElementsByTagName('link');\n\t\t\t\n\t\t\tfor (var i = 0; i < links.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(links[i]));\n\t\t\t}\n\t\n\t\t\tvar styles = document.getElementsByTagName('style');\n\t\t\t\n\t\t\tfor (var i = 0; i < styles.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(styles[i]));\n\t\t\t}\n\n\t\t\tdoc.writeln('</head><body style=\"margin:0px;\"></body></html>');\n\t\t\tdoc.close();\n\n\t\t\tvar outer = doc.createElement('div');\n\t\t\touter.position = 'absolute';\n\t\t\touter.overflow = 'hidden';\n\t\t\touter.style.width = w + 'px';\n\t\t\touter.style.height = h + 'px';\n\n\t\t\t// Required for HTML labels if foreignObjects are disabled\n\t\t\tvar div = doc.createElement('div');\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.left = dx + 'px';\n\t\t\tdiv.style.top = dy + 'px';\n\n\t\t\tvar node = graph.container.firstChild;\n\t\t\tvar svg = null;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tvar clone = node.cloneNode(true);\n\t\t\t\t\n\t\t\t\tif (node == graph.view.drawPane.ownerSVGElement)\n\t\t\t\t{\n\t\t\t\t\touter.appendChild(clone);\n\t\t\t\t\tsvg = clone;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdiv.appendChild(clone);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\n\t\t\tdoc.body.appendChild(outer);\n\t\t\t\n\t\t\tif (div.firstChild != null)\n\t\t\t{\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif (svg != null)\n\t\t\t{\n\t\t\t\tsvg.style.minWidth = '';\n\t\t\t\tsvg.style.minHeight = '';\n\t\t\t\tsvg.firstChild.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t}\n\t\t}\n\t\t\n\t\tmxUtils.removeCursors(doc.body);\n\t\n\t\treturn doc;\n\t},\n\t\n\t/**\n\t * Function: printScreen\n\t * \n\t * Prints the specified graph using a new window and the built-in print\n\t * dialog.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be printed.\n\t */\n\tprintScreen: function(graph)\n\t{\n\t\tvar wnd = window.open();\n\t\tvar bounds = graph.getGraphBounds();\n\t\tmxUtils.show(graph, wnd.document);\n\t\t\n\t\tvar print = function()\n\t\t{\n\t\t\twnd.focus();\n\t\t\twnd.print();\n\t\t\twnd.close();\n\t\t};\n\t\t\n\t\t// Workaround for Google Chrome which needs a bit of a\n\t\t// delay in order to render the SVG contents\n\t\tif (mxClient.IS_GC)\n\t\t{\n\t\t\twnd.setTimeout(print, 500);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: popup\n\t * \n\t * Shows the specified text content in a new <mxWindow> or a new browser\n\t * window if isInternalWindow is false.\n\t * \n\t * Parameters:\n\t * \n\t * content - String that specifies the text to be displayed.\n\t * isInternalWindow - Optional boolean indicating if an mxWindow should be\n\t * used instead of a new browser window. Default is false.\n\t */\n\tpopup: function(content, isInternalWindow)\n\t{\n\t   \tif (isInternalWindow)\n\t   \t{\n\t\t\tvar div = document.createElement('div');\n\t\t\t\n\t\t\tdiv.style.overflow = 'scroll';\n\t\t\tdiv.style.width = '636px';\n\t\t\tdiv.style.height = '460px';\n\t\t\t\n\t\t\tvar pre = document.createElement('pre');\n\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t\n\t\t\tdiv.appendChild(pre);\n\t\t\t\n\t\t\tvar w = document.body.clientWidth;\n\t\t\tvar h = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight)\n\t\t\tvar wnd = new mxWindow('Popup Window', div,\n\t\t\t\tw/2-320, h/2-240, 640, 480, false, true);\n\n\t\t\twnd.setClosable(true);\n\t\t\twnd.setVisible(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Wraps up the XML content in a textarea\n\t\t\tif (mxClient.IS_NS)\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t\twnd.document.writeln('<pre>'+mxUtils.htmlEntities(content)+'</pre');\n\t\t\t   \twnd.document.close();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t    var pre = wnd.document.createElement('pre');\n\t\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t   \twnd.document.body.appendChild(pre);\n\t\t\t}\n\t   \t}\n\t},\n\t\n\t/**\n\t * Function: alert\n\t * \n\t * Displayss the given alert in a new dialog. This implementation uses the\n\t * built-in alert function. This is used to display validation errors when\n\t * connections cannot be changed or created.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\talert: function(message)\n\t{\n\t\talert(message);\n\t},\n\t\n\t/**\n\t * Function: prompt\n\t * \n\t * Displays the given message in a prompt dialog. This implementation uses\n\t * the built-in prompt function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * defaultValue - Optional string specifying the default value.\n\t */\n\tprompt: function(message, defaultValue)\n\t{\n\t\treturn prompt(message, (defaultValue != null) ? defaultValue : '');\n\t},\n\t\n\t/**\n\t * Function: confirm\n\t * \n\t * Displays the given message in a confirm dialog. This implementation uses\n\t * the built-in confirm function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\tconfirm: function(message)\n\t{\n\t\treturn confirm(message);\n\t},\n\n\t/**\n\t * Function: error\n\t * \n\t * Displays the given error message in a new <mxWindow> of the given width.\n\t * If close is true then an additional close button is added to the window.\n\t * The optional icon specifies the icon to be used for the window. Default\n\t * is <mxUtils.errorImage>.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * width - Integer specifying the width of the window.\n\t * close - Optional boolean indicating whether to add a close button.\n\t * icon - Optional icon for the window decoration.\n\t */\n\terror: function(message, width, close, icon)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '20px';\n\n\t\tvar img = document.createElement('img');\n\t\timg.setAttribute('src', icon || mxUtils.errorImage);\n\t\timg.setAttribute('valign', 'bottom');\n\t\timg.style.verticalAlign = 'middle';\n\t\tdiv.appendChild(img);\n\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tmxUtils.write(div, message);\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\tvar warn = new mxWindow(mxResources.get(mxUtils.errorResource) ||\n\t\t\tmxUtils.errorResource, div, (w-width)/2, h/4, width, null,\n\t\t\tfalse, true);\n\n\t\tif (close)\n\t\t{\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\tvar tmp = document.createElement('p');\n\t\t\tvar button = document.createElement('button');\n\n\t\t\tif (mxClient.IS_IE)\n\t\t\t{\n\t\t\t\tbutton.style.cssText = 'float:right';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbutton.setAttribute('style', 'float:right');\n\t\t\t}\n\n\t\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t\t{\n\t\t\t\twarn.destroy();\n\t\t\t});\n\n\t\t\tmxUtils.write(button, mxResources.get(mxUtils.closeResource) ||\n\t\t\t\tmxUtils.closeResource);\n\t\t\t\n\t\t\ttmp.appendChild(button);\n\t\t\tdiv.appendChild(tmp);\n\t\t\t\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\twarn.setClosable(true);\n\t\t}\n\t\t\n\t\twarn.setVisible(true);\n\t\t\n\t\treturn warn;\n\t},\n\n\t/**\n\t * Function: makeDraggable\n\t * \n\t * Configures the given DOM element to act as a drag source for the\n\t * specified graph. Returns a a new <mxDragSource>. If\n\t * <mxDragSource.guideEnabled> is enabled then the x and y arguments must\n\t * be used in funct to match the preview location.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var funct = function(graph, evt, cell, x, y)\n\t * {\n\t *   if (graph.canImportCell(cell))\n\t *   {\n\t *     var parent = graph.getDefaultParent();\n\t *     var vertex = null;\n\t *     \n\t *     graph.getModel().beginUpdate();\n\t *     try\n\t *     {\n\t * \t     vertex = graph.insertVertex(parent, null, 'Hello', x, y, 80, 30);\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.getModel().endUpdate();\n\t *     }\n\t *\n\t *     graph.setSelectionCell(vertex);\n\t *   }\n\t * }\n\t * \n\t * var img = document.createElement('img');\n\t * img.setAttribute('src', 'editors/images/rectangle.gif');\n\t * img.style.position = 'absolute';\n\t * img.style.left = '0px';\n\t * img.style.top = '0px';\n\t * img.style.width = '16px';\n\t * img.style.height = '16px';\n\t * \n\t * var dragImage = img.cloneNode(true);\n\t * dragImage.style.width = '32px';\n\t * dragImage.style.height = '32px';\n\t * mxUtils.makeDraggable(img, graph, funct, dragImage);\n\t * document.body.appendChild(img);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM element to make draggable.\n\t * graphF - <mxGraph> that acts as the drop target or a function that takes a\n\t * mouse event and returns the current <mxGraph>.\n\t * funct - Function to execute on a successful drop.\n\t * dragElement - Optional DOM node to be used for the drag preview.\n\t * dx - Optional horizontal offset between the cursor and the drag\n\t * preview.\n\t * dy - Optional vertical offset between the cursor and the drag\n\t * preview.\n\t * autoscroll - Optional boolean that specifies if autoscroll should be\n\t * used. Default is mxGraph.autoscroll.\n\t * scalePreview - Optional boolean that specifies if the preview element\n\t * should be scaled according to the graph scale. If this is true, then\n\t * the offsets will also be scaled. Default is false.\n\t * highlightDropTargets - Optional boolean that specifies if dropTargets\n\t * should be highlighted. Default is true.\n\t * getDropTarget - Optional function to return the drop target for a given\n\t * location (x, y). Default is mxGraph.getCellAt.\n\t */\n\tmakeDraggable: function(element, graphF, funct, dragElement, dx, dy, autoscroll,\n\t\t\tscalePreview, highlightDropTargets, getDropTarget)\n\t{\n\t\tvar dragSource = new mxDragSource(element, funct);\n\t\tdragSource.dragOffset = new mxPoint((dx != null) ? dx : 0,\n\t\t\t(dy != null) ? dy : mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\t\tdragSource.autoscroll = autoscroll;\n\t\t\n\t\t// Cannot enable this by default. This needs to be enabled in the caller\n\t\t// if the funct argument uses the new x- and y-arguments.\n\t\tdragSource.setGuidesEnabled(false);\n\t\t\n\t\tif (highlightDropTargets != null)\n\t\t{\n\t\t\tdragSource.highlightDropTargets = highlightDropTargets;\n\t\t}\n\t\t\n\t\t// Overrides function to find drop target cell\n\t\tif (getDropTarget != null)\n\t\t{\n\t\t\tdragSource.getDropTarget = getDropTarget;\n\t\t}\n\t\t\n\t\t// Overrides function to get current graph\n\t\tdragSource.getGraphForEvent = function(evt)\n\t\t{\n\t\t\treturn (typeof(graphF) == 'function') ? graphF(evt) : graphF;\n\t\t};\n\t\t\n\t\t// Translates switches into dragSource customizations\n\t\tif (dragElement != null)\n\t\t{\n\t\t\tdragSource.createDragElement = function()\n\t\t\t{\n\t\t\t\treturn dragElement.cloneNode(true);\n\t\t\t};\n\t\t\t\n\t\t\tif (scalePreview)\n\t\t\t{\n\t\t\t\tdragSource.createPreviewElement = function(graph)\n\t\t\t\t{\n\t\t\t\t\tvar elt = dragElement.cloneNode(true);\n\n\t\t\t\t\tvar w = parseInt(elt.style.width);\n\t\t\t\t\tvar h = parseInt(elt.style.height);\n\t\t\t\t\telt.style.width = Math.round(w * graph.view.scale) + 'px';\n\t\t\t\t\telt.style.height = Math.round(h * graph.view.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\treturn elt;\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dragSource;\n\t}\n\n};\n\n__mxOutput.mxUtils = typeof mxUtils !== 'undefined' ? mxUtils : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n var mxConstants =\n {\n\t/**\n\t * Class: mxConstants\n\t * \n\t * Defines various global constants.\n\t * \n\t * Variable: DEFAULT_HOTSPOT\n\t * \n\t * Defines the portion of the cell which is to be used as a connectable\n\t * region. Default is 0.3. Possible values are 0 < x <= 1. \n\t */\n\tDEFAULT_HOTSPOT: 0.3,\n\n\t/**\n\t * Variable: MIN_HOTSPOT_SIZE\n\t * \n\t * Defines the minimum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Default is 8.\n\t */\n\tMIN_HOTSPOT_SIZE: 8,\n\n\t/**\n\t * Variable: MAX_HOTSPOT_SIZE\n\t * \n\t * Defines the maximum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Use 0 for no maximum. Default is 0.\n\t */\n\tMAX_HOTSPOT_SIZE: 0,\n\n\t/**\n\t * Variable: RENDERING_HINT_EXACT\n\t * \n\t * Defines the exact rendering hint.\n\t */\n\tRENDERING_HINT_EXACT: 'exact',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTER\n\t * \n\t * Defines the faster rendering hint.\n\t */\n\tRENDERING_HINT_FASTER: 'faster',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTEST\n\t * \n\t * Defines the fastest rendering hint.\n\t */\n\tRENDERING_HINT_FASTEST: 'fastest',\n\n\t/**\n\t * Variable: DIALECT_SVG\n\t * \n\t * Defines the SVG display dialect name.\n\t */\n\tDIALECT_SVG: 'svg',\n\n\t/**\n\t * Variable: DIALECT_VML\n\t * \n\t * Defines the VML display dialect name.\n\t */\n\tDIALECT_VML: 'vml',\n\n\t/**\n\t * Variable: DIALECT_MIXEDHTML\n\t * \n\t * Defines the mixed HTML display dialect name.\n\t */\n\tDIALECT_MIXEDHTML: 'mixedHtml',\n\n\t/**\n\t * Variable: DIALECT_PREFERHTML\n\t * \n\t * Defines the preferred HTML display dialect name.\n\t */\n\tDIALECT_PREFERHTML: 'preferHtml',\n\n\t/**\n\t * Variable: DIALECT_STRICTHTML\n\t * \n\t * Defines the strict HTML display dialect.\n\t */\n\tDIALECT_STRICTHTML: 'strictHtml',\n\n\t/**\n\t * Variable: NS_SVG\n\t * \n\t * Defines the SVG namespace.\n\t */\n\tNS_SVG: 'http://www.w3.org/2000/svg',\n\n\t/**\n\t * Variable: NS_XHTML\n\t * \n\t * Defines the XHTML namespace.\n\t */\n\tNS_XHTML: 'http://www.w3.org/1999/xhtml',\n\n\t/**\n\t * Variable: NS_XLINK\n\t * \n\t * Defines the XLink namespace.\n\t */\n\tNS_XLINK: 'http://www.w3.org/1999/xlink',\n\n\t/**\n\t * Variable: SHADOWCOLOR\n\t * \n\t * Defines the color to be used to draw shadows in shapes and windows.\n\t * Default is gray.\n\t */\n\tSHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: VML_SHADOWCOLOR\n\t * \n\t * Used for shadow color in filters where transparency is not supported\n\t * (Microsoft Internet Explorer). Default is gray.\n\t */\n\tVML_SHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: SHADOW_OFFSET_X\n\t * \n\t * Specifies the x-offset of the shadow. Default is 2.\n\t */\n\tSHADOW_OFFSET_X: 2,\n\n\t/**\n\t * Variable: SHADOW_OFFSET_Y\n\t * \n\t * Specifies the y-offset of the shadow. Default is 3.\n\t */\n\tSHADOW_OFFSET_Y: 3,\n\t\n\t/**\n\t * Variable: SHADOW_OPACITY\n\t * \n\t * Defines the opacity for shadows. Default is 1.\n\t */\n\tSHADOW_OPACITY: 1,\n \n\t/**\n\t * Variable: NODETYPE_ELEMENT\n\t * \n\t * DOM node of type ELEMENT.\n\t */\n\tNODETYPE_ELEMENT: 1,\n\n\t/**\n\t * Variable: NODETYPE_ATTRIBUTE\n\t * \n\t * DOM node of type ATTRIBUTE.\n\t */\n\tNODETYPE_ATTRIBUTE: 2,\n\n\t/**\n\t * Variable: NODETYPE_TEXT\n\t * \n\t * DOM node of type TEXT.\n\t */\n\tNODETYPE_TEXT: 3,\n\n\t/**\n\t * Variable: NODETYPE_CDATA\n\t * \n\t * DOM node of type CDATA.\n\t */\n\tNODETYPE_CDATA: 4,\n\t\n\t/**\n\t * Variable: NODETYPE_ENTITY_REFERENCE\n\t * \n\t * DOM node of type ENTITY_REFERENCE.\n\t */\n\tNODETYPE_ENTITY_REFERENCE: 5,\n\n\t/**\n\t * Variable: NODETYPE_ENTITY\n\t * \n\t * DOM node of type ENTITY.\n\t */\n\tNODETYPE_ENTITY: 6,\n\n\t/**\n\t * Variable: NODETYPE_PROCESSING_INSTRUCTION\n\t * \n\t * DOM node of type PROCESSING_INSTRUCTION.\n\t */\n\tNODETYPE_PROCESSING_INSTRUCTION: 7,\n\n\t/**\n\t * Variable: NODETYPE_COMMENT\n\t * \n\t * DOM node of type COMMENT.\n\t */\n\tNODETYPE_COMMENT: 8,\n\t\t\n\t/**\n\t * Variable: NODETYPE_DOCUMENT\n\t * \n\t * DOM node of type DOCUMENT.\n\t */\n\tNODETYPE_DOCUMENT: 9,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENTTYPE\n\t * \n\t * DOM node of type DOCUMENTTYPE.\n\t */\n\tNODETYPE_DOCUMENTTYPE: 10,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENT_FRAGMENT\n\t * \n\t * DOM node of type DOCUMENT_FRAGMENT.\n\t */\n\tNODETYPE_DOCUMENT_FRAGMENT: 11,\n\n\t/**\n\t * Variable: NODETYPE_NOTATION\n\t * \n\t * DOM node of type NOTATION.\n\t */\n\tNODETYPE_NOTATION: 12,\n\t\n\t/**\n\t * Variable: TOOLTIP_VERTICAL_OFFSET\n\t * \n\t * Defines the vertical offset for the tooltip.\n\t * Default is 16.\n\t */\n\tTOOLTIP_VERTICAL_OFFSET: 16,\n\n\t/**\n\t * Variable: DEFAULT_VALID_COLOR\n\t * \n\t * Specifies the default valid color. Default is #0000FF.\n\t */\n\tDEFAULT_VALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: DEFAULT_INVALID_COLOR\n\t * \n\t * Specifies the default invalid color. Default is #FF0000.\n\t */\n\tDEFAULT_INVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Specifies the default highlight color for shape outlines.\n\t * Default is #0000FF. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Defines the strokewidth to be used for shape outlines.\n\t * Default is 5. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_STROKEWIDTH: 5,\n\n\t/**\n\t * Variable: HIGHLIGHT_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the highlights.\n\t * Default is 3.\n\t */\n\tHIGHLIGHT_STROKEWIDTH: 3,\n\n\t/**\n\t * Variable: CONSTRAINT_HIGHLIGHT_SIZE\n\t * \n\t * Size of the constraint highlight (in px). Default is 2.\n\t */\n\tHIGHLIGHT_SIZE: 2,\n\t\n\t/**\n\t * Variable: HIGHLIGHT_OPACITY\n\t * \n\t * Opacity (in %) used for the highlights (including outline).\n\t * Default is 100.\n\t */\n\tHIGHLIGHT_OPACITY: 100,\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_VERTEX\n\t * \n\t * Defines the cursor for a movable vertex. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_VERTEX: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_EDGE\n\t * \n\t * Defines the cursor for a movable edge. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_EDGE: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_LABEL_HANDLE\n\t * \n\t * Defines the cursor for a movable label. Default is 'default'.\n\t */\n\tCURSOR_LABEL_HANDLE: 'default',\n\t\n\t/**\n\t * Variable: CURSOR_TERMINAL_HANDLE\n\t * \n\t * Defines the cursor for a terminal handle. Default is 'pointer'.\n\t */\n\tCURSOR_TERMINAL_HANDLE: 'pointer',\n\t\n\t/**\n\t * Variable: CURSOR_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_BEND_HANDLE: 'crosshair',\n\n\t/**\n\t * Variable: CURSOR_VIRTUAL_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_VIRTUAL_BEND_HANDLE: 'crosshair',\n\t\n\t/**\n\t * Variable: CURSOR_CONNECT\n\t * \n\t * Defines the cursor for a connectable state. Default is 'pointer'.\n\t */\n\tCURSOR_CONNECT: 'pointer',\n\n\t/**\n\t * Variable: HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for the cell highlighting.\n\t * Use 'none' for no color. Default is #00FF00.\n\t */\n\tHIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: TARGET_HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for highlighting a target cell for a new\n\t * or changed connection. Note that this may be either a source or\n\t * target terminal in the graph. Use 'none' for no color.\n\t * Default is #0000FF.\n\t */\n\tCONNECT_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: INVALID_CONNECT_TARGET_COLOR\n\t * \n\t * Defines the color to be used for highlighting a invalid target cells\n\t * for a new or changed connections. Note that this may be either a source\n\t * or target terminal in the graph. Use 'none' for no color. Default is\n\t * #FF0000.\n\t */\n\tINVALID_CONNECT_TARGET_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: DROP_TARGET_COLOR\n\t * \n\t * Defines the color to be used for the highlighting target parent cells\n\t * (for drag and drop). Use 'none' for no color. Default is #0000FF.\n\t */\n\tDROP_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: VALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring valid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tVALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: INVALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring invalid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tINVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: EDGE_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of edges. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tEDGE_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of vertices. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tVERTEX_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for vertex selections.\n\t * Default is 1.\n\t */\n\tVERTEX_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: EDGE_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for edge selections.\n\t * Default is 1.\n\t */\n\tEDGE_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the vertex selection\n\t * border. Default is true.\n\t */\n\tVERTEX_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the edge selection\n\t * border. Default is true.\n\t */\n\tEDGE_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: GUIDE_COLOR\n\t * \n\t * Defines the color to be used for the guidelines in mxGraphHandler.\n\t * Default is #FF0000.\n\t */\n\tGUIDE_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: GUIDE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the guidelines in mxGraphHandler.\n\t * Default is 1.\n\t */\n\tGUIDE_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: OUTLINE_COLOR\n\t * \n\t * Defines the color to be used for the outline rectangle\n\t * border.  Use 'none' for no color. Default is #0099FF.\n\t */\n\tOUTLINE_COLOR: '#0099FF',\n\n\t/**\n\t * Variable: OUTLINE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the outline rectangle\n\t * stroke width. Default is 3.\n\t */\n\tOUTLINE_STROKEWIDTH: (mxClient.IS_IE) ? 2 : 3,\n\n\t/**\n\t * Variable: HANDLE_SIZE\n\t * \n\t * Defines the default size for handles. Default is 6.\n\t */\n\tHANDLE_SIZE: 6,\n\n\t/**\n\t * Variable: LABEL_HANDLE_SIZE\n\t * \n\t * Defines the default size for label handles. Default is 4.\n\t */\n\tLABEL_HANDLE_SIZE: 4,\n\n\t/**\n\t * Variable: HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the handle fill color. Use 'none' for\n\t * no color. Default is #00FF00 (green).\n\t */\n\tHANDLE_FILLCOLOR: '#00FF00',\n\n\t/**\n\t * Variable: HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the handle stroke color. Use 'none' for\n\t * no color. Default is black.\n\t */\n\tHANDLE_STROKECOLOR: 'black',\n\n\t/**\n\t * Variable: LABEL_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the label handle fill color. Use 'none'\n\t * for no color. Default is yellow.\n\t */\n\tLABEL_HANDLE_FILLCOLOR: 'yellow',\n\n\t/**\n\t * Variable: CONNECT_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the connect handle fill color. Use\n\t * 'none' for no color. Default is #0000FF (blue).\n\t */\n\tCONNECT_HANDLE_FILLCOLOR: '#0000FF',\n\n\t/**\n\t * Variable: LOCKED_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the locked handle fill color. Use\n\t * 'none' for no color. Default is #FF0000 (red).\n\t */\n\tLOCKED_HANDLE_FILLCOLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the outline sizer fill color. Use\n\t * 'none' for no color. Default is #00FFFF.\n\t */\n\tOUTLINE_HANDLE_FILLCOLOR: '#00FFFF',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the outline sizer stroke color. Use\n\t * 'none' for no color. Default is #0033FF.\n\t */\n\tOUTLINE_HANDLE_STROKECOLOR: '#0033FF',\n\n\t/**\n\t * Variable: DEFAULT_FONTFAMILY\n\t * \n\t * Defines the default family for all fonts. Default is Arial,Helvetica.\n\t */\n\tDEFAULT_FONTFAMILY: 'Arial,Helvetica',\n\n\t/**\n\t * Variable: DEFAULT_FONTSIZE\n\t * \n\t * Defines the default size (in px). Default is 11.\n\t */\n\tDEFAULT_FONTSIZE: 11,\n\n\t/**\n\t * Variable: DEFAULT_TEXT_DIRECTION\n\t * \n\t * Defines the default value for the <STYLE_TEXT_DIRECTION> if no value is\n\t * defined for it in the style. Default value is an empty string which means\n\t * the default system setting is used and no direction is set.\n\t */\n\tDEFAULT_TEXT_DIRECTION: '',\n\n\t/**\n\t * Variable: LINE_HEIGHT\n\t * \n\t * Defines the default line height for text labels. Default is 1.2.\n\t */\n\tLINE_HEIGHT: 1.2,\n\n\t/**\n\t * Variable: WORD_WRAP\n\t * \n\t * Defines the CSS value for the word-wrap property. Default is \"normal\".\n\t * Change this to \"break-word\" to allow long words to be able to be broken\n\t * and wrap onto the next line.\n\t */\n\tWORD_WRAP: 'normal',\n\n\t/**\n\t * Variable: ABSOLUTE_LINE_HEIGHT\n\t * \n\t * Specifies if absolute line heights should be used (px) in CSS. Default\n\t * is false. Set this to true for backwards compatibility.\n\t */\n\tABSOLUTE_LINE_HEIGHT: false,\n\n\t/**\n\t * Variable: DEFAULT_FONTSTYLE\n\t * \n\t * Defines the default style for all fonts. Default is 0. This can be set\n\t * to any combination of font styles as follows.\n\t * \n\t * (code)\n\t * mxConstants.DEFAULT_FONTSTYLE = mxConstants.FONT_BOLD | mxConstants.FONT_ITALIC;\n\t * (end)\n\t */\n\tDEFAULT_FONTSTYLE: 0,\n\n\t/**\n\t * Variable: DEFAULT_STARTSIZE\n\t * \n\t * Defines the default start size for swimlanes. Default is 40.\n\t */\n\tDEFAULT_STARTSIZE: 40,\n\n\t/**\n\t * Variable: DEFAULT_MARKERSIZE\n\t * \n\t * Defines the default size for all markers. Default is 6.\n\t */\n\tDEFAULT_MARKERSIZE: 6,\n\n\t/**\n\t * Variable: DEFAULT_IMAGESIZE\n\t * \n\t * Defines the default width and height for images used in the\n\t * label shape. Default is 24.\n\t */\n\tDEFAULT_IMAGESIZE: 24,\n\n\t/**\n\t * Variable: ENTITY_SEGMENT\n\t * \n\t * Defines the length of the horizontal segment of an Entity Relation.\n\t * This can be overridden using <mxConstants.STYLE_SEGMENT> style.\n\t * Default is 30.\n\t */\n\tENTITY_SEGMENT: 30,\n\n\t/**\n\t * Variable: RECTANGLE_ROUNDING_FACTOR\n\t * \n\t * Defines the rounding factor for rounded rectangles in percent between\n\t * 0 and 1. Values should be smaller than 0.5. Default is 0.15.\n\t */\n\tRECTANGLE_ROUNDING_FACTOR: 0.15,\n\n\t/**\n\t * Variable: LINE_ARCSIZE\n\t * \n\t * Defines the size of the arcs for rounded edges. Default is 20.\n\t */\n\tLINE_ARCSIZE: 20,\n\n\t/**\n\t * Variable: ARROW_SPACING\n\t * \n\t * Defines the spacing between the arrow shape and its terminals. Default is 0.\n\t */\n\tARROW_SPACING: 0,\n\n\t/**\n\t * Variable: ARROW_WIDTH\n\t * \n\t * Defines the width of the arrow shape. Default is 30.\n\t */\n\tARROW_WIDTH: 30,\n\n\t/**\n\t * Variable: ARROW_SIZE\n\t * \n\t * Defines the size of the arrowhead in the arrow shape. Default is 30.\n\t */\n\tARROW_SIZE: 30,\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_PORTRAIT: new mxRectangle(0, 0, 827, 1169),\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_LANDSCAPE: new mxRectangle(0, 0, 1169, 827),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The\n\t * dimensions of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_PORTRAIT: new mxRectangle(0, 0, 850, 1100),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The dimensions\n\t * of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_LANDSCAPE: new mxRectangle(0, 0, 1100, 850),\n\n\t/**\n\t * Variable: NONE\n\t * \n\t * Defines the value for none. Default is \"none\".\n\t */\n\tNONE: 'none',\n\n\t/**\n\t * Variable: STYLE_PERIMETER\n\t * \n\t * Defines the key for the perimeter style. This is a function that defines\n\t * the perimeter around a particular shape. Possible values are the\n\t * functions defined in <mxPerimeter>. Alternatively, the constants in this\n\t * class that start with \"PERIMETER_\" may be used to access\n\t * perimeter styles in <mxStyleRegistry>. Value is \"perimeter\".\n\t */\n\tSTYLE_PERIMETER: 'perimeter',\n\t\n\t/**\n\t * Variable: STYLE_SOURCE_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the source for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"sourcePort\".\n\t */\n\tSTYLE_SOURCE_PORT: 'sourcePort',\n\t\n\t/**\n\t * Variable: STYLE_TARGET_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the target for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"targetPort\".\n\t */\n\tSTYLE_TARGET_PORT: 'targetPort',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to cells in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, \n\t * DIRECTION_EAST\" and \"DIRECTION_WEST\". Value is\n\t * \"portConstraint\".\n\t */\n\tSTYLE_PORT_CONSTRAINT: 'portConstraint',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT_ROTATION\n\t * \n\t * Define whether port constraint directions are rotated with vertex\n\t * rotation. 0 (default) causes port constraints to remain absolute, \n\t * relative to the graph, 1 causes the constraints to rotate with\n\t * the vertex. Value is \"portConstraintRotation\".\n\t */\n\tSTYLE_PORT_CONSTRAINT_ROTATION: 'portConstraintRotation',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to sources in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"sourcePortConstraint\".\n\t */\n\tSTYLE_SOURCE_PORT_CONSTRAINT: 'sourcePortConstraint',\n\n\t/**\n\t * Variable: STYLE_TARGET_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to targets in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"targetPortConstraint\".\n\t */\n\tSTYLE_TARGET_PORT_CONSTRAINT: 'targetPortConstraint',\n\n\t/**\n\t * Variable: STYLE_OPACITY\n\t * \n\t * Defines the key for the opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"opacity\".\n\t */\n\tSTYLE_OPACITY: 'opacity',\n\n\t/**\n\t * Variable: STYLE_FILL_OPACITY\n\t * \n\t * Defines the key for the fill opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"fillOpacity\".\n\t */\n\tSTYLE_FILL_OPACITY: 'fillOpacity',\n\n\t/**\n\t * Variable: STYLE_STROKE_OPACITY\n\t * \n\t * Defines the key for the stroke opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"strokeOpacity\".\n\t */\n\tSTYLE_STROKE_OPACITY: 'strokeOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_OPACITY\n\t * \n\t * Defines the key for the text opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"textOpacity\".\n\t */\n\tSTYLE_TEXT_OPACITY: 'textOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_DIRECTION\n\t * \n\t * Defines the key for the text direction style. Possible values are\n\t * \"TEXT_DIRECTION_DEFAULT, TEXT_DIRECTION_AUTO, TEXT_DIRECTION_LTR\"\n\t * and \"TEXT_DIRECTION_RTL\". Value is \"textDirection\".\n\t * The default value for the style is defined in <DEFAULT_TEXT_DIRECTION>.\n\t * It is used is no value is defined for this key in a given style. This is\n\t * an experimental style that is currently ignored in the backends.\n\t */\n\tSTYLE_TEXT_DIRECTION: 'textDirection',\n\n\t/**\n\t * Variable: STYLE_OVERFLOW\n\t * \n\t * Defines the key for the overflow style. Possible values are 'visible',\n\t * 'hidden', 'fill' and 'width'. The default value is 'visible'. This value\n\t * specifies how overlapping vertex labels are handled. A value of\n\t * 'visible' will show the complete label. A value of 'hidden' will clip\n\t * the label so that it does not overlap the vertex bounds. A value of\n\t * 'fill' will use the vertex bounds and a value of 'width' will use the\n\t * vertex width for the label. See <mxGraph.isLabelClipped>. Note that\n\t * the vertical alignment is ignored for overflow fill and for horizontal\n\t * alignment, left should be used to avoid pixel offsets in Internet Explorer\n\t * 11 and earlier or if foreignObjects are disabled. Value is \"overflow\".\n\t */\n\tSTYLE_OVERFLOW: 'overflow',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL\n\t * \n\t * Defines if the connection points on either end of the edge should be\n\t * computed so that the edge is vertical or horizontal if possible and\n\t * if the point is not at a fixed location. Default is false. This is\n\t * used in <mxGraph.isOrthogonal>, which also returns true if the edgeStyle\n\t * of the edge is an elbow or entity. Value is \"orthogonal\".\n\t */\n\tSTYLE_ORTHOGONAL: 'orthogonal',\n\n\t/**\n\t * Variable: STYLE_EXIT_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitX\".\n\t */\n\tSTYLE_EXIT_X: 'exitX',\n\n\t/**\n\t * Variable: STYLE_EXIT_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitY\".\n\t */\n\tSTYLE_EXIT_Y: 'exitY',\n\n\t\n\t/**\n\t* Variable: STYLE_EXIT_DX\n\t* \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDx\".\n\t*/\n\tSTYLE_EXIT_DX: 'exitDx',\n\n\t/**\n\t* Variable: STYLE_EXIT_DY\n\t* \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDy\".\n\t*/\n\tSTYLE_EXIT_DY: 'exitDy',\n\t\n\t/**\n\t * Variable: STYLE_EXIT_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the source. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"exitPerimeter\".\n\t */\n\tSTYLE_EXIT_PERIMETER: 'exitPerimeter',\n\n\t/**\n\t * Variable: STYLE_ENTRY_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryX\".\n\t */\n\tSTYLE_ENTRY_X: 'entryX',\n\n\t/**\n\t * Variable: STYLE_ENTRY_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryY\".\n\t */\n\tSTYLE_ENTRY_Y: 'entryY',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DX\n\t * \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDx\".\n\t*/\n\tSTYLE_ENTRY_DX: 'entryDx',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DY\n\t * \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDy\".\n\t*/\n\tSTYLE_ENTRY_DY: 'entryDy',\n\n\t/**\n\t * Variable: STYLE_ENTRY_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the target. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"entryPerimeter\".\n\t */\n\tSTYLE_ENTRY_PERIMETER: 'entryPerimeter',\n\n\t/**\n\t * Variable: STYLE_WHITE_SPACE\n\t * \n\t * Defines the key for the white-space style. Possible values are 'nowrap'\n\t * and 'wrap'. The default value is 'nowrap'. This value specifies how\n\t * white-space inside a HTML vertex label should be handled. A value of\n\t * 'nowrap' means the text will never wrap to the next line until a\n\t * linefeed is encountered. A value of 'wrap' means text will wrap when\n\t * necessary. This style is only used for HTML labels.\n\t * See <mxGraph.isWrapping>. Value is \"whiteSpace\".\n\t */\n\tSTYLE_WHITE_SPACE: 'whiteSpace',\n\n\t/**\n\t * Variable: STYLE_ROTATION\n\t * \n\t * Defines the key for the rotation style. The type of the value is \n\t * numeric and the possible range is 0-360. Value is \"rotation\".\n\t */\n\tSTYLE_ROTATION: 'rotation',\n\n\t/**\n\t * Variable: STYLE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. Value is \"fillColor\".\n\t */\n\tSTYLE_FILLCOLOR: 'fillColor',\n\n\t/**\n\t * Variable: STYLE_POINTER_EVENTS\n\t * \n\t * Specifies if pointer events should be fired on transparent backgrounds.\n\t * This style is currently only supported in <mxRectangleShape>. Default\n\t * is true. Value is \"pointerEvents\". This is typically set to\n\t * false in groups where the transparent part should allow any underlying\n\t * cells to be clickable.\n\t */\n\tSTYLE_POINTER_EVENTS: 'pointerEvents',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color of the swimlane background. Possible\n\t * values are all HTML color names or HEX codes. Default is no background.\n\t * Value is \"swimlaneFillColor\".\n\t */\n\tSTYLE_SWIMLANE_FILLCOLOR: 'swimlaneFillColor',\n\n\t/**\n\t * Variable: STYLE_MARGIN\n\t * \n\t * Defines the key for the margin between the ellipses in the double ellipse shape.\n\t * Possible values are all positive numbers. Value is \"margin\".\n\t */\n\tSTYLE_MARGIN: 'margin',\n\n\t/**\n\t * Variable: STYLE_GRADIENTCOLOR\n\t * \n\t * Defines the key for the gradient color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. This is ignored if no fill color is defined. Value is\n\t * \"gradientColor\".\n\t */\n\tSTYLE_GRADIENTCOLOR: 'gradientColor',\n\n\t/**\n\t * Variable: STYLE_GRADIENT_DIRECTION\n\t * \n\t * Defines the key for the gradient direction. Possible values are\n\t * <DIRECTION_EAST>, <DIRECTION_WEST>, <DIRECTION_NORTH> and\n\t * <DIRECTION_SOUTH>. Default is <DIRECTION_SOUTH>. Generally, and by\n\t * default in mxGraph, gradient painting is done from the value of\n\t * <STYLE_FILLCOLOR> to the value of <STYLE_GRADIENTCOLOR>. Taking the\n\t * example of <DIRECTION_NORTH>, this means <STYLE_FILLCOLOR> color at the \n\t * bottom of paint pattern and <STYLE_GRADIENTCOLOR> at top, with a\n\t * gradient in-between. Value is \"gradientDirection\".\n\t */\n\tSTYLE_GRADIENT_DIRECTION: 'gradientDirection',\n\n\t/**\n\t * Variable: STYLE_STROKECOLOR\n\t * \n\t * Defines the key for the strokeColor style. Possible values are all HTML\n\t * color names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit', 'indicated' to use the color code of a related cell or the\n\t * indicator shape or 'none' for no color. Value is \"strokeColor\".\n\t */\n\tSTYLE_STROKECOLOR: 'strokeColor',\n\n\t/**\n\t * Variable: STYLE_SEPARATORCOLOR\n\t * \n\t * Defines the key for the separatorColor style. Possible values are all\n\t * HTML color names or HEX codes. This style is only used for\n\t * <SHAPE_SWIMLANE> shapes. Value is \"separatorColor\".\n\t */\n\tSTYLE_SEPARATORCOLOR: 'separatorColor',\n\n\t/**\n\t * Variable: STYLE_STROKEWIDTH\n\t * \n\t * Defines the key for the strokeWidth style. The type of the value is \n\t * numeric and the possible range is any non-negative value larger or equal\n\t * to 1. The value defines the stroke width in pixels. Note: To hide a\n\t * stroke use strokeColor none. Value is \"strokeWidth\".\n\t */\n\tSTYLE_STROKEWIDTH: 'strokeWidth',\n\n\t/**\n\t * Variable: STYLE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. This value defines how the lines of\n\t * the label are horizontally aligned. <ALIGN_LEFT> mean label text lines\n\t * are aligned to left of the label bounds, <ALIGN_RIGHT> to the right of\n\t * the label bounds and <ALIGN_CENTER> means the center of the text lines\n\t * are aligned in the center of the label bounds. Note this value doesn't\n\t * affect the positioning of the overall label bounds relative to the\n\t * vertex, to move the label bounds horizontally, use\n\t * <STYLE_LABEL_POSITION>. Value is \"align\".\n\t */\n\tSTYLE_ALIGN: 'align',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. This value defines how\n\t * the lines of the label are vertically aligned. <ALIGN_TOP> means the\n\t * topmost label text line is aligned against the top of the label bounds,\n\t * <ALIGN_BOTTOM> means the bottom-most label text line is aligned against\n\t * the bottom of the label bounds and <ALIGN_MIDDLE> means there is equal\n\t * spacing between the topmost text label line and the top of the label\n\t * bounds and the bottom-most text label line and the bottom of the label\n\t * bounds. Note this value doesn't affect the positioning of the overall\n\t * label bounds relative to the vertex, to move the label bounds\n\t * vertically, use <STYLE_VERTICAL_LABEL_POSITION>. Value is \"verticalAlign\".\n\t */\n\tSTYLE_VERTICAL_ALIGN: 'verticalAlign',\n\n\t/**\n\t * Variable: STYLE_LABEL_WIDTH\n\t * \n\t * Defines the key for the width of the label if the label position is not\n\t * center. Value is \"labelWidth\".\n\t */\n\tSTYLE_LABEL_WIDTH: 'labelWidth',\n\n\t/**\n\t * Variable: STYLE_LABEL_POSITION\n\t * \n\t * Defines the key for the horizontal label position of vertices. Possible\n\t * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>. Default is\n\t * <ALIGN_CENTER>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_LEFT> means the entire label bounds is\n\t * placed completely just to the left of the vertex, <ALIGN_RIGHT> means\n\t * adjust to the right and <ALIGN_CENTER> means the label bounds are\n\t * vertically aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label horizontally within the label bounds, use <STYLE_ALIGN>.\n\t * Value is \"labelPosition\".\n\t */\n\tSTYLE_LABEL_POSITION: 'labelPosition',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_LABEL_POSITION\n\t * \n\t * Defines the key for the vertical label position of vertices. Possible\n\t * values are <ALIGN_TOP>, <ALIGN_BOTTOM> and <ALIGN_MIDDLE>. Default is\n\t * <ALIGN_MIDDLE>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_TOP> means the entire label bounds is\n\t * placed completely just on the top of the vertex, <ALIGN_BOTTOM> means\n\t * adjust on the bottom and <ALIGN_MIDDLE> means the label bounds are\n\t * horizontally aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label vertically within the label bounds, use\n\t * <STYLE_VERTICAL_ALIGN>. Value is \"verticalLabelPosition\".\n\t */\n\tSTYLE_VERTICAL_LABEL_POSITION: 'verticalLabelPosition',\n\t\n\t/**\n\t * Variable: STYLE_IMAGE_ASPECT\n\t * \n\t * Defines the key for the image aspect style. Possible values are 0 (do\n\t * not preserve aspect) or 1 (keep aspect). This is only used in\n\t * <mxImageShape>. Default is 1. Value is \"imageAspect\".\n\t */\n\tSTYLE_IMAGE_ASPECT: 'imageAspect',\n\n\t/**\n\t * Variable: STYLE_IMAGE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. The value defines how any image in the\n\t * vertex label is aligned horizontally within the label bounds of a\n\t * <SHAPE_LABEL> shape. Value is \"imageAlign\".\n\t */\n\tSTYLE_IMAGE_ALIGN: 'imageAlign',\n\n\t/**\n\t * Variable: STYLE_IMAGE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. The value defines how\n\t * any image in the vertex label is aligned vertically within the label\n\t * bounds of a <SHAPE_LABEL> shape. Value is \"imageVerticalAlign\".\n\t */\n\tSTYLE_IMAGE_VERTICAL_ALIGN: 'imageVerticalAlign',\n\n\t/**\n\t * Variable: STYLE_GLASS\n\t * \n\t * Defines the key for the glass style. Possible values are 0 (disabled) and\n\t * 1(enabled). The default value is 0. This is used in <mxLabel>. Value is\n\t * \"glass\".\n\t */\n\tSTYLE_GLASS: 'glass',\n\n\t/**\n\t * Variable: STYLE_IMAGE\n\t * \n\t * Defines the key for the image style. Possible values are any image URL,\n\t * the type of the value is String. This is the path to the image that is\n\t * to be displayed within the label of a vertex. Data URLs should use the\n\t * following format: data:image/png,xyz where xyz is the base64 encoded\n\t * data (without the \"base64\"-prefix). Note that Data URLs are only\n\t * supported in modern browsers. Value is \"image\".\n\t */\n\tSTYLE_IMAGE: 'image',\n\n\t/**\n\t * Variable: STYLE_IMAGE_WIDTH\n\t * \n\t * Defines the key for the imageWidth style. The type of this value is\n\t * int, the value is the image width in pixels and must be greater than 0.\n\t * Value is \"imageWidth\".\n\t */\n\tSTYLE_IMAGE_WIDTH: 'imageWidth',\n\n\t/**\n\t * Variable: STYLE_IMAGE_HEIGHT\n\t * \n\t * Defines the key for the imageHeight style. The type of this value is\n\t * int, the value is the image height in pixels and must be greater than 0.\n\t * Value is \"imageHeight\".\n\t */\n\tSTYLE_IMAGE_HEIGHT: 'imageHeight',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BACKGROUND\n\t * \n\t * Defines the key for the image background color. This style is only used\n\t * in <mxImageShape>. Possible values are all HTML color names or HEX\n\t * codes. Value is \"imageBackground\".\n\t */\n\tSTYLE_IMAGE_BACKGROUND: 'imageBackground',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BORDER\n\t * \n\t * Defines the key for the image border color. This style is only used in\n\t * <mxImageShape>. Possible values are all HTML color names or HEX codes.\n\t * Value is \"imageBorder\".\n\t */\n\tSTYLE_IMAGE_BORDER: 'imageBorder',\n\n\t/**\n\t * Variable: STYLE_FLIPH\n\t * \n\t * Defines the key for the horizontal image flip. This style is only used\n\t * in <mxImageShape>. Possible values are 0 and 1. Default is 0. Value is\n\t * \"flipH\".\n\t */\n\tSTYLE_FLIPH: 'flipH',\n\n\t/**\n\t * Variable: STYLE_FLIPV\n\t * \n\t * Defines the key for the vertical flip. Possible values are 0 and 1.\n\t * Default is 0. Value is \"flipV\".\n\t */\n\tSTYLE_FLIPV: 'flipV',\n\n\t/**\n\t * Variable: STYLE_NOLABEL\n\t * \n\t * Defines the key for the noLabel style. If this is true then no label is\n\t * visible for a given cell. Possible values are true or false (1 or 0).\n\t * Default is false. Value is \"noLabel\".\n\t */\n\tSTYLE_NOLABEL: 'noLabel',\n\n\t/**\n\t * Variable: STYLE_NOEDGESTYLE\n\t * \n\t * Defines the key for the noEdgeStyle style. If this is true then no edge\n\t * style is applied for a given edge. Possible values are true or false\n\t * (1 or 0). Default is false. Value is \"noEdgeStyle\".\n\t */\n\tSTYLE_NOEDGESTYLE: 'noEdgeStyle',\n\n\t/**\n\t * Variable: STYLE_LABEL_BACKGROUNDCOLOR\n\t * \n\t * Defines the key for the label background color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBackgroundColor\".\n\t */\n\tSTYLE_LABEL_BACKGROUNDCOLOR: 'labelBackgroundColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_BORDERCOLOR\n\t * \n\t * Defines the key for the label border color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBorderColor\".\n\t */\n\tSTYLE_LABEL_BORDERCOLOR: 'labelBorderColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_PADDING\n\t * \n\t * Defines the key for the label padding, ie. the space between the label\n\t * border and the label. Value is \"labelPadding\".\n\t */\n\tSTYLE_LABEL_PADDING: 'labelPadding',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SHAPE\n\t * \n\t * Defines the key for the indicator shape used within an <mxLabel>.\n\t * Possible values are all SHAPE_* constants or the names of any new\n\t * shapes. The indicatorShape has precedence over the indicatorImage.\n\t * Value is \"indicatorShape\".\n\t */\n\tSTYLE_INDICATOR_SHAPE: 'indicatorShape',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_IMAGE\n\t * \n\t * Defines the key for the indicator image used within an <mxLabel>.\n\t * Possible values are all image URLs. The indicatorShape has\n\t * precedence over the indicatorImage. Value is \"indicatorImage\".\n\t */\n\tSTYLE_INDICATOR_IMAGE: 'indicatorImage',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_COLOR\n\t * \n\t * Defines the key for the indicatorColor style. Possible values are all\n\t * HTML color names or HEX codes, as well as the special 'swimlane' keyword\n\t * to refer to the color of the parent swimlane if one exists. Value is\n\t * \"indicatorColor\".\n\t */\n\tSTYLE_INDICATOR_COLOR: 'indicatorColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_STROKECOLOR\n\t * \n\t * Defines the key for the indicator stroke color in <mxLabel>.\n\t * Possible values are all color codes. Value is \"indicatorStrokeColor\".\n\t */\n\tSTYLE_INDICATOR_STROKECOLOR: 'indicatorStrokeColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_GRADIENTCOLOR\n\t * \n\t * Defines the key for the indicatorGradientColor style. Possible values\n\t * are all HTML color names or HEX codes. This style is only supported in\n\t * <SHAPE_LABEL> shapes. Value is \"indicatorGradientColor\".\n\t */\n\tSTYLE_INDICATOR_GRADIENTCOLOR: 'indicatorGradientColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SPACING\n\t * \n\t * The defines the key for the spacing between the label and the\n\t * indicator in <mxLabel>. Possible values are in pixels. Value is\n\t * \"indicatorSpacing\".\n\t */\n\tSTYLE_INDICATOR_SPACING: 'indicatorSpacing',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_WIDTH\n\t * \n\t * Defines the key for the indicator width. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorWidth\".\n\t */\n\tSTYLE_INDICATOR_WIDTH: 'indicatorWidth',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_HEIGHT\n\t * \n\t * Defines the key for the indicator height. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorHeight\".\n\t */\n\tSTYLE_INDICATOR_HEIGHT: 'indicatorHeight',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_DIRECTION\n\t * \n\t * Defines the key for the indicatorDirection style. The direction style is\n\t * used to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"indicatorDirection\".\n\t */\n\tSTYLE_INDICATOR_DIRECTION: 'indicatorDirection',\n\n\t/**\n\t * Variable: STYLE_SHADOW\n\t * \n\t * Defines the key for the shadow style. The type of the value is Boolean.\n\t * Value is \"shadow\".\n\t */\n\tSTYLE_SHADOW: 'shadow',\n\t\n\t/**\n\t * Variable: STYLE_SEGMENT\n\t * \n\t * Defines the key for the segment style. The type of this value is float\n\t * and the value represents the size of the horizontal segment of the\n\t * entity relation style. Default is ENTITY_SEGMENT. Value is \"segment\".\n\t */\n\tSTYLE_SEGMENT: 'segment',\n\t\n\t/**\n\t * Variable: STYLE_ENDARROW\n\t *\n\t * Defines the key for the end arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * Value is \"endArrow\".\n\t *\n\t * Example:\n\t * (code)\n\t * style[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\t * (end)\n\t */\n\tSTYLE_ENDARROW: 'endArrow',\n\n\t/**\n\t * Variable: STYLE_STARTARROW\n\t * \n\t * Defines the key for the start arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * See <STYLE_ENDARROW>. Value is \"startArrow\".\n\t */\n\tSTYLE_STARTARROW: 'startArrow',\n\n\t/**\n\t * Variable: STYLE_ENDSIZE\n\t * \n\t * Defines the key for the endSize style. The type of this value is numeric\n\t * and the value represents the size of the end marker in pixels. Value is\n\t * \"endSize\".\n\t */\n\tSTYLE_ENDSIZE: 'endSize',\n\n\t/**\n\t * Variable: STYLE_STARTSIZE\n\t * \n\t * Defines the key for the startSize style. The type of this value is\n\t * numeric and the value represents the size of the start marker or the\n\t * size of the swimlane title region depending on the shape it is used for.\n\t * Value is \"startSize\".\n\t */\n\tSTYLE_STARTSIZE: 'startSize',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_LINE\n\t * \n\t * Defines the key for the swimlaneLine style. This style specifies whether\n\t * the line between the title regio of a swimlane should be visible. Use 0\n\t * for hidden or 1 (default) for visible. Value is \"swimlaneLine\".\n\t */\n\tSTYLE_SWIMLANE_LINE: 'swimlaneLine',\n\n\t/**\n\t * Variable: STYLE_ENDFILL\n\t * \n\t * Defines the key for the endFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"endFill\".\n\t */\n\tSTYLE_ENDFILL: 'endFill',\n\n\t/**\n\t * Variable: STYLE_STARTFILL\n\t * \n\t * Defines the key for the startFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"startFill\".\n\t */\n\tSTYLE_STARTFILL: 'startFill',\n\n\t/**\n\t * Variable: STYLE_DASHED\n\t * \n\t * Defines the key for the dashed style. Use 0 (default) for non-dashed or 1\n\t * for dashed. Value is \"dashed\".\n\t */\n\tSTYLE_DASHED: 'dashed',\n\n\t/**\n\t * Variable: STYLE_DASH_PATTERN\n\t * \n\t * Defines the key for the dashed pattern style in SVG and image exports.\n\t * The type of this value is a space separated list of numbers that specify\n\t * a custom-defined dash pattern. Dash styles are defined in terms of the\n\t * length of the dash (the drawn part of the stroke) and the length of the\n\t * space between the dashes. The lengths are relative to the line width: a\n\t * length of \"1\" is equal to the line width. VML ignores this style and\n\t * uses dashStyle instead as defined in the VML specification. This style\n\t * is only used in the <mxConnector> shape. Value is \"dashPattern\".\n\t */\n\tSTYLE_DASH_PATTERN: 'dashPattern',\n\n\t/**\n\t * Variable: STYLE_FIX_DASH\n\t * \n\t * Defines the key for the fixDash style. Use 0 (default) for dash patterns\n\t * that depend on the linewidth and 1 for dash patterns that ignore the\n\t * line width. Value is \"fixDash\".\n\t */\n\tSTYLE_FIX_DASH: 'fixDash',\n\n\t/**\n\t * Variable: STYLE_ROUNDED\n\t * \n\t * Defines the key for the rounded style. The type of this value is\n\t * Boolean. For edges this determines whether or not joins between edges\n\t * segments are smoothed to a rounded finish. For vertices that have the\n\t * rectangle shape, this determines whether or not the rectangle is\n\t * rounded. Use 0 (default) for non-rounded or 1 for rounded. Value is\n\t * \"rounded\".\n\t */\n\tSTYLE_ROUNDED: 'rounded',\n\n\t/**\n\t * Variable: STYLE_CURVED\n\t * \n\t * Defines the key for the curved style. The type of this value is\n\t * Boolean. It is only applicable for connector shapes. Use 0 (default)\n\t * for non-curved or 1 for curved. Value is \"curved\".\n\t */\n\tSTYLE_CURVED: 'curved',\n\n\t/**\n\t * Variable: STYLE_ARCSIZE\n\t * \n\t * Defines the rounding factor for a rounded rectangle in percent (without\n\t * the percent sign). Possible values are between 0 and 100. If this value\n\t * is not specified then RECTANGLE_ROUNDING_FACTOR * 100 is used. For\n\t * edges, this defines the absolute size of rounded corners in pixels. If\n\t * this values is not specified then LINE_ARCSIZE is used.\n\t * (This style is only exported via <mxImageExport>.) Value is \"arcSize\".\n\t */\n\tSTYLE_ARCSIZE: 'arcSize',\n\n\t/**\n\t * Variable: STYLE_ABSOLUTE_ARCSIZE\n\t * \n\t * Defines the key for the absolute arc size style. This specifies if\n\t * arcSize for rectangles is abolute or relative. Possible values are 1\n\t * and 0 (default). Value is \"absoluteArcSize\".\n\t */\n\tSTYLE_ABSOLUTE_ARCSIZE: 'absoluteArcSize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the source perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the source connection point of\n\t * an edge and the perimeter of the source vertex in pixels. This style\n\t * only applies to edges. Value is \"sourcePerimeterSpacing\".\n\t */\n\tSTYLE_SOURCE_PERIMETER_SPACING: 'sourcePerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_TARGET_PERIMETER_SPACING\n\t * \n\t * Defines the key for the target perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the target connection point of\n\t * an edge and the perimeter of the target vertex in pixels. This style\n\t * only applies to edges. Value is \"targetPerimeterSpacing\".\n\t */\n\tSTYLE_TARGET_PERIMETER_SPACING: 'targetPerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the perimeter spacing. This is the distance between\n\t * the connection point and the perimeter in pixels. When used in a vertex\n\t * style, this applies to all incoming edges to floating ports (edges that\n\t * terminate on the perimeter of the vertex). When used in an edge style,\n\t * this spacing applies to the source and target separately, if they\n\t * terminate in floating ports (on the perimeter of the vertex). Value is\n\t * \"perimeterSpacing\".\n\t */\n\tSTYLE_PERIMETER_SPACING: 'perimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_SPACING\n\t * \n\t * Defines the key for the spacing. The value represents the spacing, in\n\t * pixels, added to each side of a label in a vertex (style applies to\n\t * vertices only). Value is \"spacing\".\n\t */\n\tSTYLE_SPACING: 'spacing',\n\n\t/**\n\t * Variable: STYLE_SPACING_TOP\n\t * \n\t * Defines the key for the spacingTop style. The value represents the\n\t * spacing, in pixels, added to the top side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingTop\".\n\t */\n\tSTYLE_SPACING_TOP: 'spacingTop',\n\n\t/**\n\t * Variable: STYLE_SPACING_LEFT\n\t * \n\t * Defines the key for the spacingLeft style. The value represents the\n\t * spacing, in pixels, added to the left side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingLeft\".\n\t */\n\tSTYLE_SPACING_LEFT: 'spacingLeft',\n\n\t/**\n\t * Variable: STYLE_SPACING_BOTTOM\n\t * \n\t * Defines the key for the spacingBottom style The value represents the\n\t * spacing, in pixels, added to the bottom side of a label in a vertex\n\t * (style applies to vertices only). Value is \"spacingBottom\".\n\t */\n\tSTYLE_SPACING_BOTTOM: 'spacingBottom',\n\n\t/**\n\t * Variable: STYLE_SPACING_RIGHT\n\t * \n\t * Defines the key for the spacingRight style The value represents the\n\t * spacing, in pixels, added to the right side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingRight\".\n\t */\n\tSTYLE_SPACING_RIGHT: 'spacingRight',\n\n\t/**\n\t * Variable: STYLE_HORIZONTAL\n\t * \n\t * Defines the key for the horizontal style. Possible values are\n\t * true or false. This value only applies to vertices. If the <STYLE_SHAPE>\n\t * is \"SHAPE_SWIMLANE\" a value of false indicates that the\n\t * swimlane should be drawn vertically, true indicates to draw it\n\t * horizontally. If the shape style does not indicate that this vertex is a\n\t * swimlane, this value affects only whether the label is drawn\n\t * horizontally or vertically. Value is \"horizontal\".\n\t */\n\tSTYLE_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: STYLE_DIRECTION\n\t * \n\t * Defines the key for the direction style. The direction style is used\n\t * to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"direction\".\n\t */\n\tSTYLE_DIRECTION: 'direction',\n\n\t/**\n\t * Variable: STYLE_ANCHOR_POINT_DIRECTION\n\t * \n\t * Defines the key for the anchorPointDirection style. The defines if the\n\t * direction style should be taken into account when computing the fixed\n\t * point location for connected edges. Default is 1 (yes). Set this to 0\n\t * to ignore the direction style for fixed connection points. Value is\n\t * \"anchorPointDirection\".\n\t */\n\tSTYLE_ANCHOR_POINT_DIRECTION: 'anchorPointDirection',\n\n\t/**\n\t * Variable: STYLE_ELBOW\n\t * \n\t * Defines the key for the elbow style. Possible values are\n\t * <ELBOW_HORIZONTAL> and <ELBOW_VERTICAL>. Default is <ELBOW_HORIZONTAL>.\n\t * This defines how the three segment orthogonal edge style leaves its\n\t * terminal vertices. The vertical style leaves the terminal vertices at\n\t * the top and bottom sides. Value is \"elbow\".\n\t */\n\tSTYLE_ELBOW: 'elbow',\n\n\t/**\n\t * Variable: STYLE_FONTCOLOR\n\t * \n\t * Defines the key for the fontColor style. Possible values are all HTML\n\t * color names or HEX codes. Value is \"fontColor\".\n\t */\n\tSTYLE_FONTCOLOR: 'fontColor',\n\n\t/**\n\t * Variable: STYLE_FONTFAMILY\n\t * \n\t * Defines the key for the fontFamily style. Possible values are names such\n\t * as Arial; Dialog; Verdana; Times New Roman. The value is of type String.\n\t * Value is fontFamily.\n\t */\n\tSTYLE_FONTFAMILY: 'fontFamily',\n\n\t/**\n\t * Variable: STYLE_FONTSIZE\n\t * \n\t * Defines the key for the fontSize style (in px). The type of the value\n\t * is int. Value is \"fontSize\".\n\t */\n\tSTYLE_FONTSIZE: 'fontSize',\n\n\t/**\n\t * Variable: STYLE_FONTSTYLE\n\t * \n\t * Defines the key for the fontStyle style. Values may be any logical AND\n\t * (sum) of <FONT_BOLD>, <FONT_ITALIC> and <FONT_UNDERLINE>.\n\t * The type of the value is int. Value is \"fontStyle\".\n\t */\n\tSTYLE_FONTSTYLE: 'fontStyle',\n\t\n\t/**\n\t * Variable: STYLE_ASPECT\n\t * \n\t * Defines the key for the aspect style. Possible values are empty or fixed.\n\t * If fixed is used then the aspect ratio of the cell will be maintained\n\t * when resizing. Default is empty. Value is \"aspect\".\n\t */\n\tSTYLE_ASPECT: 'aspect',\n\n\t/**\n\t * Variable: STYLE_AUTOSIZE\n\t * \n\t * Defines the key for the autosize style. This specifies if a cell should be\n\t * resized automatically if the value has changed. Possible values are 0 or 1.\n\t * Default is 0. See <mxGraph.isAutoSizeCell>. This is normally combined with\n\t * <STYLE_RESIZABLE> to disable manual sizing. Value is \"autosize\".\n\t */\n\tSTYLE_AUTOSIZE: 'autosize',\n\n\t/**\n\t * Variable: STYLE_FOLDABLE\n\t * \n\t * Defines the key for the foldable style. This specifies if a cell is foldable\n\t * using a folding icon. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellFoldable>. Value is \"foldable\".\n\t */\n\tSTYLE_FOLDABLE: 'foldable',\n\n\t/**\n\t * Variable: STYLE_EDITABLE\n\t * \n\t * Defines the key for the editable style. This specifies if the value of\n\t * a cell can be edited using the in-place editor. Possible values are 0 or\n\t * 1. Default is 1. See <mxGraph.isCellEditable>. Value is \"editable\".\n\t */\n\tSTYLE_EDITABLE: 'editable',\n\n\t/**\n\t * Variable: STYLE_BACKGROUND_OUTLINE\n\t * \n\t * Defines the key for the backgroundOutline style. This specifies if a\n\t * only the background of a cell should be painted when it is highlighted.\n\t * Possible values are 0 or 1. Default is 0. Value is \"backgroundOutline\".\n\t */\n\tSTYLE_BACKGROUND_OUTLINE: 'backgroundOutline',\n\n\t/**\n\t * Variable: STYLE_BENDABLE\n\t * \n\t * Defines the key for the bendable style. This specifies if the control\n\t * points of an edge can be moved. Possible values are 0 or 1. Default is\n\t * 1. See <mxGraph.isCellBendable>. Value is \"bendable\".\n\t */\n\tSTYLE_BENDABLE: 'bendable',\n\n\t/**\n\t * Variable: STYLE_MOVABLE\n\t * \n\t * Defines the key for the movable style. This specifies if a cell can\n\t * be moved. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellMovable>. Value is \"movable\".\n\t */\n\tSTYLE_MOVABLE: 'movable',\n\n\t/**\n\t * Variable: STYLE_RESIZABLE\n\t * \n\t * Defines the key for the resizable style. This specifies if a cell can\n\t * be resized. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellResizable>. Value is \"resizable\".\n\t */\n\tSTYLE_RESIZABLE: 'resizable',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeWidth style. This specifies if a cell's\n\t * width is resized if the parent is resized. If this is 1 then the width\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's width will not be resized. Default is not defined. Value\n\t * is \"resizeWidth\".\n\t */\n\tSTYLE_RESIZE_WIDTH: 'resizeWidth',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeHeight style. This specifies if a cell's\n\t * height if resize if the parent is resized. If this is 1 then the height\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's height will not be resized. Default is not defined. Value\n\t * is \"resizeHeight\".\n\t */\n\tSTYLE_RESIZE_HEIGHT: 'resizeHeight',\n\n\t/**\n\t * Variable: STYLE_ROTATABLE\n\t * \n\t * Defines the key for the rotatable style. This specifies if a cell can\n\t * be rotated. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellRotatable>. Value is \"rotatable\".\n\t */\n\tSTYLE_ROTATABLE: 'rotatable',\n\n\t/**\n\t * Variable: STYLE_CLONEABLE\n\t * \n\t * Defines the key for the cloneable style. This specifies if a cell can\n\t * be cloned. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellCloneable>. Value is \"cloneable\".\n\t */\n\tSTYLE_CLONEABLE: 'cloneable',\n\n\t/**\n\t * Variable: STYLE_DELETABLE\n\t * \n\t * Defines the key for the deletable style. This specifies if a cell can be\n\t * deleted. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellDeletable>. Value is \"deletable\".\n\t */\n\tSTYLE_DELETABLE: 'deletable',\n\n\t/**\n\t * Variable: STYLE_SHAPE\n\t * \n\t * Defines the key for the shape. Possible values are all constants with\n\t * a SHAPE-prefix or any newly defined shape names. Value is \"shape\".\n\t */\n\tSTYLE_SHAPE: 'shape',\n\n\t/**\n\t * Variable: STYLE_EDGE\n\t * \n\t * Defines the key for the edge style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"edgeStyle\".\n\t */\n\tSTYLE_EDGE: 'edgeStyle',\n\n\t/**\n\t * Variable: STYLE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are all numeric values or \"auto\".\n\t * Jetty size is the minimum length of the orthogonal segment before\n\t * it attaches to a shape.\n\t * Value is \"jettySize\".\n\t */\n\tSTYLE_JETTY_SIZE: 'jettySize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"sourceJettySize\".\n\t */\n\tSTYLE_SOURCE_JETTY_SIZE: 'sourceJettySize',\n\n\t/**\n\t * Variable: targetJettySize\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"targetJettySize\".\n\t */\n\tSTYLE_TARGET_JETTY_SIZE: 'targetJettySize',\n\n\t/**\n\t * Variable: STYLE_LOOP\n\t * \n\t * Defines the key for the loop style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"loopStyle\". Default is\n\t * <mxGraph.defaultLoopStylean>.\n\t */\n\tSTYLE_LOOP: 'loopStyle',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL_LOOP\n\t * \n\t * Defines the key for the orthogonal loop style. Possible values are 0 and\n\t * 1. Default is 0. Value is \"orthogonalLoop\". Use this style to specify\n\t * if loops with no waypoints and defined anchor points should be routed\n\t * using <STYLE_LOOP> or not routed.\n\t */\n\tSTYLE_ORTHOGONAL_LOOP: 'orthogonalLoop',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_X\n\t * \n\t * Defines the key for the horizontal routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterX\".\n\t */\n\tSTYLE_ROUTING_CENTER_X: 'routingCenterX',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_Y\n\t * \n\t * Defines the key for the vertical routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterY\".\n\t */\n\tSTYLE_ROUTING_CENTER_Y: 'routingCenterY',\n\n\t/**\n\t * Variable: FONT_BOLD\n\t * \n\t * Constant for bold fonts. Default is 1.\n\t */\n\tFONT_BOLD: 1,\n\n\t/**\n\t * Variable: FONT_ITALIC\n\t * \n\t * Constant for italic fonts. Default is 2.\n\t */\n\tFONT_ITALIC: 2,\n\n\t/**\n\t * Variable: FONT_UNDERLINE\n\t * \n\t * Constant for underlined fonts. Default is 4.\n\t */\n\tFONT_UNDERLINE: 4,\n\n\t/**\n\t * Variable: FONT_STRIKETHROUGH\n\t * \n\t * Constant for strikthrough fonts. Default is 8.\n\t */\n\tFONT_STRIKETHROUGH: 8,\n\t\n\t/**\n\t * Variable: SHAPE_RECTANGLE\n\t * \n\t * Name under which <mxRectangleShape> is registered in <mxCellRenderer>.\n\t * Default is rectangle.\n\t */\n\tSHAPE_RECTANGLE: 'rectangle',\n\n\t/**\n\t * Variable: SHAPE_ELLIPSE\n\t * \n\t * Name under which <mxEllipse> is registered in <mxCellRenderer>.\n\t * Default is ellipse.\n\t */\n\tSHAPE_ELLIPSE: 'ellipse',\n\n\t/**\n\t * Variable: SHAPE_DOUBLE_ELLIPSE\n\t * \n\t * Name under which <mxDoubleEllipse> is registered in <mxCellRenderer>.\n\t * Default is doubleEllipse.\n\t */\n\tSHAPE_DOUBLE_ELLIPSE: 'doubleEllipse',\n\n\t/**\n\t * Variable: SHAPE_RHOMBUS\n\t * \n\t * Name under which <mxRhombus> is registered in <mxCellRenderer>.\n\t * Default is rhombus.\n\t */\n\tSHAPE_RHOMBUS: 'rhombus',\n\n\t/**\n\t * Variable: SHAPE_LINE\n\t * \n\t * Name under which <mxLine> is registered in <mxCellRenderer>.\n\t * Default is line.\n\t */\n\tSHAPE_LINE: 'line',\n\n\t/**\n\t * Variable: SHAPE_IMAGE\n\t * \n\t * Name under which <mxImageShape> is registered in <mxCellRenderer>.\n\t * Default is image.\n\t */\n\tSHAPE_IMAGE: 'image',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW\n\t * \n\t * Name under which <mxArrow> is registered in <mxCellRenderer>.\n\t * Default is arrow.\n\t */\n\tSHAPE_ARROW: 'arrow',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW_CONNECTOR\n\t * \n\t * Name under which <mxArrowConnector> is registered in <mxCellRenderer>.\n\t * Default is arrowConnector.\n\t */\n\tSHAPE_ARROW_CONNECTOR: 'arrowConnector',\n\t\n\t/**\n\t * Variable: SHAPE_LABEL\n\t * \n\t * Name under which <mxLabel> is registered in <mxCellRenderer>.\n\t * Default is label.\n\t */\n\tSHAPE_LABEL: 'label',\n\t\n\t/**\n\t * Variable: SHAPE_CYLINDER\n\t * \n\t * Name under which <mxCylinder> is registered in <mxCellRenderer>.\n\t * Default is cylinder.\n\t */\n\tSHAPE_CYLINDER: 'cylinder',\n\t\n\t/**\n\t * Variable: SHAPE_SWIMLANE\n\t * \n\t * Name under which <mxSwimlane> is registered in <mxCellRenderer>.\n\t * Default is swimlane.\n\t */\n\tSHAPE_SWIMLANE: 'swimlane',\n\t\t\n\t/**\n\t * Variable: SHAPE_CONNECTOR\n\t * \n\t * Name under which <mxConnector> is registered in <mxCellRenderer>.\n\t * Default is connector.\n\t */\n\tSHAPE_CONNECTOR: 'connector',\n\n\t/**\n\t * Variable: SHAPE_ACTOR\n\t * \n\t * Name under which <mxActor> is registered in <mxCellRenderer>.\n\t * Default is actor.\n\t */\n\tSHAPE_ACTOR: 'actor',\n\t\t\n\t/**\n\t * Variable: SHAPE_CLOUD\n\t * \n\t * Name under which <mxCloud> is registered in <mxCellRenderer>.\n\t * Default is cloud.\n\t */\n\tSHAPE_CLOUD: 'cloud',\n\t\t\n\t/**\n\t * Variable: SHAPE_TRIANGLE\n\t * \n\t * Name under which <mxTriangle> is registered in <mxCellRenderer>.\n\t * Default is triangle.\n\t */\n\tSHAPE_TRIANGLE: 'triangle',\n\t\t\n\t/**\n\t * Variable: SHAPE_HEXAGON\n\t * \n\t * Name under which <mxHexagon> is registered in <mxCellRenderer>.\n\t * Default is hexagon.\n\t */\n\tSHAPE_HEXAGON: 'hexagon',\n\n\t/**\n\t * Variable: ARROW_CLASSIC\n\t * \n\t * Constant for classic arrow markers.\n\t */\n\tARROW_CLASSIC: 'classic',\n\n\t/**\n\t * Variable: ARROW_CLASSIC_THIN\n\t * \n\t * Constant for thin classic arrow markers.\n\t */\n\tARROW_CLASSIC_THIN: 'classicThin',\n\n\t/**\n\t * Variable: ARROW_BLOCK\n\t * \n\t * Constant for block arrow markers.\n\t */\n\tARROW_BLOCK: 'block',\n\n\t/**\n\t * Variable: ARROW_BLOCK_THIN\n\t * \n\t * Constant for thin block arrow markers.\n\t */\n\tARROW_BLOCK_THIN: 'blockThin',\n\n\t/**\n\t * Variable: ARROW_OPEN\n\t * \n\t * Constant for open arrow markers.\n\t */\n\tARROW_OPEN: 'open',\n\n\t/**\n\t * Variable: ARROW_OPEN_THIN\n\t * \n\t * Constant for thin open arrow markers.\n\t */\n\tARROW_OPEN_THIN: 'openThin',\n\n\t/**\n\t * Variable: ARROW_OVAL\n\t * \n\t * Constant for oval arrow markers.\n\t */\n\tARROW_OVAL: 'oval',\n\n\t/**\n\t * Variable: ARROW_DIAMOND\n\t * \n\t * Constant for diamond arrow markers.\n\t */\n\tARROW_DIAMOND: 'diamond',\n\n\t/**\n\t * Variable: ARROW_DIAMOND_THIN\n\t * \n\t * Constant for thin diamond arrow markers.\n\t */\n\tARROW_DIAMOND_THIN: 'diamondThin',\n\n\t/**\n\t * Variable: ALIGN_LEFT\n\t * \n\t * Constant for left horizontal alignment. Default is left.\n\t */\n\tALIGN_LEFT: 'left',\n\n\t/**\n\t * Variable: ALIGN_CENTER\n\t * \n\t * Constant for center horizontal alignment. Default is center.\n\t */\n\tALIGN_CENTER: 'center',\n\n\t/**\n\t * Variable: ALIGN_RIGHT\n\t * \n\t * Constant for right horizontal alignment. Default is right.\n\t */\n\tALIGN_RIGHT: 'right',\n\n\t/**\n\t * Variable: ALIGN_TOP\n\t * \n\t * Constant for top vertical alignment. Default is top.\n\t */\n\tALIGN_TOP: 'top',\n\n\t/**\n\t * Variable: ALIGN_MIDDLE\n\t * \n\t * Constant for middle vertical alignment. Default is middle.\n\t */\n\tALIGN_MIDDLE: 'middle',\n\n\t/**\n\t * Variable: ALIGN_BOTTOM\n\t * \n\t * Constant for bottom vertical alignment. Default is bottom.\n\t */\n\tALIGN_BOTTOM: 'bottom',\n\n\t/**\n\t * Variable: DIRECTION_NORTH\n\t * \n\t * Constant for direction north. Default is north.\n\t */\n\tDIRECTION_NORTH: 'north',\n\n\t/**\n\t * Variable: DIRECTION_SOUTH\n\t * \n\t * Constant for direction south. Default is south.\n\t */\n\tDIRECTION_SOUTH: 'south',\n\n\t/**\n\t * Variable: DIRECTION_EAST\n\t * \n\t * Constant for direction east. Default is east.\n\t */\n\tDIRECTION_EAST: 'east',\n\n\t/**\n\t * Variable: DIRECTION_WEST\n\t * \n\t * Constant for direction west. Default is west.\n\t */\n\tDIRECTION_WEST: 'west',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_DEFAULT\n\t * \n\t * Constant for text direction default. Default is an empty string. Use\n\t * this value to use the default text direction of the operating system. \n\t */\n\tTEXT_DIRECTION_DEFAULT: '',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_AUTO\n\t * \n\t * Constant for text direction automatic. Default is auto. Use this value\n\t * to find the direction for a given text with <mxText.getAutoDirection>. \n\t */\n\tTEXT_DIRECTION_AUTO: 'auto',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_LTR\n\t * \n\t * Constant for text direction left to right. Default is ltr. Use this\n\t * value for left to right text direction.\n\t */\n\tTEXT_DIRECTION_LTR: 'ltr',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_RTL\n\t * \n\t * Constant for text direction right to left. Default is rtl. Use this\n\t * value for right to left text direction.\n\t */\n\tTEXT_DIRECTION_RTL: 'rtl',\n\n\t/**\n\t * Variable: DIRECTION_MASK_NONE\n\t * \n\t * Constant for no direction.\n\t */\n\tDIRECTION_MASK_NONE: 0,\n\n\t/**\n\t * Variable: DIRECTION_MASK_WEST\n\t * \n\t * Bitwise mask for west direction.\n\t */\n\tDIRECTION_MASK_WEST: 1,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_NORTH\n\t * \n\t * Bitwise mask for north direction.\n\t */\n\tDIRECTION_MASK_NORTH: 2,\n\n\t/**\n\t * Variable: DIRECTION_MASK_SOUTH\n\t * \n\t * Bitwise mask for south direction.\n\t */\n\tDIRECTION_MASK_SOUTH: 4,\n\n\t/**\n\t * Variable: DIRECTION_MASK_EAST\n\t * \n\t * Bitwise mask for east direction.\n\t */\n\tDIRECTION_MASK_EAST: 8,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_ALL\n\t * \n\t * Bitwise mask for all directions.\n\t */\n\tDIRECTION_MASK_ALL: 15,\n\n\t/**\n\t * Variable: ELBOW_VERTICAL\n\t * \n\t * Constant for elbow vertical. Default is horizontal.\n\t */\n\tELBOW_VERTICAL: 'vertical',\n\n\t/**\n\t * Variable: ELBOW_HORIZONTAL\n\t * \n\t * Constant for elbow horizontal. Default is horizontal.\n\t */\n\tELBOW_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: EDGESTYLE_ELBOW\n\t * \n\t * Name of the elbow edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ELBOW: 'elbowEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ENTITY_RELATION\n\t * \n\t * Name of the entity relation edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ENTITY_RELATION: 'entityRelationEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_LOOP\n\t * \n\t * Name of the loop edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_LOOP: 'loopEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SIDETOSIDE\n\t * \n\t * Name of the side to side edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SIDETOSIDE: 'sideToSideEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_TOPTOBOTTOM\n\t * \n\t * Name of the top to bottom edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_TOPTOBOTTOM: 'topToBottomEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ORTHOGONAL\n\t * \n\t * Name of the generic orthogonal edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ORTHOGONAL: 'orthogonalEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SEGMENT\n\t * \n\t * Name of the generic segment edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SEGMENT: 'segmentEdgeStyle',\n \n\t/**\n\t * Variable: PERIMETER_ELLIPSE\n\t * \n\t * Name of the ellipse perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_ELLIPSE: 'ellipsePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RECTANGLE\n\t *\n\t * Name of the rectangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RECTANGLE: 'rectanglePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RHOMBUS\n\t * \n\t * Name of the rhombus perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RHOMBUS: 'rhombusPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_HEXAGON\n\t * \n\t * Name of the hexagon perimeter. Can be used as a string value \n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_HEXAGON: 'hexagonPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_TRIANGLE\n\t * \n\t * Name of the triangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_TRIANGLE: 'trianglePerimeter'\n};\n\n__mxOutput.mxConstants = typeof mxConstants !== 'undefined' ? mxConstants : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventObject\n * \n * The mxEventObject is a wrapper for all properties of a single event.\n * Additionally, it also offers functions to consume the event and check if it\n * was consumed as follows:\n * \n * (code)\n * evt.consume();\n * INV: evt.isConsumed() == true\n * (end)\n * \n * Constructor: mxEventObject\n *\n * Constructs a new event object with the specified name. An optional\n * sequence of key, value pairs can be appended to define properties.\n * \n * Example:\n *\n * (code)\n * new mxEventObject(\"eventName\", key1, val1, .., keyN, valN)\n * (end)\n */\nfunction mxEventObject(name)\n{\n\tthis.name = name;\n\tthis.properties = [];\n\t\n\tfor (var i = 1; i < arguments.length; i += 2)\n\t{\n\t\tif (arguments[i + 1] != null)\n\t\t{\n\t\t\tthis.properties[arguments[i]] = arguments[i + 1];\n\t\t}\n\t}\n};\n\n/**\n * Variable: name\n *\n * Holds the name.\n */\nmxEventObject.prototype.name = null;\n\n/**\n * Variable: properties\n *\n * Holds the properties as an associative array.\n */\nmxEventObject.prototype.properties = null;\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state. Default is false.\n */\nmxEventObject.prototype.consumed = false;\n\n/**\n * Function: getName\n * \n * Returns <name>.\n */\nmxEventObject.prototype.getName = function()\n{\n\treturn this.name;\n};\n\n/**\n * Function: getProperties\n * \n * Returns <properties>.\n */\nmxEventObject.prototype.getProperties = function()\n{\n\treturn this.properties;\n};\n\n/**\n * Function: getProperty\n * \n * Returns the property for the given key.\n */\nmxEventObject.prototype.getProperty = function(key)\n{\n\treturn this.properties[key];\n};\n\n/**\n * Function: isConsumed\n *\n * Returns true if the event has been consumed.\n */\nmxEventObject.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Consumes the event.\n */\nmxEventObject.prototype.consume = function()\n{\n\tthis.consumed = true;\n};\n\n__mxOutput.mxEventObject = typeof mxEventObject !== 'undefined' ? mxEventObject : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMouseEvent\n * \n * Base class for all mouse events in mxGraph. A listener for this event should\n * implement the following methods:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   mouseDown: function(sender, evt)\n *   {\n *     mxLog.debug('mouseDown');\n *   },\n *   mouseMove: function(sender, evt)\n *   {\n *     mxLog.debug('mouseMove');\n *   },\n *   mouseUp: function(sender, evt)\n *   {\n *     mxLog.debug('mouseUp');\n *   }\n * });\n * (end)\n * \n * Constructor: mxMouseEvent\n *\n * Constructs a new event object for the given arguments.\n * \n * Parameters:\n * \n * evt - Native mouse event.\n * state - Optional <mxCellState> under the mouse.\n * \n */\nfunction mxMouseEvent(evt, state)\n{\n\tthis.evt = evt;\n\tthis.state = state;\n\tthis.sourceState = state;\n};\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state of this event.\n */\nmxMouseEvent.prototype.consumed = false;\n\n/**\n * Variable: evt\n *\n * Holds the inner event object.\n */\nmxMouseEvent.prototype.evt = null;\n\n/**\n * Variable: graphX\n *\n * Holds the x-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphX = null;\n\n/**\n * Variable: graphY\n *\n * Holds the y-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphY = null;\n\n/**\n * Variable: state\n *\n * Holds the optional <mxCellState> associated with this event.\n */\nmxMouseEvent.prototype.state = null;\n\n/**\n * Variable: sourceState\n * \n * Holds the <mxCellState> that was passed to the constructor. This can be\n * different from <state> depending on the result of <mxGraph.getEventState>.\n */\nmxMouseEvent.prototype.sourceState = null;\n\n/**\n * Function: getEvent\n * \n * Returns <evt>.\n */\nmxMouseEvent.prototype.getEvent = function()\n{\n\treturn this.evt;\n};\n\n/**\n * Function: getSource\n * \n * Returns the target DOM element using <mxEvent.getSource> for <evt>.\n */\nmxMouseEvent.prototype.getSource = function()\n{\n\treturn mxEvent.getSource(this.evt);\n};\n\n/**\n * Function: isSource\n * \n * Returns true if the given <mxShape> is the source of <evt>.\n */\nmxMouseEvent.prototype.isSource = function(shape)\n{\n\tif (shape != null)\n\t{\n\t\treturn mxUtils.isAncestorNode(shape.node, this.getSource());\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getX\n * \n * Returns <evt.clientX>.\n */\nmxMouseEvent.prototype.getX = function()\n{\n\treturn mxEvent.getClientX(this.getEvent());\n};\n\n/**\n * Function: getY\n * \n * Returns <evt.clientY>.\n */\nmxMouseEvent.prototype.getY = function()\n{\n\treturn mxEvent.getClientY(this.getEvent());\n};\n\n/**\n * Function: getGraphX\n * \n * Returns <graphX>.\n */\nmxMouseEvent.prototype.getGraphX = function()\n{\n\treturn this.graphX;\n};\n\n/**\n * Function: getGraphY\n * \n * Returns <graphY>.\n */\nmxMouseEvent.prototype.getGraphY = function()\n{\n\treturn this.graphY;\n};\n\n/**\n * Function: getState\n * \n * Returns <state>.\n */\nmxMouseEvent.prototype.getState = function()\n{\n\treturn this.state;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> in <state> is not null.\n */\nmxMouseEvent.prototype.getCell = function()\n{\n\tvar state = this.getState();\n\t\n\tif (state != null)\n\t{\n\t\treturn state.cell;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isPopupTrigger\n *\n * Returns true if the event is a popup trigger.\n */\nmxMouseEvent.prototype.isPopupTrigger = function()\n{\n\treturn mxEvent.isPopupTrigger(this.getEvent());\n};\n\n/**\n * Function: isConsumed\n *\n * Returns <consumed>.\n */\nmxMouseEvent.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Sets <consumed> to true and invokes preventDefault on the native event\n * if such a method is defined. This is used mainly to avoid the cursor from\n * being changed to a text cursor in Webkit. You can use the preventDefault\n * flag to disable this functionality.\n * \n * Parameters:\n * \n * preventDefault - Specifies if the native event should be canceled. Default\n * is true.\n */\nmxMouseEvent.prototype.consume = function(preventDefault)\n{\n\tpreventDefault = (preventDefault != null) ? preventDefault :\n\t\t(this.evt.touches != null || mxEvent.isMouseEvent(this.evt));\n\t\n\tif (preventDefault && this.evt.preventDefault)\n\t{\n\t\tthis.evt.preventDefault();\n\t}\n\n\t// Workaround for images being dragged in IE\n\t// Does not change returnValue in Opera\n\tif (mxClient.IS_IE)\n\t{\n\t\tthis.evt.returnValue = true;\n\t}\n\n\t// Sets local consumed state\n\tthis.consumed = true;\n};\n\n__mxOutput.mxMouseEvent = typeof mxMouseEvent !== 'undefined' ? mxMouseEvent : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventSource\n *\n * Base class for objects that dispatch named events. To create a subclass that\n * inherits from mxEventSource, the following code is used.\n *\n * (code)\n * function MyClass() { };\n *\n * MyClass.prototype = new mxEventSource();\n * MyClass.prototype.constructor = MyClass;\n * (end)\n *\n * Known Subclasses:\n *\n * <mxGraphModel>, <mxGraph>, <mxGraphView>, <mxEditor>, <mxCellOverlay>,\n * <mxToolbar>, <mxWindow>\n * \n * Constructor: mxEventSource\n *\n * Constructs a new event source.\n */\nfunction mxEventSource(eventSource)\n{\n\tthis.setEventSource(eventSource);\n};\n\n/**\n * Variable: eventListeners\n *\n * Holds the event names and associated listeners in an array. The array\n * contains the event name followed by the respective listener for each\n * registered listener.\n */\nmxEventSource.prototype.eventListeners = null;\n\n/**\n * Variable: eventsEnabled\n *\n * Specifies if events can be fired. Default is true.\n */\nmxEventSource.prototype.eventsEnabled = true;\n\n/**\n * Variable: eventSource\n *\n * Optional source for events. Default is null.\n */\nmxEventSource.prototype.eventSource = null;\n\n/**\n * Function: isEventsEnabled\n * \n * Returns <eventsEnabled>.\n */\nmxEventSource.prototype.isEventsEnabled = function()\n{\n\treturn this.eventsEnabled;\n};\n\n/**\n * Function: setEventsEnabled\n * \n * Sets <eventsEnabled>.\n */\nmxEventSource.prototype.setEventsEnabled = function(value)\n{\n\tthis.eventsEnabled = value;\n};\n\n/**\n * Function: getEventSource\n * \n * Returns <eventSource>.\n */\nmxEventSource.prototype.getEventSource = function()\n{\n\treturn this.eventSource;\n};\n\n/**\n * Function: setEventSource\n * \n * Sets <eventSource>.\n */\nmxEventSource.prototype.setEventSource = function(value)\n{\n\tthis.eventSource = value;\n};\n\n/**\n * Function: addListener\n *\n * Binds the specified function to the given event name. If no event name\n * is given, then the listener is registered for all events.\n * \n * The parameters of the listener are the sender and an <mxEventObject>.\n */\nmxEventSource.prototype.addListener = function(name, funct)\n{\n\tif (this.eventListeners == null)\n\t{\n\t\tthis.eventListeners = [];\n\t}\n\t\n\tthis.eventListeners.push(name);\n\tthis.eventListeners.push(funct);\n};\n\n/**\n * Function: removeListener\n *\n * Removes all occurrences of the given listener from <eventListeners>.\n */\nmxEventSource.prototype.removeListener = function(funct)\n{\n\tif (this.eventListeners != null)\n\t{\n\t\tvar i = 0;\n\t\t\n\t\twhile (i < this.eventListeners.length)\n\t\t{\n\t\t\tif (this.eventListeners[i+1] == funct)\n\t\t\t{\n\t\t\t\tthis.eventListeners.splice(i, 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fireEvent\n *\n * Dispatches the given event to the listeners which are registered for\n * the event. The sender argument is optional. The current execution scope\n * (\"this\") is used for the listener invocation (see <mxUtils.bind>).\n *\n * Example:\n *\n * (code)\n * fireEvent(new mxEventObject(\"eventName\", key1, val1, .., keyN, valN))\n * (end)\n * \n * Parameters:\n *\n * evt - <mxEventObject> that represents the event.\n * sender - Optional sender to be passed to the listener. Default value is\n * the return value of <getEventSource>.\n */\nmxEventSource.prototype.fireEvent = function(evt, sender)\n{\n\tif (this.eventListeners != null && this.isEventsEnabled())\n\t{\n\t\tif (evt == null)\n\t\t{\n\t\t\tevt = new mxEventObject();\n\t\t}\n\t\t\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this.getEventSource();\n\t\t}\n\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this;\n\t\t}\n\n\t\tvar args = [sender, evt];\n\t\t\n\t\tfor (var i = 0; i < this.eventListeners.length; i += 2)\n\t\t{\n\t\t\tvar listen = this.eventListeners[i];\n\t\t\t\n\t\t\tif (listen == null || listen == evt.getName())\n\t\t\t{\n\t\t\t\tthis.eventListeners[i+1].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEventSource = typeof mxEventSource !== 'undefined' ? mxEventSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEvent =\n{\n\n\t/**\n\t * Class: mxEvent\n\t * \n\t * Cross-browser DOM event support. For internal event handling,\n\t * <mxEventSource> and the graph event dispatch loop in <mxGraph> are used.\n\t * \n\t * Memory Leaks:\n\t * \n\t * Use this class for adding and removing listeners to/from DOM nodes. The\n\t * <removeAllListeners> function is provided to remove all listeners that\n\t * have been added using <addListener>. The function should be invoked when\n\t * the last reference is removed in the JavaScript code, typically when the\n\t * referenced DOM node is removed from the DOM.\n\t *\n\t * Function: addListener\n\t * \n\t * Binds the function to the specified event on the given element. Use\n\t * <mxUtils.bind> in order to bind the \"this\" keyword inside the function\n\t * to a given execution scope.\n\t */\n\taddListener: function()\n\t{\n\t\tvar updateListenerList = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList == null)\n\t\t\t{\n\t\t\t\telement.mxListenerList = [];\n\t\t\t}\n\t\t\t\n\t\t\tvar entry = {name: eventName, f: funct};\n\t\t\telement.mxListenerList.push(entry);\n\t\t};\n\t\t\n\t\tif (window.addEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.addEventListener(eventName, funct, false);\n\t\t\t\tupdateListenerList(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.attachEvent('on' + eventName, funct);\n\t\t\t\tupdateListenerList(element, eventName, funct);\t\t\t\t\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeListener\n\t *\n\t * Removes the specified listener from the given element.\n\t */\n\tremoveListener: function()\n\t{\n\t\tvar updateListener = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList != null)\n\t\t\t{\n\t\t\t\tvar listenerCount = element.mxListenerList.length;\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < listenerCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar entry = element.mxListenerList[i];\n\t\t\t\t\t\n\t\t\t\t\tif (entry.f == funct)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.mxListenerList.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (element.mxListenerList.length == 0)\n\t\t\t\t{\n\t\t\t\t\telement.mxListenerList = null;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tif (window.removeEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.removeEventListener(eventName, funct, false);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.detachEvent('on' + eventName, funct);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeAllListeners\n\t * \n\t * Removes all listeners from the given element.\n\t */\n\tremoveAllListeners: function(element)\n\t{\n\t\tvar list = element.mxListenerList;\n\n\t\tif (list != null)\n\t\t{\n\t\t\twhile (list.length > 0)\n\t\t\t{\n\t\t\t\tvar entry = list[0];\n\t\t\t\tmxEvent.removeListener(element, entry.name, entry.f);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: addGestureListeners\n\t * \n\t * Adds the given listeners for touch, mouse and/or pointer events. If\n\t * <mxClient.IS_POINTER> is true then pointer events will be registered,\n\t * else the respective mouse events will be registered. If <mxClient.IS_POINTER>\n\t * is false and <mxClient.IS_TOUCH> is true then the respective touch events\n\t * will be registered as well as the mouse events.\n\t */\n\taddGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: removeGestureListeners\n\t * \n\t * Removes the given listeners from mousedown, mousemove, mouseup and the\n\t * respective touch events if <mxClient.IS_TOUCH> is true.\n\t */\n\tremoveGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: redirectMouseEvents\n\t *\n\t * Redirects the mouse events from the given DOM node to the graph dispatch\n\t * loop using the event and given state as event arguments. State can\n\t * either be an instance of <mxCellState> or a function that returns an\n\t * <mxCellState>. The down, move, up and dblClick arguments are optional\n\t * functions that take the trigger event as arguments and replace the\n\t * default behaviour.\n\t */\n\tredirectMouseEvents: function(node, graph, state, down, move, up, dblClick)\n\t{\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\treturn (typeof(state) == 'function') ? state(evt) : state;\n\t\t};\n\t\t\n\t\tmxEvent.addGestureListeners(node, function (evt)\n\t\t{\n\t\t\tif (down != null)\n\t\t\t{\n\t\t\t\tdown(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (move != null)\n\t\t\t{\n\t\t\t\tmove(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (up != null)\n\t\t\t{\n\t\t\t\tup(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.addListener(node, 'dblclick', function (evt)\n\t\t{\n\t\t\tif (dblClick != null)\n\t\t\t{\n\t\t\t\tdblClick(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tvar tmp = getState(evt);\n\t\t\t\tgraph.dblClick(evt, (tmp != null) ? tmp.cell : null);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Function: release\n\t * \n\t * Removes the known listeners from the given DOM node and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the listeners from.\n\t */\n\trelease: function(element)\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (element != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeAllListeners(element);\n\t\t\t\t\n\t\t\t\tvar children = element.childNodes;\n\t\t\t\t\n\t\t\t\tif (children != null)\n\t\t\t\t{\n\t\t\t        var childCount = children.length;\n\t\t\t        \n\t\t\t        for (var i = 0; i < childCount; i += 1)\n\t\t\t        {\n\t\t\t        \tmxEvent.release(children[i]);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignores errors as this is typically called in cleanup code\n\t\t}\n\t},\n\n\t/**\n\t * Function: addMouseWheelListener\n\t * \n\t * Installs the given function as a handler for mouse wheel events. The\n\t * function has two arguments: the mouse event and a boolean that specifies\n\t * if the wheel was moved up or down.\n\t * \n\t * This has been tested with IE 6 and 7, Firefox (all versions), Opera and\n\t * Safari. It does currently not work on Safari for Mac.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * mxEvent.addMouseWheelListener(function (evt, up, pinch)\n\t * {\n\t *   mxLog.show();\n\t *   mxLog.debug('mouseWheel: up='+up);\n\t * });\n\t *(end)\n\t * \n\t * Parameters:\n\t * \n\t * funct - Handler function that takes the event argument, a boolean argument\n\t * for the mousewheel direction and a boolean to specify if the underlying\n\t * event was a pinch gesture on a touch device.\n\t * target - Target for installing the listener in Google Chrome. See \n\t * https://www.chromestatus.com/features/6662647093133312.\n\t */\n\taddMouseWheelListener: function(funct, target)\n\t{\n\t\tif (funct != null)\n\t\t{\n\t\t\tvar wheelHandler = function(evt)\n\t\t\t{\n\t\t\t\t// IE does not give an event object but the\n\t\t\t\t// global event object is the mousewheel event\n\t\t\t\t// at this point in time.\n\t\t\t\tif (evt == null)\n\t\t\t\t{\n\t\t\t\t\tevt = window.event;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t//To prevent window zoom on trackpad pinch\n\t\t\t\tif (evt.ctrlKey) \n\t\t\t\t{\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tvar delta = -evt.deltaY;\n\t\t\t\t\n\t\t\t\t// Handles the event using the given function\n\t\t\t\tif (Math.abs(evt.deltaX) > 0.5 || Math.abs(evt.deltaY) > 0.5)\n\t\t\t\t{\n\t\t\t\t\tfunct(evt, (evt.deltaY == 0) ?  -evt.deltaX > 0 : -evt.deltaY > 0);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\ttarget = target != null ? target : window;\n\t\t\t\t\t\n\t\t\tif (mxClient.IS_SF && !mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar scale = 1;\n\t\t\t\t\n\t\t\t\tmxEvent.addListener(target, 'gesturestart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\tscale = 1;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tmxEvent.addListener(target, 'gesturechange', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\tvar diff = scale - evt.scale;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(diff) > 0.2)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt, diff < 0, true);\n\t\t\t\t\t\tscale = evt.scale;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmxEvent.addListener(target, 'gestureend', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar evtCache = [];\n\t\t\t\tvar dx0 = 0;\n\t\t\t\tvar dy0 = 0;\n\t\t\t\t\n\t\t\t\t// Adds basic listeners for graph event dispatching\n\t\t\t\tmxEvent.addGestureListeners(target, mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (!mxEvent.isMouseEvent(evt) && evt.pointerId != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tevtCache.push(evt);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (!mxEvent.isMouseEvent(evt) && evtCache.length == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Find this event in the cache and update its record with this event\n\t\t\t\t\t\tfor (var i = 0; i < evtCache.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (evt.pointerId == evtCache[i].pointerId)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tevtCache[i] = evt;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t   \t// Calculate the distance between the two pointers\n\t\t\t\t\t\tvar dx = Math.abs(evtCache[0].clientX - evtCache[1].clientX);\n\t\t\t\t\t\tvar dy = Math.abs(evtCache[0].clientY - evtCache[1].clientY);\n\t\t\t\t\t\tvar tx = Math.abs(dx - dx0);\n\t\t\t\t\t\tvar ty = Math.abs(dy - dy0);\n\t\t\t\t\t\n\t\t\t\t\t\tif (tx > mxEvent.PINCH_THRESHOLD || ty > mxEvent.PINCH_THRESHOLD)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar cx = evtCache[0].clientX + (evtCache[1].clientX - evtCache[0].clientX) / 2;\n\t\t\t\t\t\t\tvar cy = evtCache[0].clientY + (evtCache[1].clientY - evtCache[0].clientY) / 2;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfunct(evtCache[0], (tx > ty) ? dx > dx0 : dy > dy0, true, cx, cy);\n\t\t\t\t\t\t\n\t\t\t\t\t\t   \t// Cache the distance for the next move event \n\t\t\t\t\t\t\tdx0 = dx;\n\t\t\t\t\t\t\tdy0 = dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tevtCache = [];\n\t\t\t\t\tdx0 = 0;\n\t\t\t\t\tdy0 = 0;\n\t\t\t\t}));\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.addListener(target, 'wheel', wheelHandler);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: disableContextMenu\n\t *\n\t * Disables the context menu for the given element.\n\t */\n\tdisableContextMenu: function(element)\n\t{\n\t\tmxEvent.addListener(element, 'contextmenu', function(evt)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t},\n\t\n\t/**\n\t * Function: getSource\n\t * \n\t * Returns the event's target or srcElement depending on the browser.\n\t */\n\tgetSource: function(evt)\n\t{\n\t\treturn (evt.srcElement != null) ? evt.srcElement : evt.target;\n\t},\n\n\t/**\n\t * Function: isConsumed\n\t * \n\t * Returns true if the event has been consumed using <consume>.\n\t */\n\tisConsumed: function(evt)\n\t{\n\t\treturn evt.isConsumed != null && evt.isConsumed;\n\t},\n\n\t/**\n\t * Function: isTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisTouchEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'touch' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_TOUCH) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 5 : evt.type.indexOf('touch') == 0);\n\t},\n\n\t/**\n\t * Function: isPenEvent\n\t * \n\t * Returns true if the event was generated using a pen (not a touch device or mouse).\n\t */\n\tisPenEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'pen' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_PEN) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 2 : evt.type.indexOf('pen') == 0);\n\t},\n\n\t/**\n\t * Function: isMultiTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisMultiTouchEvent: function(evt)\n\t{\n\t\treturn (evt.type != null && evt.type.indexOf('touch') == 0 && evt.touches != null && evt.touches.length > 1);\n\t},\n\n\t/**\n\t * Function: isMouseEvent\n\t * \n\t * Returns true if the event was generated using a mouse (not a pen or touch device).\n\t */\n\tisMouseEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'mouse' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?\n\t\t\t\tevt.mozInputSource == 1 : evt.type.indexOf('mouse') == 0);\n\t},\n\t\n\t/**\n\t * Function: isLeftMouseButton\n\t * \n\t * Returns true if the left mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property. Note that this returns true in Firefox\n\t * for control+left-click on the Mac.\n\t */\n\tisLeftMouseButton: function(evt)\n\t{\n\t\t// Special case for mousemove and mousedown we check the buttons\n\t\t// if it exists because which is 0 even if no button is pressed\n\t\tif ('buttons' in evt && (evt.type == 'mousedown' || evt.type == 'mousemove'))\n\t\t{\n\t\t\treturn evt.buttons == 1;\n\t\t}\n\t\telse if ('which' in evt)\n\t\t{\n\t        return evt.which === 1;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 1;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isMiddleMouseButton\n\t * \n\t * Returns true if the middle mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property.\n\t */\n\tisMiddleMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 2;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 4;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isRightMouseButton\n\t * \n\t * Returns true if the right mouse button was pressed. Note that this\n\t * button might not be available on some systems. For handling a popup\n\t * trigger <isPopupTrigger> should be used.\n\t */\n\tisRightMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 3;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 2;\n\t    }\n\t},\n\n\t/**\n\t * Function: isPopupTrigger\n\t * \n\t * Returns true if the event is a popup trigger. This implementation\n\t * returns true if the right button or the left button and control was\n\t * pressed on a Mac.\n\t */\n\tisPopupTrigger: function(evt)\n\t{\n\t\treturn mxEvent.isRightMouseButton(evt) || (mxClient.IS_MAC && mxEvent.isControlDown(evt) &&\n\t\t\t!mxEvent.isShiftDown(evt) && !mxEvent.isMetaDown(evt) && !mxEvent.isAltDown(evt));\n\t},\n\n\t/**\n\t * Function: isShiftDown\n\t * \n\t * Returns true if the shift key is pressed for the given event.\n\t */\n\tisShiftDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.shiftKey : false;\n\t},\n\n\t/**\n\t * Function: isAltDown\n\t * \n\t * Returns true if the alt key is pressed for the given event.\n\t */\n\tisAltDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.altKey : false;\n\t},\n\n\t/**\n\t * Function: isControlDown\n\t * \n\t * Returns true if the control key is pressed for the given event.\n\t */\n\tisControlDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.ctrlKey : false;\n\t},\n\n\t/**\n\t * Function: isMetaDown\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tisMetaDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.metaKey : false;\n\t},\n\n\t/**\n\t * Function: getMainEvent\n\t * \n\t * Returns the touch or mouse event that contains the mouse coordinates.\n\t */\n\tgetMainEvent: function(e)\n\t{\n\t\tif ((e.type == 'touchstart' || e.type == 'touchmove') && e.touches != null && e.touches[0] != null)\n\t\t{\n\t\t\te = e.touches[0];\n\t\t}\n\t\telse if (e.type == 'touchend' && e.changedTouches != null && e.changedTouches[0] != null)\n\t\t{\n\t\t\te = e.changedTouches[0];\n\t\t}\n\t\t\n\t\treturn e;\n\t},\n\t\n\t/**\n\t * Function: getClientX\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientX: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientX;\n\t},\n\n\t/**\n\t * Function: getClientY\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientY: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientY;\n\t},\n\n\t/**\n\t * Function: consume\n\t * \n\t * Consumes the given event.\n\t * \n\t * Parameters:\n\t * \n\t * evt - Native event to be consumed.\n\t * preventDefault - Optional boolean to prevent the default for the event.\n\t * Default is true.\n\t * stopPropagation - Option boolean to stop event propagation. Default is\n\t * true.\n\t */\n\tconsume: function(evt, preventDefault, stopPropagation)\n\t{\n\t\tpreventDefault = (preventDefault != null) ? preventDefault : true;\n\t\tstopPropagation = (stopPropagation != null) ? stopPropagation : true;\n\t\t\n\t\tif (preventDefault)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tif (stopPropagation)\n\t\t\t\t{\n\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\telse if (stopPropagation)\n\t\t\t{\n\t\t\t\tevt.cancelBubble = true;\n\t\t\t}\n\t\t}\n\n\t\t// Opera\n\t\tevt.isConsumed = true;\n\n\t\t// Other browsers\n\t\tif (!evt.preventDefault)\n\t\t{\n\t\t\tevt.returnValue = false;\n\t\t}\n\t},\n\t\n\t//\n\t// Special handles in mouse events\n\t//\n\t\n\t/**\n\t * Variable: LABEL_HANDLE\n\t * \n\t * Index for the label handle in an mxMouseEvent. This should be a negative\n\t * value that does not interfere with any possible handle indices. Default\n\t * is -1.\n\t */\n\tLABEL_HANDLE: -1,\n\t\n\t/**\n\t * Variable: ROTATION_HANDLE\n\t * \n\t * Index for the rotation handle in an mxMouseEvent. This should be a\n\t * negative value that does not interfere with any possible handle indices.\n\t * Default is -2.\n\t */\n\tROTATION_HANDLE: -2,\n\t\n\t/**\n\t * Variable: CUSTOM_HANDLE\n\t * \n\t * Start index for the custom handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * custom handle. Default is -100.\n\t */\n\tCUSTOM_HANDLE: -100,\n\t\n\t/**\n\t * Variable: VIRTUAL_HANDLE\n\t * \n\t * Start index for the virtual handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * virtual handle. Default is -100000. This assumes that there are no more\n\t * than VIRTUAL_HANDLE - CUSTOM_HANDLE custom handles.\n\t * \n\t */\n\tVIRTUAL_HANDLE: -100000,\n\t\n\t//\n\t// Event names\n\t//\n\t\n\t/**\n\t * Variable: MOUSE_DOWN\n\t *\n\t * Specifies the event name for mouseDown.\n\t */\n\tMOUSE_DOWN: 'mouseDown',\n\t\n\t/**\n\t * Variable: MOUSE_MOVE\n\t *\n\t * Specifies the event name for mouseMove. \n\t */\n\tMOUSE_MOVE: 'mouseMove',\n\t\n\t/**\n\t * Variable: MOUSE_UP\n\t *\n\t * Specifies the event name for mouseUp. \n\t */\n\tMOUSE_UP: 'mouseUp',\n\n\t/**\n\t * Variable: ACTIVATE\n\t *\n\t * Specifies the event name for activate.\n\t */\n\tACTIVATE: 'activate',\n\n\t/**\n\t * Variable: RESIZE_START\n\t *\n\t * Specifies the event name for resizeStart.\n\t */\n\tRESIZE_START: 'resizeStart',\n\n\t/**\n\t * Variable: RESIZE\n\t *\n\t * Specifies the event name for resize.\n\t */\n\tRESIZE: 'resize',\n\n\t/**\n\t * Variable: RESIZE_END\n\t *\n\t * Specifies the event name for resizeEnd.\n\t */\n\tRESIZE_END: 'resizeEnd',\n\n\t/**\n\t * Variable: MOVE_START\n\t *\n\t * Specifies the event name for moveStart.\n\t */\n\tMOVE_START: 'moveStart',\n\n\t/**\n\t * Variable: MOVE\n\t *\n\t * Specifies the event name for move.\n\t */\n\tMOVE: 'move',\n\n\t/**\n\t * Variable: MOVE_END\n\t *\n\t * Specifies the event name for moveEnd.\n\t */\n\tMOVE_END: 'moveEnd',\n\n\t/**\n\t * Variable: PAN_START\n\t *\n\t * Specifies the event name for panStart.\n\t */\n\tPAN_START: 'panStart',\n\n\t/**\n\t * Variable: PAN\n\t *\n\t * Specifies the event name for pan.\n\t */\n\tPAN: 'pan',\n\n\t/**\n\t * Variable: PAN_END\n\t *\n\t * Specifies the event name for panEnd.\n\t */\n\tPAN_END: 'panEnd',\n\n\t/**\n\t * Variable: MINIMIZE\n\t *\n\t * Specifies the event name for minimize.\n\t */\n\tMINIMIZE: 'minimize',\n\n\t/**\n\t * Variable: NORMALIZE\n\t *\n\t * Specifies the event name for normalize.\n\t */\n\tNORMALIZE: 'normalize',\n\n\t/**\n\t * Variable: MAXIMIZE\n\t *\n\t * Specifies the event name for maximize.\n\t */\n\tMAXIMIZE: 'maximize',\n\n\t/**\n\t * Variable: HIDE\n\t *\n\t * Specifies the event name for hide.\n\t */\n\tHIDE: 'hide',\n\n\t/**\n\t * Variable: SHOW\n\t *\n\t * Specifies the event name for show.\n\t */\n\tSHOW: 'show',\n\n\t/**\n\t * Variable: CLOSE\n\t *\n\t * Specifies the event name for close.\n\t */\n\tCLOSE: 'close',\n\n\t/**\n\t * Variable: DESTROY\n\t *\n\t * Specifies the event name for destroy.\n\t */\n\tDESTROY: 'destroy',\n\n\t/**\n\t * Variable: REFRESH\n\t *\n\t * Specifies the event name for refresh.\n\t */\n\tREFRESH: 'refresh',\n\n\t/**\n\t * Variable: SIZE\n\t *\n\t * Specifies the event name for size.\n\t */\n\tSIZE: 'size',\n\t\n\t/**\n\t * Variable: SELECT\n\t *\n\t * Specifies the event name for select.\n\t */\n\tSELECT: 'select',\n\n\t/**\n\t * Variable: FIRED\n\t *\n\t * Specifies the event name for fired.\n\t */\n\tFIRED: 'fired',\n\n\t/**\n\t * Variable: FIRE_MOUSE_EVENT\n\t *\n\t * Specifies the event name for fireMouseEvent.\n\t */\n\tFIRE_MOUSE_EVENT: 'fireMouseEvent',\n\n\t/**\n\t * Variable: GESTURE\n\t *\n\t * Specifies the event name for gesture.\n\t */\n\tGESTURE: 'gesture',\n\n\t/**\n\t * Variable: TAP_AND_HOLD\n\t *\n\t * Specifies the event name for tapAndHold.\n\t */\n\tTAP_AND_HOLD: 'tapAndHold',\n\n\t/**\n\t * Variable: GET\n\t *\n\t * Specifies the event name for get.\n\t */\n\tGET: 'get',\n\n\t/**\n\t * Variable: RECEIVE\n\t *\n\t * Specifies the event name for receive.\n\t */\n\tRECEIVE: 'receive',\n\n\t/**\n\t * Variable: CONNECT\n\t *\n\t * Specifies the event name for connect.\n\t */\n\tCONNECT: 'connect',\n\n\t/**\n\t * Variable: DISCONNECT\n\t *\n\t * Specifies the event name for disconnect.\n\t */\n\tDISCONNECT: 'disconnect',\n\n\t/**\n\t * Variable: SUSPEND\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tSUSPEND: 'suspend',\n\n\t/**\n\t * Variable: RESUME\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tRESUME: 'resume',\n\n\t/**\n\t * Variable: MARK\n\t *\n\t * Specifies the event name for mark.\n\t */\n\tMARK: 'mark',\n\n\t/**\n\t * Variable: ROOT\n\t *\n\t * Specifies the event name for root.\n\t */\n\tROOT: 'root',\n\n\t/**\n\t * Variable: POST\n\t *\n\t * Specifies the event name for post.\n\t */\n\tPOST: 'post',\n\n\t/**\n\t * Variable: OPEN\n\t *\n\t * Specifies the event name for open.\n\t */\n\tOPEN: 'open',\n\n\t/**\n\t * Variable: SAVE\n\t *\n\t * Specifies the event name for open.\n\t */\n\tSAVE: 'save',\n\n\t/**\n\t * Variable: BEFORE_ADD_VERTEX\n\t *\n\t * Specifies the event name for beforeAddVertex.\n\t */\n\tBEFORE_ADD_VERTEX: 'beforeAddVertex',\n\n\t/**\n\t * Variable: ADD_VERTEX\n\t *\n\t * Specifies the event name for addVertex.\n\t */\n\tADD_VERTEX: 'addVertex',\n\n\t/**\n\t * Variable: AFTER_ADD_VERTEX\n\t *\n\t * Specifies the event name for afterAddVertex.\n\t */\n\tAFTER_ADD_VERTEX: 'afterAddVertex',\n\n\t/**\n\t * Variable: DONE\n\t *\n\t * Specifies the event name for done.\n\t */\n\tDONE: 'done',\n\n\t/**\n\t * Variable: EXECUTE\n\t *\n\t * Specifies the event name for execute.\n\t */\n\tEXECUTE: 'execute',\n\n\t/**\n\t * Variable: EXECUTED\n\t *\n\t * Specifies the event name for executed.\n\t */\n\tEXECUTED: 'executed',\n\n\t/**\n\t * Variable: BEGIN_UPDATE\n\t *\n\t * Specifies the event name for beginUpdate.\n\t */\n\tBEGIN_UPDATE: 'beginUpdate',\n\n\t/**\n\t * Variable: START_EDIT\n\t *\n\t * Specifies the event name for startEdit.\n\t */\n\tSTART_EDIT: 'startEdit',\n\n\t/**\n\t * Variable: END_UPDATE\n\t *\n\t * Specifies the event name for endUpdate.\n\t */\n\tEND_UPDATE: 'endUpdate',\n\n\t/**\n\t * Variable: END_EDIT\n\t *\n\t * Specifies the event name for endEdit.\n\t */\n\tEND_EDIT: 'endEdit',\n\n\t/**\n\t * Variable: BEFORE_UNDO\n\t *\n\t * Specifies the event name for beforeUndo.\n\t */\n\tBEFORE_UNDO: 'beforeUndo',\n\n\t/**\n\t * Variable: UNDO\n\t *\n\t * Specifies the event name for undo.\n\t */\n\tUNDO: 'undo',\n\n\t/**\n\t * Variable: REDO\n\t *\n\t * Specifies the event name for redo.\n\t */\n\tREDO: 'redo',\n\n\t/**\n\t * Variable: CHANGE\n\t *\n\t * Specifies the event name for change.\n\t */\n\tCHANGE: 'change',\n\n\t/**\n\t * Variable: NOTIFY\n\t *\n\t * Specifies the event name for notify.\n\t */\n\tNOTIFY: 'notify',\n\n\t/**\n\t * Variable: LAYOUT_CELLS\n\t *\n\t * Specifies the event name for layoutCells.\n\t */\n\tLAYOUT_CELLS: 'layoutCells',\n\n\t/**\n\t * Variable: CLICK\n\t *\n\t * Specifies the event name for click.\n\t */\n\tCLICK: 'click',\n\n\t/**\n\t * Variable: SCALE\n\t *\n\t * Specifies the event name for scale.\n\t */\n\tSCALE: 'scale',\n\n\t/**\n\t * Variable: TRANSLATE\n\t *\n\t * Specifies the event name for translate.\n\t */\n\tTRANSLATE: 'translate',\n\n\t/**\n\t * Variable: SCALE_AND_TRANSLATE\n\t *\n\t * Specifies the event name for scaleAndTranslate.\n\t */\n\tSCALE_AND_TRANSLATE: 'scaleAndTranslate',\n\n\t/**\n\t * Variable: UP\n\t *\n\t * Specifies the event name for up.\n\t */\n\tUP: 'up',\n\n\t/**\n\t * Variable: DOWN\n\t *\n\t * Specifies the event name for down.\n\t */\n\tDOWN: 'down',\n\n\t/**\n\t * Variable: ADD\n\t *\n\t * Specifies the event name for add.\n\t */\n\tADD: 'add',\n\n\t/**\n\t * Variable: REMOVE\n\t *\n\t * Specifies the event name for remove.\n\t */\n\tREMOVE: 'remove',\n\t\n\t/**\n\t * Variable: CLEAR\n\t *\n\t * Specifies the event name for clear.\n\t */\n\tCLEAR: 'clear',\n\n\t/**\n\t * Variable: ADD_CELLS\n\t *\n\t * Specifies the event name for addCells.\n\t */\n\tADD_CELLS: 'addCells',\n\n\t/**\n\t * Variable: CELLS_ADDED\n\t *\n\t * Specifies the event name for cellsAdded.\n\t */\n\tCELLS_ADDED: 'cellsAdded',\n\n\t/**\n\t * Variable: MOVE_CELLS\n\t *\n\t * Specifies the event name for moveCells.\n\t */\n\tMOVE_CELLS: 'moveCells',\n\n\t/**\n\t * Variable: CELLS_MOVED\n\t *\n\t * Specifies the event name for cellsMoved.\n\t */\n\tCELLS_MOVED: 'cellsMoved',\n\n\t/**\n\t * Variable: RESIZE_CELLS\n\t *\n\t * Specifies the event name for resizeCells.\n\t */\n\tRESIZE_CELLS: 'resizeCells',\n\n\t/**\n\t * Variable: CELLS_RESIZED\n\t *\n\t * Specifies the event name for cellsResized.\n\t */\n\tCELLS_RESIZED: 'cellsResized',\n\n\t/**\n\t * Variable: TOGGLE_CELLS\n\t *\n\t * Specifies the event name for toggleCells.\n\t */\n\tTOGGLE_CELLS: 'toggleCells',\n\n\t/**\n\t * Variable: CELLS_TOGGLED\n\t *\n\t * Specifies the event name for cellsToggled.\n\t */\n\tCELLS_TOGGLED: 'cellsToggled',\n\n\t/**\n\t * Variable: ORDER_CELLS\n\t *\n\t * Specifies the event name for orderCells.\n\t */\n\tORDER_CELLS: 'orderCells',\n\n\t/**\n\t * Variable: CELLS_ORDERED\n\t *\n\t * Specifies the event name for cellsOrdered.\n\t */\n\tCELLS_ORDERED: 'cellsOrdered',\n\n\t/**\n\t * Variable: REMOVE_CELLS\n\t *\n\t * Specifies the event name for removeCells.\n\t */\n\tREMOVE_CELLS: 'removeCells',\n\n\t/**\n\t * Variable: CELLS_REMOVED\n\t *\n\t * Specifies the event name for cellsRemoved.\n\t */\n\tCELLS_REMOVED: 'cellsRemoved',\n\n\t/**\n\t * Variable: GROUP_CELLS\n\t *\n\t * Specifies the event name for groupCells.\n\t */\n\tGROUP_CELLS: 'groupCells',\n\n\t/**\n\t * Variable: UNGROUP_CELLS\n\t *\n\t * Specifies the event name for ungroupCells.\n\t */\n\tUNGROUP_CELLS: 'ungroupCells',\n\n\t/**\n\t * Variable: REMOVE_CELLS_FROM_PARENT\n\t *\n\t * Specifies the event name for removeCellsFromParent.\n\t */\n\tREMOVE_CELLS_FROM_PARENT: 'removeCellsFromParent',\n\n\t/**\n\t * Variable: FOLD_CELLS\n\t *\n\t * Specifies the event name for foldCells.\n\t */\n\tFOLD_CELLS: 'foldCells',\n\n\t/**\n\t * Variable: CELLS_FOLDED\n\t *\n\t * Specifies the event name for cellsFolded.\n\t */\n\tCELLS_FOLDED: 'cellsFolded',\n\n\t/**\n\t * Variable: ALIGN_CELLS\n\t *\n\t * Specifies the event name for alignCells.\n\t */\n\tALIGN_CELLS: 'alignCells',\n\n\t/**\n\t * Variable: LABEL_CHANGED\n\t *\n\t * Specifies the event name for labelChanged.\n\t */\n\tLABEL_CHANGED: 'labelChanged',\n\n\t/**\n\t * Variable: CONNECT_CELL\n\t *\n\t * Specifies the event name for connectCell.\n\t */\n\tCONNECT_CELL: 'connectCell',\n\n\t/**\n\t * Variable: CELL_CONNECTED\n\t *\n\t * Specifies the event name for cellConnected.\n\t */\n\tCELL_CONNECTED: 'cellConnected',\n\n\t/**\n\t * Variable: SPLIT_EDGE\n\t *\n\t * Specifies the event name for splitEdge.\n\t */\n\tSPLIT_EDGE: 'splitEdge',\n\n\t/**\n\t * Variable: FLIP_EDGE\n\t *\n\t * Specifies the event name for flipEdge.\n\t */\n\tFLIP_EDGE: 'flipEdge',\n\n\t/**\n\t * Variable: START_EDITING\n\t *\n\t * Specifies the event name for startEditing.\n\t */\n\tSTART_EDITING: 'startEditing',\n\n\t/**\n\t * Variable: EDITING_STARTED\n\t *\n\t * Specifies the event name for editingStarted.\n\t */\n\tEDITING_STARTED: 'editingStarted',\n\n\t/**\n\t * Variable: EDITING_STOPPED\n\t *\n\t * Specifies the event name for editingStopped.\n\t */\n\tEDITING_STOPPED: 'editingStopped',\n\n\t/**\n\t * Variable: ADD_OVERLAY\n\t *\n\t * Specifies the event name for addOverlay.\n\t */\n\tADD_OVERLAY: 'addOverlay',\n\n\t/**\n\t * Variable: REMOVE_OVERLAY\n\t *\n\t * Specifies the event name for removeOverlay.\n\t */\n\tREMOVE_OVERLAY: 'removeOverlay',\n\n\t/**\n\t * Variable: UPDATE_CELL_SIZE\n\t *\n\t * Specifies the event name for updateCellSize.\n\t */\n\tUPDATE_CELL_SIZE: 'updateCellSize',\n\n\t/**\n\t * Variable: ESCAPE\n\t *\n\t * Specifies the event name for escape.\n\t */\n\tESCAPE: 'escape',\n\n\t/**\n\t * Variable: DOUBLE_CLICK\n\t *\n\t * Specifies the event name for doubleClick.\n\t */\n\tDOUBLE_CLICK: 'doubleClick',\n\n\t/**\n\t * Variable: START\n\t *\n\t * Specifies the event name for start.\n\t */\n\tSTART: 'start',\n\n\t/**\n\t * Variable: RESET\n\t *\n\t * Specifies the event name for reset.\n\t */\n\tRESET: 'reset',\n\n\t/**\n\t * Variable: PINCH_THRESHOLD\n\t *\n\t * Threshold for pinch gestures to fire a mouse wheel event.\n\t * Default value is 10.\n\t */\n\tPINCH_THRESHOLD: 10\n\n};\n\n__mxOutput.mxEvent = typeof mxEvent !== 'undefined' ? mxEvent : undefined;\n\n/**\n * Copyright (c) 2006-2020, JGraph Ltd\n * Copyright (c) 2006-2020, draw.io AG\n */\n/**\n * Class: mxXmlRequest\n * \n * XML HTTP request wrapper. See also: <mxUtils.get>, <mxUtils.post> and\n * <mxUtils.load>. This class provides a cross-browser abstraction for Ajax\n * requests.\n * \n * Encoding:\n * \n * For encoding parameter values, the built-in encodeURIComponent JavaScript\n * method must be used. For automatic encoding of post data in <mxEditor> the\n * <mxEditor.escapePostData> switch can be set to true (default). The encoding\n * will be carried out using the conte type of the page. That is, the page\n * containting the editor should contain a meta tag in the header, eg.\n * <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n * \n * Example:\n * \n * (code)\n * var onload = function(req)\n * {\n *   mxUtils.alert(req.getDocumentElement());\n * }\n * \n * var onerror = function(req)\n * {\n *   mxUtils.alert('Error');\n * }\n * new mxXmlRequest(url, 'key=value').send(onload, onerror);\n * (end)\n * \n * Sends an asynchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var req = new mxXmlRequest(url, 'key=value', 'POST', false);\n * req.send();\n * mxUtils.alert(req.getDocumentElement());\n * (end)\n * \n * Sends a synchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = encodeURIComponent(mxUtils.getXml(result));\n * new mxXmlRequest(url, 'xml='+xml).send();\n * (end)\n * \n * Sends an encoded graph model to the specified URL using xml as the\n * parameter name. The parameter can then be retrieved in C# as follows:\n * \n * (code)\n * string xml = HttpUtility.UrlDecode(context.Request.Params[\"xml\"]);\n * (end)\n * \n * Or in Java as follows:\n * \n * (code)\n * String xml = URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\");\n * (end)\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image.\n * \n * Constructor: mxXmlRequest\n * \n * Constructs an XML HTTP request.\n * \n * Parameters:\n * \n * url - Target URL of the request.\n * params - Form encoded parameters to send with a POST request.\n * method - String that specifies the request method. Possible values are\n * POST and GET. Default is POST.\n * async - Boolean specifying if an asynchronous request should be used.\n * Default is true.\n * username - String specifying the username to be used for the request.\n * password - String specifying the password to be used for the request.\n */\nfunction mxXmlRequest(url, params, method, async, username, password)\n{\n\tthis.url = url;\n\tthis.params = params;\n\tthis.method = method || 'POST';\n\tthis.async = (async != null) ? async : true;\n\tthis.username = username;\n\tthis.password = password;\n};\n\n/**\n * Variable: url\n * \n * Holds the target URL of the request.\n */\nmxXmlRequest.prototype.url = null;\n\n/**\n * Variable: params\n * \n * Holds the form encoded data for the POST request.\n */\nmxXmlRequest.prototype.params = null;\n\n/**\n * Variable: method\n * \n * Specifies the request method. Possible values are POST and GET. Default\n * is POST.\n */\nmxXmlRequest.prototype.method = null;\n\n/**\n * Variable: async\n * \n * Boolean indicating if the request is asynchronous.\n */\nmxXmlRequest.prototype.async = null;\n\n/**\n * Variable: binary\n * \n * Boolean indicating if the request is binary. This option is ignored in IE.\n * In all other browsers the requested mime type is set to\n * text/plain; charset=x-user-defined. Default is false.\n */\nmxXmlRequest.prototype.binary = false;\n\n/**\n * Variable: withCredentials\n * \n * Specifies if withCredentials should be used in HTML5-compliant browsers. Default is\n * false.\n */\nmxXmlRequest.prototype.withCredentials = false;\n\n/**\n * Variable: username\n * \n * Specifies the username to be used for authentication.\n */\nmxXmlRequest.prototype.username = null;\n\n/**\n * Variable: password\n * \n * Specifies the password to be used for authentication.\n */\nmxXmlRequest.prototype.password = null;\n\n/**\n * Variable: request\n * \n * Holds the inner, browser-specific request object.\n */\nmxXmlRequest.prototype.request = null;\n\n/**\n * Variable: decodeSimulateValues\n * \n * Specifies if request values should be decoded as URIs before setting the\n * textarea value in <simulate>. Defaults to false for backwards compatibility,\n * to avoid another decode on the server this should be set to true.\n */\nmxXmlRequest.prototype.decodeSimulateValues = false;\n\n/**\n * Function: isBinary\n * \n * Returns <binary>.\n */\nmxXmlRequest.prototype.isBinary = function()\n{\n\treturn this.binary;\n};\n\n/**\n * Function: setBinary\n * \n * Sets <binary>.\n */\nmxXmlRequest.prototype.setBinary = function(value)\n{\n\tthis.binary = value;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: isReady\n * \n * Returns true if the response is ready.\n */\nmxXmlRequest.prototype.isReady = function()\n{\n\treturn this.request.readyState == 4;\n};\n\n/**\n * Function: getDocumentElement\n * \n * Returns the document element of the response XML document.\n */\nmxXmlRequest.prototype.getDocumentElement = function()\n{\n\tvar doc = this.getXml();\n\t\n\tif (doc != null)\n\t{\n\t\treturn doc.documentElement;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getXml\n * \n * Returns the response as an XML document. Use <getDocumentElement> to get\n * the document element of the XML document.\n */\nmxXmlRequest.prototype.getXml = function()\n{\n\tvar xml = this.request.responseXML;\n\t\n\t// Handles missing response headers in IE, the first condition handles\n\t// the case where responseXML is there, but using its nodes leads to\n\t// type errors in the mxCellCodec when putting the nodes into a new\n\t// document. This happens in IE9 standards mode and with XML user\n\t// objects only, as they are used directly as values in cells.\n\tif (document.documentMode >= 9 || xml == null || xml.documentElement == null)\n\t{\n\t\txml = mxUtils.parseXml(this.request.responseText);\n\t}\n\t\n\treturn xml;\n};\n\n/**\n * Function: getStatus\n * \n * Returns the status as a number, eg. 404 for \"Not found\" or 200 for \"OK\".\n * Note: The NS_ERROR_NOT_AVAILABLE for invalid responses cannot be cought.\n */\nmxXmlRequest.prototype.getStatus = function()\n{\n\treturn (this.request != null) ? this.request.status : null;\n};\n\n/**\n * Function: create\n * \n * Creates and returns the inner <request> object.\n */\nmxXmlRequest.prototype.create = function()\n{\n\tif (window.XMLHttpRequest)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\tvar req = new XMLHttpRequest();\n\t\t\t\n\t\t\t// TODO: Check for overrideMimeType required here?\n\t\t\tif (this.isBinary() && req.overrideMimeType)\n\t\t\t{\n\t\t\t\treq.overrideMimeType('text/plain; charset=x-user-defined');\n\t\t\t}\n\n\t\t\treturn req;\n\t\t};\n\t}\n\telse if (typeof(ActiveXObject) != 'undefined')\n\t{\n\t\treturn function()\n\t\t{\n\t\t\t// TODO: Implement binary option\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\n\t\t};\n\t}\n}();\n\n/**\n * Function: send\n * \n * Send the <request> to the target URL using the specified functions to\n * process the response asychronously.\n * \n * Note: Due to technical limitations, onerror is currently ignored.\n * \n * Parameters:\n * \n * onload - Function to be invoked if a successful response was received.\n * onerror - Function to be called on any error. Unused in this implementation, intended for overriden function.\n * timeout - Optional timeout in ms before calling ontimeout.\n * ontimeout - Optional function to execute on timeout.\n */\nmxXmlRequest.prototype.send = function(onload, onerror, timeout, ontimeout)\n{\n\tthis.request = this.create();\n\t\n\tif (this.request != null)\n\t{\n\t\tif (onload != null)\n\t\t{\n\t\t\tthis.request.onreadystatechange = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (this.isReady())\n\t\t\t\t{\n\t\t\t\t\tonload(this);\n\t\t\t\t\tthis.request.onreadystatechange = null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.request.open(this.method, this.url, this.async,\n\t\t\tthis.username, this.password);\n\t\tthis.setRequestHeaders(this.request, this.params);\n\t\t\n\t\tif (window.XMLHttpRequest && this.withCredentials)\n\t\t{\n\t\t\tthis.request.withCredentials = 'true';\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_QUIRKS && (document.documentMode == null || document.documentMode > 9) &&\n\t\t\twindow.XMLHttpRequest && timeout != null && ontimeout != null)\n\t\t{\n\t\t\tthis.request.timeout = timeout;\n\t\t\tthis.request.ontimeout = ontimeout;\n\t\t}\n\t\t\t\t\n\t\tthis.request.send(this.params);\n\t}\n};\n\n/**\n * Function: setRequestHeaders\n * \n * Sets the headers for the given request and parameters. This sets the\n * content-type to application/x-www-form-urlencoded if any params exist.\n * \n * Example:\n * \n * (code)\n * request.setRequestHeaders = function(request, params)\n * {\n *   if (params != null)\n *   {\n *     request.setRequestHeader('Content-Type',\n *             'multipart/form-data');\n *     request.setRequestHeader('Content-Length',\n *             params.length);\n *   }\n * };\n * (end)\n * \n * Use the code above before calling <send> if you require a\n * multipart/form-data request.   \n */\nmxXmlRequest.prototype.setRequestHeaders = function(request, params)\n{\n\tif (params != null)\n\t{\n\t\trequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t}\n};\n\n/**\n * Function: simulate\n * \n * Creates and posts a request to the given target URL using a dynamically\n * created form inside the given document.\n * \n * Parameters:\n * \n * docs - Document that contains the form element.\n * target - Target to send the form result to.\n */\nmxXmlRequest.prototype.simulate = function(doc, target)\n{\n\tdoc = doc || document;\n\tvar old = null;\n\n\tif (doc == document)\n\t{\n\t\told = window.onbeforeunload;\t\t\n\t\twindow.onbeforeunload = null;\n\t}\n\t\t\t\n\tvar form = doc.createElement('form');\n\tform.setAttribute('method', this.method);\n\tform.setAttribute('action', this.url);\n\n\tif (target != null)\n\t{\n\t\tform.setAttribute('target', target);\n\t}\n\n\tform.style.display = 'none';\n\tform.style.visibility = 'hidden';\n\t\n\tvar pars = (this.params.indexOf('&') > 0) ?\n\t\tthis.params.split('&') :\n\t\tthis.params.split();\n\n\t// Adds the parameters as textareas to the form\n\tfor (var i=0; i<pars.length; i++)\n\t{\n\t\tvar pos = pars[i].indexOf('=');\n\t\t\n\t\tif (pos > 0)\n\t\t{\n\t\t\tvar name = pars[i].substring(0, pos);\n\t\t\tvar value = pars[i].substring(pos+1);\n\t\t\t\n\t\t\tif (this.decodeSimulateValues)\n\t\t\t{\n\t\t\t\tvalue = decodeURIComponent(value);\n\t\t\t}\n\t\t\t\n\t\t\tvar textarea = doc.createElement('textarea');\n\t\t\ttextarea.setAttribute('wrap', 'off');\n\t\t\ttextarea.setAttribute('name', name);\n\t\t\tmxUtils.write(textarea, value);\n\t\t\tform.appendChild(textarea);\n\t\t}\n\t}\n\t\n\tdoc.body.appendChild(form);\n\tform.submit();\n\t\n\tif (form.parentNode != null)\n\t{\n\t\tform.parentNode.removeChild(form);\n\t}\n\n\tif (old != null)\n\t{\t\t\n\t\twindow.onbeforeunload = old;\n\t}\n};\n\n__mxOutput.mxXmlRequest = typeof mxXmlRequest !== 'undefined' ? mxXmlRequest : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxClipboard =\n{\n\t/**\n\t * Class: mxClipboard\n\t * \n\t * Singleton that implements a clipboard for graph cells.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxClipboard.copy(graph);\n\t * mxClipboard.paste(graph2);\n\t * (end)\n\t *\n\t * This copies the selection cells from the graph to the clipboard and\n\t * pastes them into graph2.\n\t * \n\t * For fine-grained control of the clipboard data the <mxGraph.canExportCell>\n\t * and <mxGraph.canImportCell> functions can be overridden.\n\t * \n\t * To restore previous parents for pasted cells, the implementation for\n\t * <copy> and <paste> can be changed as follows.\n\t * \n\t * (code)\n\t * mxClipboard.copy = function(graph, cells)\n\t * {\n\t *   cells = cells || graph.getSelectionCells();\n\t *   var result = graph.getExportableCells(cells);\n\t *   \n\t *   mxClipboard.parents = new Object();\n\t *   \n\t *   for (var i = 0; i < result.length; i++)\n\t *   {\n\t *     mxClipboard.parents[i] = graph.model.getParent(cells[i]);\n\t *   }\n\t *   \n\t *   mxClipboard.insertCount = 1;\n\t *   mxClipboard.setCells(graph.cloneCells(result));\n\t *   \n\t *   return result;\n\t * };\n\t * \n\t * mxClipboard.paste = function(graph)\n\t * {\n\t *   if (!mxClipboard.isEmpty())\n\t *   {\n\t *     var cells = graph.getImportableCells(mxClipboard.getCells());\n\t *     var delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t *     var parent = graph.getDefaultParent();\n\t *     \n\t *     graph.model.beginUpdate();\n\t *     try\n\t *     {\n\t *       for (var i = 0; i < cells.length; i++)\n\t *       {\n\t *         var tmp = (mxClipboard.parents != null && graph.model.contains(mxClipboard.parents[i])) ?\n\t *              mxClipboard.parents[i] : parent;\n\t *         cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n\t *       }\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.model.endUpdate();\n\t *     }\n\t *     \n\t *     // Increments the counter and selects the inserted cells\n\t *     mxClipboard.insertCount++;\n\t *     graph.setSelectionCells(cells);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * Variable: STEPSIZE\n\t * \n\t * Defines the step size to offset the cells after each paste operation.\n\t * Default is 10.\n\t */\n\tSTEPSIZE: 10,\n\n\t/**\n\t * Variable: insertCount\n\t * \n\t * Counts the number of times the clipboard data has been inserted.\n\t */\n\tinsertCount: 1,\n\n\t/**\n\t * Variable: cells\n\t * \n\t * Holds the array of <mxCells> currently in the clipboard.\n\t */\n\tcells: null,\n\n\t/**\n\t * Function: setCells\n\t * \n\t * Sets the cells in the clipboard. Fires a <mxEvent.CHANGE> event.\n\t */\n\tsetCells: function(cells)\n\t{\n\t\tmxClipboard.cells = cells;\n\t},\n\n\t/**\n\t * Function: getCells\n\t * \n\t * Returns  the cells in the clipboard.\n\t */\n\tgetCells: function()\n\t{\n\t\treturn mxClipboard.cells;\n\t},\n\t\n\t/**\n\t * Function: isEmpty\n\t * \n\t * Returns true if the clipboard currently has not data stored.\n\t */\n\tisEmpty: function()\n\t{\n\t\treturn mxClipboard.getCells() == null;\n\t},\n\t\n\t/**\n\t * Function: cut\n\t * \n\t * Cuts the given array of <mxCells> from the specified graph.\n\t * If cells is null then the selection cells of the graph will\n\t * be used. Returns the cells that have been cut from the graph.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Optional array of <mxCells> to be cut.\n\t */\n\tcut: function(graph, cells)\n\t{\n\t\tcells = mxClipboard.copy(graph, cells);\n\t\tmxClipboard.insertCount = 0;\n\t\tmxClipboard.removeCells(graph, cells);\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: removeCells\n\t * \n\t * Hook to remove the given cells from the given graph after\n\t * a cut operation.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Array of <mxCells> to be cut.\n\t */\n\tremoveCells: function(graph, cells)\n\t{\n\t\tgraph.removeCells(cells);\n\t},\n\n\t/**\n\t * Function: copy\n\t * \n\t * Copies the given array of <mxCells> from the specified\n\t * graph to <cells>. Returns the original array of cells that has\n\t * been cloned. Descendants of cells in the array are ignored.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be copied.\n\t * cells - Optional array of <mxCells> to be copied.\n\t */\n\tcopy: function(graph, cells)\n\t{\n\t\tcells = cells || graph.getSelectionCells();\n\t\tvar result = graph.getExportableCells(graph.model.getTopmostCells(cells));\n\t\tmxClipboard.insertCount = 1;\n\t\tmxClipboard.setCells(graph.cloneCells(result));\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: paste\n\t * \n\t * Pastes the <cells> into the specified graph restoring\n\t * the relation to <parents>, if possible. If the parents\n\t * are no longer in the graph or invisible then the\n\t * cells are added to the graph's default or into the\n\t * swimlane under the cell's new location if one exists.\n\t * The cells are added to the graph using <mxGraph.importCells>\n\t * and returned.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to paste the <cells> into.\n\t */\n\tpaste: function(graph)\n\t{\n\t\tvar cells = null;\n\t\t\n\t\tif (!mxClipboard.isEmpty())\n\t\t{\n\t\t\tcells = graph.getImportableCells(mxClipboard.getCells());\n\t\t\tvar delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t\t\tvar parent = graph.getDefaultParent();\n\t\t\tcells = graph.importCells(cells, delta, delta, parent);\n\t\t\t\n\t\t\t// Increments the counter and selects the inserted cells\n\t\t\tmxClipboard.insertCount++;\n\t\t\tgraph.setSelectionCells(cells);\n\t\t}\n\t\t\n\t\treturn cells;\n\t}\n\n};\n\n__mxOutput.mxClipboard = typeof mxClipboard !== 'undefined' ? mxClipboard : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxWindow\n * \n * Basic window inside a document.\n * \n * Examples:\n * \n * Creating a simple window.\n *\n * (code)\n * var tb = document.createElement('div');\n * var wnd = new mxWindow('Title', tb, 100, 100, 200, 200, true, true);\n * wnd.setVisible(true); \n * (end)\n *\n * Creating a window that contains an iframe. \n * \n * (code)\n * var frame = document.createElement('iframe');\n * frame.setAttribute('width', '192px');\n * frame.setAttribute('height', '172px');\n * frame.setAttribute('src', 'http://www.example.com/');\n * frame.style.backgroundColor = 'white';\n * \n * var w = document.body.clientWidth;\n * var h = (document.body.clientHeight || document.documentElement.clientHeight);\n * var wnd = new mxWindow('Title', frame, (w-200)/2, (h-200)/3, 200, 200);\n * wnd.setVisible(true);\n * (end)\n * \n * To limit the movement of a window, eg. to keep it from being moved beyond\n * the top, left corner the following method can be overridden (recommended):\n * \n * (code)\n * wnd.setLocation = function(x, y)\n * {\n *   x = Math.max(0, x);\n *   y = Math.max(0, y);\n *   mxWindow.prototype.setLocation.apply(this, arguments);\n * };\n * (end)\n * \n * Or the following event handler can be used:\n * \n * (code)\n * wnd.addListener(mxEvent.MOVE, function(e)\n * {\n *   wnd.setLocation(Math.max(0, wnd.getX()), Math.max(0, wnd.getY()));\n * });\n * (end)\n * \n * To keep a window inside the current window:\n * \n * (code)\n * mxEvent.addListener(window, 'resize', mxUtils.bind(this, function()\n * {\n *   var iw = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n *   var ih = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n *   \n *   var x = this.window.getX();\n *   var y = this.window.getY();\n *   \n *   if (x + this.window.table.clientWidth > iw)\n *   {\n *     x = Math.max(0, iw - this.window.table.clientWidth);\n *   }\n *   \n *   if (y + this.window.table.clientHeight > ih)\n *   {\n *     y = Math.max(0, ih - this.window.table.clientHeight);\n *   }\n *   \n *   if (this.window.getX() != x || this.window.getY() != y)\n *   {\n *     this.window.setLocation(x, y);\n *   }\n * }));\n * (end)\n *\n * Event: mxEvent.MOVE_START\n *\n * Fires before the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MOVE\n *\n * Fires while the window is being moved. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.MOVE_END\n *\n * Fires after the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_START\n *\n * Fires before the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE\n *\n * Fires while the window is being resized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_END\n *\n * Fires after the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MAXIMIZE\n * \n * Fires after the window is maximized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.MINIMIZE\n * \n * Fires after the window is minimized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.NORMALIZE\n * \n * Fires after the window is normalized, that is, it returned from\n * maximized or minimized state. The <code>event</code> property contains the\n * corresponding mouse event.\n *  \n * Event: mxEvent.ACTIVATE\n * \n * Fires after a window is activated. The <code>previousWindow</code> property\n * contains the previous window. The event sender is the active window.\n * \n * Event: mxEvent.SHOW\n * \n * Fires after the window is shown. This event has no properties.\n * \n * Event: mxEvent.HIDE\n * \n * Fires after the window is hidden. This event has no properties.\n * \n * Event: mxEvent.CLOSE\n * \n * Fires before the window is closed. The <code>event</code> property contains\n * the corresponding mouse event.\n * \n * Event: mxEvent.DESTROY\n * \n * Fires before the window is destroyed. This event has no properties.\n * \n * Constructor: mxWindow\n * \n * Constructs a new window with the given dimension and title to display\n * the specified content. The window elements use the given style as a\n * prefix for the classnames of the respective window elements, namely,\n * the window title and window pane. The respective postfixes are appended\n * to the given stylename as follows:\n * \n *   style - Base style for the window.\n *   style+Title - Style for the window title.\n *   style+Pane - Style for the window pane.\n * \n * The default value for style is mxWindow, resulting in the following\n * classnames for the window elements: mxWindow, mxWindowTitle and\n * mxWindowPane.\n * \n * If replaceNode is given then the window replaces the given DOM node in\n * the document.\n * \n * Parameters:\n * \n * title - String that represents the title of the new window.\n * content - DOM node that is used as the window content.\n * x - X-coordinate of the window location.\n * y - Y-coordinate of the window location.\n * width - Width of the window.\n * height - Optional height of the window. Default is to match the height\n * of the content at the specified width.\n * minimizable - Optional boolean indicating if the window is minimizable.\n * Default is true.\n * movable - Optional boolean indicating if the window is movable. Default\n * is true.\n * replaceNode - Optional DOM node that the window should replace.\n * style - Optional base classname for the window elements. Default is\n * mxWindow.\n */\nfunction mxWindow(title, content, x, y, width, height, minimizable, movable, replaceNode, style)\n{\n\tif (content != null)\n\t{\n\t\tminimizable = (minimizable != null) ? minimizable : true;\n\t\tthis.content = content;\n\t\tthis.init(x, y, width, height, style);\n\t\t\n\t\tthis.installMaximizeHandler();\n\t\tthis.installMinimizeHandler();\n\t\tthis.installCloseHandler();\n\t\tthis.setMinimizable(minimizable);\n\t\tthis.setTitle(title);\n\t\t\n\t\tif (movable == null || movable)\n\t\t{\n\t\t\tthis.installMoveHandler();\n\t\t}\n\n\t\tif (replaceNode != null && replaceNode.parentNode != null)\n\t\t{\n\t\t\treplaceNode.parentNode.replaceChild(this.div, replaceNode);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.body.appendChild(this.div);\n\t\t}\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxWindow.prototype = new mxEventSource();\nmxWindow.prototype.constructor = mxWindow;\n\n/**\n * Variable: closeImage\n * \n * URL of the image to be used for the close icon in the titlebar.\n */\nmxWindow.prototype.closeImage = mxClient.imageBasePath + '/close.gif';\n\n/**\n * Variable: minimizeImage\n * \n * URL of the image to be used for the minimize icon in the titlebar.\n */\nmxWindow.prototype.minimizeImage = mxClient.imageBasePath + '/minimize.gif';\n\t\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the normalize icon in the titlebar.\n */\nmxWindow.prototype.normalizeImage = mxClient.imageBasePath + '/normalize.gif';\n\t\n/**\n * Variable: maximizeImage\n * \n * URL of the image to be used for the maximize icon in the titlebar.\n */\nmxWindow.prototype.maximizeImage = mxClient.imageBasePath + '/maximize.gif';\n\n/**\n * Variable: resizeImage\n * \n * URL of the image to be used for the resize icon.\n */\nmxWindow.prototype.resizeImage = mxClient.imageBasePath + '/resize.gif';\n\n/**\n * Variable: visible\n * \n * Boolean flag that represents the visible state of the window.\n */\nmxWindow.prototype.visible = false;\n\n/**\n * Variable: minimumSize\n * \n * <mxRectangle> that specifies the minimum width and height of the window.\n * Default is (50, 40).\n */\nmxWindow.prototype.minimumSize = new mxRectangle(0, 0, 50, 40);\n\n/**\n * Variable: destroyOnClose\n * \n * Specifies if the window should be destroyed when it is closed. If this\n * is false then the window is hidden using <setVisible>. Default is true.\n */\nmxWindow.prototype.destroyOnClose = true;\n\n/**\n * Variable: contentHeightCorrection\n * \n * Defines the correction factor for computing the height of the contentWrapper.\n * Default is 6 for IE 7/8 standards mode and 2 for all other browsers and modes.\n */\nmxWindow.prototype.contentHeightCorrection = (document.documentMode == 8 || document.documentMode == 7) ? 6 : 2;\n\n/**\n * Variable: title\n * \n * Reference to the DOM node (TD) that contains the title.\n */\nmxWindow.prototype.title = null;\n\n/**\n * Variable: content\n * \n * Reference to the DOM node that represents the window content.\n */\nmxWindow.prototype.content = null;\n\n/**\n * Function: init\n * \n * Initializes the DOM tree that represents the window.\n */\nmxWindow.prototype.init = function(x, y, width, height, style)\n{\n\tstyle = (style != null) ? style : 'mxWindow';\n\t\n\tthis.div = document.createElement('div');\n\tthis.div.className = style;\n\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n\tthis.table = document.createElement('table');\n\tthis.table.className = style;\n\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.div.style.touchAction = 'none';\n\t}\n\t\n\t// Workaround for table size problems in FF\n\tif (width != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.width = width + 'px'; \n\t\t}\n\t\t\n\t\tthis.table.style.width = width + 'px';\n\t} \n\t\n\tif (height != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.height = height + 'px';\n\t\t}\n\t\t\n\t\tthis.table.style.height = height + 'px';\n\t}\t\t\n\t\n\t// Creates title row\n\tvar tbody = document.createElement('tbody');\n\tvar tr = document.createElement('tr');\n\t\n\tthis.title = document.createElement('td');\n\tthis.title.className = style + 'Title';\n\t\n\tthis.buttons = document.createElement('div');\n\tthis.buttons.style.position = 'absolute';\n\tthis.buttons.style.display = 'inline-block';\n\tthis.buttons.style.right = '4px';\n\tthis.buttons.style.top = '5px';\n\tthis.title.appendChild(this.buttons);\n\t\n\ttr.appendChild(this.title);\n\ttbody.appendChild(tr);\n\t\n\t// Creates content row and table cell\n\ttr = document.createElement('tr');\n\tthis.td = document.createElement('td');\n\tthis.td.className = style + 'Pane';\n\t\n\tif (document.documentMode == 7)\n\t{\n\t\tthis.td.style.height = '100%';\n\t}\n\n\tthis.contentWrapper = document.createElement('div');\n\tthis.contentWrapper.className = style + 'Pane';\n\tthis.contentWrapper.style.width = '100%';\n\tthis.contentWrapper.appendChild(this.content);\n\n\t// Workaround for div around div restricts height\n\t// of inner div if outerdiv has hidden overflow\n\tif (mxClient.IS_QUIRKS || this.content.nodeName.toUpperCase() != 'DIV')\n\t{\n\t\tthis.contentWrapper.style.height = '100%';\n\t}\n\n\t// Puts all content into the DOM\n\tthis.td.appendChild(this.contentWrapper);\n\ttr.appendChild(this.td);\n\ttbody.appendChild(tr);\n\tthis.table.appendChild(tbody);\n\tthis.div.appendChild(this.table);\n\t\n\t// Puts the window on top of other windows when clicked\n\tvar activator = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t});\n\t\n\tmxEvent.addGestureListeners(this.title, activator);\n\tmxEvent.addGestureListeners(this.table, activator);\n\n\tthis.hide();\n};\n\n/**\n * Function: setTitle\n * \n * Sets the window title to the given string. HTML markup inside the title\n * will be escaped.\n */\nmxWindow.prototype.setTitle = function(title)\n{\n\t// Removes all text content nodes (normally just one)\n\tvar child = this.title.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar next = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tchild.parentNode.removeChild(child);\n\t\t}\n\t\t\n\t\tchild = next;\n\t}\n\t\n\tmxUtils.write(this.title, title || '');\n\tthis.title.appendChild(this.buttons);\n};\n\n/**\n * Function: setScrollable\n * \n * Sets if the window contents should be scrollable.\n */\nmxWindow.prototype.setScrollable = function(scrollable)\n{\n\t// Workaround for hang in Presto 2.5.22 (Opera 10.5)\n\tif (navigator.userAgent == null ||\n\t\tnavigator.userAgent.indexOf('Presto/2.5') < 0)\n\t{\n\t\tif (scrollable)\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'auto';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: activate\n * \n * Puts the window on top of all other windows.\n */\nmxWindow.prototype.activate = function()\n{\n\tif (mxWindow.activeWindow != this)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(this.getElement());\n\t\tvar index = (style != null) ? style.zIndex : 3;\n\n\t\tif (mxWindow.activeWindow)\n\t\t{\n\t\t\tvar elt = mxWindow.activeWindow.getElement();\n\t\t\t\n\t\t\tif (elt != null && elt.style != null)\n\t\t\t{\n\t\t\t\telt.style.zIndex = index;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar previousWindow = mxWindow.activeWindow;\n\t\tthis.getElement().style.zIndex = parseInt(index) + 1;\n\t\tmxWindow.activeWindow = this;\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ACTIVATE, 'previousWindow', previousWindow));\n\t}\n};\n\n/**\n * Function: getElement\n * \n * Returuns the outermost DOM node that makes up the window.\n */\nmxWindow.prototype.getElement = function()\n{\n\treturn this.div;\n};\n\n/**\n * Function: fit\n * \n * Makes sure the window is inside the client area of the window.\n */\nmxWindow.prototype.fit = function()\n{\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: isResizable\n * \n * Returns true if the window is resizable.\n */\nmxWindow.prototype.isResizable = function()\n{\n\tif (this.resize != null)\n\t{\n\t\treturn this.resize.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setResizable\n * \n * Sets if the window should be resizable. To avoid interference with some\n * built-in features of IE10 and later, the use of the following code is\n * recommended if there are resizable <mxWindow>s in the page:\n * \n * (code)\n * if (mxClient.IS_POINTER)\n * {\n *   document.body.style.msTouchAction = 'none';\n * }\n * (end)\n */\nmxWindow.prototype.setResizable = function(resizable)\n{\n\tif (resizable)\n\t{\n\t\tif (this.resize == null)\n\t\t{\n\t\t\tthis.resize = document.createElement('img');\n\t\t\tthis.resize.style.position = 'absolute';\n\t\t\tthis.resize.style.bottom = '2px';\n\t\t\tthis.resize.style.right = '2px';\n\n\t\t\tthis.resize.setAttribute('src', this.resizeImage);\n\t\t\tthis.resize.style.cursor = 'nw-resize';\n\t\t\t\n\t\t\tvar startX = null;\n\t\t\tvar startY = null;\n\t\t\tvar width = null;\n\t\t\tvar height = null;\n\t\t\t\n\t\t\tvar start = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// LATER: pointerdown starting on border of resize does start\n\t\t\t\t// the drag operation but does not fire consecutive events via\n\t\t\t\t// one of the listeners below (does pan instead).\n\t\t\t\t// Workaround: document.body.style.msTouchAction = 'none'\n\t\t\t\tthis.activate();\n\t\t\t\tstartX = mxEvent.getClientX(evt);\n\t\t\t\tstartY = mxEvent.getClientY(evt);\n\t\t\t\twidth = this.div.offsetWidth;\n\t\t\t\theight = this.div.offsetHeight;\n\t\t\t\t\n\t\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_START, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\n\t\t\t\t\tthis.setSize(width + dx, height + dy);\n\t\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tstartX = null;\n\t\t\t\t\tstartY = null;\n\t\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_END, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(this.resize, start, dragHandler, dropHandler);\n\t\t\tthis.div.appendChild(this.resize);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tthis.resize.style.display = 'inline';\n\t\t}\n\t}\n\telse if (this.resize != null)\n\t{\n\t\tthis.resize.style.display = 'none';\n\t}\n};\n\t\n/**\n * Function: setSize\n * \n * Sets the size of the window.\n */\nmxWindow.prototype.setSize = function(width, height)\n{\n\twidth = Math.max(this.minimumSize.width, width);\n\theight = Math.max(this.minimumSize.height, height);\n\n\t// Workaround for table size problems in FF\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.div.style.width =  width + 'px';\n\t\tthis.div.style.height = height + 'px';\n\t}\n\t\n\tthis.table.style.width =  width + 'px';\n\tthis.table.style.height = height + 'px';\n\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n};\n\t\n/**\n * Function: setMinimizable\n * \n * Sets if the window is minimizable.\n */\nmxWindow.prototype.setMinimizable = function(minimizable)\n{\n\tthis.minimize.style.display = (minimizable) ? '' : 'none';\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns an <mxRectangle> that specifies the size for the minimized window.\n * A width or height of 0 means keep the existing width or height. This\n * implementation returns the height of the window title and keeps the width.\n */\nmxWindow.prototype.getMinimumSize = function()\n{\n\treturn new mxRectangle(0, 0, 0, this.title.offsetHeight);\n};\n\n/**\n * Function: installMinimizeHandler\n * \n * Installs the event listeners required for minimizing the window.\n */\nmxWindow.prototype.installMinimizeHandler = function()\n{\n\tthis.minimize = document.createElement('img');\n\t\n\tthis.minimize.setAttribute('src', this.minimizeImage);\n\tthis.minimize.setAttribute('title', 'Minimize');\n\tthis.minimize.style.cursor = 'pointer';\n\tthis.minimize.style.marginLeft = '2px';\n\tthis.minimize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.minimize);\n\t\n\tvar minimized = false;\n\tvar maxDisplay = null;\n\tvar height = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (!minimized)\n\t\t{\n\t\t\tminimized = true;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.normalizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Normalize');\n\t\t\tthis.contentWrapper.style.display = 'none';\n\t\t\tmaxDisplay = this.maximize.style.display;\n\t\t\t\n\t\t\tthis.maximize.style.display = 'none';\n\t\t\theight = this.table.style.height;\n\t\t\t\n\t\t\tvar minSize = this.getMinimumSize();\n\t\t\t\n\t\t\tif (minSize.height > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = minSize.height + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = minSize.height + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (minSize.width > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = minSize.width + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.width = minSize.width + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MINIMIZE, 'event', evt));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tminimized = false;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.minimizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Minimize');\n\t\t\tthis.contentWrapper.style.display = ''; // default\n\t\t\tthis.maximize.style.display = maxDisplay;\n\t\t\t\n\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.div.style.height = height;\n\t\t\t}\n\t\t\t\n\t\t\tthis.table.style.height = height;\n\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t}\n\t\t\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tmxEvent.addGestureListeners(this.minimize, funct);\n};\n\t\n/**\n * Function: setMaximizable\n * \n * Sets if the window is maximizable.\n */\nmxWindow.prototype.setMaximizable = function(maximizable)\n{\n\tthis.maximize.style.display = (maximizable) ? '' : 'none';\n};\n\n/**\n * Function: installMaximizeHandler\n * \n * Installs the event listeners required for maximizing the window.\n */\nmxWindow.prototype.installMaximizeHandler = function()\n{\n\tthis.maximize = document.createElement('img');\n\t\n\tthis.maximize.setAttribute('src', this.maximizeImage);\n\tthis.maximize.setAttribute('title', 'Maximize');\n\tthis.maximize.style.cursor = 'default';\n\tthis.maximize.style.marginLeft = '2px';\n\tthis.maximize.style.cursor = 'pointer';\n\tthis.maximize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.maximize);\n\t\n\tvar maximized = false;\n\tvar x = null;\n\tvar y = null;\n\tvar height = null;\n\tvar width = null;\n\tvar minDisplay = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (this.maximize.style.display != 'none')\n\t\t{\n\t\t\tif (!maximized)\n\t\t\t{\n\t\t\t\tmaximized = true;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.normalizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Normalize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tminDisplay = this.minimize.style.display;\n\t\t\t\tthis.minimize.style.display = 'none';\n\t\t\t\t\n\t\t\t\t// Saves window state\n\t\t\t\tx = parseInt(this.div.style.left);\n\t\t\t\ty = parseInt(this.div.style.top);\n\t\t\t\theight = this.table.style.height;\n\t\t\t\twidth = this.table.style.width;\n\n\t\t\t\tthis.div.style.left = '0px';\n\t\t\t\tthis.div.style.top = '0px';\n\t\t\t\tvar docHeight = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight || 0);\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\t\tthis.div.style.height = (docHeight - 2) + 'px';\n\t\t\t\t}\n\n\t\t\t\tthis.table.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\tthis.table.style.height = (docHeight - 2) + 'px';\n\t\t\t\t\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MAXIMIZE, 'event', evt));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmaximized = false;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.maximizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Maximize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tthis.minimize.style.display = minDisplay;\n\n\t\t\t\t// Restores window state\n\t\t\t\tthis.div.style.left = x+'px';\n\t\t\t\tthis.div.style.top = y+'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = height;\n\t\t\t\t\tthis.div.style.width = width;\n\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = height;\n\t\t\t\tthis.table.style.width = width;\n\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n\t\n\tmxEvent.addGestureListeners(this.maximize, funct);\n\tmxEvent.addListener(this.title, 'dblclick', funct);\n};\n\t\n/**\n * Function: installMoveHandler\n * \n * Installs the event listeners required for moving the window.\n */\nmxWindow.prototype.installMoveHandler = function()\n{\n\tthis.title.style.cursor = 'move';\n\t\n\tmxEvent.addGestureListeners(this.title,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar startX = mxEvent.getClientX(evt);\n\t\t\tvar startY = mxEvent.getClientY(evt);\n\t\t\tvar x = this.getX();\n\t\t\tvar y = this.getY();\n\t\t\t\t\t\t\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\t\t\tthis.setLocation(x + dx, y + dy);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_END, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_START, 'event', evt));\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.title.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: setLocation\n * \n * Sets the upper, left corner of the window.\n */\n mxWindow.prototype.setLocation = function(x, y)\n {\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n };\n\n/**\n * Function: getX\n *\n * Returns the current position on the x-axis.\n */\nmxWindow.prototype.getX = function()\n{\n\treturn parseInt(this.div.style.left);\n};\n\n/**\n * Function: getY\n *\n * Returns the current position on the y-axis.\n */\nmxWindow.prototype.getY = function()\n{\n\treturn parseInt(this.div.style.top);\n};\n\n/**\n * Function: installCloseHandler\n *\n * Adds the <closeImage> as a new image node in <closeImg> and installs the\n * <close> event.\n */\nmxWindow.prototype.installCloseHandler = function()\n{\n\tthis.closeImg = document.createElement('img');\n\t\n\tthis.closeImg.setAttribute('src', this.closeImage);\n\tthis.closeImg.setAttribute('title', 'Close');\n\tthis.closeImg.style.marginLeft = '2px';\n\tthis.closeImg.style.cursor = 'pointer';\n\tthis.closeImg.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.closeImg);\n\n\tmxEvent.addGestureListeners(this.closeImg,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CLOSE, 'event', evt));\n\t\t\t\n\t\t\tif (this.destroyOnClose)\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.setVisible(false);\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n};\n\n/**\n * Function: setImage\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * image - URL of the image to be used.\n */\nmxWindow.prototype.setImage = function(image)\n{\n\tthis.image = document.createElement('img');\n\tthis.image.setAttribute('src', image);\n\tthis.image.setAttribute('align', 'left');\n\tthis.image.style.marginRight = '4px';\n\tthis.image.style.marginLeft = '0px';\n\tthis.image.style.marginTop = '-2px';\n\t\n\tthis.title.insertBefore(this.image, this.title.firstChild);\n};\n\n/**\n * Function: setClosable\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * closable - Boolean specifying if the window should be closable.\n */\nmxWindow.prototype.setClosable = function(closable)\n{\n\tthis.closeImg.style.display = (closable) ? '' : 'none';\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the window is visible.\n */\nmxWindow.prototype.isVisible = function()\n{\n\tif (this.div != null)\n\t{\n\t\treturn this.div.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setVisible\n *\n * Shows or hides the window depending on the given flag.\n * \n * Parameters:\n * \n * visible - Boolean indicating if the window should be made visible.\n */\nmxWindow.prototype.setVisible = function(visible)\n{\n\tif (this.div != null && this.isVisible() != visible)\n\t{\n\t\tif (visible)\n\t\t{\n\t\t\tthis.show();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.hide();\n\t\t}\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the window.\n */\nmxWindow.prototype.show = function()\n{\n\tthis.div.style.display = '';\n\tthis.activate();\n\t\n\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\n\tif (!mxClient.IS_QUIRKS && (style.overflow == 'auto' || this.resize != null) &&\n\t\tthis.contentWrapper.style.display != 'none')\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n};\n\n/**\n * Function: hide\n *\n * Hides the window.\n */\nmxWindow.prototype.hide = function()\n{\n\tthis.div.style.display = 'none';\n\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n};\n\n/**\n * Function: destroy\n *\n * Destroys the window and removes all associated resources. Fires a\n * <destroy> event prior to destroying the window.\n */\nmxWindow.prototype.destroy = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.DESTROY));\n\t\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\tthis.div.parentNode.removeChild(this.div);\n\t\tthis.div = null;\n\t}\n\t\n\tthis.title = null;\n\tthis.content = null;\n\tthis.contentWrapper = null;\n};\n\n__mxOutput.mxWindow = typeof mxWindow !== 'undefined' ? mxWindow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxForm\n * \n * A simple class for creating HTML forms.\n * \n * Constructor: mxForm\n * \n * Creates a HTML table using the specified classname.\n */\nfunction mxForm(className)\n{\n\tthis.table = document.createElement('table');\n\tthis.table.className = className;\n\tthis.body = document.createElement('tbody');\n\t\n\tthis.table.appendChild(this.body);\n};\n\n/**\n * Variable: table\n * \n * Holds the DOM node that represents the table.\n */\nmxForm.prototype.table = null;\n\n/**\n * Variable: body\n * \n * Holds the DOM node that represents the tbody (table body). New rows\n * can be added to this object using DOM API.\n */\nmxForm.prototype.body = false;\n\n/**\n * Function: getTable\n * \n * Returns the table that contains this form.\n */\nmxForm.prototype.getTable = function()\n{\n\treturn this.table;\n};\n\n/**\n * Function: addButtons\n * \n * Helper method to add an OK and Cancel button using the respective\n * functions.\n */\nmxForm.prototype.addButtons = function(okFunct, cancelFunct)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\ttr.appendChild(td);\n\ttd = document.createElement('td');\n\n\t// Adds the ok button\n\tvar button = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('ok') || 'OK');\n\ttd.appendChild(button);\n\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tokFunct();\n\t});\n\t\n\t// Adds the cancel button\n\tbutton = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('cancel') || 'Cancel');\n\ttd.appendChild(button);\n\t\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tcancelFunct();\n\t});\n\t\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n};\n\n/**\n * Function: addText\n * \n * Adds an input for the given name, type and value and returns it.\n */\nmxForm.prototype.addText = function(name, value, type)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', type || 'text');\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCheckbox\n * \n * Adds a checkbox for the given name and value and returns the textfield.\n */\nmxForm.prototype.addCheckbox = function(name, value)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', 'checkbox');\n\tthis.addField(name, input);\n\n\t// IE can only change the checked value if the input is inside the DOM\n\tif (value)\n\t{\n\t\tinput.checked = true;\n\t}\n\n\treturn input;\n};\n\n/**\n * Function: addTextarea\n * \n * Adds a textarea for the given name and value and returns the textarea.\n */\nmxForm.prototype.addTextarea = function(name, value, rows)\n{\n\tvar input = document.createElement('textarea');\n\t\n\tif (mxClient.IS_NS)\n\t{\n\t\trows--;\n\t}\n\t\n\tinput.setAttribute('rows', rows || 2);\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCombo\n * \n * Adds a combo for the given name and returns the combo.\n */\nmxForm.prototype.addCombo = function(name, isMultiSelect, size)\n{\n\tvar select = document.createElement('select');\n\t\n\tif (size != null)\n\t{\n\t\tselect.setAttribute('size', size);\n\t}\n\t\n\tif (isMultiSelect)\n\t{\n\t\tselect.setAttribute('multiple', 'true');\n\t}\n\t\n\treturn this.addField(name, select);\n};\n\n/**\n * Function: addOption\n * \n * Adds an option for the given label to the specified combo.\n */\nmxForm.prototype.addOption = function(combo, label, value, isSelected)\n{\n\tvar option = document.createElement('option');\n\t\n\tmxUtils.writeln(option, label);\n\toption.setAttribute('value', value);\n\t\n\tif (isSelected)\n\t{\n\t\toption.setAttribute('selected', isSelected);\n\t}\n\t\n\tcombo.appendChild(option);\n};\n\n/**\n * Function: addField\n * \n * Adds a new row with the name and the input field in two columns and\n * returns the given input.\n */\nmxForm.prototype.addField = function(name, input)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\tmxUtils.write(td, name);\n\ttr.appendChild(td);\n\t\n\ttd = document.createElement('td');\n\ttd.appendChild(input);\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n\t\n\treturn input;\n};\n\n__mxOutput.mxForm = typeof mxForm !== 'undefined' ? mxForm : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImage\n *\n * Encapsulates the URL, width and height of an image.\n * \n * Constructor: mxImage\n * \n * Constructs a new image.\n */\nfunction mxImage(src, width, height)\n{\n\tthis.src = src;\n\tthis.width = width;\n\tthis.height = height;\n};\n\n/**\n * Variable: src\n *\n * String that specifies the URL of the image.\n */\nmxImage.prototype.src = null;\n\n/**\n * Variable: width\n *\n * Integer that specifies the width of the image.\n */\nmxImage.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Integer that specifies the height of the image.\n */\nmxImage.prototype.height = null;\n\n__mxOutput.mxImage = typeof mxImage !== 'undefined' ? mxImage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDivResizer\n * \n * Maintains the size of a div element in Internet Explorer. This is a\n * workaround for the right and bottom style being ignored in IE.\n * \n * If you need a div to cover the scrollwidth and -height of a document,\n * then you can use this class as follows:\n * \n * (code)\n * var resizer = new mxDivResizer(background);\n * resizer.getDocumentHeight = function()\n * {\n *   return document.body.scrollHeight;\n * }\n * resizer.getDocumentWidth = function()\n * {\n *   return document.body.scrollWidth;\n * }\n * resizer.resize();\n * (end)\n * \n * Constructor: mxDivResizer\n * \n * Constructs an object that maintains the size of a div\n * element when the window is being resized. This is only\n * required for Internet Explorer as it ignores the respective\n * stylesheet information for DIV elements.\n * \n * Parameters:\n * \n * div - Reference to the DOM node whose size should be maintained.\n * container - Optional Container that contains the div. Default is the\n * window.\n */\nfunction mxDivResizer(div, container)\n{\n\tif (div.nodeName.toLowerCase() == 'div')\n\t{\n\t\tif (container == null)\n\t\t{\n\t\t\tcontainer = window;\n\t\t}\n\n\t\tthis.div = div;\n\t\tvar style = mxUtils.getCurrentStyle(div);\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tthis.resizeWidth = style.width == 'auto';\n\t\t\tthis.resizeHeight = style.height == 'auto';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(container, 'resize',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (!this.handlingResize)\n\t\t\t\t{\n\t\t\t\t\tthis.handlingResize = true;\n\t\t\t\t\tthis.resize();\n\t\t\t\t\tthis.handlingResize = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tthis.resize();\n\t}\n};\n\n/**\n * Function: resizeWidth\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.resizeWidth = true;\n\n/**\n * Function: resizeHeight\n * \n * Boolean specifying if the height should be updated.\n */\nmxDivResizer.prototype.resizeHeight = true;\n\n/**\n * Function: handlingResize\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.handlingResize = false;\n\n/**\n * Function: resize\n * \n * Updates the style of the DIV after the window has been resized.\n */\nmxDivResizer.prototype.resize = function()\n{\n\tvar w = this.getDocumentWidth();\n\tvar h = this.getDocumentHeight();\n\n\tvar l = parseInt(this.div.style.left);\n\tvar r = parseInt(this.div.style.right);\n\tvar t = parseInt(this.div.style.top);\n\tvar b = parseInt(this.div.style.bottom);\n\t\n\tif (this.resizeWidth &&\n\t\t!isNaN(l) &&\n\t\t!isNaN(r) &&\n\t\tl >= 0 &&\n\t\tr >= 0 &&\n\t\tw - r - l > 0)\n\t{\n\t\tthis.div.style.width = (w - r - l)+'px';\n\t}\n\t\n\tif (this.resizeHeight &&\n\t\t!isNaN(t) &&\n\t\t!isNaN(b) &&\n\t\tt >= 0 &&\n\t\tb >= 0 &&\n\t\th - t - b > 0)\n\t{\n\t\tthis.div.style.height = (h - t - b)+'px';\n\t}\n};\n\n/**\n * Function: getDocumentWidth\n * \n * Hook for subclassers to return the width of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentWidth = function()\n{\n\treturn document.body.clientWidth;\n};\n\n/**\n * Function: getDocumentHeight\n * \n * Hook for subclassers to return the height of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentHeight = function()\n{\n\treturn document.body.clientHeight;\n};\n\n__mxOutput.mxDivResizer = typeof mxDivResizer !== 'undefined' ? mxDivResizer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDragSource\n * \n * Wrapper to create a drag source from a DOM element so that the element can\n * be dragged over a graph and dropped into the graph as a new cell.\n * \n * Problem is that in the dropHandler the current preview location is not\n * available, so the preview and the dropHandler must match.\n * \n * Constructor: mxDragSource\n * \n * Constructs a new drag source for the given element.\n */\nfunction mxDragSource(element, dropHandler)\n{\n\tthis.element = element;\n\tthis.dropHandler = dropHandler;\n\t\n\t// Handles a drag gesture on the element\n\tmxEvent.addGestureListeners(element, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseDown(evt);\n\t}));\n\t\n\t// Prevents native drag and drop\n\tmxEvent.addListener(element, 'dragstart', function(evt)\n\t{\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tthis.eventConsumer = function(sender, evt)\n\t{\n\t\tvar evtName = evt.getProperty('eventName');\n\t\tvar me = evt.getProperty('event');\n\t\t\n\t\tif (evtName != mxEvent.MOUSE_DOWN)\n\t\t{\n\t\t\tme.consume();\n\t\t}\n\t};\n};\n\n/**\n * Variable: element\n *\n * Reference to the DOM node which was made draggable.\n */\nmxDragSource.prototype.element = null;\n\n/**\n * Variable: dropHandler\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dropHandler = null;\n\n/**\n * Variable: dragOffset\n *\n * <mxPoint> that specifies the offset of the <dragElement>. Default is null.\n */\nmxDragSource.prototype.dragOffset = null;\n\n/**\n * Variable: dragElement\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dragElement = null;\n\n/**\n * Variable: previewElement\n *\n * Optional <mxRectangle> that specifies the unscaled size of the preview.\n */\nmxDragSource.prototype.previewElement = null;\n\n/**\n * Variable: previewOffset\n *\n * Optional <mxPoint> that specifies the offset of the preview in pixels.\n */\nmxDragSource.prototype.previewOffset = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if this drag source is enabled. Default is true.\n */\nmxDragSource.prototype.enabled = true;\n\n/**\n * Variable: currentGraph\n *\n * Reference to the <mxGraph> that is the current drop target.\n */\nmxDragSource.prototype.currentGraph = null;\n\n/**\n * Variable: currentDropTarget\n *\n * Holds the current drop target under the mouse.\n */\nmxDragSource.prototype.currentDropTarget = null;\n\n/**\n * Variable: currentPoint\n *\n * Holds the current drop location.\n */\nmxDragSource.prototype.currentPoint = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentGuide = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentHighlight = null;\n\n/**\n * Variable: autoscroll\n *\n * Specifies if the graph should scroll automatically. Default is true.\n */\nmxDragSource.prototype.autoscroll = true;\n\n/**\n * Variable: guidesEnabled\n *\n * Specifies if <mxGuide> should be enabled. Default is true.\n */\nmxDragSource.prototype.guidesEnabled = true;\n\n/**\n * Variable: gridEnabled\n *\n * Specifies if the grid should be allowed. Default is true.\n */\nmxDragSource.prototype.gridEnabled = true;\n\n/**\n * Variable: highlightDropTargets\n *\n * Specifies if drop targets should be highlighted. Default is true.\n */\nmxDragSource.prototype.highlightDropTargets = true;\n\n/**\n * Variable: dragElementZIndex\n * \n * ZIndex for the drag element. Default is 100.\n */\nmxDragSource.prototype.dragElementZIndex = 100;\n\n/**\n * Variable: dragElementOpacity\n * \n * Opacity of the drag element in %. Default is 70.\n */\nmxDragSource.prototype.dragElementOpacity = 70;\n\n/**\n * Variable: checkEventSource\n * \n * Whether the event source should be checked in <graphContainerEvent>. Default\n * is true.\n */\nmxDragSource.prototype.checkEventSource = true;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxDragSource.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxDragSource.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isGuidesEnabled\n * \n * Returns <guidesEnabled>.\n */\nmxDragSource.prototype.isGuidesEnabled = function()\n{\n\treturn this.guidesEnabled;\n};\n\n/**\n * Function: setGuidesEnabled\n * \n * Sets <guidesEnabled>.\n */\nmxDragSource.prototype.setGuidesEnabled = function(value)\n{\n\tthis.guidesEnabled = value;\n};\n\n/**\n * Function: isGridEnabled\n * \n * Returns <gridEnabled>.\n */\nmxDragSource.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Sets <gridEnabled>.\n */\nmxDragSource.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: getGraphForEvent\n * \n * Returns the graph for the given mouse event. This implementation returns\n * null.\n */\nmxDragSource.prototype.getGraphForEvent = function(evt)\n{\n\treturn null;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.getDropTarget = function(graph, x, y, evt)\n{\n\treturn graph.getCellAt(x, y);\n};\n\n/**\n * Function: createDragElement\n * \n * Creates and returns a clone of the <dragElementPrototype> or the <element>\n * if the former is not defined.\n */\nmxDragSource.prototype.createDragElement = function(evt)\n{\n\treturn this.element.cloneNode(true);\n};\n\n/**\n * Function: createPreviewElement\n * \n * Creates and returns an element which can be used as a preview in the given\n * graph.\n */\nmxDragSource.prototype.createPreviewElement = function(graph)\n{\n\treturn null;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this drag source is active.\n */\nmxDragSource.prototype.isActive = function()\n{\n\treturn this.mouseMoveHandler != null;\n};\n\n/**\n * Function: reset\n * \n * Stops and removes everything and restores the state of the object.\n */\nmxDragSource.prototype.reset = function()\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\t\n\tthis.removeDragElement();\n\tthis.removeListeners();\n\tthis.stopDrag();\n};\n\n/**\n * Function: mouseDown\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n * \n * To ignore popup menu events for a drag source, this function can be\n * overridden as follows.\n * \n * (code)\n * var mouseDown = dragSource.mouseDown;\n * \n * dragSource.mouseDown = function(evt)\n * {\n *   if (!mxEvent.isPopupTrigger(evt))\n *   {\n *     mouseDown.apply(this, arguments);\n *   }\n * };\n * (end)\n */\nmxDragSource.prototype.mouseDown = function(evt)\n{\n\tif (this.enabled && !mxEvent.isConsumed(evt) && this.mouseMoveHandler == null)\n\t{\n\t\tthis.startDrag(evt);\n\t\tthis.mouseMoveHandler = mxUtils.bind(this, this.mouseMove);\n\t\tthis.mouseUpHandler = mxUtils.bind(this, this.mouseUp);\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t\n\t\tif (mxClient.IS_TOUCH && !mxEvent.isMouseEvent(evt))\n\t\t{\n\t\t\tthis.eventSource = mxEvent.getSource(evt);\n\t\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t}\n\t}\n};\n\n/**\n * Function: startDrag\n * \n * Creates the <dragElement> using <createDragElement>.\n */\nmxDragSource.prototype.startDrag = function(evt)\n{\n\tthis.dragElement = this.createDragElement(evt);\n\tthis.dragElement.style.position = 'absolute';\n\tthis.dragElement.style.zIndex = this.dragElementZIndex;\n\tmxUtils.setOpacity(this.dragElement, this.dragElementOpacity);\n\n\tif (this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.dragElement.style.pointerEvents = 'none';\n\t}\n};\n\n/**\n * Function: stopDrag\n * \n * Invokes <removeDragElement>.\n */\nmxDragSource.prototype.stopDrag = function()\n{\n\t// LATER: This used to have a mouse event. If that is still needed we need to add another\n\t// final call to the DnD protocol to add a cleanup step in the case of escape press, which\n\t// is not associated with a mouse event and which currently calles this method.\n\tthis.removeDragElement();\n};\n\n/**\n * Function: removeDragElement\n * \n * Removes and destroys the <dragElement>.\n */\nmxDragSource.prototype.removeDragElement = function()\n{\n\tif (this.dragElement != null)\n\t{\n\t\tif (this.dragElement.parentNode != null)\n\t\t{\n\t\t\tthis.dragElement.parentNode.removeChild(this.dragElement);\n\t\t}\n\t\t\n\t\tthis.dragElement = null;\n\t}\n};\n\n/**\n * Function: getElementForEvent\n * \n * Returns the topmost element under the given event.\n */\nmxDragSource.prototype.getElementForEvent = function(evt)\n{\n\treturn ((mxEvent.isTouchEvent(evt) || mxEvent.isPenEvent(evt)) ?\n\t\t\tdocument.elementFromPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt)) :\n\t\t\t\tmxEvent.getSource(evt));\n};\n\n/**\n * Function: graphContainsEvent\n * \n * Returns true if the given graph contains the given event.\n */\nmxDragSource.prototype.graphContainsEvent = function(graph, evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin();\n\tvar elt = this.getElementForEvent(evt);\n\t\n\tif (this.checkEventSource)\n\t{\n\t\twhile (elt != null && elt != graph.container)\n\t\t{\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\n\t// Checks if event is inside the bounds of the graph container\n\treturn elt != null && x >= offset.x - origin.x && y >= offset.y - origin.y &&\n\t\tx <= offset.x - origin.x + graph.container.offsetWidth &&\n\t\ty <= offset.y - origin.y + graph.container.offsetHeight;\n};\n\n/**\n * Function: mouseMove\n * \n * Gets the graph for the given event using <getGraphForEvent>, updates the\n * <currentGraph>, calling <dragEnter> and <dragExit> on the new and old graph,\n * respectively, and invokes <dragOver> if <currentGraph> is not null.\n */\nmxDragSource.prototype.mouseMove = function(evt)\n{\n\tvar graph = this.getGraphForEvent(evt);\n\t\n\t// Checks if event is inside the bounds of the graph container\n\tif (graph != null && !this.graphContainsEvent(graph, evt))\n\t{\n\t\tgraph = null;\n\t}\n\n\tif (graph != this.currentGraph)\n\t{\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragExit(this.currentGraph, evt);\n\t\t}\n\t\t\n\t\tthis.currentGraph = graph;\n\t\t\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragEnter(this.currentGraph, evt);\n\t\t}\n\t}\n\t\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragOver(this.currentGraph, evt);\n\t}\n\n\tif (this.dragElement != null && (this.previewElement == null || this.previewElement.style.visibility != 'visible'))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\t\n\t\tif (this.dragElement.parentNode == null)\n\t\t{\n\t\t\tdocument.body.appendChild(this.dragElement);\n\t\t}\n\n\t\tthis.dragElement.style.visibility = 'visible';\n\t\t\n\t\tif (this.dragOffset != null)\n\t\t{\n\t\t\tx += this.dragOffset.x;\n\t\t\ty += this.dragOffset.y;\n\t\t}\n\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tthis.dragElement.style.left = (x + offset.x) + 'px';\n\t\tthis.dragElement.style.top = (y + offset.y) + 'px';\n\t}\n\telse if (this.dragElement != null)\n\t{\n\t\tthis.dragElement.style.visibility = 'hidden';\n\t}\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: mouseUp\n * \n * Processes the mouse up event and invokes <drop>, <dragExit> and <stopDrag>\n * as required.\n */\nmxDragSource.prototype.mouseUp = function(evt)\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tif (this.currentPoint != null && (this.previewElement == null ||\n\t\t\tthis.previewElement.style.visibility != 'hidden'))\n\t\t{\n\t\t\tvar scale = this.currentGraph.view.scale;\n\t\t\tvar tr = this.currentGraph.view.translate;\n\t\t\tvar x = this.currentPoint.x / scale - tr.x;\n\t\t\tvar y = this.currentPoint.y / scale - tr.y;\n\t\t\t\n\t\t\tthis.drop(this.currentGraph, evt, this.currentDropTarget, x, y);\n\t\t}\n\t\t\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\n\tthis.stopDrag();\n\tthis.removeListeners();\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: removeListeners\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.removeListeners = function()\n{\n\tif (this.eventSource != null)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\tthis.eventSource = null;\n\t}\n\t\n\tmxEvent.removeGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\tthis.mouseMoveHandler = null;\n\tthis.mouseUpHandler = null;\n};\n\n/**\n * Function: dragEnter\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.dragEnter = function(graph, evt)\n{\n\tgraph.isMouseDown = true;\n\tgraph.isMouseTrigger = mxEvent.isMouseEvent(evt);\n\tthis.previewElement = this.createPreviewElement(graph);\n\t\n\tif (this.previewElement != null && this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.previewElement.style.pointerEvents = 'none';\n\t}\n\t\n\t// Guide is only needed if preview element is used\n\tif (this.isGuidesEnabled() && this.previewElement != null)\n\t{\n\t\tthis.currentGuide = new mxGuide(graph, graph.graphHandler.getGuideStates());\n\t}\n\t\n\tif (this.highlightDropTargets)\n\t{\n\t\tthis.currentHighlight = new mxCellHighlight(graph, mxConstants.DROP_TARGET_COLOR);\n\t}\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.eventConsumer);\n};\n\n/**\n * Function: dragExit\n * \n * Deactivates the given graph as a drop target.\n */\nmxDragSource.prototype.dragExit = function(graph, evt)\n{\n\tthis.currentDropTarget = null;\n\tthis.currentPoint = null;\n\tgraph.isMouseDown = false;\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.removeListener(this.eventConsumer);\n\t\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode != null)\n\t\t{\n\t\t\tthis.previewElement.parentNode.removeChild(this.previewElement);\n\t\t}\n\t\t\n\t\tthis.previewElement = null;\n\t}\n\t\n\tif (this.currentGuide != null)\n\t{\n\t\tthis.currentGuide.destroy();\n\t\tthis.currentGuide = null;\n\t}\n\t\n\tif (this.currentHighlight != null)\n\t{\n\t\tthis.currentHighlight.destroy();\n\t\tthis.currentHighlight = null;\n\t}\n};\n\n/**\n * Function: dragOver\n * \n * Implements autoscroll, updates the <currentPoint>, highlights any drop\n * targets and updates the preview.\n */\nmxDragSource.prototype.dragOver = function(graph, evt)\n{\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin(graph.container);\n\tvar x = mxEvent.getClientX(evt) - offset.x + origin.x - graph.panDx;\n\tvar y = mxEvent.getClientY(evt) - offset.y + origin.y - graph.panDy;\n\n\tif (graph.autoScroll && (this.autoscroll == null || this.autoscroll))\n\t{\n\t\tgraph.scrollPointToVisible(x, y, graph.autoExtend);\n\t}\n\n\t// Highlights the drop target under the mouse\n\tif (this.currentHighlight != null && graph.isDropEnabled())\n\t{\n\t\tthis.currentDropTarget = this.getDropTarget(graph, x, y, evt);\n\t\tvar state = graph.getView().getState(this.currentDropTarget);\n\t\tthis.currentHighlight.highlight(state);\n\t}\n\n\t// Updates the location of the preview\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode == null)\n\t\t{\n\t\t\tgraph.container.appendChild(this.previewElement);\n\t\t\t\n\t\t\tthis.previewElement.style.zIndex = '3';\n\t\t\tthis.previewElement.style.position = 'absolute';\n\t\t}\n\t\t\n\t\tvar gridEnabled = this.isGridEnabled() && graph.isGridEnabledEvent(evt);\n\t\tvar hideGuide = true;\n\n\t\t// Grid and guides\n\t\tif (this.currentGuide != null && this.currentGuide.isEnabledForEvent(evt))\n\t\t{\n\t\t\t// LATER: HTML preview appears smaller than SVG preview\n\t\t\tvar w = parseInt(this.previewElement.style.width);\n\t\t\tvar h = parseInt(this.previewElement.style.height);\n\t\t\tvar bounds = new mxRectangle(0, 0, w, h);\n\t\t\tvar delta = new mxPoint(x, y);\n\t\t\tdelta = this.currentGuide.move(bounds, delta, gridEnabled, true);\n\t\t\thideGuide = false;\n\t\t\tx = delta.x;\n\t\t\ty = delta.y;\n\t\t}\n\t\telse if (gridEnabled)\n\t\t{\n\t\t\tvar scale = graph.view.scale;\n\t\t\tvar tr = graph.view.translate;\n\t\t\tvar off = graph.gridSize / 2;\n\t\t\tx = (graph.snap(x / scale - tr.x - off) + tr.x) * scale;\n\t\t\ty = (graph.snap(y / scale - tr.y - off) + tr.y) * scale;\n\t\t}\n\t\t\n\t\tif (this.currentGuide != null && hideGuide)\n\t\t{\n\t\t\tthis.currentGuide.hide();\n\t\t}\n\t\t\n\t\tif (this.previewOffset != null)\n\t\t{\n\t\t\tx += this.previewOffset.x;\n\t\t\ty += this.previewOffset.y;\n\t\t}\n\n\t\tthis.previewElement.style.left = Math.round(x) + 'px';\n\t\tthis.previewElement.style.top = Math.round(y) + 'px';\n\t\tthis.previewElement.style.visibility = 'visible';\n\t}\n\t\n\tthis.currentPoint = new mxPoint(x, y);\n};\n\n/**\n * Function: drop\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.drop = function(graph, evt, dropTarget, x, y)\n{\n\tthis.dropHandler.apply(this, arguments);\n\t\n\t// Had to move this to after the insert because it will\n\t// affect the scrollbars of the window in IE to try and\n\t// make the complete container visible.\n\t// LATER: Should be made optional.\n\tif (graph.container.style.visibility != 'hidden')\n\t{\n\t\tgraph.container.focus();\n\t}\n};\n\n__mxOutput.mxDragSource = typeof mxDragSource !== 'undefined' ? mxDragSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxToolbar\n * \n * Creates a toolbar inside a given DOM node. The toolbar may contain icons,\n * buttons and combo boxes.\n * \n * Event: mxEvent.SELECT\n * \n * Fires when an item was selected in the toolbar. The <code>function</code>\n * property contains the function that was selected in <selectMode>.\n * \n * Constructor: mxToolbar\n * \n * Constructs a toolbar in the specified container.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nfunction mxToolbar(container)\n{\n\tthis.container = container;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxToolbar.prototype = new mxEventSource();\nmxToolbar.prototype.constructor = mxToolbar;\n\n/**\n * Variable: container\n * \n * Reference to the DOM nodes that contains the toolbar.\n */\nmxToolbar.prototype.container = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxToolbar.prototype.enabled = true;\n\n/**\n * Variable: noReset\n * \n * Specifies if <resetMode> requires a forced flag of true for resetting\n * the current mode in the toolbar. Default is false. This is set to true\n * if the toolbar item is double clicked to avoid a reset after a single\n * use of the item.\n */\nmxToolbar.prototype.noReset = false;\n\n/**\n * Variable: updateDefaultMode\n * \n * Boolean indicating if the default mode should be the last selected\n * switch mode or the first inserted switch mode. Default is true, that\n * is the last selected switch mode is the default mode. The default mode\n * is the mode to be selected after a reset of the toolbar. If this is\n * false, then the default mode is the first inserted mode item regardless\n * of what was last selected. Otherwise, the selected item after a reset is\n * the previously selected item.\n */\nmxToolbar.prototype.updateDefaultMode = true;\n\n/**\n * Function: addItem\n * \n * Adds the given function as an image with the specified title and icon\n * and returns the new image node.\n * \n * Parameters:\n * \n * title - Optional string that is used as the tooltip.\n * icon - Optional URL of the image to be used. If no URL is given, then a\n * button is created.\n * funct - Function to execute on a mouse click.\n * pressedIcon - Optional URL of the pressed image. Default is a gray\n * background.\n * style - Optional style classname. Default is mxToolbarItem.\n * factoryMethod - Optional factory method for popup menu, eg.\n * function(menu, evt, cell) { menu.addItem('Hello, World!'); }\n */\nmxToolbar.prototype.addItem = function(title, icon, funct, pressedIcon, style, factoryMethod)\n{\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\tvar initialClassName = style || ((factoryMethod != null) ?\n\t\t\t'mxToolbarMode' : 'mxToolbarItem');\n\timg.className = initialClassName;\n\timg.setAttribute('src', icon);\n\t\n\tif (title != null)\n\t{\n\t\tif (icon != null)\n\t\t{\n\t\t\timg.setAttribute('title', title);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.write(img, title);\n\t\t}\n\t}\n\t\n\tthis.container.appendChild(img);\n\n\t// Invokes the function on a click on the toolbar item\n\tif (funct != null)\n\t{\n\t\tmxEvent.addListener(img, 'click', funct);\n\t\t\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(img, 'touchend', funct);\n\t\t}\n\t}\n\n\tvar mouseHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', icon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = '';\n\t\t}\n\t});\n\n\t// Highlights the toolbar item with a gray background\n\t// while it is being clicked with the mouse\n\tmxEvent.addGestureListeners(img, mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', pressedIcon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = 'gray';\n\t\t}\n\t\t\n\t\t// Popup Menu\n\t\tif (factoryMethod != null)\n\t\t{\n\t\t\tif (this.menu == null)\n\t\t\t{\n\t\t\t\tthis.menu = new mxPopupMenu();\n\t\t\t\tthis.menu.init();\n\t\t\t}\n\t\t\t\n\t\t\tvar last = this.currentImg;\n\t\t\t\n\t\t\tif (this.menu.isMenuShowing())\n\t\t\t{\n\t\t\t\tthis.menu.hideMenu();\n\t\t\t}\n\t\t\t\n\t\t\tif (last != img)\n\t\t\t{\n\t\t\t\t// Redirects factory method to local factory method\n\t\t\t\tthis.currentImg = img;\n\t\t\t\tthis.menu.factoryMethod = factoryMethod;\n\t\t\t\t\n\t\t\t\tvar point = new mxPoint(\n\t\t\t\t\timg.offsetLeft,\n\t\t\t\t\timg.offsetTop + img.offsetHeight);\n\t\t\t\tthis.menu.popup(point.x, point.y, null, evt);\n\n\t\t\t\t// Sets and overrides to restore classname\n\t\t\t\tif (this.menu.isMenuShowing())\n\t\t\t\t{\n\t\t\t\t\timg.className = initialClassName + 'Selected';\n\t\t\t\t\t\n\t\t\t\t\tthis.menu.hideMenu = function()\n\t\t\t\t\t{\n\t\t\t\t\t\tmxPopupMenu.prototype.hideMenu.apply(this);\n\t\t\t\t\t\timg.className = initialClassName;\n\t\t\t\t\t\tthis.currentImg = null;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}), null, mouseHandler);\n\n\tmxEvent.addListener(img, 'mouseout', mouseHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given style. The element\n * is placed inside a DIV with the mxToolbarComboContainer style classname.\n * \n * Parameters:\n * \n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addCombo = function(style)\n{\n\tvar div = document.createElement('div');\n\tdiv.style.display = 'inline';\n\tdiv.className = 'mxToolbarComboContainer';\n\t\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tdiv.appendChild(select);\n\t\n\tthis.container.appendChild(div);\n\t\n\treturn select;\n};\n\n/**\n * Function: addActionCombo\n * \n * Adds and returns a new SELECT element using the given title as the\n * default element. The selection is reset to this element after each\n * change.\n * \n * Parameters:\n * \n * title - String that specifies the title of the default element.\n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addActionCombo = function(title, style)\n{\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tthis.addOption(select, title, null);\n\t\n\tmxEvent.addListener(select, 'change', function(evt)\n\t{\n\t\tvar value = select.options[select.selectedIndex];\n\t\tselect.selectedIndex = 0;\n\t\t\n\t\tif (value.funct != null)\n\t\t{\n\t\t\tvalue.funct(evt);\n\t\t}\n\t});\n\t\n\tthis.container.appendChild(select);\n\t\n\treturn select;\n};\n\n/**\n * Function: addOption\n * \n * Adds and returns a new OPTION element inside the given SELECT element.\n * If the given value is a function then it is stored in the option's funct\n * field.\n * \n * Parameters:\n * \n * combo - SELECT element that will contain the new entry.\n * title - String that specifies the title of the option.\n * value - Specifies the value associated with this option.\n */\nmxToolbar.prototype.addOption = function(combo, title, value)\n{\n\tvar option = document.createElement('option');\n\tmxUtils.writeln(option, title);\n\t\n\tif (typeof(value) == 'function')\n\t{\n\t\toption.funct = value;\n\t}\n\telse\n\t{\n\t\toption.setAttribute('value', value);\n\t}\n\t\n\tcombo.appendChild(option);\n\t\n\treturn option;\n};\n\n/**\n * Function: addSwitchMode\n * \n * Adds a new selectable item to the toolbar. Only one switch mode item may\n * be selected at a time. The currently selected item is the default item\n * after a reset of the toolbar.\n */\nmxToolbar.prototype.addSwitchMode = function(title, icon, funct, pressedIcon, style)\n{\n\tvar img = document.createElement('img');\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\t\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t{\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t}\n\t\t\n\t\tif (this.updateDefaultMode)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t}\n\t\t\n\t\tthis.selectedMode = img;\n\t\t\n\t\tvar tmp = img.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\timg.altIcon = img.getAttribute('src');\n\t\t\timg.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.className = img.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT));\n\t\tfunct();\n\t}));\n\t\n\tthis.container.appendChild(img);\n\t\n\tif (this.defaultMode == null)\n\t{\n\t\tthis.defaultMode = img;\n\t\t\n\t\t// Function should fire only once so\n\t\t// do not pass it with the select event\n\t\tthis.selectMode(img);\n\t\tfunct();\n\t}\n\t\n\treturn img;\n};\n\n/**\n * Function: addMode\n * \n * Adds a new item to the toolbar. The selection is typically reset after\n * the item has been consumed, for example by adding a new vertex to the\n * graph. The reset is not carried out if the item is double clicked.\n * \n * The function argument uses the following signature: funct(evt, cell) where\n * evt is the native mouse event and cell is the cell under the mouse.\n */\nmxToolbar.prototype.addMode = function(title, icon, funct, pressedIcon, style, toggle)\n{\n\ttoggle = (toggle != null) ? toggle : true;\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\t\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tif (this.enabled && toggle)\n\t{\n\t\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = false;\n\t\t}));\n\t\t\n\t\tmxEvent.addListener(img, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = true;\n\t\t}));\n\t\t\n\t\tif (this.defaultMode == null)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t\tthis.defaultFunction = funct;\n\t\t\tthis.selectMode(img, funct);\n\t\t}\n\t}\n\n\tthis.container.appendChild(img);\t\t\t\t\t\n\n\treturn img;\n};\n\n/**\n * Function: selectMode\n * \n * Resets the state of the previously selected mode and displays the given\n * DOM node as selected. This function fires a select event with the given\n * function as a parameter.\n */\nmxToolbar.prototype.selectMode = function(domNode, funct)\n{\n\tif (this.selectedMode != domNode)\n\t{\n\t\tif (this.selectedMode != null)\n\t\t{\n\t\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.selectedMode = domNode;\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT, \"function\", funct));\n\t}\n};\n\n/**\n * Function: resetMode\n * \n * Selects the default mode and resets the state of the previously selected\n * mode.\n */\nmxToolbar.prototype.resetMode = function(forced)\n{\n\tif ((forced || !this.noReset) && this.selectedMode != this.defaultMode)\n\t{\n\t\t// The last selected switch mode will be activated\n\t\t// so the function was already executed and is\n\t\t// no longer required here\n\t\tthis.selectMode(this.defaultMode, this.defaultFunction);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds the specifies image as a separator.\n * \n * Parameters:\n * \n * icon - URL of the separator icon.\n */\nmxToolbar.prototype.addSeparator = function(icon)\n{\n\treturn this.addItem(null, icon, null);\n};\n\n/**\n * Function: addBreak\n * \n * Adds a break to the container.\n */\nmxToolbar.prototype.addBreak = function()\n{\n\tmxUtils.br(this.container);\n};\n\n/**\n * Function: addLine\n * \n * Adds a horizontal line to the container.\n */\nmxToolbar.prototype.addLine = function()\n{\n\tvar hr = document.createElement('hr');\n\t\n\thr.style.marginRight = '6px';\n\thr.setAttribute('size', '1');\n\t\n\tthis.container.appendChild(hr);\n};\n\n/**\n * Function: destroy\n * \n * Removes the toolbar and all its associated resources.\n */\nmxToolbar.prototype.destroy = function ()\n{\n\tmxEvent.release(this.container);\n\tthis.container = null;\n\tthis.defaultMode = null;\n\tthis.defaultFunction = null;\n\tthis.selectedMode = null;\n\t\n\tif (this.menu != null)\n\t{\n\t\tthis.menu.destroy();\n\t}\n};\n\n__mxOutput.mxToolbar = typeof mxToolbar !== 'undefined' ? mxToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoableEdit\n * \n * Implements a composite undoable edit. Here is an example for a custom change\n * which gets executed via the model:\n * \n * (code)\n * function CustomChange(model, name)\n * {\n *   this.model = model;\n *   this.name = name;\n *   this.previous = name;\n * };\n * \n * CustomChange.prototype.execute = function()\n * {\n *   var tmp = this.model.name;\n *   this.model.name = this.previous;\n *   this.previous = tmp;\n * };\n * \n * var name = prompt('Enter name');\n * graph.model.execute(new CustomChange(graph.model, name));\n * (end)\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n * \n * Event: mxEvent.START_EDIT\n * \n * Fires before a set of changes will be executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after a set of changeswas executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Constructor: mxUndoableEdit\n * \n * Constructs a new undoable edit for the given source.\n */\nfunction mxUndoableEdit(source, significant)\n{\n\tthis.source = source;\n\tthis.changes = [];\n\tthis.significant = (significant != null) ? significant : true;\n};\n\n/**\n * Variable: source\n * \n * Specifies the source of the edit.\n */\nmxUndoableEdit.prototype.source = null;\n\n/**\n * Variable: changes\n * \n * Array that contains the changes that make up this edit. The changes are\n * expected to either have an undo and redo function, or an execute\n * function. Default is an empty array.\n */\nmxUndoableEdit.prototype.changes = null;\n\n/**\n * Variable: significant\n * \n * Specifies if the undoable change is significant.\n * Default is true.\n */\nmxUndoableEdit.prototype.significant = null;\n\n/**\n * Variable: undone\n * \n * Specifies if this edit has been undone. Default is false.\n */\nmxUndoableEdit.prototype.undone = false;\n\n/**\n * Variable: redone\n * \n * Specifies if this edit has been redone. Default is false.\n */\nmxUndoableEdit.prototype.redone = false;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the this edit contains no changes.\n */\nmxUndoableEdit.prototype.isEmpty = function()\n{\n\treturn this.changes.length == 0;\n};\n\n/**\n * Function: isSignificant\n * \n * Returns <significant>.\n */\nmxUndoableEdit.prototype.isSignificant = function()\n{\n\treturn this.significant;\n};\n\n/**\n * Function: add\n * \n * Adds the specified change to this edit. The change is an object that is\n * expected to either have an undo and redo, or an execute function.\n */\nmxUndoableEdit.prototype.add = function(change)\n{\n\tthis.changes.push(change);\n};\n\n/**\n * Function: notify\n * \n * Hook to notify any listeners of the changes after an <undo> or <redo>\n * has been carried out. This implementation is empty.\n */\nmxUndoableEdit.prototype.notify = function() { };\n\n/**\n * Function: die\n * \n * Hook to free resources after the edit has been removed from the command\n * history. This implementation is empty.\n */\nmxUndoableEdit.prototype.die = function() { };\n\n/**\n * Function: undo\n * \n * Undoes all changes in this edit.\n */\nmxUndoableEdit.prototype.undo = function()\n{\n\tif (!this.undone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = count - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.undo != null)\n\t\t\t{\n\t\t\t\tchange.undo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = true;\n\t\tthis.redone = false;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n/**\n * Function: redo\n * \n * Redoes all changes in this edit.\n */\nmxUndoableEdit.prototype.redo = function()\n{\n\tif (!this.redone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.redo != null)\n\t\t\t{\n\t\t\t\tchange.redo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = false;\n\t\tthis.redone = true;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n__mxOutput.mxUndoableEdit = typeof mxUndoableEdit !== 'undefined' ? mxUndoableEdit : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoManager\n *\n * Implements a command history. When changing the graph model, an\n * <mxUndoableChange> object is created at the start of the transaction (when\n * model.beginUpdate is called). All atomic changes are then added to this\n * object until the last model.endUpdate call, at which point the\n * <mxUndoableEdit> is dispatched in an event, and added to the history inside\n * <mxUndoManager>. This is done by an event listener in\n * <mxEditor.installUndoHandler>.\n * \n * Each atomic change of the model is represented by an object (eg.\n * <mxRootChange>, <mxChildChange>, <mxTerminalChange> etc) which contains the\n * complete undo information. The <mxUndoManager> also listens to the\n * <mxGraphView> and stores it's changes to the current root as insignificant\n * undoable changes, so that drilling (step into, step up) is undone.\n * \n * This means when you execute an atomic change on the model, then change the\n * current root on the view and click undo, the change of the root will be\n * undone together with the change of the model so that the display represents\n * the state at which the model was changed. However, these changes are not\n * transmitted for sharing as they do not represent a state change.\n *\n * Example:\n * \n * When adding an undo manager to a graph, make sure to add it\n * to the model and the view as well to maintain a consistent\n * display across multiple undo/redo steps.\n *\n * (code)\n * var undoManager = new mxUndoManager();\n * var listener = function(sender, evt)\n * {\n *   undoManager.undoableEditHappened(evt.getProperty('edit'));\n * };\n * graph.getModel().addListener(mxEvent.UNDO, listener);\n * graph.getView().addListener(mxEvent.UNDO, listener);\n * (end)\n * \n * The code creates a function that informs the undoManager\n * of an undoable edit and binds it to the undo event of\n * <mxGraphModel> and <mxGraphView> using\n * <mxEventSource.addListener>.\n * \n * Event: mxEvent.CLEAR\n * \n * Fires after <clear> was invoked. This event has no properties.\n * \n * Event: mxEvent.UNDO\n * \n * Fires afer a significant edit was undone in <undo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was undone.\n * \n * Event: mxEvent.REDO\n * \n * Fires afer a significant edit was redone in <redo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was redone.\n * \n * Event: mxEvent.ADD\n * \n * Fires after an undoable edit was added to the history. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was added.\n * \n * Constructor: mxUndoManager\n *\n * Constructs a new undo manager with the given history size. If no history\n * size is given, then a default size of 100 steps is used.\n */\nfunction mxUndoManager(size)\n{\n\tthis.size = (size != null) ? size : 100;\n\tthis.clear();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUndoManager.prototype = new mxEventSource();\nmxUndoManager.prototype.constructor = mxUndoManager;\n\n/**\n * Variable: size\n * \n * Maximum command history size. 0 means unlimited history. Default is\n * 100.\n */\nmxUndoManager.prototype.size = null;\n\n/**\n * Variable: history\n * \n * Array that contains the steps of the command history.\n */\nmxUndoManager.prototype.history = null;\n\n/**\n * Variable: indexOfNextAdd\n * \n * Index of the element to be added next.\n */\nmxUndoManager.prototype.indexOfNextAdd = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the history is empty.\n */\nmxUndoManager.prototype.isEmpty = function()\n{\n\treturn this.history.length == 0;\n};\n\n/**\n * Function: clear\n * \n * Clears the command history.\n */\nmxUndoManager.prototype.clear = function()\n{\n\tthis.history = [];\n\tthis.indexOfNextAdd = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.CLEAR));\n};\n\n/**\n * Function: canUndo\n * \n * Returns true if an undo is possible.\n */\nmxUndoManager.prototype.canUndo = function()\n{\n\treturn this.indexOfNextAdd > 0;\n};\n\n/**\n * Function: undo\n * \n * Undoes the last change.\n */\nmxUndoManager.prototype.undo = function()\n{\n    while (this.indexOfNextAdd > 0)\n    {\n        var edit = this.history[--this.indexOfNextAdd];\n        edit.undo();\n\n\t\tif (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: canRedo\n * \n * Returns true if a redo is possible.\n */\nmxUndoManager.prototype.canRedo = function()\n{\n\treturn this.indexOfNextAdd < this.history.length;\n};\n\n/**\n * Function: redo\n * \n * Redoes the last change.\n */\nmxUndoManager.prototype.redo = function()\n{\n    var n = this.history.length;\n    \n    while (this.indexOfNextAdd < n)\n    {\n        var edit =  this.history[this.indexOfNextAdd++];\n        edit.redo();\n        \n        if (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.REDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: undoableEditHappened\n * \n * Method to be called to add new undoable edits to the <history>.\n */\nmxUndoManager.prototype.undoableEditHappened = function(undoableEdit)\n{\n\tthis.trim();\n\t\n\tif (this.size > 0 &&\n\t\tthis.size == this.history.length)\n\t{\n\t\tthis.history.shift();\n\t}\n\t\n\tthis.history.push(undoableEdit);\n\tthis.indexOfNextAdd = this.history.length;\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'edit', undoableEdit));\n};\n\n/**\n * Function: trim\n * \n * Removes all pending steps after <indexOfNextAdd> from the history,\n * invoking die on each edit. This is called from <undoableEditHappened>.\n */\nmxUndoManager.prototype.trim = function()\n{\n\tif (this.history.length > this.indexOfNextAdd)\n\t{\n\t\tvar edits = this.history.splice(this.indexOfNextAdd,\n\t\t\tthis.history.length - this.indexOfNextAdd);\n\t\t\t\n\t\tfor (var i = 0; i < edits.length; i++)\n\t\t{\n\t\t\tedits[i].die();\n\t\t}\n\t}\n};\n\n__mxOutput.mxUndoManager = typeof mxUndoManager !== 'undefined' ? mxUndoManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxUrlConverter\n * \n * Converts relative and absolute URLs to absolute URLs with protocol and domain.\n */\nvar mxUrlConverter = function()\n{\n\t// Empty constructor\n};\n\n/**\n * Variable: enabled\n * \n * Specifies if the converter is enabled. Default is true.\n */\nmxUrlConverter.prototype.enabled = true;\n\n/**\n * Variable: baseUrl\n * \n * Specifies the base URL to be used as a prefix for relative URLs.\n */\nmxUrlConverter.prototype.baseUrl = null;\n\n/**\n * Variable: baseDomain\n * \n * Specifies the base domain to be used as a prefix for absolute URLs.\n */\nmxUrlConverter.prototype.baseDomain = null;\n\n/**\n * Function: updateBaseUrl\n * \n * Private helper function to update the base URL.\n */\nmxUrlConverter.prototype.updateBaseUrl = function()\n{\n\tthis.baseDomain = location.protocol + '//' + location.host;\n\tthis.baseUrl = this.baseDomain + location.pathname;\n\tvar tmp = this.baseUrl.lastIndexOf('/');\n\t\n\t// Strips filename etc\n\tif (tmp > 0)\n\t{\n\t\tthis.baseUrl = this.baseUrl.substring(0, tmp + 1);\n\t}\n};\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxUrlConverter.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxUrlConverter.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns <baseUrl>.\n */\nmxUrlConverter.prototype.getBaseUrl = function()\n{\n\treturn this.baseUrl;\n};\n\n/**\n * Function: setBaseUrl\n * \n * Sets <baseUrl>.\n */\nmxUrlConverter.prototype.setBaseUrl = function(value)\n{\n\tthis.baseUrl = value;\n};\n\n/**\n * Function: getBaseDomain\n * \n * Returns <baseDomain>.\n */\nmxUrlConverter.prototype.getBaseDomain = function()\n{\n\treturn this.baseDomain;\n};\n\n/**\n * Function: setBaseDomain\n * \n * Sets <baseDomain>.\n */\nmxUrlConverter.prototype.setBaseDomain = function(value)\n{\n\tthis.baseDomain = value;\n};\n\n/**\n * Function: isRelativeUrl\n * \n * Returns true if the given URL is relative.\n */\nmxUrlConverter.prototype.isRelativeUrl = function(url)\n{\n\treturn url != null && url.substring(0, 2) != '//' && url.substring(0, 7) != 'http://' &&\n\t\turl.substring(0, 8) != 'https://' && url.substring(0, 10) != 'data:image' &&\n\t\turl.substring(0, 7) != 'file://';\n};\n\n/**\n * Function: convert\n * \n * Converts the given URL to an absolute URL with protol and domain.\n * Relative URLs are first converted to absolute URLs.\n */\nmxUrlConverter.prototype.convert = function(url)\n{\n\tif (this.isEnabled() && this.isRelativeUrl(url))\n\t{\n\t\tif (this.getBaseUrl() == null)\n\t\t{\n\t\t\tthis.updateBaseUrl();\n\t\t}\n\t\t\n\t\tif (url.charAt(0) == '/')\n\t\t{\n\t\t\turl = this.getBaseDomain() + url;\n\t\t}\n\t\telse\n\t\t{\n\t\t\turl = this.getBaseUrl() + url;\n\t\t}\n\t}\n\t\n\treturn url;\n};\n\n__mxOutput.mxUrlConverter = typeof mxUrlConverter !== 'undefined' ? mxUrlConverter : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningManager\n *\n * Implements a handler for panning.\n */\nfunction mxPanningManager(graph)\n{\n\tthis.thread = null;\n\tthis.active = false;\n\tthis.tdx = 0;\n\tthis.tdy = 0;\n\tthis.t0x = 0;\n\tthis.t0y = 0;\n\tthis.dx = 0;\n\tthis.dy = 0;\n\tthis.scrollbars = false;\n\tthis.scrollLeft = 0;\n\tthis.scrollTop = 0;\n\t\n\tthis.mouseListener =\n\t{\n\t    mouseDown: function(sender, me) { },\n\t    mouseMove: function(sender, me) { },\n\t    mouseUp: mxUtils.bind(this, function(sender, me)\n\t    {\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t    })\n\t};\n\t\n\tgraph.addMouseListener(this.mouseListener);\n\t\n\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t});\n\t\n\t// Stops scrolling on every mouseup anywhere in the document\n\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t\n\tvar createThread = mxUtils.bind(this, function()\n\t{\n\t    \tthis.scrollbars = mxUtils.hasScrollbars(graph.container);\n\t    \tthis.scrollLeft = graph.container.scrollLeft;\n\t    \tthis.scrollTop = graph.container.scrollTop;\n\t\n\t    \treturn window.setInterval(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.tdx -= this.dx;\n\t\t\tthis.tdy -= this.dy;\n\n\t\t\tif (this.scrollbars)\n\t\t\t{\n\t\t\t\tvar left = -graph.container.scrollLeft - Math.ceil(this.dx);\n\t\t\t\tvar top = -graph.container.scrollTop - Math.ceil(this.dy);\n\t\t\t\tgraph.panGraph(left, top);\n\t\t\t\tgraph.panDx = this.scrollLeft - graph.container.scrollLeft;\n\t\t\t\tgraph.panDy = this.scrollTop - graph.container.scrollTop;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t\t// TODO: Implement graph.autoExtend\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panGraph(this.getDx(), this.getDy());\n\t\t\t}\n\t\t}), this.delay);\n\t});\n\t\n\tthis.isActive = function()\n\t{\n\t\treturn active;\n\t};\n\t\n\tthis.getDx = function()\n\t{\n\t\treturn Math.round(this.tdx);\n\t};\n\t\n\tthis.getDy = function()\n\t{\n\t\treturn Math.round(this.tdy);\n\t};\n\t\n\tthis.start = function()\n\t{\n\t\tthis.t0x = graph.view.translate.x;\n\t\tthis.t0y = graph.view.translate.y;\n\t\tthis.active = true;\n\t};\n\t\n\tthis.panTo = function(x, y, w, h)\n\t{\n\t\tif (!this.active)\n\t\t{\n\t\t\tthis.start();\n\t\t}\n\t\t\n    \tthis.scrollLeft = graph.container.scrollLeft;\n    \tthis.scrollTop = graph.container.scrollTop;\n\t\t\n\t\tw = (w != null) ? w : 0;\n\t\th = (h != null) ? h : 0;\n\t\t\n\t\tvar c = graph.container;\n\t\tthis.dx = x + w - c.scrollLeft - c.clientWidth;\n\t\t\n\t\tif (this.dx < 0 && Math.abs(this.dx) < this.border)\n\t\t{\n\t\t\tthis.dx = this.border + this.dx;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dx = Math.max(this.dx, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx = 0;\n\t\t}\n\t\t\n\t\tif (this.dx == 0)\n\t\t{\n\t\t\tthis.dx = x - c.scrollLeft;\n\t\t\t\n\t\t\tif (this.dx > 0 && this.dx < this.border)\n\t\t\t{\n\t\t\t\tthis.dx = this.dx - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dx = Math.min(0, this.dx);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dx = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.dy = y + h - c.scrollTop - c.clientHeight;\n\n\t\tif (this.dy < 0 && Math.abs(this.dy) < this.border)\n\t\t{\n\t\t\tthis.dy = this.border + this.dy;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dy = Math.max(this.dy, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dy = 0;\n\t\t}\n\t\t\n\t\tif (this.dy == 0)\n\t\t{\n\t\t\tthis.dy = y - c.scrollTop;\n\t\t\t\n\t\t\tif (this.dy > 0 && this.dy < this.border)\n\t\t\t{\n\t\t\t\tthis.dy = this.dy - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dy = Math.min(0, this.dy);\n\t\t\t} \n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dy = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.dx != 0 || this.dy != 0)\n\t\t{\n\t\t\tthis.dx *= this.damper;\n\t\t\tthis.dy *= this.damper;\n\t\t\t\n\t\t\tif (this.thread == null)\n\t\t\t{\n\t\t\t\tthis.thread = createThread();\n\t\t\t}\n\t\t}\n\t\telse if (this.thread != null)\n\t\t{\n\t\t\twindow.clearInterval(this.thread);\n\t\t\tthis.thread = null;\n\t\t}\n\t};\n\t\n\tthis.stop = function()\n\t{\n\t\tif (this.active)\n\t\t{\n\t\t\tthis.active = false;\n\t\t\n\t\t\tif (this.thread != null)\n\t    \t{\n\t\t\t\twindow.clearInterval(this.thread);\n\t\t\t\tthis.thread = null;\n\t    \t}\n\t\t\t\n\t\t\tthis.tdx = 0;\n\t\t\tthis.tdy = 0;\n\t\t\t\n\t\t\tif (!this.scrollbars)\n\t\t\t{\n\t\t\t\tvar px = graph.panDx;\n\t\t\t\tvar py = graph.panDy;\n\t\t    \t\n\t\t    \tif (px != 0 || py != 0)\n\t\t    \t{\n\t\t    \t\tgraph.panGraph(0, 0);\n\t\t\t    \tgraph.view.setTranslate(this.t0x + px / graph.view.scale, this.t0y + py / graph.view.scale);\n\t\t    \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panDx = 0;\n\t\t\t\tgraph.panDy = 0;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t}\n\t\t}\n\t};\n\t\n\tthis.destroy = function()\n\t{\n\t\tgraph.removeMouseListener(this.mouseListener);\n\t\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n\t};\n};\n\n/**\n * Variable: damper\n * \n * Damper value for the panning. Default is 1/6.\n */\nmxPanningManager.prototype.damper = 1/6;\n\n/**\n * Variable: delay\n * \n * Delay in milliseconds for the panning. Default is 10.\n */\nmxPanningManager.prototype.delay = 10;\n\n/**\n * Variable: handleMouseOut\n * \n * Specifies if mouse events outside of the component should be handled. Default is true. \n */\nmxPanningManager.prototype.handleMouseOut = true;\n\n/**\n * Variable: border\n * \n * Border to handle automatic panning inside the component. Default is 0 (disabled).\n */\nmxPanningManager.prototype.border = 0;\n\n__mxOutput.mxPanningManager = typeof mxPanningManager !== 'undefined' ? mxPanningManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenu\n * \n * Basic popup menu. To add a vertical scrollbar to a given submenu, the\n * following code can be used.\n * \n * (code)\n * var mxPopupMenuShowMenu = mxPopupMenu.prototype.showMenu;\n * mxPopupMenu.prototype.showMenu = function()\n * {\n *   mxPopupMenuShowMenu.apply(this, arguments);\n *   \n *   this.div.style.overflowY = 'auto';\n *   this.div.style.overflowX = 'hidden';\n *   this.div.style.maxHeight = '160px';\n * };\n * (end)\n * \n * Constructor: mxPopupMenu\n * \n * Constructs a popupmenu.\n * \n * Event: mxEvent.SHOW\n *\n * Fires after the menu has been shown in <popup>.\n */\nfunction mxPopupMenu(factoryMethod)\n{\n\tthis.factoryMethod = factoryMethod;\n\t\n\tif (factoryMethod != null)\n\t{\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPopupMenu.prototype = new mxEventSource();\nmxPopupMenu.prototype.constructor = mxPopupMenu;\n\n/**\n * Variable: submenuImage\n * \n * URL of the image to be used for the submenu icon.\n */\nmxPopupMenu.prototype.submenuImage = mxClient.imageBasePath + '/submenu.gif';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the popupmenu and its shadow. Default is 10006.\n */\nmxPopupMenu.prototype.zIndex = 10006;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used to create the popup menu. The function takes the\n * current panning handler, the <mxCell> under the mouse and the mouse\n * event that triggered the call as arguments.\n */\nmxPopupMenu.prototype.factoryMethod = null;\n\n/**\n * Variable: useLeftButtonForPopup\n * \n * Specifies if popupmenus should be activated by clicking the left mouse\n * button. Default is false.\n */\nmxPopupMenu.prototype.useLeftButtonForPopup = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxPopupMenu.prototype.enabled = true;\n\n/**\n * Variable: itemCount\n * \n * Contains the number of times <addItem> has been called for a new menu.\n */\nmxPopupMenu.prototype.itemCount = 0;\n\n/**\n * Variable: autoExpand\n * \n * Specifies if submenus should be expanded on mouseover. Default is false.\n */\nmxPopupMenu.prototype.autoExpand = false;\n\n/**\n * Variable: smartSeparators\n * \n * Specifies if separators should only be added if a menu item follows them.\n * Default is false.\n */\nmxPopupMenu.prototype.smartSeparators = false;\n\n/**\n * Variable: labels\n * \n * Specifies if any labels should be visible. Default is true.\n */\nmxPopupMenu.prototype.labels = true;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenu.prototype.init = function()\n{\n\t// Adds the inner table\n\tthis.table = document.createElement('table');\n\tthis.table.className = 'mxPopupMenu';\n\t\n\tthis.tbody = document.createElement('tbody');\n\tthis.table.appendChild(this.tbody);\n\n\t// Adds the outer div\n\tthis.div = document.createElement('div');\n\tthis.div.className = 'mxPopupMenu';\n\tthis.div.style.display = 'inline';\n\tthis.div.style.zIndex = this.zIndex;\n\tthis.div.appendChild(this.table);\n\n\t// Disables the context menu on the outer div\n\tmxEvent.disableContextMenu(this.div);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxPopupMenu.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxPopupMenu.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isPopupTrigger\n * \n * Returns true if the given event is a popupmenu trigger for the optional\n * given cell.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the mouse event.\n */\nmxPopupMenu.prototype.isPopupTrigger = function(me)\n{\n\treturn me.isPopupTrigger() || (this.useLeftButtonForPopup && mxEvent.isLeftMouseButton(me.getEvent()));\n};\n\n/**\n * Function: addItem\n * \n * Adds the given item to the given parent item. If no parent item is specified\n * then the item is added to the top-level menu. The return value may be used\n * as the parent argument, ie. as a submenu item. The return value is the table\n * row that represents the item.\n * \n * Paramters:\n * \n * title - String that represents the title of the menu item.\n * image - Optional URL for the image icon.\n * funct - Function associated that takes a mouseup or touchend event.\n * parent - Optional item returned by <addItem>.\n * iconCls - Optional string that represents the CSS class for the image icon.\n * IconsCls is ignored if image is given.\n * enabled - Optional boolean indicating if the item is enabled. Default is true.\n * active - Optional boolean indicating if the menu should implement any event handling.\n * Default is true.\n * noHover - Optional boolean to disable hover state.\n */\nmxPopupMenu.prototype.addItem = function(title, image, funct, parent, iconCls, enabled, active, noHover)\n{\n\tparent = parent || this;\n\tthis.itemCount++;\n\t\n\t// Smart separators only added if element contains items\n\tif (parent.willAddSeparator)\n\t{\n\t\tif (parent.containsItems)\n\t\t{\n\t\t\tthis.addSeparator(parent, true);\n\t\t}\n\n\t\tparent.willAddSeparator = false;\n\t}\n\n\tparent.containsItems = true;\n\tvar tr = document.createElement('tr');\n\ttr.className = 'mxPopupMenuItem';\n\tvar col1 = document.createElement('td');\n\tcol1.className = 'mxPopupMenuIcon';\n\n\t// Adds the given image into the first column\n\tif (image != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.src = image;\n\t\tcol1.appendChild(img);\n\t}\n\telse if (iconCls != null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.className = iconCls;\n\t\tcol1.appendChild(div);\n\t}\n\t\n\ttr.appendChild(col1);\n\t\n\tif (this.labels)\n\t{\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\t\n\t\tmxUtils.write(col2, title);\n\t\tcol2.align = 'left';\n\t\ttr.appendChild(col2);\n\t\n\t\tvar col3 = document.createElement('td');\n\t\tcol3.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\tcol3.style.paddingRight = '6px';\n\t\tcol3.style.textAlign = 'right';\n\t\t\n\t\ttr.appendChild(col3);\n\t\t\n\t\tif (parent.div == null)\n\t\t{\n\t\t\tthis.createSubmenu(parent);\n\t\t}\n\t}\n\t\n\tparent.tbody.appendChild(tr);\n\n\tif (active != false && enabled != false)\n\t{\n\t\tvar currentSelection = null;\n\t\t\n\t\tmxEvent.addGestureListeners(tr,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tthis.eventReceiver = tr;\n\t\t\t\t\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\tif (document.selection != null && (mxClient.IS_QUIRKS || document.documentMode == 8))\n\t\t\t\t{\n\t\t\t\t\tcurrentSelection = document.selection.createRange();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoExpand && tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// Sets hover style because TR in IE doesn't have hover\n\t\t\t\tif (!noHover)\n\t\t\t\t{\n\t\t\t\t\ttr.className = 'mxPopupMenuItemHover';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// EventReceiver avoids clicks on a submenu item\n\t\t\t\t// which has just been shown in the mousedown\n\t\t\t\tif (this.eventReceiver == tr)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != tr)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideMenu();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\t\tif (currentSelection != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Workaround for \"unspecified error\" in IE8 standards\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentSelection.select();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentSelection = null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (funct != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.eventReceiver = null;\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t})\n\t\t);\n\t\n\t\t// Resets hover style because TR in IE doesn't have hover\n\t\tif (!noHover)\n\t\t{\n\t\t\tmxEvent.addListener(tr, 'mouseout',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\ttr.className = 'mxPopupMenuItem';\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n\t\n\treturn tr;\n};\n\n/**\n * Adds a checkmark to the given menuitem.\n */\nmxPopupMenu.prototype.addCheckmark = function(item, img)\n{\n\tvar td = item.firstChild.nextSibling;\n\ttd.style.backgroundImage = 'url(\\'' + img + '\\')';\n\ttd.style.backgroundRepeat = 'no-repeat';\n\ttd.style.backgroundPosition = '2px 50%';\n};\n\n/**\n * Function: createSubmenu\n * \n * Creates the nodes required to add submenu items inside the given parent\n * item. This is called in <addItem> if a parent item is used for the first\n * time. This adds various DOM nodes and a <submenuImage> to the parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.createSubmenu = function(parent)\n{\n\tparent.table = document.createElement('table');\n\tparent.table.className = 'mxPopupMenu';\n\n\tparent.tbody = document.createElement('tbody');\n\tparent.table.appendChild(parent.tbody);\n\n\tparent.div = document.createElement('div');\n\tparent.div.className = 'mxPopupMenu';\n\n\tparent.div.style.position = 'absolute';\n\tparent.div.style.display = 'inline';\n\tparent.div.style.zIndex = this.zIndex;\n\t\n\tparent.div.appendChild(parent.table);\n\t\n\tvar img = document.createElement('img');\n\timg.setAttribute('src', this.submenuImage);\n\t\n\t// Last column of the submenu item in the parent menu\n\ttd = parent.firstChild.nextSibling.nextSibling;\n\ttd.appendChild(img);\n};\n\n/**\n * Function: showSubmenu\n * \n * Shows the submenu inside the given parent row.\n */\nmxPopupMenu.prototype.showSubmenu = function(parent, row)\n{\n\tif (row.div != null)\n\t{\n\t\trow.div.style.left = (parent.div.offsetLeft +\n\t\t\trow.offsetLeft+row.offsetWidth - 1) + 'px';\n\t\trow.div.style.top = (parent.div.offsetTop+row.offsetTop) + 'px';\n\t\tdocument.body.appendChild(row.div);\n\t\t\n\t\t// Moves the submenu to the left side if there is no space\n\t\tvar left = parseInt(row.div.offsetLeft);\n\t\tvar width = parseInt(row.div.offsetWidth);\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\tvar right = offset.x + (b.clientWidth || d.clientWidth);\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\trow.div.style.left = Math.max(0, (parent.div.offsetLeft - width + ((mxClient.IS_IE) ? 6 : -6))) + 'px';\n\t\t}\n\t\t\n\t\tmxUtils.fit(row.div);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds a horizontal separator in the given parent item or the top-level menu\n * if no parent is specified.\n * \n * Parameters:\n * \n * parent - Optional item returned by <addItem>.\n * force - Optional boolean to ignore <smartSeparators>. Default is false.\n */\nmxPopupMenu.prototype.addSeparator = function(parent, force)\n{\n\tparent = parent || this;\n\t\n\tif (this.smartSeparators && !force)\n\t{\n\t\tparent.willAddSeparator = true;\n\t}\n\telse if (parent.tbody != null)\n\t{\n\t\tparent.willAddSeparator = false;\n\t\tvar tr = document.createElement('tr');\n\t\t\n\t\tvar col1 = document.createElement('td');\n\t\tcol1.className = 'mxPopupMenuIcon';\n\t\tcol1.style.padding = '0 0 0 0px';\n\t\t\n\t\ttr.appendChild(col1);\n\t\t\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.style.padding = '0 0 0 0px';\n\t\tcol2.setAttribute('colSpan', '2');\n\t\n\t\tvar hr = document.createElement('hr');\n\t\thr.setAttribute('size', '1');\n\t\tcol2.appendChild(hr);\n\t\t\n\t\ttr.appendChild(col2);\n\t\t\n\t\tparent.tbody.appendChild(tr);\n\t}\n};\n\n/**\n * Function: popup\n * \n * Shows the popup menu for the given event and cell.\n * \n * Example:\n * \n * (code)\n * graph.panningHandler.popup = function(x, y, cell, evt)\n * {\n *   mxUtils.alert('Hello, World!');\n * }\n * (end)\n */\nmxPopupMenu.prototype.popup = function(x, y, cell, evt)\n{\n\tif (this.div != null && this.tbody != null && this.factoryMethod != null)\n\t{\n\t\tthis.div.style.left = x + 'px';\n\t\tthis.div.style.top = y + 'px';\n\t\t\n\t\t// Removes all child nodes from the existing menu\n\t\twhile (this.tbody.firstChild != null)\n\t\t{\n\t\t\tmxEvent.release(this.tbody.firstChild);\n\t\t\tthis.tbody.removeChild(this.tbody.firstChild);\n\t\t}\n\t\t\n\t\tthis.itemCount = 0;\n\t\tthis.factoryMethod(this, cell, evt);\n\t\t\n\t\tif (this.itemCount > 0)\n\t\t{\n\t\t\tthis.showMenu();\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n\t\t}\n\t}\n};\n\n/**\n * Function: isMenuShowing\n * \n * Returns true if the menu is showing.\n */\nmxPopupMenu.prototype.isMenuShowing = function()\n{\n\treturn this.div != null && this.div.parentNode == document.body;\n};\n\n/**\n * Function: showMenu\n * \n * Shows the menu.\n */\nmxPopupMenu.prototype.showMenu = function()\n{\n\t// Disables filter-based shadow in IE9 standards mode\n\tif (document.documentMode >= 9)\n\t{\n\t\tthis.div.style.filter = 'none';\n\t}\n\t\n\t// Fits the div inside the viewport\n\tdocument.body.appendChild(this.div);\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: hideMenu\n * \n * Removes the menu and all submenus.\n */\nmxPopupMenu.prototype.hideMenu = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.hideSubmenu(this);\n\t\tthis.containsItems = false;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n\t}\n};\n\n/**\n * Function: hideSubmenu\n * \n * Removes all submenus inside the given parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.hideSubmenu = function(parent)\n{\n\tif (parent.activeRow != null)\n\t{\n\t\tthis.hideSubmenu(parent.activeRow);\n\t\t\n\t\tif (parent.activeRow.div.parentNode != null)\n\t\t{\n\t\t\tparent.activeRow.div.parentNode.removeChild(parent.activeRow.div);\n\t\t}\n\t\t\n\t\tparent.activeRow = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenu.prototype.destroy = function()\n{\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxPopupMenu = typeof mxPopupMenu !== 'undefined' ? mxPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAutoSaveManager\n * \n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n * \n * Example:\n * \n * (code)\n * var mgr = new mxAutoSaveManager(editor.graph);\n * mgr.save = function()\n * {\n *   mxLog.show();\n *   mxLog.debug('save');\n * };\n * (end)\n * \n * Constructor: mxAutoSaveManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxAutoSaveManager(graph)\n{\n\t// Notifies the manager of a change\n\tthis.changeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t\t}\n\t});\n\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAutoSaveManager.prototype = new mxEventSource();\nmxAutoSaveManager.prototype.constructor = mxAutoSaveManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxAutoSaveManager.prototype.graph = null;\n\n/**\n * Variable: autoSaveDelay\n * \n * Minimum amount of seconds between two consecutive autosaves. Eg. a\n * value of 1 (s) means the graph is not stored more than once per second.\n * Default is 10.\n */\nmxAutoSaveManager.prototype.autoSaveDelay = 10;\n\n/**\n * Variable: autoSaveThrottle\n * \n * Minimum amount of seconds between two consecutive autosaves triggered by\n * more than <autoSaveThreshhold> changes within a timespan of less than\n * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n * stored more than once per second even if there are more than\n * <autoSaveThreshold> changes within that timespan. Default is 2.\n */\nmxAutoSaveManager.prototype.autoSaveThrottle = 2;\n\n/**\n * Variable: autoSaveThreshold\n * \n * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n * means after 2 change of the graph model the autosave will trigger if the\n * condition below is true. Default is 5.\n */\nmxAutoSaveManager.prototype.autoSaveThreshold = 5;\n\n/**\n * Variable: ignoredChanges\n * \n * Counter for ignored changes in autosave.\n */\nmxAutoSaveManager.prototype.ignoredChanges = 0;\n\n/**\n * Variable: lastSnapshot\n * \n * Used for autosaving. See <autosave>.\n */\nmxAutoSaveManager.prototype.lastSnapshot = 0;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxAutoSaveManager.prototype.enabled = true;\n\n/**\n * Variable: changeHandler\n * \n * Holds the function that handles graph model changes.\n */\nmxAutoSaveManager.prototype.changeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxAutoSaveManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxAutoSaveManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxAutoSaveManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\t}\n};\n\n/**\n * Function: save\n * \n * Empty hook that is called if the graph should be saved.\n */\nmxAutoSaveManager.prototype.save = function()\n{\n\t// empty\n};\n\n/**\n * Function: graphModelChanged\n * \n * Invoked when the graph model has changed.\n */\nmxAutoSaveManager.prototype.graphModelChanged = function(changes)\n{\n\tvar now = new Date().getTime();\n\tvar dt = (now - this.lastSnapshot) / 1000;\n\t\n\tif (dt > this.autoSaveDelay ||\n\t\t(this.ignoredChanges >= this.autoSaveThreshold &&\n\t\t dt > this.autoSaveThrottle))\n\t{\n\t\tthis.save();\n\t\tthis.reset();\n\t}\n\telse\n\t{\n\t\t// Increments the number of ignored changes\n\t\tthis.ignoredChanges++;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets all counters.\n */\nmxAutoSaveManager.prototype.reset = function()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.ignoredChanges = 0;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxAutoSaveManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxAutoSaveManager = typeof mxAutoSaveManager !== 'undefined' ? mxAutoSaveManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxAnimation\n * \n * Implements a basic animation in JavaScript.\n * \n * Constructor: mxAnimation\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxAnimation(delay)\n{\n\tthis.delay = (delay != null) ? delay : 20;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAnimation.prototype = new mxEventSource();\nmxAnimation.prototype.constructor = mxAnimation;\n\n/**\n * Variable: delay\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxAnimation.prototype.delay = null;\n\n/**\n * Variable: thread\n * \n * Reference to the thread while the animation is running.\n */\nmxAnimation.prototype.thread = null;\n\n/**\n * Function: isRunning\n * \n * Returns true if the animation is running.\n */\nmxAnimation.prototype.isRunning = function()\n{\n\treturn this.thread != null;\n};\n\n/**\n * Function: startAnimation\n *\n * Starts the animation by repeatedly invoking updateAnimation.\n */\nmxAnimation.prototype.startAnimation = function()\n{\n\tif (this.thread == null)\n\t{\n\t\tthis.thread = window.setInterval(mxUtils.bind(this, this.updateAnimation), this.delay);\n\t}\n};\n\n/**\n * Function: updateAnimation\n *\n * Hook for subclassers to implement the animation. Invoke stopAnimation\n * when finished, startAnimation to resume. This is called whenever the\n * timer fires and fires an mxEvent.EXECUTE event with no properties.\n */\nmxAnimation.prototype.updateAnimation = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE));\n};\n\n/**\n * Function: stopAnimation\n *\n * Stops the animation by deleting the timer and fires an <mxEvent.DONE>.\n */\nmxAnimation.prototype.stopAnimation = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearInterval(this.thread);\n\t\tthis.thread = null;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.DONE));\n\t}\n};\n\n__mxOutput.mxAnimation = typeof mxAnimation !== 'undefined' ? mxAnimation : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxMorphing\n * \n * Implements animation for morphing cells. Here is an example of\n * using this class for animating the result of a layout algorithm:\n * \n * (code)\n * graph.getModel().beginUpdate();\n * try\n * {\n *   var circleLayout = new mxCircleLayout(graph);\n *   circleLayout.execute(graph.getDefaultParent());\n * }\n * finally\n * {\n *   var morph = new mxMorphing(graph);\n *   morph.addListener(mxEvent.DONE, function()\n *   {\n *     graph.getModel().endUpdate();\n *   });\n *   \n *   morph.startAnimation();\n * }\n * (end)\n * \n * Constructor: mxMorphing\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * steps - Optional number of steps in the morphing animation. Default is 6.\n * ease - Optional easing constant for the animation. Default is 1.5.\n * delay - Optional delay between the animation steps. Passed to <mxAnimation>.\n */\nfunction mxMorphing(graph, steps, ease, delay)\n{\n\tmxAnimation.call(this, delay);\n\tthis.graph = graph;\n\tthis.steps = (steps != null) ? steps : 6;\n\tthis.ease = (ease != null) ? ease : 1.5;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxMorphing.prototype = new mxAnimation();\nmxMorphing.prototype.constructor = mxMorphing;\n\n/**\n * Variable: graph\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxMorphing.prototype.graph = null;\n\n/**\n * Variable: steps\n * \n * Specifies the maximum number of steps for the morphing.\n */\nmxMorphing.prototype.steps = null;\n\n/**\n * Variable: step\n * \n * Contains the current step.\n */\nmxMorphing.prototype.step = 0;\n\n/**\n * Variable: ease\n * \n * Ease-off for movement towards the given vector. Larger values are\n * slower and smoother. Default is 4.\n */\nmxMorphing.prototype.ease = null;\n\n/**\n * Variable: cells\n * \n * Optional array of cells to be animated. If this is not specified\n * then all cells are checked and animated if they have been moved\n * in the current transaction.\n */\nmxMorphing.prototype.cells = null;\n\n/**\n * Function: updateAnimation\n *\n * Animation step.\n */\nmxMorphing.prototype.updateAnimation = function()\n{\n\tmxAnimation.prototype.updateAnimation.apply(this, arguments);\n\tvar move = new mxCellStatePreview(this.graph);\n\n\tif (this.cells != null)\n\t{\n\t\t// Animates the given cells individually without recursion\n\t\tfor (var i = 0; i < this.cells.length; i++)\n\t\t{\n\t\t\tthis.animateCell(this.cells[i], move, false);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Animates all changed cells by using recursion to find\n\t\t// the changed cells but not for the animation itself\n\t\tthis.animateCell(this.graph.getModel().getRoot(), move, true);\n\t}\n\t\n\tthis.show(move);\n\t\n\tif (move.isEmpty() || this.step++ >= this.steps)\n\t{\n\t\tthis.stopAnimation();\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the changes in the given <mxCellStatePreview>.\n */\nmxMorphing.prototype.show = function(move)\n{\n\tmove.show();\n};\n\n/**\n * Function: animateCell\n *\n * Animates the given cell state using <mxCellStatePreview.moveState>.\n */\nmxMorphing.prototype.animateCell = function(cell, move, recurse)\n{\n\tvar state = this.graph.getView().getState(cell);\n\tvar delta = null;\n\n\tif (state != null)\n\t{\n\t\t// Moves the animated state from where it will be after the model\n\t\t// change by subtracting the given delta vector from that location\n\t\tdelta = this.getDelta(state);\n\n\t\tif (this.graph.getModel().isVertex(cell) && (delta.x != 0 || delta.y != 0))\n\t\t{\n\t\t\tvar translate = this.graph.view.getTranslate();\n\t\t\tvar scale = this.graph.view.getScale();\n\t\t\t\n\t\t\tdelta.x += translate.x * scale;\n\t\t\tdelta.y += translate.y * scale;\n\t\t\t\n\t\t\tmove.moveState(state, -delta.x / this.ease, -delta.y / this.ease);\n\t\t}\n\t}\n\t\n\tif (recurse && !this.stopRecursion(state, delta))\n\t{\n\t\tvar childCount = this.graph.getModel().getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.animateCell(this.graph.getModel().getChildAt(cell, i), move, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: stopRecursion\n *\n * Returns true if the animation should not recursively find more\n * deltas for children if the given parent state has been animated.\n */\nmxMorphing.prototype.stopRecursion = function(state, delta)\n{\n\treturn delta != null && (delta.x != 0 || delta.y != 0);\n};\n\n/**\n * Function: getDelta\n *\n * Returns the vector between the current rendered state and the future\n * location of the state after the display will be updated.\n */\nmxMorphing.prototype.getDelta = function(state)\n{\n\tvar origin = this.getOriginForCell(state.cell);\n\tvar translate = this.graph.getView().getTranslate();\n\tvar scale = this.graph.getView().getScale();\n\tvar x = state.x / scale - translate.x;\n\tvar y = state.y / scale - translate.y;\n\n\treturn new mxPoint((origin.x - x) * scale, (origin.y - y) * scale);\n};\n\n/**\n * Function: getOriginForCell\n *\n * Returns the top, left corner of the given cell. TODO: Improve performance\n * by using caching inside this method as the result per cell never changes\n * during the lifecycle of this object.\n */\nmxMorphing.prototype.getOriginForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\tresult = this.getOriginForCell(parent);\n\t\t\n\t\t// TODO: Handle offsets\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (geo.relative)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null)\n\t\t\t\t{\n\t\t\t\t\tresult.x += geo.x * pgeo.width;\n\t\t\t\t\tresult.y += geo.y * pgeo.height;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (result == null)\n\t{\n\t\tvar t = this.graph.view.getTranslate();\n\t\tresult = new mxPoint(-t.x, -t.y);\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxMorphing = typeof mxMorphing !== 'undefined' ? mxMorphing : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageBundle\n *\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n * \n * To add a new image bundle to an existing graph, the following code is used:\n * \n * (code)\n * var bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * (end);\n * \n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n * \n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n * \n * The keys for images are resolved in <mxGraph.postProcessCellStyle> and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n * \n * A typical value for the fallback is a MTHML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n * \n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nfunction mxImageBundle(alt)\n{\n\tthis.images = [];\n\tthis.alt = (alt != null) ? alt : false;\n};\n\n/**\n * Variable: images\n * \n * Maps from keys to images.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Variable: alt\n * \n * Specifies if the fallback representation should be returned.\n */\nmxImageBundle.prototype.alt = null;\n\n/**\n * Function: putImage\n * \n * Adds the specified entry to the map. The entry is an object with a value and\n * fallback property as specified in the arguments.\n */\nmxImageBundle.prototype.putImage = function(key, value, fallback)\n{\n\tthis.images[key] = {value: value, fallback: fallback};\n};\n\n/**\n * Function: getImage\n * \n * Returns the value for the given key. This returns the value\n * or fallback, depending on <alt>. The fallback is returned if\n * <alt> is true, the value is returned otherwise.\n */\nmxImageBundle.prototype.getImage = function(key)\n{\n\tvar result = null;\n\t\n\tif (key != null)\n\t{\n\t\tvar img = this.images[key];\n\t\t\n\t\tif (img != null)\n\t\t{\n\t\t\tresult = (this.alt) ? img.fallback : img.value;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxImageBundle = typeof mxImageBundle !== 'undefined' ? mxImageBundle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageExport\n * \n * Creates a new image export instance to be used with an export canvas. Here\n * is an example that uses this class to create an image via a backend using\n * <mxXmlExportCanvas>.\n * \n * (code)\n * var xmlDoc = mxUtils.createXmlDocument();\n * var root = xmlDoc.createElement('output');\n * xmlDoc.appendChild(root);\n * \n * var xmlCanvas = new mxXmlCanvas2D(root);\n * var imgExport = new mxImageExport();\n * imgExport.drawState(graph.getView().getState(graph.model.root), xmlCanvas);\n * \n * var bounds = graph.getGraphBounds();\n * var w = Math.ceil(bounds.x + bounds.width);\n * var h = Math.ceil(bounds.y + bounds.height);\n * \n * var xml = mxUtils.getXml(root);\n * new mxXmlRequest('export', 'format=png&w=' + w +\n * \t\t'&h=' + h + '&bg=#F9F7ED&xml=' + encodeURIComponent(xml))\n * \t\t.simulate(document, '_blank');\n * (end)\n * \n * Constructor: mxImageExport\n * \n * Constructs a new image export.\n */\nfunction mxImageExport() { };\n\n/**\n * Variable: includeOverlays\n * \n * Specifies if overlays should be included in the export. Default is false.\n */\nmxImageExport.prototype.includeOverlays = false;\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.drawState = function(state, canvas)\n{\n\tif (state != null)\n\t{\n\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.drawCellState.apply(this, arguments);\n\t\t}));\n\t\t\t\t\n\t\t// Paints the overlays\n\t\tif (this.includeOverlays)\n\t\t{\n\t\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.drawOverlays.apply(this, arguments);\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Function: visitStatesRecursive\n * \n * Visits the given state and all its descendants to the given canvas recursively.\n */\nmxImageExport.prototype.visitStatesRecursive = function(state, canvas, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvisitor(state, canvas);\n\t\t\n\t\tvar graph = state.view.graph;\n\t\tvar childCount = graph.model.getChildCount(state.cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar childState = graph.view.getState(graph.model.getChildAt(state.cell, i));\n\t\t\tthis.visitStatesRecursive(childState, canvas, visitor);\n\t\t}\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state and canvas. This returns null.\n */\nmxImageExport.prototype.getLinkForCellState = function(state, canvas)\n{\n\treturn null;\n};\n\n/**\n * Function: drawCellState\n * \n * Draws the given state to the given canvas.\n */\nmxImageExport.prototype.drawCellState = function(state, canvas)\n{\n\t// Experimental feature\n\tvar link = this.getLinkForCellState(state, canvas);\n\t\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(link);\n\t}\n\t\n\t// Paints the shape and text\n\tthis.drawShape(state, canvas);\n\tthis.drawText(state, canvas);\n\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(null);\n\t}\n};\n\n/**\n * Function: drawShape\n * \n * Draws the shape of the given state.\n */\nmxImageExport.prototype.drawShape = function(state, canvas)\n{\n\tif (state.shape instanceof mxShape && state.shape.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\t\n\t\tstate.shape.beforePaint(canvas);\n\t\tstate.shape.paint(canvas);\n\t\tstate.shape.afterPaint(canvas);\n\t\t\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawText\n * \n * Draws the text of the given state.\n */\nmxImageExport.prototype.drawText = function(state, canvas)\n{\n\tif (state.text != null && state.text.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\t\n\t\tstate.text.beforePaint(canvas);\n\t\tstate.text.paint(canvas);\n\t\tstate.text.afterPaint(canvas);\n\t\t\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawOverlays\n * \n * Draws the overlays for the given state. This is called if <includeOverlays>\n * is true.\n */\nmxImageExport.prototype.drawOverlays = function(state, canvas)\n{\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tif (shape instanceof mxShape)\n\t\t\t{\n\t\t\t\tshape.paint(canvas);\n\t\t\t}\n\t\t});\n\t}\n};\n\n\n__mxOutput.mxImageExport = typeof mxImageExport !== 'undefined' ? mxImageExport : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAbstractCanvas2D\n *\n * Base class for all canvases. A description of the public API is available in <mxXmlCanvas2D>.\n * All color values of <mxConstants.NONE> will be converted to null in the state.\n * \n * Constructor: mxAbstractCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxAbstractCanvas2D()\n{\n\t/**\n\t * Variable: converter\n\t * \n\t * Holds the <mxUrlConverter> to convert image URLs.\n\t */\n\tthis.converter = this.createUrlConverter();\n\t\n\tthis.reset();\n};\n\n/**\n * Variable: state\n * \n * Holds the current state.\n */\nmxAbstractCanvas2D.prototype.state = null;\n\n/**\n * Variable: states\n * \n * Stack of states.\n */\nmxAbstractCanvas2D.prototype.states = null;\n\n/**\n * Variable: path\n * \n * Holds the current path as an array.\n */\nmxAbstractCanvas2D.prototype.path = null;\n\n/**\n * Variable: rotateHtml\n * \n * Switch for rotation of HTML. Default is false.\n */\nmxAbstractCanvas2D.prototype.rotateHtml = true;\n\n/**\n * Variable: lastX\n * \n * Holds the last x coordinate.\n */\nmxAbstractCanvas2D.prototype.lastX = 0;\n\n/**\n * Variable: lastY\n * \n * Holds the last y coordinate.\n */\nmxAbstractCanvas2D.prototype.lastY = 0;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'M'.\n */\nmxAbstractCanvas2D.prototype.moveOp = 'M';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'L'.\n */\nmxAbstractCanvas2D.prototype.lineOp = 'L';\n\n/**\n * Variable: quadOp\n * \n * Contains the string used for quadratic paths. Default is 'Q'.\n */\nmxAbstractCanvas2D.prototype.quadOp = 'Q';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'C'.\n */\nmxAbstractCanvas2D.prototype.curveOp = 'C';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'Z'.\n */\nmxAbstractCanvas2D.prototype.closeOp = 'Z';\n\n/**\n * Variable: pointerEvents\n * \n * Boolean value that specifies if events should be handled. Default is false.\n */\nmxAbstractCanvas2D.prototype.pointerEvents = false;\n\n/**\n * Function: createUrlConverter\n * \n * Create a new <mxUrlConverter> and returns it.\n */\nmxAbstractCanvas2D.prototype.createUrlConverter = function()\n{\n\treturn new mxUrlConverter();\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this canvas.\n */\nmxAbstractCanvas2D.prototype.reset = function()\n{\n\tthis.state = this.createState();\n\tthis.states = [];\n};\n\n/**\n * Function: createState\n * \n * Creates the state of the this canvas.\n */\nmxAbstractCanvas2D.prototype.createState = function()\n{\n\treturn {\n\t\tdx: 0,\n\t\tdy: 0,\n\t\tscale: 1,\n\t\talpha: 1,\n\t\tfillAlpha: 1,\n\t\tstrokeAlpha: 1,\n\t\tfillColor: null,\n\t\tgradientFillAlpha: 1,\n\t\tgradientColor: null,\n\t\tgradientAlpha: 1,\n\t\tgradientDirection: null,\n\t\tstrokeColor: null,\n\t\tstrokeWidth: 1,\n\t\tdashed: false,\n\t\tdashPattern: '3 3',\n\t\tfixDash: false,\n\t\tlineCap: 'flat',\n\t\tlineJoin: 'miter',\n\t\tmiterLimit: 10,\n\t\tfontColor: '#000000',\n\t\tfontBackgroundColor: null,\n\t\tfontBorderColor: null,\n\t\tfontSize: mxConstants.DEFAULT_FONTSIZE,\n\t\tfontFamily: mxConstants.DEFAULT_FONTFAMILY,\n\t\tfontStyle: 0,\n\t\tshadow: false,\n\t\tshadowColor: mxConstants.SHADOWCOLOR,\n\t\tshadowAlpha: mxConstants.SHADOW_OPACITY,\n\t\tshadowDx: mxConstants.SHADOW_OFFSET_X,\n\t\tshadowDy: mxConstants.SHADOW_OFFSET_Y,\n\t\trotation: 0,\n\t\trotationCx: 0,\n\t\trotationCy: 0\n\t};\n};\n\n/**\n * Function: format\n * \n * Rounds all numbers to integers.\n */\nmxAbstractCanvas2D.prototype.format = function(value)\n{\n\treturn Math.round(parseFloat(value));\n};\n\n/**\n * Function: addOp\n * \n * Adds the given operation to the path.\n */\nmxAbstractCanvas2D.prototype.addOp = function()\n{\n\tif (this.path != null)\n\t{\n\t\tthis.path.push(arguments[0]);\n\t\t\n\t\tif (arguments.length > 2)\n\t\t{\n\t\t\tvar s = this.state;\n\n\t\t\tfor (var i = 2; i < arguments.length; i += 2)\n\t\t\t{\n\t\t\t\tthis.lastX = arguments[i - 1];\n\t\t\t\tthis.lastY = arguments[i];\n\t\t\t\t\n\t\t\t\tthis.path.push(this.format((this.lastX + s.dx) * s.scale));\n\t\t\t\tthis.path.push(this.format((this.lastY + s.dy) * s.scale));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the given point and returns the result as an <mxPoint>.\n */\nmxAbstractCanvas2D.prototype.rotatePoint = function(x, y, theta, cx, cy)\n{\n\tvar rad = theta * (Math.PI / 180);\n\t\n\treturn mxUtils.getRotatedPoint(new mxPoint(x, y), Math.cos(rad),\n\t\tMath.sin(rad), new mxPoint(cx, cy));\n};\n\n/**\n * Function: save\n * \n * Saves the current state.\n */\nmxAbstractCanvas2D.prototype.save = function()\n{\n\tthis.states.push(this.state);\n\tthis.state = mxUtils.clone(this.state);\n};\n\n/**\n * Function: restore\n * \n * Restores the current state.\n */\nmxAbstractCanvas2D.prototype.restore = function()\n{\n\tif (this.states.length > 0)\n\t{\n\t\tthis.state = this.states.pop();\n\t}\n};\n\n/**\n * Function: setLink\n * \n * Sets the current link. Hook for subclassers.\n */\nmxAbstractCanvas2D.prototype.setLink = function(link)\n{\n\t// nop\n};\n\n/**\n * Function: scale\n * \n * Scales the current state.\n */\nmxAbstractCanvas2D.prototype.scale = function(value)\n{\n\tthis.state.scale *= value;\n\tthis.state.strokeWidth *= value;\n};\n\n/**\n * Function: translate\n * \n * Translates the current state.\n */\nmxAbstractCanvas2D.prototype.translate = function(dx, dy)\n{\n\tthis.state.dx += dx;\n\tthis.state.dy += dy;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the current state.\n */\nmxAbstractCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\t// nop\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n */\nmxAbstractCanvas2D.prototype.setAlpha = function(value)\n{\n\tthis.state.alpha = value;\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current solid fill alpha.\n */\nmxAbstractCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tthis.state.fillAlpha = value;\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n */\nmxAbstractCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tthis.state.strokeAlpha = value;\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n */\nmxAbstractCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fillColor = value;\n\tthis.state.gradientColor = null;\n};\n\n/**\n * Function: setGradient\n * \n * Sets the current gradient.\n */\nmxAbstractCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tvar s = this.state;\n\ts.fillColor = color1;\n\ts.gradientFillAlpha = (alpha1 != null) ? alpha1 : 1;\n\ts.gradientColor = color2;\n\ts.gradientAlpha = (alpha2 != null) ? alpha2 : 1;\n\ts.gradientDirection = direction;\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n */\nmxAbstractCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.strokeColor = value;\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n */\nmxAbstractCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tthis.state.strokeWidth = value;\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n */\nmxAbstractCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tthis.state.dashed = value;\n\tthis.state.fixDash = fixDash;\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern.\n */\nmxAbstractCanvas2D.prototype.setDashPattern = function(value)\n{\n\tthis.state.dashPattern = value;\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the current line cap.\n */\nmxAbstractCanvas2D.prototype.setLineCap = function(value)\n{\n\tthis.state.lineCap = value;\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the current line join.\n */\nmxAbstractCanvas2D.prototype.setLineJoin = function(value)\n{\n\tthis.state.lineJoin = value;\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the current miter limit.\n */\nmxAbstractCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tthis.state.miterLimit = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontColor = value;\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n */\nmxAbstractCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBackgroundColor = value;\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n */\nmxAbstractCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBorderColor = value;\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size.\n */\nmxAbstractCanvas2D.prototype.setFontSize = function(value)\n{\n\tthis.state.fontSize = parseFloat(value);\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family.\n */\nmxAbstractCanvas2D.prototype.setFontFamily = function(value)\n{\n\tthis.state.fontFamily = value;\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n */\nmxAbstractCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (value == null)\n\t{\n\t\tvalue = 0;\n\t}\n\t\n\tthis.state.fontStyle = value;\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadow = function(enabled)\n{\n\tthis.state.shadow = enabled;\n};\n\n/**\n * Function: setShadowColor\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.shadowColor = value;\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tthis.state.shadowAlpha = value;\n};\n\n/**\n * Function: setShadowOffset\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tthis.state.shadowDx = dx;\n\tthis.state.shadowDy = dy;\n};\n\n/**\n * Function: begin\n * \n * Starts a new path.\n */\nmxAbstractCanvas2D.prototype.begin = function()\n{\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n\tthis.path = [];\n};\n\n/**\n * Function: moveTo\n * \n *  Moves the current path the given coordinates.\n */\nmxAbstractCanvas2D.prototype.moveTo = function(x, y)\n{\n\tthis.addOp(this.moveOp, x, y);\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates. Uses moveTo with the op argument.\n */\nmxAbstractCanvas2D.prototype.lineTo = function(x, y)\n{\n\tthis.addOp(this.lineOp, x, y);\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n */\nmxAbstractCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tthis.addOp(this.quadOp, x1, y1, x2, y2);\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n */\nmxAbstractCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);\n};\n\n/**\n * Function: arcTo\n * \n * Adds the given arc to the current path. This is a synthetic operation that\n * is broken down into curves.\n */\nmxAbstractCanvas2D.prototype.arcTo = function(rx, ry, angle, largeArcFlag, sweepFlag, x, y)\n{\n\tvar curves = mxUtils.arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);\n\t\n\tif (curves != null)\n\t{\n\t\tfor (var i = 0; i < curves.length; i += 6) \n\t\t{\n\t\t\tthis.curveTo(curves[i], curves[i + 1], curves[i + 2],\n\t\t\t\tcurves[i + 3], curves[i + 4], curves[i + 5]);\n\t\t}\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxAbstractCanvas2D.prototype.close = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.closeOp);\n};\n\n/**\n * Function: end\n * \n * Empty implementation for backwards compatibility. This will be removed.\n */\nmxAbstractCanvas2D.prototype.end = function() { };\n\n__mxOutput.mxAbstractCanvas2D = typeof mxAbstractCanvas2D !== 'undefined' ? mxAbstractCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlCanvas2D\n *\n * Base class for all canvases. The following methods make up the public\n * interface of the canvas 2D for all painting in mxGraph:\n * \n * - <save>, <restore>\n * - <scale>, <translate>, <rotate>\n * - <setAlpha>, <setFillAlpha>, <setStrokeAlpha>, <setFillColor>, <setGradient>,\n *   <setStrokeColor>, <setStrokeWidth>, <setDashed>, <setDashPattern>, <setLineCap>, \n *   <setLineJoin>, <setMiterLimit>\n * - <setFontColor>, <setFontBackgroundColor>, <setFontBorderColor>, <setFontSize>,\n *   <setFontFamily>, <setFontStyle>\n * - <setShadow>, <setShadowColor>, <setShadowAlpha>, <setShadowOffset>\n * - <rect>, <roundrect>, <ellipse>, <image>, <text>\n * - <begin>, <moveTo>, <lineTo>, <quadTo>, <curveTo>\n * - <stroke>, <fill>, <fillAndStroke>\n * \n * <mxAbstractCanvas2D.arcTo> is an additional method for drawing paths. This is\n * a synthetic method, meaning that it is turned into a sequence of curves by\n * default. Subclassers may add native support for arcs.\n * \n * Constructor: mxXmlCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxXmlCanvas2D(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t// Writes default settings;\n\tthis.writeDefaults();\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxXmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxXmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: compressed\n * \n * Specifies if the output should be compressed by removing redundant calls.\n * Default is true.\n */\nmxXmlCanvas2D.prototype.compressed = true;\n\n/**\n * Function: writeDefaults\n * \n * Writes the rendering defaults to <root>:\n */\nmxXmlCanvas2D.prototype.writeDefaults = function()\n{\n\tvar elem;\n\t\n\t// Writes font defaults\n\telem = this.createElement('fontfamily');\n\telem.setAttribute('family', mxConstants.DEFAULT_FONTFAMILY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('fontsize');\n\telem.setAttribute('size', mxConstants.DEFAULT_FONTSIZE);\n\tthis.root.appendChild(elem);\n\t\n\t// Writes shadow defaults\n\telem = this.createElement('shadowcolor');\n\telem.setAttribute('color', mxConstants.SHADOWCOLOR);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', mxConstants.SHADOW_OPACITY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', mxConstants.SHADOW_OFFSET_X);\n\telem.setAttribute('dy', mxConstants.SHADOW_OFFSET_Y);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: format\n * \n * Returns a formatted number with 2 decimal places.\n */\nmxXmlCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: createElement\n * \n * Creates the given element using the owner document of <root>.\n */\nmxXmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn this.root.ownerDocument.createElement(name);\n};\n\n/**\n * Function: save\n * \n * Saves the drawing state.\n */\nmxXmlCanvas2D.prototype.save = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.save.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('save'));\n};\n\n/**\n * Function: restore\n * \n * Restores the drawing state.\n */\nmxXmlCanvas2D.prototype.restore = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.restore.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('restore'));\n};\n\n/**\n * Function: scale\n * \n * Scales the output.\n * \n * Parameters:\n * \n * scale - Number that represents the scale where 1 is equal to 100%.\n */\nmxXmlCanvas2D.prototype.scale = function(value)\n{\n        var elem = this.createElement('scale');\n        elem.setAttribute('scale', value);\n        this.root.appendChild(elem);\n};\n\n/**\n * Function: translate\n * \n * Translates the output.\n * \n * Parameters:\n * \n * dx - Number that specifies the horizontal translation.\n * dy - Number that specifies the vertical translation.\n */\nmxXmlCanvas2D.prototype.translate = function(dx, dy)\n{\n\tvar elem = this.createElement('translate');\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: rotate\n * \n * Rotates and/or flips the output around a given center. (Note: Due to\n * limitations in VML, the rotation cannot be concatenated.)\n * \n * Parameters:\n * \n * theta - Number that represents the angle of the rotation (in degrees).\n * flipH - Boolean indicating if the output should be flipped horizontally.\n * flipV - Boolean indicating if the output should be flipped vertically.\n * cx - Number that represents the x-coordinate of the rotation center.\n * cy - Number that represents the y-coordinate of the rotation center.\n */\nmxXmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tvar elem = this.createElement('rotate');\n\t\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\telem.setAttribute('theta', this.format(theta));\n\t\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\t\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\t\telem.setAttribute('cx', this.format(cx));\n\t\telem.setAttribute('cy', this.format(cy));\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.alpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('alpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current fill alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new fill alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillalpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new stroke alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokealpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setGradient\n * \n * Sets the gradient. Note that the coordinates may be ignored by some implementations.\n * \n * Parameters:\n * \n * color1 - Hexadecimal representation of the start color.\n * color2 - Hexadecimal representation of the end color.\n * x - X-coordinate of the gradient region.\n * y - y-coordinate of the gradient region.\n * w - Width of the gradient region.\n * h - Height of the gradient region.\n * direction - One of <mxConstants.DIRECTION_NORTH>, <mxConstants.DIRECTION_EAST>,\n * <mxConstants.DIRECTION_SOUTH> or <mxConstants.DIRECTION_WEST>.\n * alpha1 - Optional alpha of the start color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n * alpha2 - Optional alpha of the end color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tif (color1 != null && color2 != null)\n\t{\n\t\tmxAbstractCanvas2D.prototype.setGradient.apply(this, arguments);\n\t\t\n\t\tvar elem = this.createElement('gradient');\n\t\telem.setAttribute('c1', color1);\n\t\telem.setAttribute('c2', color2);\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\t\n\t\t// Default direction is south\n\t\tif (direction != null)\n\t\t{\n\t\t\telem.setAttribute('direction', direction);\n\t\t}\n\t\t\n\t\tif (alpha1 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha1', alpha1);\n\t\t}\n\t\t\n\t\tif (alpha2 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha2', alpha2);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokecolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n * \n * Parameters:\n * \n * value - Numeric representation of the stroke width.\n */\nmxXmlCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeWidth == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeWidth.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokewidth');\n\telem.setAttribute('width', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n * \n * Parameters:\n * \n * value - Boolean that specifies if dashed lines should be enabled.\n * value - Boolean that specifies if the stroke width should be ignored\n * for the dash pattern. Default is false.\n */\nmxXmlCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashed == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashed.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashed');\n\telem.setAttribute('dashed', (value) ? '1' : '0');\n\t\n\tif (fixDash != null)\n\t{\n\t\telem.setAttribute('fixDash', (fixDash) ? '1' : '0');\n\t}\n\t\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern. Default is '3 3'.\n * \n * Parameters:\n * \n * value - String that represents the dash pattern, which is a sequence of\n * numbers defining the length of the dashes and the length of the spaces\n * between the dashes. The lengths are relative to the line width - a length\n * of 1 is equals to the line width.\n */\nmxXmlCanvas2D.prototype.setDashPattern = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashPattern == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashPattern.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashpattern');\n\telem.setAttribute('pattern', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the line cap. Default is 'flat' which corresponds to 'butt' in SVG.\n * \n * Parameters:\n * \n * value - String that represents the line cap. Possible values are flat, round\n * and square.\n */\nmxXmlCanvas2D.prototype.setLineCap = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineCap == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineCap.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linecap');\n\telem.setAttribute('cap', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the line join. Default is 'miter'.\n * \n * Parameters:\n * \n * value - String that represents the line join. Possible values are miter,\n * round and bevel.\n */\nmxXmlCanvas2D.prototype.setLineJoin = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineJoin == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineJoin.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linejoin');\n\telem.setAttribute('join', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the miter limit. Default is 10.\n * \n * Parameters:\n * \n * value - Number that represents the miter limit.\n */\nmxXmlCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.miterLimit == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setMiterLimit.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('miterlimit');\n\telem.setAttribute('limit', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color. Default is '#000000'.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBackgroundColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBackgroundColor.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontbackgroundcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBorderColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBorderColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontbordercolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size. Default is <mxConstants.DEFAULT_FONTSIZE>.\n * \n * Parameters:\n * \n * value - Numeric representation of the font size.\n */\nmxXmlCanvas2D.prototype.setFontSize = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontSize == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontSize.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontsize');\n\t\telem.setAttribute('size', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family. Default is <mxConstants.DEFAULT_FONTFAMILY>.\n * \n * Parameters:\n * \n * value - String representation of the font family. This handles the same\n * values as the CSS font-family property.\n */\nmxXmlCanvas2D.prototype.setFontFamily = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontFamily == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontFamily.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontfamily');\n\t\telem.setAttribute('family', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n * \n * Parameters:\n * \n * value - Numeric representation of the font family. This is the sum of the\n * font styles from <mxConstants>.\n */\nmxXmlCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontStyle == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontStyle.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontstyle');\n\t\telem.setAttribute('style', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables shadows.\n * \n * Parameters:\n * \n * value - Boolean that specifies if shadows should be enabled.\n */\nmxXmlCanvas2D.prototype.setShadow = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadow == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadow.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadow');\n\telem.setAttribute('enabled', (value) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowColor\n * \n * Sets the current shadow color. Default is <mxConstants.SHADOWCOLOR>.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.state.shadowColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Sets the current shadows alpha. Default is <mxConstants.SHADOW_OPACITY>.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', value);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: setShadowOffset\n * \n * Sets the current shadow offset.\n * \n * Parameters:\n * \n * dx - Number that represents the horizontal offset of the shadow.\n * dy - Number that represents the vertical offset of the shadow.\n */\nmxXmlCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowDx == dx && this.state.shadowDy == dy)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowOffset.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', dx);\n\telem.setAttribute('dy', dy);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: rect\n * \n * Puts a rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n */\nmxXmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar elem = this.createElement('rect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: roundrect\n * \n * Puts a rounded rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n * dx - Number that represents the horizontal rounding.\n * dy - Number that represents the vertical rounding.\n */\nmxXmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tvar elem = this.createElement('roundrect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: ellipse\n * \n * Puts an ellipse into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the ellipse.\n * y - Number that represents the y-coordinate of the ellipse.\n * w - Number that represents the width of the ellipse.\n * h - Number that represents the height of the ellipse.\n */\nmxXmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar elem = this.createElement('ellipse');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the image.\n * y - Number that represents the y-coordinate of the image.\n * w - Number that represents the width of the image.\n * h - Number that represents the height of the image.\n * src - String that specifies the URL of the image.\n * aspect - Boolean indicating if the aspect of the image should be preserved.\n * flipH - Boolean indicating if the image should be flipped horizontally.\n * flipV - Boolean indicating if the image should be flipped vertically.\n */\nmxXmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\tvar elem = this.createElement('image');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('src', src);\n\telem.setAttribute('aspect', (aspect) ? '1' : '0');\n\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: begin\n * \n * Starts a new path and puts it into the drawing buffer.\n */\nmxXmlCanvas2D.prototype.begin = function()\n{\n\tthis.root.appendChild(this.createElement('begin'));\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n};\n\n/**\n * Function: moveTo\n * \n * Moves the current path the given point.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the point.\n * y - Number that represents the y-coordinate of the point.\n */\nmxXmlCanvas2D.prototype.moveTo = function(x, y)\n{\n\tvar elem = this.createElement('move');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the endpoint.\n * y - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.lineTo = function(x, y)\n{\n\tvar elem = this.createElement('line');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the control point.\n * y1 - Number that represents the y-coordinate of the control point.\n * x2 - Number that represents the x-coordinate of the endpoint.\n * y2 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar elem = this.createElement('quad');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x2;\n\tthis.lastY = y2;\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the first control point.\n * y1 - Number that represents the y-coordinate of the first control point.\n * x2 - Number that represents the x-coordinate of the second control point.\n * y2 - Number that represents the y-coordinate of the second control point.\n * x3 - Number that represents the x-coordinate of the endpoint.\n * y3 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tvar elem = this.createElement('curve');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\telem.setAttribute('x3', this.format(x3));\n\telem.setAttribute('y3', this.format(y3));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x3;\n\tthis.lastY = y3;\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxXmlCanvas2D.prototype.close = function()\n{\n\tthis.root.appendChild(this.createElement('close'));\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup. Background and border color as well\n * as clipping is not available in plain text labels for VML. HTML labels\n * are not available as part of shapes with no foreignObject support in SVG\n * (eg. IE9, IE10).\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the text.\n * y - Number that represents the y-coordinate of the text.\n * w - Number that represents the available width for the text or 0 for automatic width.\n * h - Number that represents the available height for the text or 0 for automatic height.\n * str - String that specifies the text to be painted.\n * align - String that represents the horizontal alignment.\n * valign - String that represents the vertical alignment.\n * wrap - Boolean that specifies if word-wrapping is enabled. Requires w > 0.\n * format - Empty string for plain text or 'html' for HTML markup.\n * overflow - Specifies the overflow behaviour of the label. Requires w > 0 and/or h > 0.\n * clip - Boolean that specifies if the label should be clipped. Requires w > 0 and/or h > 0.\n * rotation - Number that specifies the angle of the rotation around the anchor point of the text.\n * dir - Optional string that specifies the text direction. Possible values are rtl and lrt.\n */\nmxXmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tif (mxUtils.isNode(str))\n\t\t{\n\t\t\tstr = mxUtils.getOuterHtml(str);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('text');\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\telem.setAttribute('str', str);\n\t\t\n\t\tif (align != null)\n\t\t{\n\t\t\telem.setAttribute('align', align);\n\t\t}\n\t\t\n\t\tif (valign != null)\n\t\t{\n\t\t\telem.setAttribute('valign', valign);\n\t\t}\n\t\t\n\t\telem.setAttribute('wrap', (wrap) ? '1' : '0');\n\t\t\n\t\tif (format == null)\n\t\t{\n\t\t\tformat = '';\n\t\t}\n\t\t\n\t\telem.setAttribute('format', format);\n\t\t\n\t\tif (overflow != null)\n\t\t{\n\t\t\telem.setAttribute('overflow', overflow);\n\t\t}\n\t\t\n\t\tif (clip != null)\n\t\t{\n\t\t\telem.setAttribute('clip', (clip) ? '1' : '0');\n\t\t}\n\t\t\n\t\tif (rotation != null)\n\t\t{\n\t\t\telem.setAttribute('rotation', rotation);\n\t\t}\n\t\t\n\t\tif (dir != null)\n\t\t{\n\t\t\telem.setAttribute('dir', dir);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.stroke = function()\n{\n\tthis.root.appendChild(this.createElement('stroke'));\n};\n\n/**\n * Function: fill\n * \n * Fills the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.fill = function()\n{\n\tthis.root.appendChild(this.createElement('fill'));\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills the current drawing buffer and its outline.\n */\nmxXmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.root.appendChild(this.createElement('fillstroke'));\n};\n\n__mxOutput.mxXmlCanvas2D = typeof mxXmlCanvas2D !== 'undefined' ? mxXmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSvgCanvas2D\n *\n * Extends <mxAbstractCanvas2D> to implement a canvas for SVG. This canvas writes all\n * calls as SVG output to the given SVG root node.\n * \n * (code)\n * var svgDoc = mxUtils.createXmlDocument();\n * var root = (svgDoc.createElementNS != null) ?\n * \t\tsvgDoc.createElementNS(mxConstants.NS_SVG, 'svg') : svgDoc.createElement('svg');\n * \n * if (svgDoc.createElementNS == null)\n * {\n *   root.setAttribute('xmlns', mxConstants.NS_SVG);\n *   root.setAttribute('xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * else\n * {\n *   root.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * \n * var bounds = graph.getGraphBounds();\n * root.setAttribute('width', (bounds.x + bounds.width + 4) + 'px');\n * root.setAttribute('height', (bounds.y + bounds.height + 4) + 'px');\n * root.setAttribute('version', '1.1');\n * \n * svgDoc.appendChild(root);\n * \n * var svgCanvas = new mxSvgCanvas2D(root);\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>.\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * graph.view.canvas.ownerSVGElement.setAttribute('shape-rendering', 'crispEdges');\n * (end)\n * \n * Or set the respective attribute in the SVG element directly.\n * \n * Constructor: mxSvgCanvas2D\n *\n * Constructs a new SVG canvas.\n * \n * Parameters:\n * \n * root - SVG container for the output.\n * styleEnabled - Optional boolean that specifies if a style section should be\n * added. The style section sets the default font-size, font-family and\n * stroke-miterlimit globally. Default is false.\n */\nfunction mxSvgCanvas2D(root, styleEnabled)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t/**\n\t * Variable: gradients\n\t * \n\t * Local cache of gradients for quick lookups.\n\t */\n\tthis.gradients = [];\n\n\t/**\n\t * Variable: defs\n\t * \n\t * Reference to the defs section of the SVG document. Only for export.\n\t */\n\tthis.defs = null;\n\t\n\t/**\n\t * Variable: styleEnabled\n\t * \n\t * Stores the value of styleEnabled passed to the constructor.\n\t */\n\tthis.styleEnabled = (styleEnabled != null) ? styleEnabled : false;\n\t\n\tvar svg = null;\n\t\n\t// Adds optional defs section for export\n\tif (root.ownerDocument != document)\n\t{\n\t\tvar node = root;\n\n\t\t// Finds owner SVG element in XML DOM\n\t\twhile (node != null && node.nodeName != 'svg')\n\t\t{\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tsvg = node;\n\t}\n\n\tif (svg != null)\n\t{\n\t\t// Tries to get existing defs section\n\t\tvar tmp = svg.getElementsByTagName('defs');\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tthis.defs = svg.getElementsByTagName('defs')[0];\n\t\t}\n\t\t\n\t\t// Adds defs section if none exists\n\t\tif (this.defs == null)\n\t\t{\n\t\t\tthis.defs = this.createElement('defs');\n\t\t\t\n\t\t\tif (svg.firstChild != null)\n\t\t\t{\n\t\t\t\tsvg.insertBefore(this.defs, svg.firstChild);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(this.defs);\n\t\t\t}\n\t\t}\n\n\t\t// Adds stylesheet\n\t\tif (this.styleEnabled)\n\t\t{\n\t\t\tthis.defs.appendChild(this.createStyle());\n\t\t}\n\t}\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxSvgCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Capability check for DOM parser and checks if base tag is used.\n */\n(function()\n{\n\tmxSvgCanvas2D.prototype.useDomParser = !mxClient.IS_IE && typeof DOMParser === 'function' && typeof XMLSerializer === 'function';\n\t\n\tif (mxSvgCanvas2D.prototype.useDomParser)\n\t{\n\t\t// Checks using a generic test text if the parsing actually works. This is a workaround\n\t\t// for older browsers where the capability check returns true but the parsing fails.\n\t\ttry\n\t\t{\n\t\t\tvar doc = new DOMParser().parseFromString('test text', 'text/html');\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = doc != null;\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = false;\n\t\t}\n\t}\n\t\n\t// Activates workaround for gradient ID resolution if base tag is used.\n\tmxSvgCanvas2D.prototype.useAbsoluteIds = !mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t!mxClient.IS_EDGE && document.getElementsByTagName('base').length > 0;\n})();\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxSvgCanvas2D.prototype.node = null;\n\n/**\n * Variable: matchHtmlAlignment\n * \n * Specifies if plain text output should match the vertical HTML alignment.\n * Defaul is true.\n */\nmxSvgCanvas2D.prototype.matchHtmlAlignment = true;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxSvgCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: foEnabled\n * \n * Specifies if use of foreignObject for HTML markup is allowed. Default is true.\n */\nmxSvgCanvas2D.prototype.foEnabled = true;\n\n/**\n * Variable: foAltText\n * \n * Specifies the fallback text for unsupported foreignObjects in exported\n * documents. Default is '[Object]'. If this is set to null then no fallback\n * text is added to the exported document.\n */\nmxSvgCanvas2D.prototype.foAltText = '[Object]';\n\n/**\n * Variable: foOffset\n * \n * Offset to be used for foreignObjects.\n */\nmxSvgCanvas2D.prototype.foOffset = 0;\n\n/**\n * Variable: textOffset\n * \n * Offset to be used for text elements.\n */\nmxSvgCanvas2D.prototype.textOffset = 0;\n\n/**\n * Variable: imageOffset\n * \n * Offset to be used for image elements.\n */\nmxSvgCanvas2D.prototype.imageOffset = 0;\n\n/**\n * Variable: strokeTolerance\n * \n * Adds transparent paths for strokes.\n */\nmxSvgCanvas2D.prototype.strokeTolerance = 0;\n\n/**\n * Variable: minStrokeWidth\n * \n * Minimum stroke width for output.\n */\nmxSvgCanvas2D.prototype.minStrokeWidth = 1;\n\n/**\n * Variable: refCount\n * \n * Local counter for references in SVG export.\n */\nmxSvgCanvas2D.prototype.refCount = 0;\n\n/**\n * Variable: lineHeightCorrection\n * \n * Correction factor for <mxConstants.LINE_HEIGHT> in HTML output. Default is 1.\n */\nmxSvgCanvas2D.prototype.lineHeightCorrection = 1;\n\n/**\n * Variable: pointerEventsValue\n * \n * Default value for active pointer events. Default is all.\n */\nmxSvgCanvas2D.prototype.pointerEventsValue = 'all';\n\n/**\n * Variable: fontMetricsPadding\n * \n * Padding to be added for text that is not wrapped to account for differences\n * in font metrics on different platforms in pixels. Default is 10.\n */\nmxSvgCanvas2D.prototype.fontMetricsPadding = 10;\n\n/**\n * Variable: cacheOffsetSize\n * \n * Specifies if offsetWidth and offsetHeight should be cached. Default is true.\n * This is used to speed up repaint of text in <updateText>.\n */\nmxSvgCanvas2D.prototype.cacheOffsetSize = true;\n\n/**\n * Function: format\n * \n * Rounds all numbers to 2 decimal points.\n */\nmxSvgCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns the URL of the page without the hash part. This needs to use href to\n * include any search part with no params (ie question mark alone). This is a\n * workaround for the fact that window.location.search is empty if there is\n * no search string behind the question mark.\n */\nmxSvgCanvas2D.prototype.getBaseUrl = function()\n{\n\tvar href = window.location.href;\n\tvar hash = href.lastIndexOf('#');\n\t\n\tif (hash > 0)\n\t{\n\t\thref = href.substring(0, hash);\n\t}\n\t\n\treturn href;\n};\n\n/**\n * Function: reset\n * \n * Returns any offsets for rendering pixels.\n */\nmxSvgCanvas2D.prototype.reset = function()\n{\n\tmxAbstractCanvas2D.prototype.reset.apply(this, arguments);\n\tthis.gradients = [];\n};\n\n/**\n * Function: createStyle\n * \n * Creates the optional style section.\n */\nmxSvgCanvas2D.prototype.createStyle = function(x)\n{\n\tvar style = this.createElement('style');\n\tstyle.setAttribute('type', 'text/css');\n\tmxUtils.write(style, 'svg{font-family:' + mxConstants.DEFAULT_FONTFAMILY +\n\t\t\t';font-size:' + mxConstants.DEFAULT_FONTSIZE +\n\t\t\t';fill:none;stroke-miterlimit:10}');\n\t\n\treturn style;\n};\n\n/**\n * Function: createElement\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createElement = function(tagName, namespace)\n{\n\tif (this.root.ownerDocument.createElementNS != null)\n\t{\n\t\treturn this.root.ownerDocument.createElementNS(namespace || mxConstants.NS_SVG, tagName);\n\t}\n\telse\n\t{\n\t\tvar elt = this.root.ownerDocument.createElement(tagName);\n\t\t\n\t\tif (namespace != null)\n\t\t{\n\t\t\telt.setAttribute('xmlns', namespace);\n\t\t}\n\t\t\n\t\treturn elt;\n\t}\n};\n\n/**\n * Function: getAlternateText\n * \n * Returns the alternate text string for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.getAlternateText = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\treturn (str != null) ? this.foAltText : null;\n};\n\n/**\n * Function: getAlternateContent\n * \n * Returns the alternate content for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.createAlternateContent = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\tvar text = this.getAlternateText(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\tvar s = this.state;\n\n\tif (text != null && s.fontSize > 0)\n\t{\n\t\tvar dy = (valign == mxConstants.ALIGN_TOP) ? 1 :\n\t\t\t(valign == mxConstants.ALIGN_BOTTOM) ? 0 : 0.3;\n\t\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t(align == mxConstants.ALIGN_LEFT) ? 'start' :\n\t\t\t'middle';\n\t\n\t\tvar alt = this.createElement('text');\n\t\talt.setAttribute('x', Math.round(x + s.dx));\n\t\talt.setAttribute('y', Math.round(y + s.dy + dy * s.fontSize));\n\t\talt.setAttribute('fill', s.fontColor || 'black');\n\t\talt.setAttribute('font-family', s.fontFamily);\n\t\talt.setAttribute('font-size', Math.round(s.fontSize) + 'px');\n\n\t\t// Text-anchor start is default in SVG\n\t\tif (anchor != 'start')\n\t\t{\n\t\t\talt.setAttribute('text-anchor', anchor);\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t{\n\t\t\talt.setAttribute('font-weight', 'bold');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t{\n\t\t\talt.setAttribute('font-style', 'italic');\n\t\t}\n\t\t\n\t\tvar txtDecor = [];\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\ttxtDecor.push('underline');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t{\n\t\t\ttxtDecor.push('line-through');\n\t\t}\n\t\t\n\t\tif (txtDecor.length > 0)\n\t\t{\n\t\t\talt.setAttribute('text-decoration', txtDecor.join(' '));\n\t\t}\n\t\t\n\t\tmxUtils.write(alt, text);\n\t\t\n\t\treturn alt;\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: createGradientId\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createGradientId = function(start, end, alpha1, alpha2, direction)\n{\n\t// Removes illegal characters from gradient ID\n\tif (start.charAt(0) == '#')\n\t{\n\t\tstart = start.substring(1);\n\t}\n\t\n\tif (end.charAt(0) == '#')\n\t{\n\t\tend = end.substring(1);\n\t}\n\t\n\t// Workaround for gradient IDs not working in Safari 5 / Chrome 6\n\t// if they contain uppercase characters\n\tstart = start.toLowerCase() + '-' + alpha1;\n\tend = end.toLowerCase() + '-' + alpha2;\n\n\t// Wrong gradient directions possible?\n\tvar dir = null;\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tdir = 's';\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tdir = 'e';\n\t}\n\telse\n\t{\n\t\tvar tmp = start;\n\t\tstart = end;\n\t\tend = tmp;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tdir = 's';\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tdir = 'e';\n\t\t}\n\t}\n\t\n\treturn 'mx-gradient-' + start + '-' + end + '-' + dir;\n};\n\n/**\n * Function: getSvgGradient\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar id = this.createGradientId(start, end, alpha1, alpha2, direction);\n\tvar gradient = this.gradients[id];\n\t\n\tif (gradient == null)\n\t{\n\t\tvar svg = this.root.ownerSVGElement;\n\n\t\tvar counter = 0;\n\t\tvar tmpId = id + '-' + counter;\n\n\t\tif (svg != null)\n\t\t{\n\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t\n\t\t\twhile (gradient != null && gradient.ownerSVGElement != svg)\n\t\t\t{\n\t\t\t\ttmpId = id + '-' + counter++;\n\t\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses shorter IDs for export\n\t\t\ttmpId = 'id' + (++this.refCount);\n\t\t}\n\t\t\n\t\tif (gradient == null)\n\t\t{\n\t\t\tgradient = this.createSvgGradient(start, end, alpha1, alpha2, direction);\n\t\t\tgradient.setAttribute('id', tmpId);\n\t\t\t\n\t\t\tif (this.defs != null)\n\t\t\t{\n\t\t\t\tthis.defs.appendChild(gradient);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(gradient);\n\t\t\t}\n\t\t}\n\n\t\tthis.gradients[id] = gradient;\n\t}\n\n\treturn gradient.getAttribute('id');\n};\n\n/**\n * Function: createSvgGradient\n * \n * Creates the given SVG gradient.\n */\nmxSvgCanvas2D.prototype.createSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar gradient = this.createElement('linearGradient');\n\tgradient.setAttribute('x1', '0%');\n\tgradient.setAttribute('y1', '0%');\n\tgradient.setAttribute('x2', '0%');\n\tgradient.setAttribute('y2', '0%');\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tgradient.setAttribute('y2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tgradient.setAttribute('x2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tgradient.setAttribute('y1', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_WEST)\n\t{\n\t\tgradient.setAttribute('x1', '100%');\n\t}\n\t\n\tvar op = (alpha1 < 1) ? ';stop-opacity:' + alpha1 : '';\n\t\n\tvar stop = this.createElement('stop');\n\tstop.setAttribute('offset', '0%');\n\tstop.setAttribute('style', 'stop-color:' + start + op);\n\tgradient.appendChild(stop);\n\t\n\top = (alpha2 < 1) ? ';stop-opacity:' + alpha2 : '';\n\t\n\tstop = this.createElement('stop');\n\tstop.setAttribute('offset', '100%');\n\tstop.setAttribute('style', 'stop-color:' + end + op);\n\tgradient.appendChild(stop);\n\t\n\treturn gradient;\n};\n\n/**\n * Function: addNode\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'path')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.setAttribute('d', this.path.join(' '));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tthis.updateFill();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\t// Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=814952\n\t\t\tif (node.nodeName == 'ellipse' && mxClient.IS_FF)\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'transparent');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'none');\n\t\t\t}\n\t\t\t\n\t\t\t// Sets the actual filled state for stroke tolerance\n\t\t\tfilled = false;\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tthis.updateStroke();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\tnode.setAttribute('stroke', 'none');\n\t\t}\n\t\t\n\t\tif (s.transform != null && s.transform.length > 0)\n\t\t{\n\t\t\tnode.setAttribute('transform', s.transform);\n\t\t}\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node));\n\t\t}\n\t\n\t\t// Adds stroke tolerance\n\t\tif (this.strokeTolerance > 0 && !filled)\n\t\t{\n\t\t\tthis.root.appendChild(this.createTolerance(node));\n\t\t}\n\n\t\t// Adds pointer events\n\t\tif (this.pointerEvents)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', this.pointerEventsValue);\n\t\t}\n\t\t// Enables clicks for nodes inside a link element\n\t\telse if (!this.pointerEvents && this.originalRoot == null)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', 'none');\n\t\t}\n\t\t\n\t\t// Removes invisible nodes from output if they don't handle events\n\t\tif ((node.nodeName != 'rect' && node.nodeName != 'path' && node.nodeName != 'ellipse') ||\n\t\t\t(node.getAttribute('fill') != 'none' && node.getAttribute('fill') != 'transparent') ||\n\t\t\tnode.getAttribute('stroke') != 'none' || node.getAttribute('pointer-events') != 'none')\n\t\t{\n\t\t\t// LATER: Update existing DOM for performance\t\t\n\t\t\tthis.root.appendChild(node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n};\n\n/**\n * Function: updateFill\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateFill = function()\n{\n\tvar s = this.state;\n\t\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('fill-opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tif (s.fillColor != null)\n\t{\n\t\tif (s.gradientColor != null)\n\t\t{\n\t\t\tvar id = this.getSvgGradient(String(s.fillColor), String(s.gradientColor),\n\t\t\t\ts.gradientFillAlpha, s.gradientAlpha, s.gradientDirection);\n\t\t\t\n\t\t\tif (this.root.ownerDocument == document && this.useAbsoluteIds)\n\t\t\t{\n\t\t\t\t// Workaround for no fill with base tag in page (escape brackets)\n\t\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\t\tthis.node.setAttribute('fill', 'url(' + base + '#' + id + ')');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.node.setAttribute('fill', 'url(#' + id + ')');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.node.setAttribute('fill', String(s.fillColor).toLowerCase());\n\t\t}\n\t}\n};\n\n/**\n * Function: getCurrentStrokeWidth\n * \n * Returns the current stroke width (>= 1), ie. max(1, this.format(this.state.strokeWidth * this.state.scale)).\n */\nmxSvgCanvas2D.prototype.getCurrentStrokeWidth = function()\n{\n\treturn Math.max(this.minStrokeWidth, Math.max(0.01, this.format(this.state.strokeWidth * this.state.scale)));\n};\n\n/**\n * Function: updateStroke\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStroke = function()\n{\n\tvar s = this.state;\n\n\tthis.node.setAttribute('stroke', String(s.strokeColor).toLowerCase());\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('stroke-opacity', s.alpha * s.strokeAlpha);\n\t}\n\t\n\tvar sw = this.getCurrentStrokeWidth();\n\t\n\tif (sw != 1)\n\t{\n\t\tthis.node.setAttribute('stroke-width', sw);\n\t}\n\t\n\tif (this.node.nodeName == 'path')\n\t{\n\t\tthis.updateStrokeAttributes();\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tthis.node.setAttribute('stroke-dasharray', this.createDashPattern(\n\t\t\t((s.fixDash) ? 1 : s.strokeWidth) * s.scale));\n\t}\n};\n\n/**\n * Function: updateStrokeAttributes\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStrokeAttributes = function()\n{\n\tvar s = this.state;\n\t\n\t// Linejoin miter is default in SVG\n\tif (s.lineJoin != null && s.lineJoin != 'miter')\n\t{\n\t\tthis.node.setAttribute('stroke-linejoin', s.lineJoin);\n\t}\n\t\n\tif (s.lineCap != null)\n\t{\n\t\t// flat is called butt in SVG\n\t\tvar value = s.lineCap;\n\t\t\n\t\tif (value == 'flat')\n\t\t{\n\t\t\tvalue = 'butt';\n\t\t}\n\t\t\n\t\t// Linecap butt is default in SVG\n\t\tif (value != 'butt')\n\t\t{\n\t\t\tthis.node.setAttribute('stroke-linecap', value);\n\t\t}\n\t}\n\t\n\t// Miterlimit 10 is default in our document\n\tif (s.miterLimit != null && (!this.styleEnabled || s.miterLimit != 10))\n\t{\n\t\tthis.node.setAttribute('stroke-miterlimit', s.miterLimit);\n\t}\n};\n\n/**\n * Function: createDashPattern\n * \n * Creates the SVG dash pattern for the given state.\n */\nmxSvgCanvas2D.prototype.createDashPattern = function(scale)\n{\n\tvar pat = [];\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar dash = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (dash.length > 0)\n\t\t{\n\t\t\tfor (var i = 0; i < dash.length; i++)\n\t\t\t{\n\t\t\t\tpat[i] = Number(dash[i]) * scale;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn pat.join(' ');\n};\n\n/**\n * Function: createTolerance\n * \n * Creates a hit detection tolerance shape for the given node.\n */\nmxSvgCanvas2D.prototype.createTolerance = function(node)\n{\n\tvar tol = node.cloneNode(true);\n\tvar sw = parseFloat(tol.getAttribute('stroke-width') || 1) + this.strokeTolerance;\n\ttol.setAttribute('pointer-events', 'stroke');\n\ttol.setAttribute('visibility', 'hidden');\n\ttol.removeAttribute('stroke-dasharray');\n\ttol.setAttribute('stroke-width', sw);\n\ttol.setAttribute('fill', 'none');\n\t\n\t// Workaround for Opera ignoring the visiblity attribute above while\n\t// other browsers need a stroke color to perform the hit-detection but\n\t// do not ignore the visibility attribute. Side-effect is that Opera's\n\t// hit detection for horizontal/vertical edges seems to ignore the tol.\n\ttol.setAttribute('stroke', (mxClient.IS_OT) ? 'none' : 'white');\n\t\n\treturn tol;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxSvgCanvas2D.prototype.createShadow = function(node)\n{\n\tvar shadow = node.cloneNode(true);\n\tvar s = this.state;\n\n\t// Firefox uses transparent for no fill in ellipses\n\tif (shadow.getAttribute('fill') != 'none' && (!mxClient.IS_FF || shadow.getAttribute('fill') != 'transparent'))\n\t{\n\t\tshadow.setAttribute('fill', s.shadowColor);\n\t}\n\t\n\tif (shadow.getAttribute('stroke') != 'none')\n\t{\n\t\tshadow.setAttribute('stroke', s.shadowColor);\n\t}\n\n\tshadow.setAttribute('transform', 'translate(' + this.format(s.shadowDx * s.scale) +\n\t\t',' + this.format(s.shadowDy * s.scale) + ')' + (s.transform || ''));\n\tshadow.setAttribute('opacity', s.shadowAlpha);\n\t\n\treturn shadow;\n};\n\n/**\n * Function: setLink\n * \n * Experimental implementation for hyperlinks.\n */\nmxSvgCanvas2D.prototype.setLink = function(link)\n{\n\tif (link == null)\n\t{\n\t\tthis.root = this.originalRoot;\n\t}\n\telse\n\t{\n\t\tthis.originalRoot = this.root;\n\t\t\n\t\tvar node = this.createElement('a');\n\t\t\n\t\t// Workaround for implicit namespace handling in HTML5 export, IE adds NS1 namespace so use code below\n\t\t// in all IE versions except quirks mode. KNOWN: Adds xlink namespace to each image tag in output.\n\t\tif (node.setAttributeNS == null || (this.root.ownerDocument != document && document.documentMode == null))\n\t\t{\n\t\t\tnode.setAttribute('xlink:href', link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', link);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(node);\n\t\tthis.root = node;\n\t}\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxSvgCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\tvar s = this.state;\n\t\tcx += s.dx;\n\t\tcy += s.dy;\n\t\n\t\tcx *= s.scale;\n\t\tcy *= s.scale;\n\n\t\ts.transform = s.transform || '';\n\t\t\n\t\t// This implementation uses custom scale/translate and built-in rotation\n\t\t// Rotation state is part of the AffineTransform in state.transform\n\t\tif (flipH && flipV)\n\t\t{\n\t\t\ttheta += 180;\n\t\t}\n\t\telse if (flipH != flipV)\n\t\t{\n\t\t\tvar tx = (flipH) ? cx : 0;\n\t\t\tvar sx = (flipH) ? -1 : 1;\n\t\n\t\t\tvar ty = (flipV) ? cy : 0;\n\t\t\tvar sy = (flipV) ? -1 : 1;\n\n\t\t\ts.transform += 'translate(' + this.format(tx) + ',' + this.format(ty) + ')' +\n\t\t\t\t'scale(' + this.format(sx) + ',' + this.format(sy) + ')' +\n\t\t\t\t'translate(' + this.format(-tx) + ',' + this.format(-ty) + ')';\n\t\t}\n\t\t\n\t\tif (flipH ? !flipV : flipV)\n\t\t{\n\t\t\ttheta *= -1;\n\t\t}\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\ts.transform += 'rotate(' + this.format(theta) + ',' + this.format(cx) + ',' + this.format(cy) + ')';\n\t\t}\n\t\t\n\t\ts.rotation = s.rotation + theta;\n\t\ts.rotationCx = cx;\n\t\ts.rotationCy = cy;\n\t}\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxSvgCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createElement('path');\n};\n\n/**\n * Function: rect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('rect');\n\tn.setAttribute('x', this.format((x + s.dx) * s.scale));\n\tn.setAttribute('y', this.format((y + s.dy) * s.scale));\n\tn.setAttribute('width', this.format(w * s.scale));\n\tn.setAttribute('height', this.format(h * s.scale));\n\t\n\tthis.node = n;\n};\n\n/**\n * Function: roundrect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.rect(x, y, w, h);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.node.setAttribute('rx', this.format(dx * this.state.scale));\n\t}\n\t\n\tif (dy > 0)\n\t{\n\t\tthis.node.setAttribute('ry', this.format(dy * this.state.scale));\n\t}\n};\n\n/**\n * Function: ellipse\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('ellipse');\n\t// No rounding for consistent output with 1.x\n\tn.setAttribute('cx', this.format((x + w / 2 + s.dx) * s.scale));\n\tn.setAttribute('cy', this.format((y + h / 2 + s.dy) * s.scale));\n\tn.setAttribute('rx', w / 2 * s.scale);\n\tn.setAttribute('ry', h / 2 * s.scale);\n\tthis.node = n;\n};\n\n/**\n * Function: image\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\taspect = (aspect != null) ? aspect : true;\n\tflipH = (flipH != null) ? flipH : false;\n\tflipV = (flipV != null) ? flipV : false;\n\t\n\tvar s = this.state;\n\tx += s.dx;\n\ty += s.dy;\n\t\n\tvar node = this.createElement('image');\n\tnode.setAttribute('x', this.format(x * s.scale) + this.imageOffset);\n\tnode.setAttribute('y', this.format(y * s.scale) + this.imageOffset);\n\tnode.setAttribute('width', this.format(w * s.scale));\n\tnode.setAttribute('height', this.format(h * s.scale));\n\t\n\t// Workaround for missing namespace support\n\tif (node.setAttributeNS == null)\n\t{\n\t\tnode.setAttribute('xlink:href', src);\n\t}\n\telse\n\t{\n\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', src);\n\t}\n\t\n\tif (!aspect)\n\t{\n\t\tnode.setAttribute('preserveAspectRatio', 'none');\n\t}\n\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tvar tr = this.state.transform || '';\n\t\n\tif (flipH || flipV)\n\t{\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\tif (flipH)\n\t\t{\n\t\t\tsx = -1;\n\t\t\tdx = -w - 2 * x;\n\t\t}\n\t\t\n\t\tif (flipV)\n\t\t{\n\t\t\tsy = -1;\n\t\t\tdy = -h - 2 * y;\n\t\t}\n\t\t\n\t\t// Adds image tansformation to existing transform\n\t\ttr += 'scale(' + sx + ',' + sy + ')translate(' + (dx * s.scale) + ',' + (dy * s.scale) + ')';\n\t}\n\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (!this.pointerEvents)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: convertHtml\n * \n * Converts the given HTML string to XHTML.\n */\nmxSvgCanvas2D.prototype.convertHtml = function(val)\n{\n\tif (this.useDomParser)\n\t{\n\t\tvar doc = new DOMParser().parseFromString(val, 'text/html');\n\n\t\tif (doc != null)\n\t\t{\n\t\t\tval = new XMLSerializer().serializeToString(doc.body);\n\t\t\t\n\t\t\t// Extracts body content from DOM\n\t\t\tif (val.substring(0, 5) == '<body')\n\t\t\t{\n\t\t\t\tval = val.substring(val.indexOf('>', 5) + 1);\n\t\t\t}\n\t\t\t\n\t\t\tif (val.substring(val.length - 7, val.length) == '</body>')\n\t\t\t{\n\t\t\t\tval = val.substring(0, val.length - 7);\n\t\t\t}\n\t\t}\n\t}\n\telse if (document.implementation != null && document.implementation.createDocument != null)\n\t{\n\t\tvar xd = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);\n\t\tvar xb = xd.createElement('body');\n\t\txd.documentElement.appendChild(xb);\n\t\t\n\t\tvar div = document.createElement('div');\n\t\tdiv.innerHTML = val;\n\t\tvar child = div.firstChild;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar next = child.nextSibling;\n\t\t\txb.appendChild(xd.adoptNode(child));\n\t\t\tchild = next;\n\t\t}\n\t\t\n\t\treturn xb.innerHTML;\n\t}\n\telse\n\t{\n\t\tvar ta = document.createElement('textarea');\n\t\t\n\t\t// Handles special HTML entities < and > and double escaping\n\t\t// and converts unclosed br, hr and img tags to XHTML\n\t\t// LATER: Convert all unclosed tags\n\t\tta.innerHTML = val.replace(/&amp;/g, '&amp;amp;').\n\t\t\treplace(/&#60;/g, '&amp;lt;').replace(/&#62;/g, '&amp;gt;').\n\t\t\treplace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;').\n\t\t\treplace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t\tval = ta.value.replace(/&/g, '&amp;').replace(/&amp;lt;/g, '&lt;').\n\t\t\treplace(/&amp;gt;/g, '&gt;').replace(/&amp;amp;/g, '&amp;').\n\t\t\treplace(/<br>/g, '<br />').replace(/<hr>/g, '<hr />').\n\t\t\treplace(/(<img[^>]+)>/gm, \"$1 />\");\n\t}\n\t\n\treturn val;\n};\n\n/**\n * Function: createDiv\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createDiv = function(str)\n{\n\tvar val = str;\n\t\n\tif (!mxUtils.isNode(val))\n\t{\n\t\tval = '<div><div>' + this.convertHtml(val) + '</div></div>';\n\t}\n\n\t// IE uses this code for export as it cannot render foreignObjects\n\tif (!mxClient.IS_IE && !mxClient.IS_IE11 && document.createElementNS)\n\t{\n\t\tvar div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n\t\t\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\tvar div2 = document.createElement('div');\n\t\t\tvar div3 = div2.cloneNode(false);\n\t\t\t\n\t\t\t// Creates a copy for export\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tdiv2.appendChild(val.cloneNode(true));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv2.appendChild(val);\n\t\t\t}\n\t\t\t\n\t\t\tdiv3.appendChild(div2);\n\t\t\tdiv.appendChild(div3);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.innerHTML = val;\n\t\t}\n\t\t\n\t\treturn div;\n\t}\n\telse\n\t{\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\tval = '<div><div>' + mxUtils.getXml(val) + '</div></div>';\n\t\t}\n\t\t\n\t\tval = '<div xmlns=\"http://www.w3.org/1999/xhtml\">' + val + '</div>';\n\n\t\t// NOTE: FF 3.6 crashes if content CSS contains \"height:100%\"\n\t\treturn  mxUtils.parseXml(val).documentElement;\n\t}\n};\n\n/**\n * Updates existing DOM nodes for text rendering. LATER: Merge common parts with text function below.\n */\nmxSvgCanvas2D.prototype.updateText = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node)\n{\n\tif (node != null && node.firstChild != null && node.firstChild.firstChild != null)\n\t{\n\t\tthis.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node.firstChild);\n\t}\n};\n\n/**\n * Function: addForeignObject\n * \n * Creates a foreignObject for the given string and adds it to the given root.\n */\nmxSvgCanvas2D.prototype.addForeignObject = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir, div, root)\n{\n\tvar group = this.createElement('g');\n\tvar fo = this.createElement('foreignObject');\n\t\n\t// Workarounds for print clipping and static position in Safari\n\tfo.setAttribute('style', 'overflow: visible; text-align: left;');\n\tfo.setAttribute('pointer-events', 'none');\n\t\n\t// Import needed for older versions of IE\n\tif (div.ownerDocument != document)\n\t{\n\t\tdiv = mxUtils.importNodeImplementation(fo.ownerDocument, div, true);\n\t}\n\n\tfo.appendChild(div);\n\tgroup.appendChild(fo);\n\n\tthis.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, group);\n\t\n\t// Alternate content if foreignObject not supported\n\tif (this.root.ownerDocument != document)\n\t{\n\t\tvar alt = this.createAlternateContent(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\t\t\n\t\tif (alt != null)\n\t\t{\n\t\t\tfo.setAttribute('requiredFeatures', 'http://www.w3.org/TR/SVG11/feature#Extensibility');\n\t\t\tvar sw = this.createElement('switch');\n\t\t\tsw.appendChild(fo);\n\t\t\tsw.appendChild(alt);\n\t\t\tgroup.appendChild(sw);\n\t\t}\n\t}\n\t\n\troot.appendChild(group);\n};\n\n/**\n * Updates existing DOM nodes for text rendering.\n */\nmxSvgCanvas2D.prototype.updateTextNodes = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, g)\n{\n\tvar s = this.state.scale;\n\n\tmxSvgCanvas2D.createCss(w + 2, h, align, valign, wrap, overflow, clip,\n\t\t(this.state.fontBackgroundColor != null) ? this.state.fontBackgroundColor : null,\n\t\t(this.state.fontBorderColor != null) ? this.state.fontBorderColor : null,\n\t\t'display: flex; align-items: unsafe ' +\n\t\t((valign == mxConstants.ALIGN_TOP) ? 'flex-start' :\n\t\t((valign == mxConstants.ALIGN_BOTTOM) ? 'flex-end' : 'center'))  + '; ' +\n\t\t'justify-content: unsafe ' + ((align == mxConstants.ALIGN_LEFT) ? 'flex-start' :\n\t\t((align == mxConstants.ALIGN_RIGHT) ? 'flex-end' : 'center'))  + '; ',\n\t\tthis.getTextCss(), s, mxUtils.bind(this, function(dx, dy, flex, item, block)\n\t{\n\t\tx += this.state.dx;\n\t\ty += this.state.dy;\n\n\t\tvar fo = g.firstChild;\n\t\tvar div = fo.firstChild;\n\t\tvar box = div.firstChild;\n\t\tvar text = box.firstChild;\n\t\tvar r = ((this.rotateHtml) ? this.state.rotation : 0) + ((rotation != null) ? rotation : 0);\n\t\tvar t = ((this.foOffset != 0) ? 'translate(' + this.foOffset + ' ' + this.foOffset + ')' : '') +\n\t\t\t((s != 1) ? 'scale(' + s + ')' : '');\n\t\t\n\t\ttext.setAttribute('style', block);\n\t\tbox.setAttribute('style', item);\n\t\t\n\t\t// Workaround for clipping in Webkit with scrolling and zoom\n\t\tfo.setAttribute('width', Math.ceil(1 / Math.min(1, s) * 100) + '%');\n\t\tfo.setAttribute('height', Math.ceil(1 / Math.min(1, s) * 100) + '%');\n\t\tvar yp = Math.round(y + dy);\n\t\t\n\t\t// Allows for negative values which are causing problems with\n\t\t// transformed content where the top edge of the foreignObject\n\t\t// limits the text box being moved further up in the diagram.\n\t\t// KNOWN: Possible clipping problems with zoom and scrolling\n\t\t// but this is normally not used with scrollbars as the\n\t\t// coordinates are always positive with scrollbars.\n\t\t// Margin-top is ignored in Safari and no negative values allowed\n\t\t// for padding.\n\t\tif (yp < 0)\n\t\t{\n\t\t\tfo.setAttribute('y', yp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfo.removeAttribute('y');\n\t\t\tflex += 'padding-top: ' + yp + 'px; ';\n\t\t}\n\t\t\n\t\tdiv.setAttribute('style', flex + 'margin-left: ' + Math.round(x + dx) + 'px;');\n\t\tt += ((r != 0) ? ('rotate(' + r + ' ' + x + ' ' + y + ')') : '');\n\n\t\t// Output allows for reflow but Safari cannot use absolute position,\n\t\t// transforms or opacity. https://bugs.webkit.org/show_bug.cgi?id=23113\n\t\tif (t != '')\n\t\t{\t\n\t\t\tg.setAttribute('transform', t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tg.removeAttribute('transform');\n\t\t}\n\t\t\n\t\tif (this.state.alpha != 1)\n\t\t{\n\t\t\tg.setAttribute('opacity', this.state.alpha);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tg.removeAttribute('opacity');\n\t\t}\n\t}));\n};\n\n/**\n * Updates existing DOM nodes for text rendering.\n */\nmxSvgCanvas2D.createCss = function(w, h, align, valign, wrap, overflow, clip, bg, border, flex, block, s, callback)\n{\n\tvar item = 'box-sizing: border-box; font-size: 0; text-align: ' + ((align == mxConstants.ALIGN_LEFT) ? 'left' :\n\t\t((align == mxConstants.ALIGN_RIGHT) ? 'right' : 'center')) + '; ';\n\tvar pt = mxUtils.getAlignmentAsPoint(align, valign);\n\tvar ofl = 'overflow: hidden; ';\n\tvar fw = 'width: 1px; ';\n\tvar fh = 'height: 1px; ';\n\tvar dx = pt.x * w;\n\tvar dy = pt.y * h;\n\t\n\tif (clip)\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\titem += 'max-height: ' + Math.round(h) + 'px; ';\n\t\tdy = 0;\n\t}\n\telse if (overflow == 'fill')\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\tfh = 'height: ' + Math.round(h) + 'px; ';\n\t\tblock += 'width: 100%; height: 100%; ';\n\t\titem += fw + fh;\n\t}\n\telse if (overflow == 'width')\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\tblock += 'width: 100%; ';\n\t\titem += fw;\n\t\tdy = 0;\n\t\t\n\t\tif (h > 0)\n\t\t{\n\t\t\titem += 'max-height: ' + Math.round(h) + 'px; ';\n\t\t}\n\t}\n\telse\n\t{\n\t\tofl = '';\n\t\tdy = 0;\n\t}\n\t\n\tvar bgc = '';\n\t\n\tif (bg != null)\n\t{\n\t\tbgc += 'background-color: ' + bg + '; ';\n\t}\n\t\n\tif (border != null)\n\t{\n\t\tbgc += 'border: 1px solid ' + border + '; ';\n\t}\n\t\n\tif (ofl == '' || clip)\n\t{\n\t\tblock += bgc;\n\t}\n\telse\n\t{\n\t\titem += bgc;\n\t}\n\n\tif (wrap && w > 0)\n\t{\n\t\tblock += 'white-space: normal; word-wrap: ' + mxConstants.WORD_WRAP + '; ';\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\t\n\t\tif (ofl != '' && overflow != 'fill')\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\tblock += 'white-space: nowrap; ';\n\t\t\n\t\tif (ofl == '')\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t}\n\t\n\tcallback(dx, dy, flex + fw + fh, item + ofl, block, ofl);\n};\n\n/**\n * Function: getTextCss\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getTextCss = function()\n{\n\tvar s = this.state;\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t(mxConstants.LINE_HEIGHT * this.lineHeightCorrection);\n\tvar css = 'display: inline-block; font-size: ' + s.fontSize + 'px; ' +\n\t\t'font-family: ' + s.fontFamily + '; color: ' + s.fontColor + '; line-height: ' + lh +\n\t\t'; pointer-events: ' + ((this.pointerEvents) ? this.pointerEventsValue : 'none') + '; ';\n\t\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tcss += 'font-weight: bold; ';\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tcss += 'font-style: italic; ';\n\t}\n\n\tvar deco = [];\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tdeco.push('underline');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\tdeco.push('line-through');\n\t}\n\t\n\tif (deco.length > 0)\n\t{\n\t\tcss += 'text-decoration: ' + deco.join(' ') + '; ';\n\t}\n\n\treturn css;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Note that HTML markup is only supported if\n * foreignObject is supported and <foEnabled> is true. (This means IE9 and later\n * does currently not support HTML text as part of shapes.)\n */\nmxSvgCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\trotation = (rotation != null) ? rotation : 0;\n\n\t\tif (this.foEnabled && format == 'html')\n\t\t{\n\t\t\tvar div = this.createDiv(str);\n\t\t\t\n\t\t\t// Ignores invalid XHTML labels\n\t\t\tif (div != null)\n\t\t\t{\n\t\t\t\tif (dir != null)\n\t\t\t\t{\n\t\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.addForeignObject(x, y, w, h, str, align, valign, wrap,\n\t\t\t\t\tformat, overflow, clip, rotation, dir, div, this.root);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x + this.state.dx, y + this.state.dy, w, h, str,\n\t\t\t\talign, valign, wrap, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: createClip\n * \n * Creates a clip for the given coordinates.\n */\nmxSvgCanvas2D.prototype.createClip = function(x, y, w, h)\n{\n\tx = Math.round(x);\n\ty = Math.round(y);\n\tw = Math.round(w);\n\th = Math.round(h);\n\t\n\tvar id = 'mx-clip-' + x + '-' + y + '-' + w + '-' + h;\n\n\tvar counter = 0;\n\tvar tmp = id + '-' + counter;\n\t\n\t// Resolves ID conflicts\n\twhile (document.getElementById(tmp) != null)\n\t{\n\t\ttmp = id + '-' + (++counter);\n\t}\n\t\n\tclip = this.createElement('clipPath');\n\tclip.setAttribute('id', tmp);\n\t\n\tvar rect = this.createElement('rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\t\t\n\tclip.appendChild(rect);\n\t\n\treturn clip;\n};\n\n/**\n * Function: plainText\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup.\n */\nmxSvgCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir)\n{\n\trotation = (rotation != null) ? rotation : 0;\n\tvar s = this.state;\n\tvar size = s.fontSize;\n\tvar node = this.createElement('g');\n\tvar tr = s.transform || '';\n\tthis.updateFont(node);\n\t\t\t\t\n\t// Ignores pointer events\n\tif (!this.pointerEvents && this.originalRoot == null)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\t\t\n\t// Non-rotated text\n\tif (rotation != 0)\n\t{\n\t\ttr += 'rotate(' + rotation  + ',' + this.format(x * s.scale) + ',' + this.format(y * s.scale) + ')';\n\t}\n\t\n\tif (dir != null)\n\t{\n\t\tnode.setAttribute('direction', dir);\n\t}\n\n\tif (clip && w > 0 && h > 0)\n\t{\n\t\tvar cx = x;\n\t\tvar cy = y;\n\t\t\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tcx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tcx -= w;\n\t\t}\n\t\t\n\t\tif (overflow != 'fill')\n\t\t{\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tcy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tcy -= h;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// LATER: Remove spacing from clip rectangle\n\t\tvar c = this.createClip(cx * s.scale - 2, cy * s.scale - 2, w * s.scale + 4, h * s.scale + 4);\n\t\t\n\t\tif (this.defs != null)\n\t\t{\n\t\t\tthis.defs.appendChild(c);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Makes sure clip is removed with referencing node\n\t\t\tthis.root.appendChild(c);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Workaround for potential base tag\n\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\tnode.setAttribute('clip-path', 'url(' + base + '#' + c.getAttribute('id') + ')');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttribute('clip-path', 'url(#' + c.getAttribute('id') + ')');\n\t\t}\n\t}\n\n\t// Default is left\n\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t\t\t(align == mxConstants.ALIGN_CENTER) ? 'middle' :\n\t\t\t\t\t'start';\n\n\t// Text-anchor start is default in SVG\n\tif (anchor != 'start')\n\t{\n\t\tnode.setAttribute('text-anchor', anchor);\n\t}\n\t\n\tif (!this.styleEnabled || size != mxConstants.DEFAULT_FONTSIZE)\n\t{\n\t\tnode.setAttribute('font-size', (size * s.scale) + 'px');\n\t}\n\t\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (s.alpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha);\n\t}\n\t\n\tvar lines = str.split('\\n');\n\tvar lh = Math.round(size * mxConstants.LINE_HEIGHT);\n\tvar textHeight = size + (lines.length - 1) * lh;\n\n\tvar cy = y + size - 1;\n\n\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = ((this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight) / 2;\n\t\t\tcy -= dy;\n\t\t}\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = (this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight;\n\t\t\tcy -= dy + 1;\n\t\t}\n\t}\n\n\tfor (var i = 0; i < lines.length; i++)\n\t{\n\t\t// Workaround for bounding box of empty lines and spaces\n\t\tif (lines[i].length > 0 && mxUtils.trim(lines[i]).length > 0)\n\t\t{\n\t\t\tvar text = this.createElement('text');\n\t\t\t// LATER: Match horizontal HTML alignment\n\t\t\ttext.setAttribute('x', this.format(x * s.scale) + this.textOffset);\n\t\t\ttext.setAttribute('y', this.format(cy * s.scale) + this.textOffset);\n\t\n\t\t\tmxUtils.write(text, lines[i]);\n\t\t\tnode.appendChild(text);\n\t\t}\n\n\t\tcy += lh;\n\t}\n\n\tthis.root.appendChild(node);\n\tthis.addTextBackground(node, str, x, y, w, (overflow == 'fill') ? h : textHeight, align, valign, overflow);\n};\n\n/**\n * Function: updateFont\n * \n * Updates the text properties for the given node. (NOTE: For this to work in\n * IE, the given node must be a text or tspan element.)\n */\nmxSvgCanvas2D.prototype.updateFont = function(node)\n{\n\tvar s = this.state;\n\n\tnode.setAttribute('fill', s.fontColor);\n\t\n\tif (!this.styleEnabled || s.fontFamily != mxConstants.DEFAULT_FONTFAMILY)\n\t{\n\t\tnode.setAttribute('font-family', s.fontFamily);\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tnode.setAttribute('font-weight', 'bold');\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tnode.setAttribute('font-style', 'italic');\n\t}\n\t\n\tvar txtDecor = [];\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttxtDecor.push('underline');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\ttxtDecor.push('line-through');\n\t}\n\t\n\tif (txtDecor.length > 0)\n\t{\n\t\tnode.setAttribute('text-decoration', txtDecor.join(' '));\n\t}\n};\n\n/**\n * Function: addTextBackground\n * \n * Background color and border\n */\nmxSvgCanvas2D.prototype.addTextBackground = function(node, str, x, y, w, h, align, valign, overflow)\n{\n\tvar s = this.state;\n\n\tif (s.fontBackgroundColor != null || s.fontBorderColor != null)\n\t{\n\t\tvar bbox = null;\n\t\t\n\t\tif (overflow == 'fill' || overflow == 'width')\n\t\t{\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, y * s.scale, (w - 2) * s.scale, (h + 2) * s.scale);\n\t\t}\n\t\telse if (node.getBBox != null && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Uses getBBox only if inside document for correct size\n\t\t\ttry\n\t\t\t{\n\t\t\t\tbbox = node.getBBox();\n\t\t\t\tvar ie = mxClient.IS_IE && mxClient.IS_SVG;\n\t\t\t\tbbox = new mxRectangle(bbox.x, bbox.y + ((ie) ? 0 : 1), bbox.width, bbox.height + ((ie) ? 1 : 0));\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bbox == null || bbox.width == 0 || bbox.height == 0)\n\t\t{\n\t\t\t// Computes size if not in document or no getBBox available\n\t\t\tvar div = document.createElement('div');\n\n\t\t\t// Wrapping and clipping can be ignored here\n\t\t\tdiv.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\t\tdiv.style.fontSize = s.fontSize + 'px';\n\t\t\tdiv.style.fontFamily = s.fontFamily;\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.visibility = 'hidden';\n\t\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv.style.zoom = '1';\n\t\t\t\n\t\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\n\t\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tstr = mxUtils.htmlEntities(str, false);\n\t\t\tdiv.innerHTML = str.replace(/\\n/g, '<br/>');\n\t\t\t\n\t\t\tdocument.body.appendChild(div);\n\t\t\tvar w = div.offsetWidth;\n\t\t\tvar h = div.offsetHeight;\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, (y + 2) * s.scale, w * s.scale, (h + 1) * s.scale);\n\t\t}\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tvar n = this.createElement('rect');\n\t\t\tn.setAttribute('fill', s.fontBackgroundColor || 'none');\n\t\t\tn.setAttribute('stroke', s.fontBorderColor || 'none');\n\t\t\tn.setAttribute('x', Math.floor(bbox.x - 1));\n\t\t\tn.setAttribute('y', Math.floor(bbox.y - 1));\n\t\t\tn.setAttribute('width', Math.ceil(bbox.width + 2));\n\t\t\tn.setAttribute('height', Math.ceil(bbox.height));\n\n\t\t\tvar sw = (s.fontBorderColor != null) ? Math.max(1, this.format(s.scale)) : 0;\n\t\t\tn.setAttribute('stroke-width', sw);\n\t\t\t\n\t\t\t// Workaround for crisp rendering - only required if not exporting\n\t\t\tif (this.root.ownerDocument == document && mxUtils.mod(sw, 2) == 1)\n\t\t\t{\n\t\t\t\tn.setAttribute('transform', 'translate(0.5, 0.5)');\n\t\t\t}\n\t\t\t\n\t\t\tnode.insertBefore(n, node.firstChild);\n\t\t}\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxSvgCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxSvgCanvas2D = typeof mxSvgCanvas2D !== 'undefined' ? mxSvgCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxVmlCanvas2D\n * \n * Implements a canvas to be used for rendering VML. Here is an example of implementing a\n * fallback for SVG images which are not supported in VML-based browsers.\n * \n * (code)\n * var mxVmlCanvas2DImage = mxVmlCanvas2D.prototype.image;\n * mxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n * {\n *   if (src.substring(src.length - 4, src.length) == '.svg')\n *   {\n *     src = 'http://www.jgraph.com/images/mxgraph.gif';\n *   }\n *   \n *   mxVmlCanvas2DImage.apply(this, arguments);\n * };\n * (end)\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * document.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{antialias:false;)}';\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>. Note that\n * there is a known issue in VML where gradients are painted using the outer\n * bounding box of rotated shapes, not the actual bounds of the shape. See\n * also <text> for plain text label restrictions in shapes for VML.\n */\nvar mxVmlCanvas2D = function(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxVmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxVmlCanvas2D.prototype.node = null;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabledetB. Default is true.\n */\nmxVmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'm'.\n */\nmxVmlCanvas2D.prototype.moveOp = 'm';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'l'.\n */\nmxVmlCanvas2D.prototype.lineOp = 'l';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'c'.\n */\nmxVmlCanvas2D.prototype.curveOp = 'c';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'x e'.\n */\nmxVmlCanvas2D.prototype.closeOp = 'x';\n\n/**\n * Variable: rotatedHtmlBackground\n * \n * Background color for rotated HTML. Default is ''. This can be set to eg.\n * white to improve rendering of rotated text in VML for IE9.\n */\nmxVmlCanvas2D.prototype.rotatedHtmlBackground = '';\n\n/**\n * Variable: vmlScale\n * \n * Specifies the scale used to draw VML shapes.\n */\nmxVmlCanvas2D.prototype.vmlScale = 1;\n\n/**\n * Function: createElement\n * \n * Creates the given element using the document.\n */\nmxVmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn document.createElement(name);\n};\n\n/**\n * Function: createVmlElement\n * \n * Creates a new element using <createElement> and prefixes the given name with\n * <mxClient.VML_PREFIX>.\n */\nmxVmlCanvas2D.prototype.createVmlElement = function(name)\n{\n\treturn this.createElement(mxClient.VML_PREFIX + ':' + name);\n};\n\n/**\n * Function: addNode\n * \n * Adds the current node to the <root>.\n */\nmxVmlCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\t\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.path = this.path.join(' ') + ' e';\n\t\t\t\tnode.style.width = this.root.style.width;\n\t\t\t\tnode.style.height = this.root.style.height;\n\t\t\t\tnode.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tnode.strokeweight = this.format(Math.max(1, s.strokeWidth * s.scale / this.vmlScale)) + 'px';\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node,\n\t\t\t\tfilled && s.fillColor != null,\n\t\t\t\tstroked && s.strokeColor != null));\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tnode.stroked = 'true';\n\t\t\tnode.strokecolor = s.strokeColor;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.stroked = 'false';\n\t\t}\n\n\t\tnode.appendChild(this.createStroke());\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tnode.appendChild(this.createFill());\n\t\t}\n\t\telse if (this.pointerEvents && (node.nodeName != 'shape' ||\n\t\t\tthis.path[this.path.length - 1] == this.closeOp))\n\t\t{\n\t\t\tnode.appendChild(this.createTransparentFill());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.filled = 'false';\n\t\t}\n\n\t\t// LATER: Update existing DOM for performance\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: createTransparentFill\n * \n * Creates a transparent fill.\n */\nmxVmlCanvas2D.prototype.createTransparentFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.src = mxClient.imageBasePath + '/transparent.gif';\n\tfill.type = 'tile';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createFill\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createFill = function()\n{\n\tvar s = this.state;\n\t\n\t// Gradients in foregrounds not supported because special gradients\n\t// with bounds must be created for each element in graphics-canvases\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fillColor;\n\n\tif (s.gradientColor != null)\n\t{\n\t\tfill.type = 'gradient';\n\t\tfill.method = 'none';\n\t\tfill.color2 = s.gradientColor;\n\t\tvar angle = 180 - s.rotation;\n\t\t\n\t\tif (s.gradientDirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tangle -= 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_EAST)\n\t\t{\n\t\t\tangle += 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tangle -= 180 + ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t angle += ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\t\n\t\tif (this.root.style.flip == 'x' || this.root.style.flip == 'y')\n\t\t{\n\t\t\tangle *= -1;\n\t\t}\n\n\t\t// LATER: Fix outer bounding box for rotated shapes used in VML.\n\t\tfill.angle = mxUtils.mod(angle, 360);\n\t\tfill.opacity = (s.alpha * s.gradientFillAlpha * 100) + '%';\n\t\tfill.setAttribute(mxClient.OFFICE_PREFIX + ':opacity2', (s.alpha * s.gradientAlpha * 100) + '%');\n\t}\n\telse if (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tfill.opacity = (s.alpha * s.fillAlpha * 100) + '%';\t\t\t\n\t}\n\t\n\treturn fill;\n};\n/**\n * Function: createStroke\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createStroke = function()\n{\n\tvar s = this.state;\n\tvar stroke = this.createVmlElement('stroke');\n\tstroke.endcap = s.lineCap || 'flat';\n\tstroke.joinstyle = s.lineJoin || 'miter';\n\tstroke.miterlimit = s.miterLimit || '10';\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tstroke.opacity = (s.alpha * s.strokeAlpha * 100) + '%';\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tstroke.dashstyle = this.getVmlDashStyle();\n\t}\n\t\n\treturn stroke;\n};\n\n/**\n * Function: getVmlDashPattern\n * \n * Returns a VML dash pattern for the current dashPattern.\n * See http://msdn.microsoft.com/en-us/library/bb264085(v=vs.85).aspx\n */\nmxVmlCanvas2D.prototype.getVmlDashStyle = function()\n{\n\tvar result = 'dash';\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar tok = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (tok.length > 0 && tok[0] == 1)\n\t\t{\n\t\t\tresult = '0 2';\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxVmlCanvas2D.prototype.createShadow = function(node, filled, stroked)\n{\n\tvar s = this.state;\n\tvar rad = -s.rotation * (Math.PI / 180);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\n\tvar dx = s.shadowDx * s.scale;\n\tvar dy = s.shadowDy * s.scale;\n\n\tif (this.root.style.flip == 'x')\n\t{\n\t\tdx *= -1;\n\t}\n\telse if (this.root.style.flip == 'y')\n\t{\n\t\tdy *= -1;\n\t}\n\t\n\tvar shadow = node.cloneNode(true);\n\tshadow.style.marginLeft = Math.round(dx * cos - dy * sin) + 'px';\n\tshadow.style.marginTop = Math.round(dx * sin + dy * cos) + 'px';\n\n\t// Workaround for wrong cloning in IE8 standards mode\n\tif (document.documentMode == 8)\n\t{\n\t\tshadow.strokeweight = node.strokeweight;\n\t\t\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\tshadow.path = this.path.join(' ') + ' e';\n\t\t\tshadow.style.width = this.root.style.width;\n\t\t\tshadow.style.height = this.root.style.height;\n\t\t\tshadow.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t}\n\t}\n\t\n\tif (stroked)\n\t{\n\t\tshadow.strokecolor = s.shadowColor;\n\t\tshadow.appendChild(this.createShadowStroke());\n\t}\n\telse\n\t{\n\t\tshadow.stroked = 'false';\n\t}\n\t\n\tif (filled)\n\t{\n\t\tshadow.appendChild(this.createShadowFill());\n\t}\n\telse\n\t{\n\t\tshadow.filled = 'false';\n\t}\n\t\n\treturn shadow;\n};\n\n/**\n * Function: createShadowFill\n * \n * Creates the fill for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = this.state.shadowColor;\n\tfill.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createShadowStroke\n * \n * Creates the stroke for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowStroke = function()\n{\n\tvar stroke = this.createStroke();\n\tstroke.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn stroke;\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxVmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (flipH && flipV)\n\t{\n\t\ttheta += 180;\n\t}\n\telse if (flipH)\n\t{\n\t\tthis.root.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tthis.root.style.flip = 'y';\n\t}\n\n\tif (flipH ? !flipV : flipV)\n\t{\n\t\ttheta *= -1;\n\t}\n\n\tthis.root.style.rotation = theta;\n\tthis.state.rotation = this.state.rotation + theta;\n\tthis.state.rotationCx = cx;\n\tthis.state.rotationCy = cy;\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxVmlCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createVmlElement('shape');\n\tthis.node.style.position = 'absolute';\n};\n\n/**\n * Function: quadTo\n * \n * Replaces quadratic curve with bezier curve in VML.\n */\nmxVmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar s = this.state;\n\n\tvar cpx0 = (this.lastX + s.dx) * s.scale;\n\tvar cpy0 = (this.lastY + s.dy) * s.scale;\n\tvar qpx1 = (x1 + s.dx) * s.scale;\n\tvar qpy1 = (y1 + s.dy) * s.scale;\n\tvar cpx3 = (x2 + s.dx) * s.scale;\n\tvar cpy3 = (y2 + s.dy) * s.scale;\n\t\n\tvar cpx1 = cpx0 + 2/3 * (qpx1 - cpx0);\n\tvar cpy1 = cpy0 + 2/3 * (qpy1 - cpy0);\n\t\n\tvar cpx2 = cpx3 + 2/3 * (qpx1 - cpx3);\n\tvar cpy2 = cpy3 + 2/3 * (qpy1 - cpy3);\n\t\n\tthis.path.push('c ' + this.format(cpx1) + ' ' + this.format(cpy1) +\n\t\t\t' ' + this.format(cpx2) + ' ' + this.format(cpy2) +\n\t\t\t' ' + this.format(cpx3) + ' ' + this.format(cpy3));\n\tthis.lastX = (cpx3 / s.scale) - s.dx;\n\tthis.lastY = (cpy3 / s.scale) - s.dy;\n\t\n};\n\n/**\n * Function: createRect\n * \n * Sets the glass gradient.\n */\nmxVmlCanvas2D.prototype.createRect = function(nodeName, x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createVmlElement(nodeName);\n\tn.style.position = 'absolute';\n\tn.style.left = this.format((x + s.dx) * s.scale) + 'px';\n\tn.style.top = this.format((y + s.dy) * s.scale) + 'px';\n\tn.style.width = this.format(w * s.scale) + 'px';\n\tn.style.height = this.format(h * s.scale) + 'px';\n\t\n\treturn n;\n};\n\n/**\n * Function: rect\n * \n * Sets the current path to a rectangle.\n */\nmxVmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tthis.node = this.createRect('rect', x, y, w, h);\n};\n\n/**\n * Function: roundrect\n * \n * Sets the current path to a rounded rectangle.\n */\nmxVmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.node = this.createRect('roundrect', x, y, w, h);\n\t// SetAttribute needed here for IE8\n\tthis.node.setAttribute('arcsize', Math.max(dx * 100 / w, dy * 100 / h) + '%');\n};\n\n/**\n * Function: ellipse\n * \n * Sets the current path to an ellipse.\n */\nmxVmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tthis.node = this.createRect('oval', x, y, w, h);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n */\nmxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tvar node = null;\n\t\n\tif (!aspect)\n\t{\n\t\tnode = this.createRect('image', x, y, w, h);\n\t\tnode.src = src;\n\t}\n\telse\n\t{\n\t\t// Uses fill with aspect to avoid asynchronous update of size\n\t\tnode = this.createRect('rect', x, y, w, h);\n\t\tnode.stroked = 'false';\n\t\t\n\t\t// Handles image aspect via fill\n\t\tvar fill = this.createVmlElement('fill');\n\t\tfill.aspect = (aspect) ? 'atmost' : 'ignore';\n\t\tfill.rotate = 'true';\n\t\tfill.type = 'frame';\n\t\tfill.src = src;\n\n\t\tnode.appendChild(fill);\n\t}\n\t\n\tif (flipH && flipV)\n\t{\n\t\tnode.style.rotation = '180';\n\t}\n\telse if (flipH)\n\t{\n\t\tnode.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tnode.style.flip = 'y';\n\t}\n\t\n\tif (this.state.alpha < 1 || this.state.fillAlpha < 1)\n\t{\n\t\t// KNOWN: Borders around transparent images in IE<9. Using fill.opacity\n\t\t// fixes this problem by adding a white background in all IE versions.\n\t\tnode.style.filter += 'alpha(opacity=' + (this.state.alpha * this.state.fillAlpha * 100) + ')';\n\t}\n\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: createText\n * \n * Creates the innermost element that contains the HTML text.\n */\nmxVmlCanvas2D.prototype.createDiv = function(str, align, valign, overflow)\n{\n\tvar div = this.createElement('div');\n\tvar state = this.state;\n\n\tvar css = '';\n\t\n\tif (state.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + mxUtils.htmlEntities(state.fontBackgroundColor) + ';';\n\t}\n\t\n\tif (state.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(state.fontBorderColor) + ';';\n\t}\n\t\n\tif (mxUtils.isNode(str))\n\t{\n\t\tdiv.appendChild(str);\n\t}\n\telse\n\t{\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\tvar div2 = this.createElement('div');\n\t\t\tdiv2.style.cssText = css;\n\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv2.style.zoom = '1';\n\t\t\tdiv2.style.textDecoration = 'inherit';\n\t\t\tdiv2.innerHTML = str;\n\t\t\tdiv.appendChild(div2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.cssText = css;\n\t\t\tdiv.innerHTML = str;\n\t\t}\n\t}\n\t\n\tvar style = div.style;\n\n\tstyle.fontSize = (state.fontSize / this.vmlScale) + 'px';\n\tstyle.fontFamily = state.fontFamily;\n\tstyle.color = state.fontColor;\n\tstyle.verticalAlign = 'top';\n\tstyle.textAlign = align || 'left';\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (state.fontSize * mxConstants.LINE_HEIGHT / this.vmlScale) + 'px' : mxConstants.LINE_HEIGHT;\n\n\tif ((state.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\n\tif ((state.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\t\n\tif ((state.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\t\n\treturn div;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Clipping, text background and border are not\n * supported for plain text in VML.\n */\nmxVmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tvar s = this.state;\n\t\t\n\t\tif (format == 'html')\n\t\t{\n\t\t\tif (s.rotation != null)\n\t\t\t{\n\t\t\t\tvar pt = this.rotatePoint(x, y, s.rotation, s.rotationCx, s.rotationCy);\n\t\t\t\t\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tx += s.dx;\n\t\t\t\ty += s.dy;\n\t\t\t\t\n\t\t\t\t// Workaround for rendering offsets\n\t\t\t\tif (overflow != 'fill' && valign == mxConstants.ALIGN_TOP)\n\t\t\t\t{\n\t\t\t\t\ty -= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\t// Adds event transparency in IE8 standards without the transparent background\n\t\t\t// filter which cannot be used due to bugs in the zoomed bounding box (too slow)\n\t\t\t// FIXME: No event transparency if inside v:rect (ie part of shape)\n\t\t\t// KNOWN: Offset wrong for rotated text with word that are longer than the wrapping\n\t\t\t// width in IE8 because real width of text cannot be determined here.\n\t\t\t// This should be fixed in mxText.updateBoundingBox by calling before this and\n\t\t\t// passing the real width to this method if not clipped and wrapped.\n\t\t\tvar abs = (document.documentMode == 8 && !mxClient.IS_EM) ? this.createVmlElement('group') : this.createElement('div');\n\t\t\tabs.style.position = 'absolute';\n\t\t\tabs.style.display = 'inline';\n\t\t\tabs.style.left = this.format(x) + 'px';\n\t\t\tabs.style.top = this.format(y) + 'px';\n\t\t\tabs.style.zoom = s.scale;\n\n\t\t\tvar box = this.createElement('div');\n\t\t\tbox.style.position = 'relative';\n\t\t\tbox.style.display = 'inline';\n\t\t\t\n\t\t\tvar margin = mxUtils.getAlignmentAsPoint(align, valign);\n\t\t\tvar dx = margin.x;\n\t\t\tvar dy = margin.y;\n\n\t\t\tvar div = this.createDiv(str, align, valign, overflow);\n\t\t\tvar inner = this.createElement('div');\n\t\t\t\n\t\t\tif (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tif (!clip)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\t// LATER: Check if other cases need to be handled\n\t\t\t\tif (div.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div;\n\t\t\t\t\t\n\t\t\t\t\tif (tmp.firstChild != null && tmp.firstChild.nodeName == 'DIV')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.firstChild.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\t}\n\t\t\t\n\t\t\tvar rot = s.rotation + (rotation || 0);\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tinner.style.display = 'inline';\n\t\t\t\tinner.style.zoom = '1';\n\t\t\t\tinner.appendChild(div);\n\n\t\t\t\t// Box not needed for rendering in IE8 standards\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM && this.root.nodeName != 'DIV')\n\t\t\t\t{\n\t\t\t\t\tbox.appendChild(inner);\n\t\t\t\t\tabs.appendChild(box);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tabs.appendChild(inner);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tbox.appendChild(div);\n\t\t\t\tabs.appendChild(box);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.display = 'inline';\n\t\t\t\tabs.appendChild(div);\n\t\t\t}\n\t\t\t\n\t\t\t// Inserts the node into the DOM\n\t\t\tif (this.root.nodeName != 'DIV')\n\t\t\t{\n\t\t\t\t// Rectangle to fix position in group\n\t\t\t\tvar rect = this.createVmlElement('rect');\n\t\t\t\trect.stroked = 'false';\n\t\t\t\trect.filled = 'false';\n\n\t\t\t\trect.appendChild(abs);\n\t\t\t\tthis.root.appendChild(rect);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.root.appendChild(abs);\n\t\t\t}\n\t\t\t\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.height = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.maxHeight = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tvar rad = rot * (Math.PI / 180);\n\t\t\t\t\n\t\t\t\t// Precalculate cos and sin for the rotation\n\t\t\t\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\t\t\t\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\t\t\t\trad %= 2 * Math.PI;\n\t\t\t\tif (rad < 0) rad += 2 * Math.PI;\n\t\t\t\trad %= Math.PI;\n\t\t\t\tif (rad > Math.PI / 2) rad = Math.PI - rad;\n\t\t\t\t\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.display = 'inline-block';\n\t\t\t\t\tinner.style.display = 'inline-block';\n\t\t\t\t\tbox.style.display = 'inline-block';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdiv.style.position = 'absolute';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tvar sizeDiv = div;\n\t\t\t\t\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar tmp = sizeDiv.offsetWidth + 3;\n\t\t\t\tvar oh = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tif (clip)\n\t\t\t\t{\n\t\t\t\t\tw = Math.min(w, tmp);\n\t\t\t\t\toh = Math.min(oh, h);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tw = tmp;\n\t\t\t\t}\n\n\t\t\t\t// Handles words that are longer than the given wrapping width\n\t\t\t\tif (wrap)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = w + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && (clip || overflow == 'width') && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\n\t\t\t\tvar top_fix = (h - h * cos + w * -sin) / 2 - real_sin * w * (dx + 0.5) + real_cos * h * (dy + 0.5);\n\t\t\t\tvar left_fix = (w - w * cos + h * -sin) / 2 + real_cos * w * (dx + 0.5) + real_sin * h * (dy + 0.5);\n\n\t\t\t\tif (abs.nodeName == 'group' && this.root.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\t// Workaround for bug where group gets moved away if left and top are non-zero in IE8 standards\n\t\t\t\t\tvar pos = this.createElement('div');\n\t\t\t\t\tpos.style.display = 'inline-block';\n\t\t\t\t\tpos.style.position = 'absolute';\n\t\t\t\t\tpos.style.left = this.format(x + (left_fix - w / 2) * s.scale) + 'px';\n\t\t\t\t\tpos.style.top = this.format(y + (top_fix - h / 2) * s.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\tabs.parentNode.appendChild(pos);\n\t\t\t\t\tpos.appendChild(abs);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar sc = (document.documentMode == 8 && !mxClient.IS_EM) ? 1 : s.scale;\n\t\t\t\t\t\n\t\t\t\t\tabs.style.left = this.format(x + (left_fix - w / 2) * sc) + 'px';\n\t\t\t\t\tabs.style.top = this.format(y + (top_fix - h / 2) * sc) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// KNOWN: Rotated text rendering quality is bad for IE9 quirks\n\t\t\t\tinner.style.filter = \"progid:DXImageTransform.Microsoft.Matrix(M11=\"+real_cos+\", M12=\"+\n\t\t\t\t\treal_sin+\", M21=\"+(-real_sin)+\", M22=\"+real_cos+\", sizingMethod='auto expand')\";\n\t\t\t\tinner.style.backgroundColor = this.rotatedHtmlBackground;\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tinner.style.filter += 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\n\t\t\t\t// Restore parent node for DIV\n\t\t\t\tinner.appendChild(div);\n\t\t\t\tdiv.style.position = '';\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t}\n\t\t\telse if (document.documentMode != 8 || mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tdiv.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tabs.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tvar divParent = div.parentNode;\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tw = div.offsetWidth;\n\t\t\t\tvar oh = div.offsetHeight;\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && clip && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t\tdivParent.appendChild(div);\n\t\t\t\t\n\t\t\t\tabs.style.left = this.format(x + w * dx * this.state.scale) + 'px';\n\t\t\t\tabs.style.top = this.format(y + h * dy * this.state.scale) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Faster rendering in IE8 without offsetWidth/Height\n\t\t\t\tbox.style.left = (dx * 100) + '%';\n\t\t\t\tbox.style.top = (dy * 100) + '%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, mxUtils.htmlEntities(str, false), align, valign, wrap, format, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: plainText\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\t// TextDirection is ignored since this code is not used (format is always HTML in the text function)\n\tvar s = this.state;\n\tx = (x + s.dx) * s.scale;\n\ty = (y + s.dy) * s.scale;\n\t\n\tvar node = this.createVmlElement('shape');\n\tnode.style.width = '1px';\n\tnode.style.height = '1px';\n\tnode.stroked = 'false';\n\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fontColor;\n\tfill.opacity = (s.alpha * 100) + '%';\n\tnode.appendChild(fill);\n\t\n\tvar path = this.createVmlElement('path');\n\tpath.textpathok = 'true';\n\tpath.v = 'm ' + this.format(0) + ' ' + this.format(0) + ' l ' + this.format(1) + ' ' + this.format(0);\n\t\n\tnode.appendChild(path);\n\t\n\t// KNOWN: Font family and text decoration ignored\n\tvar tp = this.createVmlElement('textpath');\n\ttp.style.cssText = 'v-text-align:' + align;\n\ttp.style.align = align;\n\ttp.style.fontFamily = s.fontFamily;\n\ttp.string = str;\n\ttp.on = 'true';\n\t\n\t// Scale via fontsize instead of node.style.zoom for correct offsets in IE8\n\tvar size = s.fontSize * s.scale / this.vmlScale;\n\ttp.style.fontSize = size + 'px';\n\t\n\t// Bold\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\ttp.style.fontWeight = 'bold';\n\t}\n\t\n\t// Italic\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\ttp.style.fontStyle = 'italic';\n\t}\n\n\t// Underline\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttp.style.textDecoration = 'underline';\n\t}\n\n\tvar lines = str.split('\\n');\n\tvar textHeight = size + (lines.length - 1) * size * mxConstants.LINE_HEIGHT;\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = - textHeight / 2;\n\t}\n\telse if (valign != mxConstants.ALIGN_MIDDLE) // top\n\t{\n\t\tdy = textHeight / 2;\n\t}\n\n\tif (rotation != null)\n\t{\n\t\tnode.style.rotation = rotation;\n\t\tvar rad = rotation * (Math.PI / 180);\n\t\tdx = Math.sin(rad) * dy;\n\t\tdy = Math.cos(rad) * dy;\n\t}\n\n\t// FIXME: Clipping is relative to bounding box\n\t/*if (clip)\n\t{\n\t\tnode.style.clip = 'rect(0px ' + this.format(w) + 'px ' + this.format(h) + 'px 0px)';\n\t}*/\n\t\n\tnode.appendChild(tp);\n\tnode.style.left = this.format(x - dx) + 'px';\n\tnode.style.top = this.format(y + dy) + 'px';\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxVmlCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxVmlCanvas2D = typeof mxVmlCanvas2D !== 'undefined' ? mxVmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGuide\n *\n * Implements the alignment of selection cells to other cells in the graph.\n * \n * Constructor: mxGuide\n * \n * Constructs a new guide object.\n */\nfunction mxGuide(graph, states)\n{\n\tthis.graph = graph;\n\tthis.setStates(states);\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph> instance.\n */\nmxGuide.prototype.graph = null;\n\n/**\n * Variable: states\n * \n * Contains the <mxCellStates> that are used for alignment.\n */\nmxGuide.prototype.states = null;\n\n/**\n * Variable: horizontal\n *\n * Specifies if horizontal guides are enabled. Default is true.\n */\nmxGuide.prototype.horizontal = true;\n\n/**\n * Variable: vertical\n *\n * Specifies if vertical guides are enabled. Default is true.\n */\nmxGuide.prototype.vertical = true;\n\n/**\n * Variable: guideX\n *\n * Holds the <mxShape> for the horizontal guide.\n */\nmxGuide.prototype.guideX = null;\n\n/**\n * Variable: guideY\n *\n * Holds the <mxShape> for the vertical guide.\n */\nmxGuide.prototype.guideY = null;\n\n/**\n * Variable: rounded\n *\n * Specifies if rounded coordinates should be used. Default is false.\n */\nmxGuide.prototype.rounded = false;\n\n/**\n * Variable: tolerance\n * \n * Default tolerance in px if grid is disabled. Default is 2.\n */\nmxGuide.prototype.tolerance = 2;\n\n/**\n * Function: setStates\n * \n * Sets the <mxCellStates> that should be used for alignment.\n */\nmxGuide.prototype.setStates = function(states)\n{\n\tthis.states = states;\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the guide should be enabled for the given native event. This\n * implementation always returns true.\n */\nmxGuide.prototype.isEnabledForEvent = function(evt)\n{\n\treturn true;\n};\n\n/**\n * Function: getGuideTolerance\n * \n * Returns the tolerance for the guides. Default value is gridSize / 2.\n */\nmxGuide.prototype.getGuideTolerance = function(gridEnabled)\n{\n\treturn (gridEnabled && this.graph.gridEnabled) ? this.graph.gridSize / 2 : this.tolerance;\n};\n\n/**\n * Function: createGuideShape\n * \n * Returns the mxShape to be used for painting the respective guide. This\n * implementation returns a new, dashed and crisp <mxPolyline> using\n * <mxConstants.GUIDE_COLOR> and <mxConstants.GUIDE_STROKEWIDTH> as the format.\n * \n * Parameters:\n * \n * horizontal - Boolean that specifies which guide should be created.\n */\nmxGuide.prototype.createGuideShape = function(horizontal)\n{\n\tvar guide = new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH);\n\tguide.isDashed = true;\n\t\n\treturn guide;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored.\n */\nmxGuide.prototype.isStateIgnored = function(state)\n{\n\treturn false;\n};\n\n/**\n * Function: move\n * \n * Moves the <bounds> by the given <mxPoint> and returnt the snapped point.\n */\nmxGuide.prototype.move = function(bounds, delta, gridEnabled, clone)\n{\n\tif (this.states != null && (this.horizontal || this.vertical) && bounds != null && delta != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar tt = this.getGuideTolerance(gridEnabled) * scale;\n\t\tvar b = bounds.clone();\n\t\tb.x += delta.x;\n\t\tb.y += delta.y;\n\t\tvar overrideX = false;\n\t\tvar stateX = null;\n\t\tvar valueX = null;\n\t\tvar overrideY = false;\n\t\tvar stateY = null;\n\t\tvar valueY = null;\n\t\tvar ttX = tt;\n\t\tvar ttY = tt;\n\t\tvar left = b.x;\n\t\tvar right = b.x + b.width;\n\t\tvar center = b.getCenterX();\n\t\tvar top = b.y;\n\t\tvar bottom = b.y + b.height;\n\t\tvar middle = b.getCenterY();\n\t\n\t\t// Snaps the left, center and right to the given x-coordinate\n\t\tfunction snapX(x, state, centerAlign)\n\t\t{\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (centerAlign && Math.abs(x - center) < ttX)\n\t\t\t{\n\t\t\t\tdelta.x = x - bounds.getCenterX();\n\t\t\t\tttX = Math.abs(x - center);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (!centerAlign)\n\t\t\t{\n\t\t\t\tif (Math.abs(x - left) < ttX)\n\t\t\t\t{\n\t\t\t\t\tdelta.x = x - bounds.x;\n\t\t\t\t\tttX = Math.abs(x - left);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(x - right) < ttX)\n\t\t\t\t{\n\t\t\t\t\tdelta.x = x - bounds.x - bounds.width;\n\t\t\t\t\tttX = Math.abs(x - right);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateX = state;\n\t\t\t\tvalueX = x;\n\t\t\t\t\n\t\t\t\tif (this.guideX == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideX = this.createGuideShape(true);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideX.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideX.pointerEvents = false;\n\t\t\t\t\tthis.guideX.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideX = overrideX || override;\n\t\t};\n\t\t\n\t\t// Snaps the top, middle or bottom to the given y-coordinate\n\t\tfunction snapY(y, state, centerAlign)\n\t\t{\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (centerAlign && Math.abs(y - middle) < ttY)\n\t\t\t{\n\t\t\t\tdelta.y = y - bounds.getCenterY();\n\t\t\t\tttY = Math.abs(y -  middle);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (!centerAlign)\n\t\t\t{\n\t\t\t\tif (Math.abs(y - top) < ttY)\n\t\t\t\t{\n\t\t\t\t\tdelta.y = y - bounds.y;\n\t\t\t\t\tttY = Math.abs(y - top);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(y - bottom) < ttY)\n\t\t\t\t{\n\t\t\t\t\tdelta.y = y - bounds.y - bounds.height;\n\t\t\t\t\tttY = Math.abs(y - bottom);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateY = state;\n\t\t\t\tvalueY = y;\n\t\t\t\t\n\t\t\t\tif (this.guideY == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideY = this.createGuideShape(false);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideY.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideY.pointerEvents = false;\n\t\t\t\t\tthis.guideY.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideY = overrideY || override;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < this.states.length; i++)\n\t\t{\n\t\t\tvar state =  this.states[i];\n\t\t\t\n\t\t\tif (state != null && !this.isStateIgnored(state))\n\t\t\t{\n\t\t\t\t// Align x\n\t\t\t\tif (this.horizontal)\n\t\t\t\t{\n\t\t\t\t\tsnapX.call(this, state.getCenterX(), state, true);\n\t\t\t\t\tsnapX.call(this, state.x, state, false);\n\t\t\t\t\tsnapX.call(this, state.x + state.width, state, false);\n\t\t\t\t\t\n\t\t\t\t\t// Aligns left and right of shape to center of page\n\t\t\t\t\tif (state.cell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsnapX.call(this, state.getCenterX(), state, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Align y\n\t\t\t\tif (this.vertical)\n\t\t\t\t{\n\t\t\t\t\tsnapY.call(this, state.getCenterY(), state, true);\n\t\t\t\t\tsnapY.call(this, state.y, state, false);\n\t\t\t\t\tsnapY.call(this, state.y + state.height, state, false);\n\t\t\t\t\t\n\t\t\t\t\t// Aligns left and right of shape to center of page\n\t\t\t\t\tif (state.cell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsnapY.call(this, state.getCenterY(), state, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Moves cells to the raster if not aligned\n\t\tthis.graph.snapDelta(delta, bounds, !gridEnabled, overrideX, overrideY);\n\t\tdelta = this.getDelta(bounds, stateX, delta.x, stateY, delta.y)\n\t\t\n\t\t// Redraws the guides\n\t\tvar c = this.graph.container;\n\t\t\n\t\tif (!overrideX && this.guideX != null)\n\t\t{\n\t\t\tthis.guideX.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideX != null)\n\t\t{\n\t\t\tvar minY = null;\n        \tvar maxY = null;\n        \t\n\t\t\tif (stateX != null && bounds != null)\n\t\t\t{\n\t\t\t\tminY = Math.min(bounds.y + delta.y - this.graph.panDy, stateX.y);\n\t\t\t\tmaxY = Math.max(bounds.y + bounds.height + delta.y - this.graph.panDy, stateX.y + stateX.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (minY != null && maxY != null)\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, minY), new mxPoint(valueX, maxY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, -this.graph.panDy),\n\t\t\t\t\tnew mxPoint(valueX, c.scrollHeight - 3 - this.graph.panDy)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideX.stroke = this.getGuideColor(stateX, true);\n\t\t\tthis.guideX.node.style.visibility = 'visible';\n\t\t\tthis.guideX.redraw();\n\t\t}\n\t\t\n\t\tif (!overrideY && this.guideY != null)\n\t\t{\n\t\t\tthis.guideY.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideY != null)\n\t\t{\n\t\t\tvar minX = null;\n        \tvar maxX = null;\n        \t\n\t\t\tif (stateY != null && bounds != null)\n\t\t\t{\n\t\t\t\tminX = Math.min(bounds.x + delta.x - this.graph.panDx, stateY.x);\n\t\t\t\tmaxX = Math.max(bounds.x + bounds.width + delta.x - this.graph.panDx, stateY.x + stateY.width);\n\t\t\t}\n\t\t\t\n\t\t\tif (minX != null && maxX != null)\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(minX, valueY), new mxPoint(maxX, valueY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(-this.graph.panDx, valueY),\n\t\t\t\t\tnew mxPoint(c.scrollWidth - 3 - this.graph.panDx, valueY)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideY.stroke = this.getGuideColor(stateY, false);\n\t\t\tthis.guideY.node.style.visibility = 'visible';\n\t\t\tthis.guideY.redraw();\n\t\t}\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: getDelta\n * \n * Rounds to pixels for virtual states (eg. page guides)\n */\nmxGuide.prototype.getDelta = function(bounds, stateX, dx, stateY, dy)\n{\n\tvar s = this.graph.view.scale;\n\t\n\tif (this.rounded || (stateX != null && stateX.cell == null))\n\t{\n\t\tdx = Math.round((bounds.x + dx) / s) * s - bounds.x;\n\t}\n\n\tif (this.rounded || (stateY != null && stateY.cell == null))\n\t{\n\t\tdy = Math.round((bounds.y + dy) / s) * s - bounds.y;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n/**\n * Function: getGuideColor\n * \n * Returns the color for the given state.\n */\nmxGuide.prototype.getGuideColor = function(state, horizontal)\n{\n\treturn mxConstants.GUIDE_COLOR;\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.hide = function()\n{\n\tthis.setVisible(false);\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides the current guides.\n */\nmxGuide.prototype.setVisible = function(visible)\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys all resources that this object uses.\n */\nmxGuide.prototype.destroy = function()\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.destroy();\n\t\tthis.guideX = null;\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.destroy();\n\t\tthis.guideY = null;\n\t}\n};\n\n__mxOutput.mxGuide = typeof mxGuide !== 'undefined' ? mxGuide : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxShape\n *\n * Base class for all shapes. A shape in mxGraph is a\n * separate implementation for SVG, VML and HTML. Which\n * implementation to use is controlled by the <dialect>\n * property which is assigned from within the <mxCellRenderer>\n * when the shape is created. The dialect must be assigned\n * for a shape, and it does normally depend on the browser and\n * the confiuration of the graph (see <mxGraph> rendering hint).\n *\n * For each supported shape in SVG and VML, a corresponding\n * shape exists in mxGraph, namely for text, image, rectangle,\n * rhombus, ellipse and polyline. The other shapes are a\n * combination of these shapes (eg. label and swimlane)\n * or they consist of one or more (filled) path objects\n * (eg. actor and cylinder). The HTML implementation is\n * optional but may be required for a HTML-only view of\n * the graph.\n *\n * Custom Shapes:\n *\n * To extend from this class, the basic code looks as follows.\n * In the special case where the custom shape consists only of\n * one filled region or one filled region and an additional stroke\n * the <mxActor> and <mxCylinder> should be subclassed,\n * respectively.\n *\n * (code)\n * function CustomShape() { }\n * \n * CustomShape.prototype = new mxShape();\n * CustomShape.prototype.constructor = CustomShape; \n * (end)\n *\n * To register a custom shape in an existing graph instance,\n * one must register the shape under a new name in the graph's\n * cell renderer as follows:\n *\n * (code)\n * mxCellRenderer.registerShape('customShape', CustomShape);\n * (end)\n *\n * The second argument is the name of the constructor.\n *\n * In order to use the shape you can refer to the given name above\n * in a stylesheet. For example, to change the shape for the default\n * vertex style, the following code is used:\n *\n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'customShape';\n * (end)\n * \n * Constructor: mxShape\n *\n * Constructs a new shape.\n */\nfunction mxShape(stencil)\n{\n\tthis.stencil = stencil;\n\tthis.initStyles();\n};\n\n/**\n * Variable: dialect\n *\n * Holds the dialect in which the shape is to be painted.\n * This can be one of the DIALECT constants in <mxConstants>.\n */\nmxShape.prototype.dialect = null;\n\n/**\n * Variable: scale\n *\n * Holds the scale in which the shape is being painted.\n */\nmxShape.prototype.scale = 1;\n\n/**\n * Variable: antiAlias\n * \n * Rendering hint for configuring the canvas.\n */\nmxShape.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxShape.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: bounds\n *\n * Holds the <mxRectangle> that specifies the bounds of this shape.\n */\nmxShape.prototype.bounds = null;\n\n/**\n * Variable: points\n *\n * Holds the array of <mxPoints> that specify the points of this shape.\n */\nmxShape.prototype.points = null;\n\n/**\n * Variable: node\n *\n * Holds the outermost DOM node that represents this shape.\n */\nmxShape.prototype.node = null;\n \n/**\n * Variable: state\n * \n * Optional reference to the corresponding <mxCellState>.\n */\nmxShape.prototype.state = null;\n\n/**\n * Variable: style\n *\n * Optional reference to the style of the corresponding <mxCellState>.\n */\nmxShape.prototype.style = null;\n\n/**\n * Variable: boundingBox\n *\n * Contains the bounding box of the shape, that is, the smallest rectangle\n * that includes all pixels of the shape.\n */\nmxShape.prototype.boundingBox = null;\n\n/**\n * Variable: stencil\n *\n * Holds the <mxStencil> that defines the shape.\n */\nmxShape.prototype.stencil = null;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Event-tolerance for SVG strokes (in px). Default is 8. This is only passed\n * to the canvas in <createSvgCanvas> if <pointerEvents> is true.\n */\nmxShape.prototype.svgStrokeTolerance = 8;\n\n/**\n * Variable: pointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.pointerEvents = true;\n\n/**\n * Variable: svgPointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.svgPointerEvents = 'all';\n\n/**\n * Variable: shapePointerEvents\n * \n * Specifies if pointer events outside of shape should be handled. Default\n * is false.\n */\nmxShape.prototype.shapePointerEvents = false;\n\n/**\n * Variable: stencilPointerEvents\n * \n * Specifies if pointer events outside of stencils should be handled. Default\n * is false. Set this to true for backwards compatibility with the 1.x branch.\n */\nmxShape.prototype.stencilPointerEvents = false;\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 1.\n */\nmxShape.prototype.vmlScale = 1;\n\n/**\n * Variable: outline\n * \n * Specifies if the shape should be drawn as an outline. This disables all\n * fill colors and can be used to disable other drawing states that should\n * not be painted for outlines. Default is false. This should be set before\n * calling <apply>.\n */\nmxShape.prototype.outline = false;\n\n/**\n * Variable: visible\n * \n * Specifies if the shape is visible. Default is true.\n */\nmxShape.prototype.visible = true;\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxShape.prototype.useSvgBoundingBox = false;\n\n/**\n * Function: init\n *\n * Initializes the shape by creaing the DOM node using <create>\n * and adding it into the given container.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.init = function(container)\n{\n\tif (this.node == null)\n\t{\n\t\tthis.node = this.create(container);\n\t\t\n\t\tif (container != null)\n\t\t{\n\t\t\tcontainer.appendChild(this.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: initStyles\n *\n * Sets the styles to their default values.\n */\nmxShape.prototype.initStyles = function(container)\n{\n\tthis.strokewidth = 1;\n\tthis.rotation = 0;\n\tthis.opacity = 100;\n\tthis.fillOpacity = 100;\n\tthis.strokeOpacity = 100;\n\tthis.flipH = false;\n\tthis.flipV = false;\n};\n\n/**\n * Function: isParseVml\n * \n * Specifies if any VML should be added via insertAdjacentHtml to the DOM. This\n * is only needed in IE8 and only if the shape contains VML markup. This method\n * returns true.\n */\nmxShape.prototype.isParseVml = function()\n{\n\treturn true;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxShape.prototype.isHtmlAllowed = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Returns 0, or 0.5 if <strokewidth> % 2 == 1.\n */\nmxShape.prototype.getSvgScreenOffset = function()\n{\n\tvar sw = this.stencil && this.stencil.strokewidth != 'inherit' ? Number(this.stencil.strokewidth) : this.strokewidth;\n\t\n\treturn (mxUtils.mod(Math.max(1, Math.round(sw * this.scale)), 2) == 1) ? 0.5 : 0;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM node(s) for the shape in\n * the given container. This implementation invokes\n * <createSvg>, <createHtml> or <createVml> depending\n * on the <dialect> and style settings.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.create = function(container)\n{\n\tvar node = null;\n\t\n\tif (container != null && container.ownerSVGElement != null)\n\t{\n\t\tnode = this.createSvg(container);\n\t}\n\telse if (document.documentMode == 8 || !mxClient.IS_VML ||\n\t\t(this.dialect != mxConstants.DIALECT_VML && this.isHtmlAllowed()))\n\t{\n\t\tnode = this.createHtml(container);\n\t}\n\telse\n\t{\n\t\tnode = this.createVml(container);\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.createSvg = function()\n{\n\treturn document.createElementNS(mxConstants.NS_SVG, 'g');\n};\n\n/**\n * Function: createVml\n *\n * Creates and returns the VML node to represent this shape.\n */\nmxShape.prototype.createVml = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: reconfigure\n *\n * Reconfigures this shape. This will update the colors etc in\n * addition to the bounds or points.\n */\nmxShape.prototype.reconfigure = function()\n{\n\tthis.redraw();\n};\n\n/**\n * Function: redraw\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.redraw = function()\n{\n\tthis.updateBoundsFromPoints();\n\t\n\tif (this.visible && this.checkBounds())\n\t{\n\t\tthis.node.style.visibility = 'visible';\n\t\tthis.clear();\n\t\t\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.redrawHtmlShape();\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tthis.redrawShape();\n\t\t}\n\n\t\tthis.updateBoundingBox();\n\t}\n\telse\n\t{\n\t\tthis.node.style.visibility = 'hidden';\n\t\tthis.boundingBox = null;\n\t}\n};\n\n/**\n * Function: clear\n * \n * Removes all child nodes and resets all CSS.\n */\nmxShape.prototype.clear = function()\n{\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\twhile (this.node.lastChild != null)\n\t\t{\n\t\t\tthis.node.removeChild(this.node.lastChild);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.node.style.cssText = 'position:absolute;' + ((this.cursor != null) ?\n\t\t\t('cursor:' + this.cursor + ';') : '');\n\t\tthis.node.innerHTML = '';\n\t}\n};\n\n/**\n * Function: updateBoundsFromPoints\n * \n * Updates the bounds based on the points.\n */\nmxShape.prototype.updateBoundsFromPoints = function()\n{\n\tvar pts = this.points;\n\t\n\tif (pts != null && pts.length > 0 && pts[0] != null)\n\t{\n\t\tthis.bounds = new mxRectangle(Number(pts[0].x), Number(pts[0].y), 1, 1);\n\t\t\n\t\tfor (var i = 1; i < this.points.length; i++)\n\t\t{\n\t\t\tif (pts[i] != null)\n\t\t\t{\n\t\t\t\tthis.bounds.add(new mxRectangle(Number(pts[i].x), Number(pts[i].y), 1, 1));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the <mxRectangle> for the label bounds of this shape, based on the\n * given scaled and translated bounds of the shape. This method should not\n * change the rectangle in-place. This implementation returns the given rect.\n */\nmxShape.prototype.getLabelBounds = function(rect)\n{\n\tvar d = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar bounds = rect;\n\t\n\t// Normalizes argument for getLabelMargins hook\n\tif (d != mxConstants.DIRECTION_SOUTH && d != mxConstants.DIRECTION_NORTH &&\n\t\tthis.state != null && this.state.text != null &&\n\t\tthis.state.text.isPaintBoundsInverted())\n\t{\n\t\tbounds = bounds.clone();\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\t\n\tvar m = this.getLabelMargins(bounds);\n\t\n\tif (m != null)\n\t{\n\t\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, false) == '1';\n\t\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, false) == '1';\n\t\t\n\t\t// Handles special case for vertical labels\n\t\tif (this.state != null && this.state.text != null &&\n\t\t\tthis.state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.height;\n\t\t\tm.height = m.width;\n\t\t\tm.width = m.y;\n\t\t\tm.y = tmp;\n\n\t\t\ttmp = flipH;\n\t\t\tflipH = flipV;\n\t\t\tflipV = tmp;\n\t\t}\n\t\t\n\t\treturn mxUtils.getDirectedBounds(rect, m, this.style, flipH, flipV);\n\t}\n\t\n\treturn rect;\n};\n\n/**\n * Function: getLabelMargins\n * \n * Returns the scaled top, left, bottom and right margin to be used for\n * computing the label bounds as an <mxRectangle>, where the bottom and right\n * margin are defined in the width and height of the rectangle, respectively.\n */\nmxShape.prototype.getLabelMargins= function(rect)\n{\n\treturn null;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxShape.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height) &&\n\t\t\tthis.bounds.width > 0 && this.bounds.height > 0);\n};\n\n/**\n * Function: createVmlGroup\n *\n * Returns the temporary element used for rendering in IE8 standards mode.\n */\nmxShape.prototype.createVmlGroup = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\tnode.style.width = this.node.style.width;\n\tnode.style.height = this.node.style.height;\n\t\n\treturn node;\n};\n\n/**\n * Function: redrawShape\n *\n * Updates the SVG or VML shape.\n */\nmxShape.prototype.redrawShape = function()\n{\n\tvar canvas = this.createCanvas();\n\t\n\tif (canvas != null)\n\t{\n\t\t// Specifies if events should be handled\n\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\tthis.beforePaint(canvas);\n\t\tthis.paint(canvas);\n\t\tthis.afterPaint(canvas);\n\t\n\t\tif (this.node != canvas.root)\n\t\t{\n\t\t\t// Forces parsing in IE8 standards mode - slow! avoid\n\t\t\tthis.node.insertAdjacentHTML('beforeend', canvas.root.outerHTML);\n\t\t}\n\t\n\t\tif (this.node.nodeName == 'DIV' && document.documentMode == 8)\n\t\t{\n\t\t\t// Makes DIV transparent to events for IE8 in IE8 standards\n\t\t\t// mode (Note: Does not work for IE9 in IE8 standards mode\n\t\t\t// and not for IE11 in enterprise mode)\n\t\t\tthis.node.style.filter = '';\n\t\t\t\n\t\t\t// Adds event transparency in IE8 standards\n\t\t\tmxUtils.addTransparentBackgroundFilter(this.node);\n\t\t}\n\t\t\n\t\tthis.destroyCanvas(canvas);\n\t}\n};\n\n/**\n * Function: createCanvas\n * \n * Creates a new canvas for drawing this shape. May return null.\n */\nmxShape.prototype.createCanvas = function()\n{\n\tvar canvas = null;\n\t\n\t// LATER: Check if reusing existing DOM nodes improves performance\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\tcanvas = this.createSvgCanvas();\n\t}\n\telse if (mxClient.IS_VML)\n\t{\n\t\tthis.updateVmlContainer();\n\t\tcanvas = this.createVmlCanvas();\n\t}\n\t\n\tif (canvas != null && this.outline)\n\t{\n\t\tcanvas.setStrokeWidth(this.strokewidth);\n\t\tcanvas.setStrokeColor(this.stroke);\n\t\t\n\t\tif (this.isDashed != null)\n\t\t{\n\t\t\tcanvas.setDashed(this.isDashed);\n\t\t}\n\t\t\n\t\tcanvas.setStrokeWidth = function() {};\n\t\tcanvas.setStrokeColor = function() {};\n\t\tcanvas.setFillColor = function() {};\n\t\tcanvas.setGradient = function() {};\n\t\tcanvas.setDashed = function() {};\n\t\tcanvas.text = function() {};\n\t}\n\n\treturn canvas;\n};\n\n/**\n * Function: createSvgCanvas\n * \n * Creates and returns an <mxSvgCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createSvgCanvas = function()\n{\n\tvar canvas = new mxSvgCanvas2D(this.node, false);\n\tcanvas.strokeTolerance = (this.pointerEvents) ? this.svgStrokeTolerance : 0;\n\tcanvas.pointerEventsValue = this.svgPointerEvents;\n\tvar off = this.getSvgScreenOffset();\n\n\tif (off != 0)\n\t{\n\t\tthis.node.setAttribute('transform', 'translate(' + off + ',' + off + ')');\n\t}\n\telse\n\t{\n\t\tthis.node.removeAttribute('transform');\n\t}\n\n\tcanvas.minStrokeWidth = this.minSvgStrokeWidth;\n\t\n\tif (!this.antiAlias)\n\t{\n\t\t// Rounds all numbers in the SVG output to integers\n\t\tcanvas.format = function(value)\n\t\t{\n\t\t\treturn Math.round(parseFloat(value));\n\t\t};\n\t}\n\t\n\treturn canvas;\n};\n\n/**\n * Function: createVmlCanvas\n * \n * Creates and returns an <mxVmlCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createVmlCanvas = function()\n{\n\t// Workaround for VML rendering bug in IE8 standards mode\n\tvar node = (document.documentMode == 8 && this.isParseVml()) ? this.createVmlGroup() : this.node;\n\tvar canvas = new mxVmlCanvas2D(node, false);\n\t\n\tif (node.tagUrn != '')\n\t{\n\t\tvar w = Math.max(1, Math.round(this.bounds.width));\n\t\tvar h = Math.max(1, Math.round(this.bounds.height));\n\t\tnode.coordsize = (w * this.vmlScale) + ',' + (h * this.vmlScale);\n\t\tcanvas.scale(this.vmlScale);\n\t\tcanvas.vmlScale = this.vmlScale;\n\t}\n\n\t// Painting relative to top, left shape corner\n\tvar s = this.scale;\n\tcanvas.translate(-Math.round(this.bounds.x / s), -Math.round(this.bounds.y / s));\n\t\n\treturn canvas;\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Updates the bounds of the VML container.\n */\nmxShape.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tvar w = Math.max(1, Math.round(this.bounds.width));\n\tvar h = Math.max(1, Math.round(this.bounds.height));\n\tthis.node.style.width = w + 'px';\n\tthis.node.style.height = h + 'px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.redrawHtmlShape = function()\n{\n\t// LATER: Refactor methods\n\tthis.updateHtmlBounds(this.node);\n\tthis.updateHtmlFilters(this.node);\n\tthis.updateHtmlColors(this.node);\n};\n\n/**\n * Function: updateHtmlFilters\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlFilters = function(node)\n{\n\tvar f = '';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tf += 'alpha(opacity=' + (this.opacity) + ')';\n\t}\n\t\n\tif (this.isShadow)\n\t{\n\t\t// FIXME: Cannot implement shadow transparency with filter\n\t\tf += 'progid:DXImageTransform.Microsoft.dropShadow (' +\n\t\t\t'OffX=\\'' + Math.round(mxConstants.SHADOW_OFFSET_X * this.scale) + '\\', ' +\n\t\t\t'OffY=\\'' + Math.round(mxConstants.SHADOW_OFFSET_Y * this.scale) + '\\', ' +\n\t\t\t'Color=\\'' + mxConstants.VML_SHADOWCOLOR + '\\')';\n\t}\n\t\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar start = this.fill;\n\t\tvar end = this.gradient;\n\t\tvar type = '0';\n\t\t\n\t\tvar lookup = {east:0,south:1,west:2,north:3};\n\t\tvar dir = (this.direction != null) ? lookup[this.direction] : 0;\n\t\t\n\t\tif (this.gradientDirection != null)\n\t\t{\n\t\t\tdir = mxUtils.mod(dir + lookup[this.gradientDirection] - 1, 4);\n\t\t}\n\n\t\tif (dir == 1)\n\t\t{\n\t\t\ttype = '1';\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 2)\n\t\t{\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 3)\n\t\t{\n\t\t\ttype = '1';\n\t\t}\n\t\t\n\t\tf += 'progid:DXImageTransform.Microsoft.gradient(' +\n\t\t\t'startColorStr=\\'' + start + '\\', endColorStr=\\'' + end +\n\t\t\t'\\', gradientType=\\'' + type + '\\')';\n\t}\n\n\tnode.style.filter = f;\n};\n\n/**\n * Function: updateHtmlColors\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlColors = function(node)\n{\n\tvar color = this.stroke;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.borderColor = color;\n\n\t\tif (this.isDashed)\n\t\t{\n\t\t\tnode.style.borderStyle = 'dashed';\n\t\t}\n\t\telse if (this.strokewidth > 0)\n\t\t{\n\t\t\tnode.style.borderStyle = 'solid';\n\t\t}\n\n\t\tnode.style.borderWidth = Math.max(1, Math.ceil(this.strokewidth * this.scale)) + 'px';\n\t}\n\telse\n\t{\n\t\tnode.style.borderWidth = '0px';\n\t}\n\n\tcolor = (this.outline) ? null : this.fill;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.backgroundColor = color;\n\t\tnode.style.backgroundImage = 'none';\n\t}\n\telse if (this.pointerEvents)\n\t{\n\t\t node.style.backgroundColor = 'transparent';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tmxUtils.addTransparentBackgroundFilter(node);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(node);\n\t}\n};\n\n/**\n * Function: updateHtmlBounds\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlBounds = function(node)\n{\n\tvar sw = (document.documentMode >= 9) ? 0 : Math.ceil(this.strokewidth * this.scale);\n\tnode.style.borderWidth = Math.max(1, sw) + 'px';\n\tnode.style.overflow = 'hidden';\n\t\n\tnode.style.left = Math.round(this.bounds.x - sw / 2) + 'px';\n\tnode.style.top = Math.round(this.bounds.y - sw / 2) + 'px';\n\n\tif (document.compatMode == 'CSS1Compat')\n\t{\n\t\tsw = -sw;\n\t}\n\t\n\tnode.style.width = Math.round(Math.max(0, this.bounds.width + sw)) + 'px';\n\tnode.style.height = Math.round(Math.max(0, this.bounds.height + sw)) + 'px';\n};\n\n/**\n * Function: destroyCanvas\n * \n * Destroys the given canvas which was used for drawing. This implementation\n * increments the reference counts on all shared gradients used in the canvas.\n */\nmxShape.prototype.destroyCanvas = function(canvas)\n{\n\t// Manages reference counts\n\tif (canvas instanceof mxSvgCanvas2D)\n\t{\n\t\t// Increments ref counts\n\t\tfor (var key in canvas.gradients)\n\t\t{\n\t\t\tvar gradient = canvas.gradients[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.releaseSvgGradients(this.oldGradients);\n\t\tthis.oldGradients = canvas.gradients;\n\t}\n};\n\n/**\n * Function: beforePaint\n * \n * Invoked before paint is called.\n */\nmxShape.prototype.beforePaint = function(c) { }\n\n/**\n * Function: afterPaint\n * \n * Invokes after paint was called.\n */\nmxShape.prototype.afterPaint = function(c) { }\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxShape.prototype.paint = function(c)\n{\n\tvar strokeDrawn = false;\n\t\n\tif (c != null && this.outline)\n\t{\n\t\tvar stroke = c.stroke;\n\t\t\n\t\tc.stroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tstroke.apply(this, arguments);\n\t\t};\n\n\t\tvar fillAndStroke = c.fillAndStroke;\n\t\t\n\t\tc.fillAndStroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tfillAndStroke.apply(this, arguments);\n\t\t};\n\t}\n\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\tif (this.isPaintBoundsInverted())\n\t{\n\t\tvar t = (w - h) / 2;\n\t\tx += t;\n\t\ty -= t;\n\t\tvar tmp = w;\n\t\tw = h;\n\t\th = tmp;\n\t}\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\t// Adds background rectangle to capture events\n\tvar bg = null;\n\t\n\tif ((this.stencil == null && this.points == null && this.shapePointerEvents) ||\n\t\t(this.stencil != null && this.stencilPointerEvents))\n\t{\n\t\tvar bb = this.createBoundingBox();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tbg = this.createTransparentSvgRectangle(bb.x, bb.y, bb.width, bb.height);\n\t\t\tthis.node.appendChild(bg);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar rect = c.createRect('rect', bb.x / s, bb.y / s, bb.width / s, bb.height / s);\n\t\t\trect.appendChild(c.createTransparentFill());\n\t\t\trect.stroked = 'false';\n\t\t\tc.root.appendChild(rect);\n\t\t}\n\t}\n\n\tif (this.stencil != null)\n\t{\n\t\tthis.stencil.drawShape(c, this, x, y, w, h);\n\t}\n\telse\n\t{\n\t\t// Stencils have separate strokewidth\n\t\tc.setStrokeWidth(this.strokewidth);\n\t\t\n\t\tif (this.points != null)\n\t\t{\n\t\t\t// Paints edge shape\n\t\t\tvar pts = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t\t{\n\t\t\t\tif (this.points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tpts.push(new mxPoint(this.points[i].x / s, this.points[i].y / s));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.paintEdgeShape(c, pts);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Paints vertex shape\n\t\t\tthis.paintVertexShape(c, x, y, w, h);\n\t\t}\n\t}\n\t\n\tif (bg != null && c.state != null && c.state.transform != null)\n\t{\n\t\tbg.setAttribute('transform', c.state.transform);\n\t}\n\t\n\t// Draws highlight rectangle if no stroke was used\n\tif (c != null && this.outline && !strokeDrawn)\n\t{\n\t\tc.rect(x, y, w, h);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxShape.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tvar dash = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tdash = this.style['dashPattern'];\t\t\n\t}\n\n\tc.setAlpha(this.opacity / 100);\n\tc.setFillAlpha(this.fillOpacity / 100);\n\tc.setStrokeAlpha(this.strokeOpacity / 100);\n\n\t// Sets alpha, colors and gradients\n\tif (this.isShadow != null)\n\t{\n\t\tc.setShadow(this.isShadow);\n\t}\n\t\n\t// Dash pattern\n\tif (this.isDashed != null)\n\t{\n\t\tc.setDashed(this.isDashed, (this.style != null) ?\n\t\t\tmxUtils.getValue(this.style, mxConstants.STYLE_FIX_DASH, false) == 1 : false);\n\t}\n\n\tif (dash != null)\n\t{\n\t\tc.setDashPattern(dash);\n\t}\n\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar b = this.getGradientBounds(c, x, y, w, h);\n\t\tc.setGradient(this.fill, this.gradient, b.x, b.y, b.width, b.height, this.gradientDirection);\n\t}\n\telse\n\t{\n\t\tc.setFillColor(this.fill);\n\t}\n\n\tc.setStrokeColor(this.stroke);\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxShape.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\treturn new mxRectangle(x, y, w, h);\n};\n\n/**\n * Function: updateTransform\n * \n * Sets the scale and rotation on the given canvas.\n */\nmxShape.prototype.updateTransform = function(c, x, y, w, h)\n{\n\t// NOTE: Currently, scale is implemented in state and canvas. This will\n\t// move to canvas in a later version, so that the states are unscaled\n\t// and untranslated and do not need an update after zooming or panning.\n\tc.scale(this.scale);\n\tc.rotate(this.getShapeRotation(), this.flipH, this.flipV, x + w / 2, y + h / 2);\n};\n\n/**\n * Function: paintVertexShape\n * \n * Paints the vertex shape.\n */\nmxShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tthis.paintBackground(c, x, y, w, h);\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintForeground(c, x, y, w, h);\n\t}\n};\n\n/**\n * Function: paintBackground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintBackground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintForeground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintForeground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintEdgeShape\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintEdgeShape = function(c, pts) { };\n\n/**\n * Function: getArcSize\n * \n * Returns the arc size for the given dimension.\n */\nmxShape.prototype.getArcSize = function(w, h)\n{\n\tvar r = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\tr = Math.min(w * f, h * f);\n\t}\n\t\n\treturn r;\n};\n\n/**\n * Function: paintGlassEffect\n * \n * Paints the glass gradient effect.\n */\nmxShape.prototype.paintGlassEffect = function(c, x, y, w, h, arc)\n{\n\tvar sw = Math.ceil(this.strokewidth / 2);\n\tvar size = 0.4;\n\t\n\tc.setGradient('#ffffff', '#ffffff', x, y, w, h * 0.6, 'south', 0.9, 0.1);\n\tc.begin();\n\tarc += 2 * sw;\n\t\t\n\tif (this.isRounded)\n\t{\n\t\tc.moveTo(x - sw + arc, y - sw);\n\t\tc.quadTo(x - sw, y - sw, x - sw, y - sw + arc);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw + arc);\n\t\tc.quadTo(x + w + sw, y - sw, x + w + sw - arc, y - sw);\n\t}\n\telse\n\t{\n\t\tc.moveTo(x - sw, y - sw);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw);\n\t}\n\t\n\tc.close();\n\tc.fill();\n};\n\n/**\n * Function: addPoints\n * \n * Paints the given points with rounded corners.\n */\nmxShape.prototype.addPoints = function(c, pts, rounded, arcSize, close, exclude, initialMove)\n{\n\tif (pts != null && pts.length > 0)\n\t{\n\t\tinitialMove = (initialMove != null) ? initialMove : true;\n\t\tvar pe = pts[pts.length - 1];\n\t\t\n\t\t// Adds virtual waypoint in the center between start and end point\n\t\tif (close && rounded)\n\t\t{\n\t\t\tpts = pts.slice();\n\t\t\tvar p0 = pts[0];\n\t\t\tvar wp = new mxPoint(pe.x + (p0.x - pe.x) / 2, pe.y + (p0.y - pe.y) / 2);\n\t\t\tpts.splice(0, 0, wp);\n\t\t}\n\t\n\t\tvar pt = pts[0];\n\t\tvar i = 1;\n\t\n\t\t// Draws the line segments\n\t\tif (initialMove)\n\t\t{\n\t\t\tc.moveTo(pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pt.x, pt.y);\n\t\t}\n\t\t\n\t\twhile (i < ((close) ? pts.length : pts.length - 1))\n\t\t{\n\t\t\tvar tmp = pts[mxUtils.mod(i, pts.length)];\n\t\t\tvar dx = pt.x - tmp.x;\n\t\t\tvar dy = pt.y - tmp.y;\n\t\n\t\t\tif (rounded && (dx != 0 || dy != 0) && (exclude == null || mxUtils.indexOf(exclude, i - 1) < 0))\n\t\t\t{\n\t\t\t\t// Draws a line from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the last point\n\t\t\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tvar nx1 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny1 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x1 = tmp.x + nx1;\n\t\t\t\tvar y1 = tmp.y + ny1;\n\t\t\t\tc.lineTo(x1, y1);\n\t\n\t\t\t\t// Draws a curve from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the next point\n\t\t\t\tvar next = pts[mxUtils.mod(i + 1, pts.length)];\n\t\t\t\t\n\t\t\t\t// Uses next non-overlapping point\n\t\t\t\twhile (i < pts.length - 2 && Math.round(next.x - tmp.x) == 0 && Math.round(next.y - tmp.y) == 0)\n\t\t\t\t{\n\t\t\t\t\tnext = pts[mxUtils.mod(i + 2, pts.length)];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdx = next.x - tmp.x;\n\t\t\t\tdy = next.y - tmp.y;\n\t\n\t\t\t\tdist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\t\tvar nx2 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny2 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x2 = tmp.x + nx2;\n\t\t\t\tvar y2 = tmp.y + ny2;\n\t\n\t\t\t\tc.quadTo(tmp.x, tmp.y, x2, y2);\n\t\t\t\ttmp = new mxPoint(x2, y2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.lineTo(tmp.x, tmp.y);\n\t\t\t}\n\t\n\t\t\tpt = tmp;\n\t\t\ti++;\n\t\t}\n\t\n\t\tif (close)\n\t\t{\n\t\t\tc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pe.x, pe.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxShape.prototype.resetStyles = function()\n{\n\tthis.initStyles();\n\n\tthis.spacing = 0;\n\t\n\tdelete this.fill;\n\tdelete this.gradient;\n\tdelete this.gradientDirection;\n\tdelete this.stroke;\n\tdelete this.startSize;\n\tdelete this.endSize;\n\tdelete this.startArrow;\n\tdelete this.endArrow;\n\tdelete this.direction;\n\tdelete this.isShadow;\n\tdelete this.isDashed;\n\tdelete this.isRounded;\n\tdelete this.glass;\n};\n\n/**\n * Function: apply\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_FILLCOLOR> => fill\n * - <mxConstants.STYLE_GRADIENTCOLOR> => gradient\n * - <mxConstants.STYLE_GRADIENT_DIRECTION> => gradientDirection\n * - <mxConstants.STYLE_OPACITY> => opacity\n * - <mxConstants.STYLE_FILL_OPACITY> => fillOpacity\n * - <mxConstants.STYLE_STROKE_OPACITY> => strokeOpacity\n * - <mxConstants.STYLE_STROKECOLOR> => stroke\n * - <mxConstants.STYLE_STROKEWIDTH> => strokewidth\n * - <mxConstants.STYLE_SHADOW> => isShadow\n * - <mxConstants.STYLE_DASHED> => isDashed\n * - <mxConstants.STYLE_SPACING> => spacing\n * - <mxConstants.STYLE_STARTSIZE> => startSize\n * - <mxConstants.STYLE_ENDSIZE> => endSize\n * - <mxConstants.STYLE_ROUNDED> => isRounded\n * - <mxConstants.STYLE_STARTARROW> => startArrow\n * - <mxConstants.STYLE_ENDARROW> => endArrow\n * - <mxConstants.STYLE_ROTATION> => rotation\n * - <mxConstants.STYLE_DIRECTION> => direction\n * - <mxConstants.STYLE_GLASS> => glass\n *\n * This keeps a reference to the <style>. If you need to keep a reference to\n * the cell, you can override this method and store a local reference to\n * state.cell or the <mxCellState> itself. If <outline> should be true, make\n * sure to set it before calling this method.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxShape.prototype.apply = function(state)\n{\n\tthis.state = state;\n\tthis.style = state.style;\n\n\tif (this.style != null)\n\t{\n\t\tthis.fill = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, this.fill);\n\t\tthis.gradient = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENTCOLOR, this.gradient);\n\t\tthis.gradientDirection = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENT_DIRECTION, this.gradientDirection);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_OPACITY, this.opacity);\n\t\tthis.fillOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_FILL_OPACITY, this.fillOpacity);\n\t\tthis.strokeOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_STROKE_OPACITY, this.strokeOpacity);\n\t\tthis.stroke = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, this.stroke);\n\t\tthis.strokewidth = mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth);\n\t\tthis.spacing = mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing);\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, this.startSize);\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, this.endSize);\n\t\tthis.startArrow = mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, this.startArrow);\n\t\tthis.endArrow = mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, this.endArrow);\n\t\tthis.rotation = mxUtils.getValue(this.style, mxConstants.STYLE_ROTATION, this.rotation);\n\t\tthis.direction = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, this.direction);\n\t\tthis.flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\tthis.flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\t\n\t\t// Legacy support for stencilFlipH/V\n\t\tif (this.stencil != null)\n\t\t{\n\t\t\tthis.flipH = mxUtils.getValue(this.style, 'stencilFlipH', 0) == 1 || this.flipH;\n\t\t\tthis.flipV = mxUtils.getValue(this.style, 'stencilFlipV', 0) == 1 || this.flipV;\n\t\t}\n\t\t\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH || this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tvar tmp = this.flipH;\n\t\t\tthis.flipH = this.flipV;\n\t\t\tthis.flipV = tmp;\n\t\t}\n\n\t\tthis.isShadow = mxUtils.getValue(this.style, mxConstants.STYLE_SHADOW, this.isShadow) == 1;\n\t\tthis.isDashed = mxUtils.getValue(this.style, mxConstants.STYLE_DASHED, this.isDashed) == 1;\n\t\tthis.isRounded = mxUtils.getValue(this.style, mxConstants.STYLE_ROUNDED, this.isRounded) == 1;\n\t\tthis.glass = mxUtils.getValue(this.style, mxConstants.STYLE_GLASS, this.glass) == 1;\n\t\t\n\t\tif (this.fill == mxConstants.NONE)\n\t\t{\n\t\t\tthis.fill = null;\n\t\t}\n\n\t\tif (this.gradient == mxConstants.NONE)\n\t\t{\n\t\t\tthis.gradient = null;\n\t\t}\n\n\t\tif (this.stroke == mxConstants.NONE)\n\t\t{\n\t\t\tthis.stroke = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the cursor on the given shape.\n *\n * Parameters:\n *\n * cursor - The cursor to be used.\n */\nmxShape.prototype.setCursor = function(cursor)\n{\n\tif (cursor == null)\n\t{\n\t\tcursor = '';\n\t}\n\t\n\tthis.cursor = cursor;\n\n\tif (this.node != null)\n\t{\n\t\tthis.node.style.cursor = cursor;\n\t}\n};\n\n/**\n * Function: getCursor\n * \n * Returns the current cursor.\n */\nmxShape.prototype.getCursor = function()\n{\n\treturn this.cursor;\n};\n\n/**\n * Function: isRoundable\n * \n * Hook for subclassers.\n */\nmxShape.prototype.isRoundable = function()\n{\n\treturn false;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxShape.prototype.updateBoundingBox = function()\n{\n\t// Tries to get bounding box from SVG subsystem\n\t// LATER: Use getBoundingClientRect for fallback in VML\n\tif (this.useSvgBoundingBox && this.node != null && this.node.ownerSVGElement != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar b = this.node.getBBox();\n\t\n\t\t\tif (b.width > 0 && b.height > 0)\n\t\t\t{\n\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\n\t\t\t\t// Adds strokeWidth\n\t\t\t\tthis.boundingBox.grow(this.strokewidth * this.scale / 2);\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tcatch(e)\n\t\t{\n\t\t\t// fallback to code below\n\t\t}\n\t}\n\n\tif (this.bounds != null)\n\t{\n\t\tvar bbox = this.createBoundingBox();\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tthis.augmentBoundingBox(bbox);\n\t\t\tvar rot = this.getShapeRotation();\n\t\t\t\n\t\t\tif (rot != 0)\n\t\t\t{\n\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, rot);\n\t\t\t}\n\t\t}\n\n\t\tthis.boundingBox = bbox;\n\t}\n};\n\n/**\n * Function: createBoundingBox\n *\n * Returns a new rectangle that represents the bounding box of the bare shape\n * with no shadows or strokewidths.\n */\nmxShape.prototype.createBoundingBox = function()\n{\n\tvar bb = this.bounds.clone();\n\n\tif ((this.stencil != null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\tthis.direction == mxConstants.DIRECTION_SOUTH)) || this.isPaintBoundsInverted())\n\t{\n\t\tbb.rotate90();\n\t}\n\t\n\treturn bb;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxShape.prototype.augmentBoundingBox = function(bbox)\n{\n\tif (this.isShadow)\n\t{\n\t\tbbox.width += Math.ceil(mxConstants.SHADOW_OFFSET_X * this.scale);\n\t\tbbox.height += Math.ceil(mxConstants.SHADOW_OFFSET_Y * this.scale);\n\t}\n\t\n\t// Adds strokeWidth\n\tbbox.grow(this.strokewidth * this.scale / 2);\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns true if the bounds should be inverted.\n */\nmxShape.prototype.isPaintBoundsInverted = function()\n{\n\t// Stencil implements inversion via aspect\n\treturn this.stencil == null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation from the style.\n */\nmxShape.prototype.getRotation = function()\n{\n\treturn (this.rotation != null) ? this.rotation : 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label.\n */\nmxShape.prototype.getTextRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) != 1)\n\t{\n\t\trot += mxText.prototype.verticalTextRotation;\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns the actual rotation of the shape.\n */\nmxShape.prototype.getShapeRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (this.direction != null)\n\t{\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\trot += 270;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\trot += 180;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\trot += 90;\n\t\t}\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: createTransparentSvgRectangle\n * \n * Adds a transparent rectangle that catches all events.\n */\nmxShape.prototype.createTransparentSvgRectangle = function(x, y, w, h)\n{\n\tvar rect = document.createElementNS(mxConstants.NS_SVG, 'rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\trect.setAttribute('fill', 'none');\n\trect.setAttribute('stroke', 'none');\n\trect.setAttribute('pointer-events', 'all');\n\t\n\treturn rect;\n};\n\n/**\n * Function: setTransparentBackgroundImage\n * \n * Sets a transparent background CSS style to catch all events.\n * \n * Paints the line shape.\n */\nmxShape.prototype.setTransparentBackgroundImage = function(node)\n{\n\tnode.style.backgroundImage = 'url(\\'' + mxClient.imageBasePath + '/transparent.gif\\')';\n};\n\n/**\n * Function: releaseSvgGradients\n * \n * Paints the line shape.\n */\nmxShape.prototype.releaseSvgGradients = function(grads)\n{\n\tif (grads != null)\n\t{\n\t\tfor (var key in grads)\n\t\t{\n\t\t\tvar gradient = grads[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) - 1;\n\t\t\t\t\n\t\t\t\tif (gradient.mxRefCount == 0 && gradient.parentNode != null)\n\t\t\t\t{\n\t\t\t\t\tgradient.parentNode.removeChild(gradient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the shape by removing it from the DOM and releasing the DOM\n * node associated with the shape using <mxEvent.release>.\n */\nmxShape.prototype.destroy = function()\n{\n\tif (this.node != null)\n\t{\n\t\tmxEvent.release(this.node);\n\t\t\n\t\tif (this.node.parentNode != null)\n\t\t{\n\t\t\tthis.node.parentNode.removeChild(this.node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n\t\n\t// Decrements refCount and removes unused\n\tthis.releaseSvgGradients(this.oldGradients);\n\tthis.oldGradients = null;\n};\n\n__mxOutput.mxShape = typeof mxShape !== 'undefined' ? mxShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStencil\n *\n * Implements a generic shape which is based on a XML node as a description.\n * \n * shape:\n * \n * The outer element is *shape*, that has attributes:\n * \n * - \"name\", string, required. The stencil name that uniquely identifies the shape.\n * - \"w\" and \"h\" are optional decimal view bounds. This defines your co-ordinate\n * system for the graphics operations in the shape. The default is 100,100.\n * - \"aspect\", optional string. Either \"variable\", the default, or \"fixed\". Fixed\n * means always render the shape with the aspect ratio defined by the ratio w/h.\n * Variable causes the ratio to match that of the geometry of the current vertex.\n * - \"strokewidth\", optional string. Either an integer or the string \"inherit\".\n * \"inherit\" indicates that the strokeWidth of the cell is only changed on scaling,\n * not on resizing. Default is \"1\".\n * If numeric values are used, the strokeWidth of the cell is changed on both\n * scaling and resizing and the value defines the multiple that is applied to\n * the width.\n * \n * connections:\n * \n * If you want to define specific fixed connection points on the shape use the\n * *connections* element. Each *constraint* element within connections defines\n * a fixed connection point on the shape. Constraints have attributes:\n * \n * - \"perimeter\", required. 1 or 0. 0 sets the connection point where specified\n * by x,y. 1 Causes the position of the connection point to be extrapolated from\n * the center of the shape, through x,y to the point of intersection with the\n * perimeter of the shape.\n * - \"x\" and \"y\" are the position of the fixed point relative to the bounds of\n * the shape. They can be automatically adjusted if perimeter=1. So, (0,0) is top\n * left, (0.5,0.5) the center, (1,0.5) the center of the right hand edge of the\n * bounds, etc. Values may be less than 0 or greater than 1 to be positioned\n * outside of the shape.\n * - \"name\", optional string. A unique identifier for the port on the shape.\n * \n * background and foreground:\n * \n * The path of the graphics drawing is split into two elements, *foreground* and\n * *background*. The split is to define which part any shadow applied to the shape\n * is derived from (the background). This, generally, means the background is the\n * line tracing of the outside of the shape, but not always.\n * \n * Any stroke, fill or fillstroke of a background must be the first element of the\n * foreground element, they must not be used within *background*. If the background\n * is empty, this is not required.\n * \n * Because the background cannot have any fill or stroke, it can contain only one\n * *path*, *rect*, *roundrect* or *ellipse* element (or none). It can also not\n * include *image*, *text* or *include-shape*.\n * \n * Note that the state, styling and drawing in mxGraph stencils is very close in\n * design to that of HTML 5 canvas. Tutorials on this subject, if you're not\n * familiar with the topic, will give a good high-level introduction to the\n * concepts used.\n * \n * State:\n * \n * Rendering within the foreground and background elements has the concept of\n * state. There are two types of operations other than state save/load, styling\n * and drawing. The styling operations change the current state, so you can save\n * the current state with <save/> and pull the last saved state from the state\n * stack using <restore/>.\n * \n * Styling:\n * \n * The elements that change colors within the current state all take a hash\n * prefixed hex color code (\"#FFEA80\").\n * \n * - *strokecolor*, this sets the color that drawing paths will be rendered in\n * when a stroke or fillstroke command is issued.\n * - *fillcolor*, this sets the color that the inside of closed paths will be\n * rendered in when a fill or fillstroke command is issued.\n * - *fontcolor*, this sets the color that fonts are rendered in when text is drawn.\n * \n * *alpha* defines the degree of transparency used between 1.0 for fully opaque\n * and 0.0 for fully transparent.\n * \n * *fillalpha* defines the degree of fill transparency used between 1.0 for fully\n * opaque and 0.0 for fully transparent.\n * \n * *strokealpha* defines the degree of stroke transparency used between 1.0 for\n * fully opaque and 0.0 for fully transparent.\n * \n * *strokewidth* defines the integer thickness of drawing elements rendered by\n * stroking. Use fixed=\"1\" to apply the value as-is, without scaling.\n * \n * *dashed* is \"1\" for dashing enabled and \"0\" for disabled.\n * \n * When *dashed* is enabled the current dash pattern, defined by *dashpattern*,\n * is used on strokes. dashpattern is a sequence of space separated \"on, off\"\n * lengths that define what distance to paint the stroke for, then what distance\n * to paint nothing for, repeat... The default is \"3 3\". You could define a more\n * complex pattern with \"5 3 2 6\", for example. Generally, it makes sense to have\n * an even number of elements in the dashpattern, but that's not required.\n * \n * *linejoin*, *linecap* and *miterlimit* are best explained by the Mozilla page\n * on Canvas styling (about halfway down). The values are all the same except we\n * use \"flat\" for linecap, instead of Canvas' \"butt\".\n * \n * For font styling there are.\n * \n * - *fontsize*, an integer,\n * - *fontstyle*, an ORed bit pattern of bold (1), italic (2) and underline (4),\n * i.e bold underline is \"5\".\n * - *fontfamily*, is a string defining the typeface to be used.\n * \n * Drawing:\n * \n * Most drawing is contained within a *path* element. Again, the graphic\n * primitives are very similar to that of HTML 5 canvas.\n * \n * - *move* to attributes required decimals (x,y).\n * - *line* to attributes required decimals (x,y).\n * - *quad* to required decimals (x2,y2) via control point required decimals\n * (x1,y1).\n * - *curve* to required decimals (x3,y3), via control points required decimals\n * (x1,y1) and (x2,y2).\n * - *arc*, this doesn't follow the HTML Canvas signatures, instead it's a copy\n * of the SVG arc command. The SVG specification documentation gives the best\n * description of its behaviors. The attributes are named identically, they are\n * decimals and all required.\n * - *close* ends the current subpath and causes an automatic straight line to\n * be drawn from the current point to the initial point of the current subpath.\n * \n * Complex drawing:\n * \n * In addition to the graphics primitive operations there are non-primitive\n * operations. These provide an easy method to draw some basic shapes.\n * \n * - *rect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals\n * - *roundrect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals. Also\n * \"arcsize\" an optional decimal attribute defining how large, the corner curves\n * are.\n * - *ellipse*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals.\n * \n * Note that these 3 shapes and all paths must be followed by either a fill,\n * stroke, or fillstroke.\n * \n * Text:\n * \n * *text* elements have the following attributes.\n * \n * - \"str\", the text string to display, required.\n * - \"x\" and \"y\", the decimal location (x,y) of the text element, required.\n * - \"align\", the horizontal alignment of the text element, either \"left\",\n * \"center\" or \"right\". Optional, default is \"left\".\n * - \"valign\", the vertical alignment of the text element, either \"top\", \"middle\"\n * or \"bottom\". Optional, default is \"top\".\n * - \"localized\", 0 or 1, if 1 then the \"str\" actually contains a key to use to\n * fetch the value out of mxResources. Optional, default is\n * <mxStencil.defaultLocalized>.\n * - \"vertical\", 0 or 1, if 1 the label is rendered vertically (rotated by 90\n * degrees). Optional, default is 0.\n * - \"rotation\", angle in degrees (0 to 360). The angle to rotate the text by.\n * Optional, default is 0.\n * - \"align-shape\", 0 or 1, if 0 ignore the rotation of the shape when setting\n * the text rotation. Optional, default is 1.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the text element (ignored if the str attribute is not null).\n * \n * Images:\n * \n * *image* elements can either be external URLs, or data URIs, where supported\n * (not in IE 7-). Attributes are:\n * \n * - \"src\", required string. Either a data URI or URL.\n * - \"x\", \"y\", required decimals. The (x,y) position of the image.\n * - \"w\", \"h\", required decimals. The width and height of the image.\n * - \"flipH\" and \"flipV\", optional 0 or 1. Whether to flip the image along the\n * horizontal/vertical axis. Default is 0 for both.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the image source (ignored if the src attribute is not null).\n * \n * Sub-shapes:\n * \n * *include-shape* allow stencils to be rendered within the current stencil by\n * referencing the sub-stencil by name. Attributes are:\n * \n * - \"name\", required string. The unique shape name of the stencil.\n * - \"x\", \"y\", \"w\", \"h\", required decimals. The (x,y) position of the sub-shape\n * and its width and height.\n * \n * Constructor: mxStencil\n * \n * Constructs a new generic shape by setting <desc> to the given XML node and\n * invoking <parseDescription> and <parseConstraints>.\n * \n * Parameters:\n * \n * desc - XML node that contains the stencil description.\n */\nfunction mxStencil(desc)\n{\n\tthis.desc = desc;\n\tthis.parseDescription();\n\tthis.parseConstraints();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxStencil, mxShape);\n\n/**\n * Variable: defaultLocalized\n * \n * Static global variable that specifies the default value for the localized\n * attribute of the text element. Default is false.\n */\nmxStencil.defaultLocalized = false;\n\n/**\n * Function: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content and images. Default is false. Set this to true\n * if stencils can not contain user input.\n */\nmxStencil.allowEval = false;\n\n/**\n * Variable: desc\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.desc = null;\n\n/**\n * Variable: constraints\n * \n * Holds an array of <mxConnectionConstraints> as defined in the shape.\n */\nmxStencil.prototype.constraints = null;\n\n/**\n * Variable: aspect\n *\n * Holds the aspect of the shape. Default is 'auto'.\n */\nmxStencil.prototype.aspect = null;\n\n/**\n * Variable: w0\n *\n * Holds the width of the shape. Default is 100.\n */\nmxStencil.prototype.w0 = null;\n\n/**\n * Variable: h0\n *\n * Holds the height of the shape. Default is 100.\n */\nmxStencil.prototype.h0 = null;\n\n/**\n * Variable: bgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.bgNode = null;\n\n/**\n * Variable: fgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.fgNode = null;\n\n/**\n * Variable: strokewidth\n *\n * Holds the strokewidth direction from the description.\n */\nmxStencil.prototype.strokewidth = null;\n\n/**\n * Function: parseDescription\n *\n * Reads <w0>, <h0>, <aspect>, <bgNodes> and <fgNodes> from <desc>.\n */\nmxStencil.prototype.parseDescription = function()\n{\n\t// LATER: Preprocess nodes for faster painting\n\tthis.fgNode = this.desc.getElementsByTagName('foreground')[0];\n\tthis.bgNode = this.desc.getElementsByTagName('background')[0];\n\tthis.w0 = Number(this.desc.getAttribute('w') || 100);\n\tthis.h0 = Number(this.desc.getAttribute('h') || 100);\n\t\n\t// Possible values for aspect are: variable and fixed where\n\t// variable means fill the available space and fixed means\n\t// use w0 and h0 to compute the aspect.\n\tvar aspect = this.desc.getAttribute('aspect');\n\tthis.aspect = (aspect != null) ? aspect : 'variable';\n\t\n\t// Possible values for strokewidth are all numbers and \"inherit\"\n\t// where the inherit means take the value from the style (ie. the\n\t// user-defined stroke-width). Note that the strokewidth is scaled\n\t// by the minimum scaling that is used to draw the shape (sx, sy).\n\tvar sw = this.desc.getAttribute('strokewidth');\n\tthis.strokewidth = (sw != null) ? sw : '1';\n};\n\n/**\n * Function: parseConstraints\n *\n * Reads the constraints from <desc> into <constraints> using\n * <parseConstraint>.\n */\nmxStencil.prototype.parseConstraints = function()\n{\n\tvar conns = this.desc.getElementsByTagName('connections')[0];\n\t\n\tif (conns != null)\n\t{\n\t\tvar tmp = mxUtils.getChildNodes(conns);\n\t\t\n\t\tif (tmp != null && tmp.length > 0)\n\t\t{\n\t\t\tthis.constraints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t{\n\t\t\t\tthis.constraints.push(this.parseConstraint(tmp[i]));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: parseConstraint\n *\n * Parses the given XML node and returns its <mxConnectionConstraint>.\n */\nmxStencil.prototype.parseConstraint = function(node)\n{\n\tvar x = Number(node.getAttribute('x'));\n\tvar y = Number(node.getAttribute('y'));\n\tvar perimeter = node.getAttribute('perimeter') == '1';\n\tvar name = node.getAttribute('name');\n\t\n\treturn new mxConnectionConstraint(new mxPoint(x, y), perimeter, name);\n};\n\n/**\n * Function: evaluateTextAttribute\n * \n * Gets the given attribute as a text. The return value from <evaluateAttribute>\n * is used as a key to <mxResources.get> if the localized attribute in the text\n * node is 1 or if <defaultLocalized> is true.\n */\nmxStencil.prototype.evaluateTextAttribute = function(node, attribute, shape)\n{\n\tvar result = this.evaluateAttribute(node, attribute, shape);\n\tvar loc = node.getAttribute('localized');\n\t\n\tif ((mxStencil.defaultLocalized && loc == null) || loc == '1')\n\t{\n\t\tresult = mxResources.get(result);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: evaluateAttribute\n *\n * Gets the attribute for the given name from the given node. If the attribute\n * does not exist then the text content of the node is evaluated and if it is\n * a function it is invoked with <shape> as the only argument and the return\n * value is used as the attribute value to be returned.\n */\nmxStencil.prototype.evaluateAttribute = function(node, attribute, shape)\n{\n\tvar result = node.getAttribute(attribute);\n\t\n\tif (result == null)\n\t{\n\t\tvar text = mxUtils.getTextContent(node);\n\t\t\n\t\tif (text != null && mxStencil.allowEval)\n\t\t{\n\t\t\tvar funct = mxUtils.eval(text);\n\t\t\t\n\t\t\tif (typeof(funct) == 'function')\n\t\t\t{\n\t\t\t\tresult = funct(shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: drawShape\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawShape = function(canvas, shape, x, y, w, h)\n{\n\tvar stack = canvas.states.slice();\n\t\n\t// TODO: Internal structure (array of special structs?), relative and absolute\n\t// coordinates (eg. note shape, process vs star, actor etc.), text rendering\n\t// and non-proportional scaling, how to implement pluggable edge shapes\n\t// (start, segment, end blocks), pluggable markers, how to implement\n\t// swimlanes (title area) with this API, add icon, horizontal/vertical\n\t// label, indicator for all shapes, rotation\n\tvar direction = mxUtils.getValue(shape.style, mxConstants.STYLE_DIRECTION, null);\n\tvar aspect = this.computeAspect(shape.style, x, y, w, h, direction);\n\tvar minScale = Math.min(aspect.width, aspect.height);\n\tvar sw = (this.strokewidth == 'inherit') ?\n\t\t\tNumber(mxUtils.getNumber(shape.style, mxConstants.STYLE_STROKEWIDTH, 1)) :\n\t\t\tNumber(this.strokewidth) * minScale;\n\tcanvas.setStrokeWidth(sw);\n\n\t// Draws a transparent rectangle for catching events\n\tif (shape.style != null && mxUtils.getValue(shape.style, mxConstants.STYLE_POINTER_EVENTS, '0') == '1')\n\t{\n\t\tcanvas.setStrokeColor(mxConstants.NONE);\n\t\tcanvas.rect(x, y, w, h);\n\t\tcanvas.stroke();\n\t\tcanvas.setStrokeColor(shape.stroke);\n\t}\n\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.bgNode, aspect, false, true);\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.fgNode, aspect, true,\n\t\t!shape.outline || shape.style == null || mxUtils.getValue(\n\t\tshape.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0);\n\t\n\t// Restores stack for unequal count of save/restore calls\n\tif (canvas.states.length != stack.length)\n\t{\n\t\tcanvas.states = stack;\n\t}\n};\n\n/**\n * Function: drawChildren\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawChildren = function(canvas, shape, x, y, w, h, node, aspect, disableShadow, paint)\n{\n\tif (node != null && w > 0 && h > 0)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t{\n\t\t\t\tthis.drawNode(canvas, shape, tmp, aspect, disableShadow, paint);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t}\n};\n\n/**\n * Function: computeAspect\n *\n * Returns a rectangle that contains the offset in x and y and the horizontal\n * and vertical scale in width and height used to draw this shape inside the\n * given <mxRectangle>.\n * \n * Parameters:\n * \n * shape - <mxShape> to be drawn.\n * bounds - <mxRectangle> that should contain the stencil.\n * direction - Optional direction of the shape to be darwn.\n */\nmxStencil.prototype.computeAspect = function(shape, x, y, w, h, direction)\n{\n\tvar x0 = x;\n\tvar y0 = y;\n\tvar sx = w / this.w0;\n\tvar sy = h / this.h0;\n\t\n\tvar inverse = (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH);\n\n\tif (inverse)\n\t{\n\t\tsy = w / this.h0;\n\t\tsx = h / this.w0;\n\t\t\n\t\tvar delta = (w - h) / 2;\n\n\t\tx0 += delta;\n\t\ty0 -= delta;\n\t}\n\n\tif (this.aspect == 'fixed')\n\t{\n\t\tsy = Math.min(sx, sy);\n\t\tsx = sy;\n\t\t\n\t\t// Centers the shape inside the available space\n\t\tif (inverse)\n\t\t{\n\t\t\tx0 += (h - this.w0 * sx) / 2;\n\t\t\ty0 += (w - this.h0 * sy) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx0 += (w - this.w0 * sx) / 2;\n\t\t\ty0 += (h - this.h0 * sy) / 2;\n\t\t}\n\t}\n\n\treturn new mxRectangle(x0, y0, sx, sy);\n};\n\n/**\n * Function: drawNode\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawNode = function(canvas, shape, node, aspect, disableShadow, paint)\n{\n\tvar name = node.nodeName;\n\tvar x0 = aspect.x;\n\tvar y0 = aspect.y;\n\tvar sx = aspect.width;\n\tvar sy = aspect.height;\n\tvar minScale = Math.min(sx, sy);\n\t\n\tif (name == 'save')\n\t{\n\t\tcanvas.save();\n\t}\n\telse if (name == 'restore')\n\t{\n\t\tcanvas.restore();\n\t}\n\telse if (paint)\n\t{\n\t\tif (name == 'path')\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\t\n\t\t\tvar parseRegularly = true;\n\t\t\t\n\t\t\tif (node.getAttribute('rounded') == '1')\n\t\t\t{\n\t\t\t\tparseRegularly = false;\n\t\t\t\t\n\t\t\t\tvar arcSize = Number(node.getAttribute('arcSize'));\n\t\t\t\tvar pointCount = 0;\n\t\t\t\tvar segs = [];\n\t\t\t\t\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childName = childNode.nodeName;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (childName == 'move' || childName == 'line')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (childName == 'move' || segs.length == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsegs.push([]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsegs[segs.length - 1].push(new mxPoint(x0 + Number(childNode.getAttribute('x')) * sx,\n\t\t\t\t\t\t\t\ty0 + Number(childNode.getAttribute('y')) * sy));\n\t\t\t\t\t\t\tpointCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//We only support move and line for rounded corners\n\t\t\t\t\t\t\tparseRegularly = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\n\t\t\t\tif (!parseRegularly && pointCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < segs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar close = false, ps = segs[i][0], pe = segs[i][segs[i].length - 1];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (ps.x == pe.x && ps.y == pe.y) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsegs[i].pop();\n\t\t\t\t\t\t\tclose = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.addPoints(canvas, segs[i], true, arcSize, close);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparseRegularly = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (parseRegularly)\n\t\t\t{\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.drawNode(canvas, shape, childNode, aspect, disableShadow, paint);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (name == 'close')\n\t\t{\n\t\t\tcanvas.close();\n\t\t}\n\t\telse if (name == 'move')\n\t\t{\n\t\t\tcanvas.moveTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'line')\n\t\t{\n\t\t\tcanvas.lineTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'quad')\n\t\t{\n\t\t\tcanvas.quadTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy);\n\t\t}\n\t\telse if (name == 'curve')\n\t\t{\n\t\t\tcanvas.curveTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x3')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y3')) * sy);\n\t\t}\n\t\telse if (name == 'arc')\n\t\t{\n\t\t\tcanvas.arcTo(Number(node.getAttribute('rx')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('ry')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('x-axis-rotation')),\n\t\t\t\t\tNumber(node.getAttribute('large-arc-flag')),\n\t\t\t\t\tNumber(node.getAttribute('sweep-flag')),\n\t\t\t\t\tx0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'rect')\n\t\t{\n\t\t\tcanvas.rect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'roundrect')\n\t\t{\n\t\t\tvar arcsize = Number(node.getAttribute('arcsize'));\n\t\n\t\t\tif (arcsize == 0)\n\t\t\t{\n\t\t\t\tarcsize = mxConstants.RECTANGLE_ROUNDING_FACTOR * 100;\n\t\t\t}\n\t\t\t\n\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\tvar factor = Number(arcsize) / 100;\n\t\t\tvar r = Math.min(w * factor, h * factor);\n\t\t\t\n\t\t\tcanvas.roundrect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tw, h, r, r);\n\t\t}\n\t\telse if (name == 'ellipse')\n\t\t{\n\t\t\tcanvas.ellipse(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'image')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar src = this.evaluateAttribute(node, 'src', shape);\n\t\t\t\t\n\t\t\t\tcanvas.image(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy,\n\t\t\t\t\tsrc, false, node.getAttribute('flipH') == '1',\n\t\t\t\t\tnode.getAttribute('flipV') == '1');\n\t\t\t}\n\t\t}\n\t\telse if (name == 'text')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar str = this.evaluateTextAttribute(node, 'str', shape);\n\t\t\t\tvar rotation = node.getAttribute('vertical') == '1' ? -90 : 0;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('align-shape') == '0')\n\t\t\t\t{\n\t\t\t\t\tvar dr = shape.rotation;\n\t\t\n\t\t\t\t\t// Depends on flipping\n\t\t\t\t\tvar flipH = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (flipH && flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t\telse if (flipH || flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation += dr;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\trotation -= node.getAttribute('rotation');\n\t\t\n\t\t\t\tcanvas.text(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\t\t0, 0, str, node.getAttribute('align') || 'left',\n\t\t\t\t\t\tnode.getAttribute('valign') || 'top', false, '',\n\t\t\t\t\t\tnull, false, rotation);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'include-shape')\n\t\t{\n\t\t\tvar stencil = mxStencilRegistry.getStencil(node.getAttribute('name'));\n\t\t\t\n\t\t\tif (stencil != null)\n\t\t\t{\n\t\t\t\tvar x = x0 + Number(node.getAttribute('x')) * sx;\n\t\t\t\tvar y = y0 + Number(node.getAttribute('y')) * sy;\n\t\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\t\t\n\t\t\t\tstencil.drawShape(canvas, shape, x, y, w, h);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'fillstroke')\n\t\t{\n\t\t\tcanvas.fillAndStroke();\n\t\t}\n\t\telse if (name == 'fill')\n\t\t{\n\t\t\tcanvas.fill();\n\t\t}\n\t\telse if (name == 'stroke')\n\t\t{\n\t\t\tcanvas.stroke();\n\t\t}\n\t\telse if (name == 'strokewidth')\n\t\t{\n\t\t\tvar s = (node.getAttribute('fixed') == '1') ? 1 : minScale;\n\t\t\tcanvas.setStrokeWidth(Number(node.getAttribute('width')) * s);\n\t\t}\n\t\telse if (name == 'dashed')\n\t\t{\n\t\t\tcanvas.setDashed(node.getAttribute('dashed') == '1');\n\t\t}\n\t\telse if (name == 'dashpattern')\n\t\t{\n\t\t\tvar value = node.getAttribute('pattern');\n\t\t\t\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\tvar tmp = value.split(' ');\n\t\t\t\tvar pat = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (tmp[i].length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tpat.push(Number(tmp[i]) * minScale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = pat.join(' ');\n\t\t\t\tcanvas.setDashPattern(value);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'strokecolor')\n\t\t{\n\t\t\tcanvas.setStrokeColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'linecap')\n\t\t{\n\t\t\tcanvas.setLineCap(node.getAttribute('cap'));\n\t\t}\n\t\telse if (name == 'linejoin')\n\t\t{\n\t\t\tcanvas.setLineJoin(node.getAttribute('join'));\n\t\t}\n\t\telse if (name == 'miterlimit')\n\t\t{\n\t\t\tcanvas.setMiterLimit(Number(node.getAttribute('limit')));\n\t\t}\n\t\telse if (name == 'fillcolor')\n\t\t{\n\t\t\tcanvas.setFillColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'alpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fillalpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'strokealpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fontcolor')\n\t\t{\n\t\t\tcanvas.setFontColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'fontstyle')\n\t\t{\n\t\t\tcanvas.setFontStyle(node.getAttribute('style'));\n\t\t}\n\t\telse if (name == 'fontfamily')\n\t\t{\n\t\t\tcanvas.setFontFamily(node.getAttribute('family'));\n\t\t}\n\t\telse if (name == 'fontsize')\n\t\t{\n\t\t\tcanvas.setFontSize(Number(node.getAttribute('size')) * minScale);\n\t\t}\n\t\t\n\t\tif (disableShadow && (name == 'fillstroke' || name == 'fill' || name == 'stroke'))\n\t\t{\n\t\t\tdisableShadow = false;\n\t\t\tcanvas.setShadow(false);\n\t\t}\n\t}\n};\n\n__mxOutput.mxStencil = typeof mxStencil !== 'undefined' ? mxStencil : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n * \n * Code to add stencils.\n * \n * (code)\n * var req = mxUtils.load('test/stencils.xml');\n * var root = req.getDocumentElement();\n * var shape = root.firstChild;\n * \n * while (shape != null)\n * {\n * \t if (shape.nodeType == mxConstants.NODETYPE_ELEMENT)\n *   {\n *     mxStencilRegistry.addStencil(shape.getAttribute('name'), new mxStencil(shape));\n *   }\n *   \n *   shape = shape.nextSibling;\n * }\n * (end)\n */\nvar mxStencilRegistry =\n{\n\t/**\n\t * Class: mxStencilRegistry\n\t * \n\t * A singleton class that provides a registry for stencils and the methods\n\t * for painting those stencils onto a canvas or into a DOM.\n\t */\n\tstencils: {},\n\t\n\t/**\n\t * Function: addStencil\n\t * \n\t * Adds the given <mxStencil>.\n\t */\n\taddStencil: function(name, stencil)\n\t{\n\t\tmxStencilRegistry.stencils[name] = stencil;\n\t},\n\t\n\t/**\n\t * Function: getStencil\n\t * \n\t * Returns the <mxStencil> for the given name.\n\t */\n\tgetStencil: function(name)\n\t{\n\t\treturn mxStencilRegistry.stencils[name];\n\t}\n\n};\n\n__mxOutput.mxStencilRegistry = typeof mxStencilRegistry !== 'undefined' ? mxStencilRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxMarker =\n{\n\t/**\n\t * Class: mxMarker\n\t * \n\t * A static class that implements all markers for VML and SVG using a\n\t * registry. NOTE: The signatures in this class will change.\n\t * \n\t * Variable: markers\n\t * \n\t * Maps from markers names to functions to paint the markers.\n\t */\n\tmarkers: [],\n\t\n\t/**\n\t * Function: addMarker\n\t * \n\t * Adds a factory method that updates a given endpoint and returns a\n\t * function to paint the marker onto the given canvas.\n\t */\n\taddMarker: function(type, funct)\n\t{\n\t\tmxMarker.markers[type] = funct;\n\t},\n\t\n\t/**\n\t * Function: createMarker\n\t * \n\t * Returns a function to paint the given marker.\n\t */\n\tcreateMarker: function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar funct = mxMarker.markers[type];\n\t\t\n\t\treturn (funct != null) ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) : null;\n\t}\n\n};\n\n/**\n * Adds the classic and block marker factory method.\n */\n(function()\n{\n\tfunction createArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tvar f = (type != mxConstants.ARROW_CLASSIC && type != mxConstants.ARROW_CLASSIC_THIN) ? 1 : 3 / 4;\n\t\t\tpe.x += -unitX * f - endOffsetX;\n\t\t\tpe.y += -unitY * f - endOffsetY;\n\t\t\t\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\n\t\t\t\tif (type == mxConstants.ARROW_CLASSIC || type == mxConstants.ARROW_CLASSIC_THIN)\n\t\t\t\t{\n\t\t\t\t\tcanvas.lineTo(pt.x - unitX * 3 / 4, pt.y - unitY * 3 / 4);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.close();\n\t\n\t\t\t\tif (filled)\n\t\t\t\t{\n\t\t\t\t\tcanvas.fillAndStroke();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.stroke();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('classic', createArrow(2));\n\tmxMarker.addMarker('classicThin', createArrow(3));\n\tmxMarker.addMarker('block', createArrow(2));\n\tmxMarker.addMarker('blockThin', createArrow(3));\n\t\n\tfunction createOpenArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\t\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tpe.x += -endOffsetX * 2;\n\t\t\tpe.y += -endOffsetY * 2;\n\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\tcanvas.lineTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.stroke();\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('open', createOpenArrow(2));\n\tmxMarker.addMarker('openThin', createOpenArrow(3));\n\t\n\tmxMarker.addMarker('oval', function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar a = size / 2;\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpe.x -= unitX * a;\n\t\tpe.y -= unitY * a;\n\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.ellipse(pt.x - a, pt.y - a, size, size);\n\t\t\t\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction diamond(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t// 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n\t\t// only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n\t\t// Note these values and the tk variable below are dependent, update\n\t\t// both together (saves trig hard coding it).\n\t\tvar swFactor = (type == mxConstants.ARROW_DIAMOND) ?  0.7071 : 0.9862;\n\t\tvar endOffsetX = unitX * sw * swFactor;\n\t\tvar endOffsetY = unitY * sw * swFactor;\n\t\t\n\t\tunitX = unitX * (size + sw);\n\t\tunitY = unitY * (size + sw);\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpt.x -= endOffsetX;\n\t\tpt.y -= endOffsetY;\n\t\t\n\t\tpe.x += -unitX - endOffsetX;\n\t\tpe.y += -unitY - endOffsetY;\n\t\t\n\t\t// thickness factor for diamond\n\t\tvar tk = ((type == mxConstants.ARROW_DIAMOND) ?  2 : 3.4);\n\t\t\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n\t\t\tcanvas.lineTo(pt.x - unitX, pt.y - unitY);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n\t\t\tcanvas.close();\n\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t};\n\n\tmxMarker.addMarker('diamond', diamond);\n\tmxMarker.addMarker('diamondThin', diamond);\n})();\n\n__mxOutput.mxMarker = typeof mxMarker !== 'undefined' ? mxMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxActor\n *\n * Extends <mxShape> to implement an actor shape. If a custom shape with one\n * filled area is needed, then this shape's <redrawPath> should be overridden.\n * \n * Example:\n * \n * (code)\n * function SampleShape() { }\n * \n * SampleShape.prototype = new mxActor();\n * SampleShape.prototype.constructor = vsAseShape;\n * \n * mxCellRenderer.registerShape('sample', SampleShape);\n * SampleShape.prototype.redrawPath = function(path, x, y, w, h)\n * {\n *   path.moveTo(0, 0);\n *   path.lineTo(w, h);\n *   // ...\n *   path.close();\n * }\n * (end)\n * \n * This shape is registered under <mxConstants.SHAPE_ACTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxActor\n *\n * Constructs a new actor shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxActor(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxActor, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxActor.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxActor.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar width = w/3;\n\tc.moveTo(0, h);\n\tc.curveTo(0, 3 * h / 5, 0, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w / 2 - width, 2 * h / 5, w / 2 - width, 0, w / 2, 0);\n\tc.curveTo(w / 2 + width, 0, w / 2 + width, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w, 2 * h / 5, w, 3 * h / 5, w, h);\n\tc.close();\n};\n\n__mxOutput.mxActor = typeof mxActor !== 'undefined' ? mxActor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCloud\n *\n * Extends <mxActor> to implement a cloud shape.\n * \n * This shape is registered under <mxConstants.SHAPE_CLOUD> in\n * <mxCellRenderer>.\n * \n * Constructor: mxCloud\n *\n * Constructs a new cloud shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCloud(bounds, fill, stroke, strokewidth)\n{\n\tmxActor.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxCloud, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCloud.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tc.moveTo(0.25 * w, 0.25 * h);\n\tc.curveTo(0.05 * w, 0.25 * h, 0, 0.5 * h, 0.16 * w, 0.55 * h);\n\tc.curveTo(0, 0.66 * h, 0.18 * w, 0.9 * h, 0.31 * w, 0.8 * h);\n\tc.curveTo(0.4 * w, h, 0.7 * w, h, 0.8 * w, 0.8 * h);\n\tc.curveTo(w, 0.8 * h, w, 0.6 * h, 0.875 * w, 0.5 * h);\n\tc.curveTo(w, 0.3 * h, 0.8 * w, 0.1 * h, 0.625 * w, 0.2 * h);\n\tc.curveTo(0.5 * w, 0.05 * h, 0.3 * w, 0.05 * h, 0.25 * w, 0.25 * h);\n\tc.close();\n};\n\n__mxOutput.mxCloud = typeof mxCloud !== 'undefined' ? mxCloud : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangleShape\n *\n * Extends <mxShape> to implement a rectangle shape.\n * This shape is registered under <mxConstants.SHAPE_RECTANGLE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRectangleShape\n *\n * Constructs a new rectangle shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRectangleShape(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRectangleShape, mxShape);\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient.\n */\nmxRectangleShape.prototype.isHtmlAllowed = function()\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\t\t\n\t}\n\t\n\treturn !this.isRounded && !this.glass && this.rotation == 0 && (events ||\n\t\t(this.fill != null && this.fill != mxConstants.NONE));\n};\n\n/**\n * Function: paintBackground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (events || (this.fill != null && this.fill != mxConstants.NONE) ||\n\t\t(this.stroke != null && this.stroke != mxConstants.NONE))\n\t{\n\t\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t\t{\n\t\t\tc.pointerEvents = false;\n\t\t}\n\t\t\n\t\tif (this.isRounded)\n\t\t{\n\t\t\tvar r = 0;\n\t\t\t\n\t\t\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t\t\t{\n\t\t\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\t\t\tr = Math.min(w * f, h * f);\n\t\t\t}\n\t\t\t\n\t\t\tc.roundrect(x, y, w, h, r, r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.rect(x, y, w, h);\n\t\t}\n\t\t\t\n\t\tc.fillAndStroke();\n\t}\n};\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRectangleShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (this.glass && !this.outline && this.fill != null && this.fill != mxConstants.NONE)\n\t{\n\t\tthis.paintGlassEffect(c, x, y, w, h, this.getArcSize(w + this.strokewidth, h + this.strokewidth));\n\t}\n};\n\n__mxOutput.mxRectangleShape = typeof mxRectangleShape !== 'undefined' ? mxRectangleShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEllipse\n *\n * Extends <mxShape> to implement an ellipse shape.\n * This shape is registered under <mxConstants.SHAPE_ELLIPSE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxEllipse\n *\n * Constructs a new ellipse shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxEllipse, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Paints the ellipse shape.\n */\nmxEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxEllipse = typeof mxEllipse !== 'undefined' ? mxEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDoubleEllipse\n *\n * Extends <mxShape> to implement a double ellipse shape. This shape is\n * registered under <mxConstants.SHAPE_DOUBLE_ELLIPSE> in <mxCellRenderer>.\n * Use the following override to only fill the inner ellipse in this shape:\n * \n * (code)\n * mxDoubleEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n * {\n *   c.ellipse(x, y, w, h);\n *   c.stroke();\n *   \n *   var inset = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n *   x += inset;\n *   y += inset;\n *   w -= 2 * inset;\n *   h -= 2 * inset;\n *   \n *   if (w > 0 && h > 0)\n *   {\n *     c.ellipse(x, y, w, h);\n *   }\n *   \n *   c.fillAndStroke();\n * };\n * (end)\n * \n * Constructor: mxDoubleEllipse\n *\n * Constructs a new ellipse shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxDoubleEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxDoubleEllipse, mxShape);\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 10.\n */\nmxDoubleEllipse.prototype.vmlScale = 10;\n\n/**\n * Function: paintBackground\n * \n * Paints the background.\n */\nmxDoubleEllipse.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: paintForeground\n * \n * Paints the foreground.\n */\nmxDoubleEllipse.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (!this.outline)\n\t{\n\t\tvar margin = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n\t\tx += margin;\n\t\ty += margin;\n\t\tw -= 2 * margin;\n\t\th -= 2 * margin;\n\t\t\n\t\t// FIXME: Rounding issues in IE8 standards mode (not in 1.x)\n\t\tif (w > 0 && h > 0)\n\t\t{\n\t\t\tc.ellipse(x, y, w, h);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds for the label.\n */\nmxDoubleEllipse.prototype.getLabelBounds = function(rect)\n{\n\tvar margin = (mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth,\n\t\t\tMath.min(rect.width / 5 / this.scale, rect.height / 5 / this.scale)))) * this.scale;\n\n\treturn new mxRectangle(rect.x + margin, rect.y + margin, rect.width - 2 * margin, rect.height - 2 * margin);\n};\n\n__mxOutput.mxDoubleEllipse = typeof mxDoubleEllipse !== 'undefined' ? mxDoubleEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRhombus\n *\n * Extends <mxShape> to implement a rhombus (aka diamond) shape.\n * This shape is registered under <mxConstants.SHAPE_RHOMBUS>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRhombus\n *\n * Constructs a new rhombus shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRhombus(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRhombus, mxShape);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRhombus.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic painting implementation.\n */\nmxRhombus.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar hw = w / 2;\n\tvar hh = h / 2;\n\t\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, [new mxPoint(x + hw, y), new mxPoint(x + w, y + hh), new mxPoint(x + hw, y + h),\n\t     new mxPoint(x, y + hh)], this.isRounded, arcSize, true);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxRhombus = typeof mxRhombus !== 'undefined' ? mxRhombus : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPolyline\n *\n * Extends <mxShape> to implement a polyline (a line with multiple points).\n * This shape is registered under <mxConstants.SHAPE_POLYLINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxPolyline\n *\n * Constructs a new polyline shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxPolyline(points, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxPolyline, mxShape);\n\n/**\n * Function: getRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns false.\n */\nmxPolyline.prototype.isPaintBoundsInverted = function()\n{\n\treturn false;\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintEdgeShape = function(c, pts)\n{\n\tvar prev = c.pointerEventsValue;\n\tc.pointerEventsValue = 'stroke';\n\t\n\tif (this.style == null || this.style[mxConstants.STYLE_CURVED] != 1)\n\t{\n\t\tthis.paintLine(c, pts, this.isRounded);\n\t}\n\telse\n\t{\n\t\tthis.paintCurvedLine(c, pts);\n\t}\n\t\n\tc.pointerEventsValue = prev;\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintLine = function(c, pts, rounded)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, pts, rounded, arcSize, false);\n\tc.stroke();\n};\n\n/**\n * Function: paintCurvedLine\n * \n * Paints a curved line.\n */\nmxPolyline.prototype.paintCurvedLine = function(c, pts)\n{\n\tc.begin();\n\t\n\tvar pt = pts[0];\n\tvar n = pts.length;\n\t\n\tc.moveTo(pt.x, pt.y);\n\t\n\tfor (var i = 1; i < n - 2; i++)\n\t{\n\t\tvar p0 = pts[i];\n\t\tvar p1 = pts[i + 1];\n\t\tvar ix = (p0.x + p1.x) / 2;\n\t\tvar iy = (p0.y + p1.y) / 2;\n\t\t\n\t\tc.quadTo(p0.x, p0.y, ix, iy);\n\t}\n\t\n\tvar p0 = pts[n - 2];\n\tvar p1 = pts[n - 1];\n\t\n\tc.quadTo(p0.x, p0.y, p1.x, p1.y);\n\tc.stroke();\n};\n\n__mxOutput.mxPolyline = typeof mxPolyline !== 'undefined' ? mxPolyline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrow\n *\n * Extends <mxShape> to implement an arrow shape. (The shape\n * is used to represent edges, not vertices.)\n * This shape is registered under <mxConstants.SHAPE_ARROW>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrow\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrow(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.spacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.endSize = (endSize != null) ? endSize : mxConstants.ARROW_SIZE;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrow, mxShape);\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrow.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = Math.max(this.arrowWidth, this.endSize);\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrow.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar spacing =  mxConstants.ARROW_SPACING;\n\tvar width = mxConstants.ARROW_WIDTH;\n\tvar arrow = mxConstants.ARROW_SIZE;\n\n\t// Base vector (between end points)\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\tvar dx = pe.x - p0.x;\n\tvar dy = pe.y - p0.y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\tvar length = dist - 2 * spacing - arrow;\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar ny = dy / dist;\n\tvar basex = length * nx;\n\tvar basey = length * ny;\n\tvar floorx = width * ny/3;\n\tvar floory = -width * nx/3;\n\t\n\t// Computes points\n\tvar p0x = p0.x - floorx / 2 + spacing * nx;\n\tvar p0y = p0.y - floory / 2 + spacing * ny;\n\tvar p1x = p0x + floorx;\n\tvar p1y = p0y + floory;\n\tvar p2x = p1x + basex;\n\tvar p2y = p1y + basey;\n\tvar p3x = p2x + floorx;\n\tvar p3y = p2y + floory;\n\t// p4 not necessary\n\tvar p5x = p3x - 3 * floorx;\n\tvar p5y = p3y - 3 * floory;\n\t\n\tc.begin();\n\tc.moveTo(p0x, p0y);\n\tc.lineTo(p1x, p1y);\n\tc.lineTo(p2x, p2y);\n\tc.lineTo(p3x, p3y);\n\tc.lineTo(pe.x - spacing * nx, pe.y - spacing * ny);\n\tc.lineTo(p5x, p5y);\n\tc.lineTo(p5x + floorx, p5y + floory);\n\tc.close();\n\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxArrow = typeof mxArrow !== 'undefined' ? mxArrow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrowConnector\n *\n * Extends <mxShape> to implement an new rounded arrow shape with support for\n * waypoints and double arrows. (The shape is used to represent edges, not\n * vertices.) This shape is registered under <mxConstants.SHAPE_ARROW_CONNECTOR>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrowConnector\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrowConnector(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.arrowSpacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.startSize = mxConstants.ARROW_SIZE / 5;\n\tthis.endSize = mxConstants.ARROW_SIZE / 5;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrowConnector, mxShape);\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxArrowConnector.prototype.useSvgBoundingBox = true;\n\n/**\n * Function: isRoundable\n * \n * Hook for subclassers.\n */\nmxArrowConnector.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Variable: resetStyles\n * \n * Overrides mxShape to reset spacing.\n */\nmxArrowConnector.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.arrowSpacing = mxConstants.ARROW_SPACING;\n};\n\n/**\n * Overrides apply to get smooth transition from default start- and endsize.\n */\nmxArrowConnector.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\n\tif (this.style != null)\n\t{\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t}\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrowConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = this.getEdgeWidth();\n\t\n\tif (this.isMarkerStart())\n\t{\n\t\tw = Math.max(w, this.getStartArrowWidth());\n\t}\n\t\n\tif (this.isMarkerEnd())\n\t{\n\t\tw = Math.max(w, this.getEndArrowWidth());\n\t}\n\t\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar strokeWidth = this.strokewidth;\n\t\n\tif (this.outline)\n\t{\n\t\tstrokeWidth = Math.max(1, mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth));\n\t}\n\t\n\tvar startWidth = this.getStartArrowWidth() + strokeWidth;\n\tvar endWidth = this.getEndArrowWidth() + strokeWidth;\n\tvar edgeWidth = this.outline ? this.getEdgeWidth() + strokeWidth : this.getEdgeWidth();\n\tvar openEnded = this.isOpenEnded();\n\tvar markerStart = this.isMarkerStart();\n\tvar markerEnd = this.isMarkerEnd();\n\tvar spacing = (openEnded) ? 0 : this.arrowSpacing + strokeWidth / 2;\n\tvar startSize = this.startSize + strokeWidth;\n\tvar endSize = this.endSize + strokeWidth;\n\tvar isRounded = this.isArrowRounded();\n\t\n\t// Base vector (between first points)\n\tvar pe = pts[pts.length - 1];\n\n\t// Finds first non-overlapping point\n\tvar i0 = 1;\n\t\n\twhile (i0 < pts.length - 1 && pts[i0].x == pts[0].x && pts[i0].y == pts[0].y)\n\t{\n\t\ti0++;\n\t}\n\t\n\tvar dx = pts[i0].x - pts[0].x;\n\tvar dy = pts[i0].y - pts[0].y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\n\tif (dist == 0)\n\t{\n\t\treturn;\n\t}\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar nx2, nx1 = nx;\n\tvar ny = dy / dist;\n\tvar ny2, ny1 = ny;\n\tvar orthx = edgeWidth * ny;\n\tvar orthy = -edgeWidth * nx;\n\t\n\t// Stores the inbound function calls in reverse order in fns\n\tvar fns = [];\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('round');\n\t}\n\telse if (pts.length > 2)\n\t{\n\t\t// Only mitre if there are waypoints\n\t\tc.setMiterLimit(1.42);\n\t}\n\n\tc.begin();\n\n\tvar startNx = nx;\n\tvar startNy = ny;\n\n\tif (markerStart && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n\t}\n\telse\n\t{\n\t\tvar outStartX = pts[0].x + orthx / 2 + spacing * nx;\n\t\tvar outStartY = pts[0].y + orthy / 2 + spacing * ny;\n\t\tvar inEndX = pts[0].x - orthx / 2 + spacing * nx;\n\t\tvar inEndY = pts[0].y - orthy / 2 + spacing * ny;\n\t\t\n\t\tif (openEnded)\n\t\t{\n\t\t\tc.moveTo(outStartX, outStartY);\n\t\t\t\n\t\t\tfns.push(function()\n\t\t\t{\n\t\t\t\tc.lineTo(inEndX, inEndY);\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inEndX, inEndY);\n\t\t\tc.lineTo(outStartX, outStartY);\n\t\t}\n\t}\n\t\n\tvar dx1 = 0;\n\tvar dy1 = 0;\n\tvar dist1 = 0;\n\n\tfor (var i = 0; i < pts.length - 2; i++)\n\t{\n\t\t// Work out in which direction the line is bending\n\t\tvar pos = mxUtils.relativeCcw(pts[i].x, pts[i].y, pts[i+1].x, pts[i+1].y, pts[i+2].x, pts[i+2].y);\n\n\t\tdx1 = pts[i+2].x - pts[i+1].x;\n\t\tdy1 = pts[i+2].y - pts[i+1].y;\n\n\t\tdist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n\t\t\n\t\tif (dist1 != 0)\n\t\t{\n\t\t\tnx1 = dx1 / dist1;\n\t\t\tny1 = dy1 / dist1;\n\t\t\t\n\t\t\tvar tmp1 = nx * nx1 + ny * ny1;\n\t\t\tvar tmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n\t\t\t\n\t\t\t// Work out the normal orthogonal to the line through the control point and the edge sides intersection\n\t\t\tnx2 = (nx + nx1);\n\t\t\tny2 = (ny + ny1);\n\t\n\t\t\tvar dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n\t\t\t\n\t\t\tif (dist2 != 0)\n\t\t\t{\n\t\t\t\tnx2 = nx2 / dist2;\n\t\t\t\tny2 = ny2 / dist2;\n\t\t\t\t\n\t\t\t\t// Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n\t\t\t\tvar strokeWidthFactor = Math.max(tmp, Math.min(this.strokewidth / 200 + 0.04, 0.35));\n\t\t\t\tvar angleFactor = (pos != 0 && isRounded) ? Math.max(0.1, strokeWidthFactor) : Math.max(tmp, 0.06);\n\n\t\t\t\tvar outX = pts[i+1].x + ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar outY = pts[i+1].y - nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inX = pts[i+1].x - ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inY = pts[i+1].y + nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\t\n\t\t\t\tif (pos == 0 || !isRounded)\n\t\t\t\t{\n\t\t\t\t\t// If the two segments are aligned, or if we're not drawing curved sections between segments\n\t\t\t\t\t// just draw straight to the intersection point\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse if (pos == -1)\n\t\t\t\t{\n\t\t\t\t\tvar c1x = inX + ny * edgeWidth;\n\t\t\t\t\tvar c1y = inY - nx * edgeWidth;\n\t\t\t\t\tvar c2x = inX + ny1 * edgeWidth;\n\t\t\t\t\tvar c2y = inY - nx1 * edgeWidth;\n\t\t\t\t\tc.lineTo(c1x, c1y);\n\t\t\t\t\tc.quadTo(outX, outY, c2x, c2y);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c1x = outX - ny * edgeWidth;\n\t\t\t\t\t\tvar c1y = outY + nx * edgeWidth;\n\t\t\t\t\t\tvar c2x = outX - ny1 * edgeWidth;\n\t\t\t\t\t\tvar c2y = outY + nx1 * edgeWidth;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.quadTo(x, y, c1x, c1y);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(c2x, c2y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnx = nx1;\n\t\t\t\tny = ny1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\torthx = edgeWidth * ny1;\n\torthy = - edgeWidth * nx1;\n\n\tif (markerEnd && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n\t}\n\telse\n\t{\n\t\tc.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n\t\t\n\t\tvar inStartX = pe.x - spacing * nx1 - orthx / 2;\n\t\tvar inStartY = pe.y - spacing * ny1 - orthy / 2;\n\n\t\tif (!openEnded)\n\t\t{\n\t\t\tc.lineTo(inStartX, inStartY);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t\n\t\t\tfns.splice(0, 0, function()\n\t\t\t{\n\t\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t});\n\t\t}\n\t}\n\t\n\tfor (var i = fns.length - 1; i >= 0; i--)\n\t{\n\t\tfns[i]();\n\t}\n\n\tif (openEnded)\n\t{\n\t\tc.end();\n\t\tc.stroke();\n\t}\n\telse\n\t{\n\t\tc.close();\n\t\tc.fillAndStroke();\n\t}\n\t\n\t// Workaround for shadow on top of base arrow\n\tc.setShadow(false);\n\t\n\t// Need to redraw the markers without the low miter limit\n\tc.setMiterLimit(4);\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('flat');\n\t}\n\n\tif (pts.length > 2)\n\t{\n\t\t// Only to repaint markers if no waypoints\n\t\t// Need to redraw the markers without the low miter limit\n\t\tc.setMiterLimit(4);\n\t\tif (markerStart && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t\t\n\t\tif (markerEnd && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t}\n};\n\n/**\n * Function: paintMarker\n * \n * Paints the marker.\n */\nmxArrowConnector.prototype.paintMarker = function(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove)\n{\n\tvar widthArrowRatio = edgeWidth / arrowWidth;\n\tvar orthx = edgeWidth * ny / 2;\n\tvar orthy = -edgeWidth * nx / 2;\n\n\tvar spaceX = (spacing + size) * nx;\n\tvar spaceY = (spacing + size) * ny;\n\n\tif (initialMove)\n\t{\n\t\tc.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\telse\n\t{\n\t\tc.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\n\tc.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n\tc.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n}\n\n/**\n * Function: isArrowRounded\n * \n * Returns wether the arrow is rounded\n */\nmxArrowConnector.prototype.isArrowRounded = function()\n{\n\treturn this.isRounded;\n};\n\n/**\n * Function: getStartArrowWidth\n * \n * Returns the width of the start arrow\n */\nmxArrowConnector.prototype.getStartArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEndArrowWidth\n * \n * Returns the width of the end arrow\n */\nmxArrowConnector.prototype.getEndArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEdgeWidth\n * \n * Returns the width of the body of the edge\n */\nmxArrowConnector.prototype.getEdgeWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH / 3;\n};\n\n/**\n * Function: isOpenEnded\n * \n * Returns whether the ends of the shape are drawn\n */\nmxArrowConnector.prototype.isOpenEnded = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isMarkerStart\n * \n * Returns whether the start marker is drawn\n */\nmxArrowConnector.prototype.isMarkerStart = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n\n/**\n * Function: isMarkerEnd\n * \n * Returns whether the end marker is drawn\n */\nmxArrowConnector.prototype.isMarkerEnd = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n__mxOutput.mxArrowConnector = typeof mxArrowConnector !== 'undefined' ? mxArrowConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxText\n *\n * Extends <mxShape> to implement a text shape. To change vertical text from\n * bottom to top to top to bottom, the following code can be used:\n * \n * (code)\n * mxText.prototype.verticalTextRotation = 90;\n * (end)\n * \n * Constructor: mxText\n *\n * Constructs a new text shape.\n * \n * Parameters:\n * \n * value - String that represents the text to be displayed. This is stored in\n * <value>.\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * align - Specifies the horizontal alignment. Default is ''. This is stored in\n * <align>.\n * valign - Specifies the vertical alignment. Default is ''. This is stored in\n * <valign>.\n * color - String that specifies the text color. Default is 'black'. This is\n * stored in <color>.\n * family - String that specifies the font family. Default is\n * <mxConstants.DEFAULT_FONTFAMILY>. This is stored in <family>.\n * size - Integer that specifies the font size. Default is\n * <mxConstants.DEFAULT_FONTSIZE>. This is stored in <size>.\n * fontStyle - Specifies the font style. Default is 0. This is stored in\n * <fontStyle>.\n * spacing - Integer that specifies the global spacing. Default is 2. This is\n * stored in <spacing>.\n * spacingTop - Integer that specifies the top spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingTop>.\n * spacingRight - Integer that specifies the right spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingRight>.\n * spacingBottom - Integer that specifies the bottom spacing. Default is 0.The\n * sum of the spacing and this is stored in <spacingBottom>.\n * spacingLeft - Integer that specifies the left spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingLeft>.\n * horizontal - Boolean that specifies if the label is horizontal. Default is\n * true. This is stored in <horizontal>.\n * background - String that specifies the background color. Default is null.\n * This is stored in <background>.\n * border - String that specifies the label border color. Default is null.\n * This is stored in <border>.\n * wrap - Specifies if word-wrapping should be enabled. Default is false.\n * This is stored in <wrap>.\n * clipped - Specifies if the label should be clipped. Default is false.\n * This is stored in <clipped>.\n * overflow - Value of the overflow style. Default is 'visible'.\n */\nfunction mxText(value, bounds, align, valign, color,\n\tfamily,\tsize, fontStyle, spacing, spacingTop, spacingRight,\n\tspacingBottom, spacingLeft, horizontal, background, border,\n\twrap, clipped, overflow, labelPadding, textDirection)\n{\n\tmxShape.call(this);\n\tthis.value = value;\n\tthis.bounds = bounds;\n\tthis.color = (color != null) ? color : 'black';\n\tthis.align = (align != null) ? align : mxConstants.ALIGN_CENTER;\n\tthis.valign = (valign != null) ? valign : mxConstants.ALIGN_MIDDLE;\n\tthis.family = (family != null) ? family : mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = (size != null) ? size : mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = (fontStyle != null) ? fontStyle : mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = parseInt(spacing || 2);\n\tthis.spacingTop = this.spacing + parseInt(spacingTop || 0);\n\tthis.spacingRight = this.spacing + parseInt(spacingRight || 0);\n\tthis.spacingBottom = this.spacing + parseInt(spacingBottom || 0);\n\tthis.spacingLeft = this.spacing + parseInt(spacingLeft || 0);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.background = background;\n\tthis.border = border;\n\tthis.wrap = (wrap != null) ? wrap : false;\n\tthis.clipped = (clipped != null) ? clipped : false;\n\tthis.overflow = (overflow != null) ? overflow : 'visible';\n\tthis.labelPadding = (labelPadding != null) ? labelPadding : 0;\n\tthis.textDirection = textDirection;\n\tthis.rotation = 0;\n\tthis.updateMargin();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxText, mxShape);\n\n/**\n * Variable: baseSpacingTop\n * \n * Specifies the spacing to be added to the top spacing. Default is 0. Use the\n * value 5 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingTop = 0;\n\n/**\n * Variable: baseSpacingBottom\n * \n * Specifies the spacing to be added to the bottom spacing. Default is 0. Use the\n * value 1 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingBottom = 0;\n\n/**\n * Variable: baseSpacingLeft\n * \n * Specifies the spacing to be added to the left spacing. Default is 0.\n */\nmxText.prototype.baseSpacingLeft = 0;\n\n/**\n * Variable: baseSpacingRight\n * \n * Specifies the spacing to be added to the right spacing. Default is 0.\n */\nmxText.prototype.baseSpacingRight = 0;\n\n/**\n * Variable: replaceLinefeeds\n * \n * Specifies if linefeeds in HTML labels should be replaced with BR tags.\n * Default is true.\n */\nmxText.prototype.replaceLinefeeds = true;\n\n/**\n * Variable: verticalTextRotation\n * \n * Rotation for vertical text. Default is -90 (bottom to top).\n */\nmxText.prototype.verticalTextRotation = -90;\n\n/**\n * Variable: ignoreClippedStringSize\n * \n * Specifies if the string size should be measured in <updateBoundingBox> if\n * the label is clipped and the label position is center and middle. If this is\n * true, then the bounding box will be set to <bounds>. Default is true.\n * <ignoreStringSize> has precedence over this switch.\n */\nmxText.prototype.ignoreClippedStringSize = true;\n\n/**\n * Variable: ignoreStringSize\n * \n * Specifies if the actual string size should be measured. If disabled the\n * boundingBox will not ignore the actual size of the string, otherwise\n * <bounds> will be used instead. Default is false.\n */\nmxText.prototype.ignoreStringSize = false;\n\n/**\n * Variable: textWidthPadding\n * \n * Specifies the padding to be added to the text width for the bounding box.\n * This is needed to make sure no clipping is applied to borders. Default is 4\n * for IE 8 standards mode and 3 for all others.\n */\nmxText.prototype.textWidthPadding = (document.documentMode == 8 && !mxClient.IS_EM) ? 4 : 3;\n\n/**\n * Variable: lastValue\n * \n * Contains the last rendered text value. Used for caching.\n */\nmxText.prototype.lastValue = null;\n\n/**\n * Variable: cacheEnabled\n * \n * Specifies if caching for HTML labels should be enabled. Default is true.\n */\nmxText.prototype.cacheEnabled = true;\n\n/**\n * Function: isParseVml\n * \n * Text shapes do not contain VML markup and do not need to be parsed. This\n * method returns false to speed up rendering in IE8.\n */\nmxText.prototype.isParseVml = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation returns\n * true if the browser is not in IE8 standards mode.\n */\nmxText.prototype.isHtmlAllowed = function()\n{\n\treturn document.documentMode != 8 || mxClient.IS_EM;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxText.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxText.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height));\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxText.prototype.paint = function(c, update)\n{\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\t\n\tif (update)\n\t{\n\t\tc.updateText(x, y, w, h, this.align, this.valign, this.wrap, this.overflow,\n\t\t\t\tthis.clipped, this.getTextRotation(), this.node);\n\t}\n\telse\n\t{\n\t\t// Checks if text contains HTML markup\n\t\tvar realHtml = mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML;\n\t\t\n\t\t// Always renders labels as HTML in VML\n\t\tvar fmt = (realHtml || c instanceof mxVmlCanvas2D) ? 'html' : '';\n\t\tvar val = this.value;\n\t\t\n\t\tif (!realHtml && fmt == 'html')\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\tif (fmt == 'html' && !mxUtils.isNode(this.value))\n\t\t{\n\t\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\t\t\t\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = (!mxUtils.isNode(this.value) && this.replaceLinefeeds && fmt == 'html') ?\n\t\t\tval.replace(/\\n/g, '<br/>') : val;\n\t\t\t\n\t\tvar dir = this.textDirection;\n\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && !realHtml)\n\t\t{\n\t\t\tdir = this.getAutoDirection();\n\t\t}\n\t\t\n\t\tif (dir != mxConstants.TEXT_DIRECTION_LTR && dir != mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tdir = null;\n\t\t}\n\t\t\n\t\tc.text(x, y, w, h, val, this.align, this.valign, this.wrap, fmt,\n\t\t\tthis.overflow, this.clipped, this.getTextRotation(), dir);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Renders the text using the given DOM nodes.\n */\nmxText.prototype.redraw = function()\n{\n\tif (this.visible && this.checkBounds() && this.cacheEnabled && this.lastValue == this.value &&\n\t\t(mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML))\n\t{\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tif (mxClient.IS_SVG)\n\t\t\t{\n\t\t\t\tthis.redrawHtmlShapeWithCss3();\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\n\t\t\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t\t\t{\n\t\t\t\t\tthis.updateHtmlFilter();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.updateHtmlTransform();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.updateBoundingBox();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar canvas = this.createCanvas();\n\n\t\t\tif (canvas != null && canvas.updateText != null)\n\t\t\t{\n\t\t\t\t// Specifies if events should be handled\n\t\t\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\t\t\tthis.paint(canvas, true);\n\t\t\t\tthis.destroyCanvas(canvas);\n\t\t\t\tthis.updateBoundingBox();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Fallback if canvas does not support updateText (VML)\n\t\t\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\n\t\tif (mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tthis.lastValue = this.value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.lastValue = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxText.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.color = 'black';\n\tthis.align = mxConstants.ALIGN_CENTER;\n\tthis.valign = mxConstants.ALIGN_MIDDLE;\n\tthis.family = mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = 2;\n\tthis.spacingTop = 2;\n\tthis.spacingRight = 2;\n\tthis.spacingBottom = 2;\n\tthis.spacingLeft = 2;\n\tthis.horizontal = true;\n\tdelete this.background;\n\tdelete this.border;\n\tthis.textDirection = mxConstants.DEFAULT_TEXT_DIRECTION;\n\tdelete this.margin;\n};\n\n/**\n * Function: apply\n * \n * Extends mxShape to update the text styles.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxText.prototype.apply = function(state)\n{\n\tvar old = this.spacing;\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.fontStyle = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSTYLE, this.fontStyle);\n\t\tthis.family = mxUtils.getValue(this.style, mxConstants.STYLE_FONTFAMILY, this.family);\n\t\tthis.size = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, this.size);\n\t\tthis.color = mxUtils.getValue(this.style, mxConstants.STYLE_FONTCOLOR, this.color);\n\t\tthis.align = mxUtils.getValue(this.style, mxConstants.STYLE_ALIGN, this.align);\n\t\tthis.valign = mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_ALIGN, this.valign);\n\t\tthis.spacing = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing));\n\t\tthis.spacingTop = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_TOP, this.spacingTop - old)) + this.spacing;\n\t\tthis.spacingRight = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_RIGHT, this.spacingRight - old)) + this.spacing;\n\t\tthis.spacingBottom = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_BOTTOM, this.spacingBottom - old)) + this.spacing;\n\t\tthis.spacingLeft = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_LEFT, this.spacingLeft - old)) + this.spacing;\n\t\tthis.horizontal = mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, this.horizontal);\n\t\tthis.background = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, this.background);\n\t\tthis.border = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BORDERCOLOR, this.border);\n\t\tthis.textDirection = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tthis.updateMargin();\n\t}\n\t\n\tthis.flipV = null;\n\tthis.flipH = null;\n};\n\n/**\n * Function: getAutoDirection\n * \n * Used to determine the automatic text direction. Returns\n * <mxConstants.TEXT_DIRECTION_LTR> or <mxConstants.TEXT_DIRECTION_RTL>\n * depending on the contents of <value>. This is not invoked for HTML, wrapped\n * content or if <value> is a DOM node.\n */\nmxText.prototype.getAutoDirection = function()\n{\n\t// Looks for strong (directional) characters\n\tvar tmp = /[A-Za-z\\u05d0-\\u065f\\u066a-\\u06ef\\u06fa-\\u07ff\\ufb1d-\\ufdff\\ufe70-\\ufefc]/.exec(this.value);\n\t\n\t// Returns the direction defined by the character\n\treturn (tmp != null && tmp.length > 0 && tmp[0] > 'z') ?\n\t\tmxConstants.TEXT_DIRECTION_RTL : mxConstants.TEXT_DIRECTION_LTR;\n};\n\n/**\n * Function: getContentNode\n * \n * Returns the node that contains the rendered input.\n */\nmxText.prototype.getContentNode = function()\n{\n\tvar result = this.node;\n\t\n\tif (result != null)\n\t{\n\t\t// Rendered with no foreignObject\n\t\tif (result.ownerSVGElement == null)\n\t\t{\n\t\t\tresult = this.node.firstChild.firstChild;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Innermost DIV that contains the actual content\n\t\t\tresult = result.firstChild.firstChild.firstChild.firstChild.firstChild;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using the given node and position.\n */\nmxText.prototype.updateBoundingBox = function()\n{\n\tvar node = this.node;\n\tthis.boundingBox = this.bounds.clone();\n\tvar rot = this.getTextRotation();\n\t\n\tvar h = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER) : null;\n\tvar v = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE) : null;\n\n\tif (!this.ignoreStringSize && node != null && this.overflow != 'fill' && (!this.clipped ||\n\t\t!this.ignoreClippedStringSize || h != mxConstants.ALIGN_CENTER || v != mxConstants.ALIGN_MIDDLE))\n\t{\n\t\tvar ow = null;\n\t\tvar oh = null;\n\t\t\n\t\tif (node.ownerSVGElement != null)\n\t\t{\n\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t{\n\t\t\t\t// Uses second inner DIV for font metrics\n\t\t\t\tnode = node.firstChild.firstChild.firstChild.firstChild;\n\t\t\t\toh = node.offsetHeight * this.scale;\n\t\t\t\t\n\t\t\t\tif (this.overflow == 'width')\n\t\t\t\t{\n\t\t\t\t\tow = this.boundingBox.width;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tow = node.offsetWidth * this.scale;\t\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar b = node.getBBox();\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for bounding box of empty string\n\t\t\t\t\tif (typeof(this.value) == 'string' && mxUtils.trim(this.value) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (b.width == 0 && b.height == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\n\t\t\t// Use cached offset size\n\t\t\tif (this.offsetWidth != null && this.offsetHeight != null)\n\t\t\t{\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Cannot get node size while container hidden so a\n\t\t\t\t// shared temporary DIV is used for text measuring\n\t\t\t\tif (td != null)\n\t\t\t\t{\n\t\t\t\t\tthis.updateFont(td);\n\t\t\t\t\tthis.updateSize(td, false);\n\t\t\t\t\tthis.updateInnerHtml(td);\n\n\t\t\t\t\tnode = td;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar sizeDiv = node;\n\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tvar w = Math.round(this.bounds.width / this.scale);\n\t\n\t\t\t\t\tif (this.wrap && w > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\t\t\tnode.style.whiteSpace = 'normal';\n\n\t\t\t\t\t\tif (node.style.wordWrap != 'break-word')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Innermost DIV is used for measuring text\n\t\t\t\t\t\t\tvar divs = sizeDiv.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (divs.length > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsizeDiv = divs[divs.length - 1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tow = sizeDiv.offsetWidth + 2;\n\t\t\t\t\t\t\tdivs = this.node.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.clipped)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tow = Math.min(w, ow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Second last DIV width must be updated in DOM tree\n\t\t\t\t\t\t\tif (divs.length > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdivs[divs.length - 2].style.width = ow + 'px';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.whiteSpace = 'nowrap';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\n\t\t\t\tthis.offsetWidth = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\t\tthis.offsetHeight = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t}\n\n\t\tif (ow != null && oh != null)\n\t\t{\t\n\t\t\tthis.boundingBox = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y, ow, oh);\n\t\t}\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tif (rot != 0)\n\t\t{\n\t\t\t// Accounts for pre-rotated x and y\n\t\t\tvar bbox = mxUtils.getBoundingBox(new mxRectangle(\n\t\t\t\tthis.margin.x * this.boundingBox.width,\n\t\t\t\tthis.margin.y * this.boundingBox.height,\n\t\t\t\tthis.boundingBox.width, this.boundingBox.height),\n\t\t\t\trot, new mxPoint(0, 0));\n\t\t\t\n\t\t\tthis.unrotatedBoundingBox = mxRectangle.fromRectangle(this.boundingBox);\n\t\t\tthis.unrotatedBoundingBox.x += this.margin.x * this.unrotatedBoundingBox.width;\n\t\t\tthis.unrotatedBoundingBox.y += this.margin.y * this.unrotatedBoundingBox.height;\n\t\t\t\n\t\t\tthis.boundingBox.x += bbox.x;\n\t\t\tthis.boundingBox.y += bbox.y;\n\t\t\tthis.boundingBox.width = bbox.width;\n\t\t\tthis.boundingBox.height = bbox.height;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.boundingBox.x += this.margin.x * this.boundingBox.width;\n\t\t\tthis.boundingBox.y += this.margin.y * this.boundingBox.height;\n\t\t\tthis.unrotatedBoundingBox = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0 to avoid using rotation in the canvas via updateTransform.\n */\nmxText.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label of the corresponding shape.\n */\nmxText.prototype.getTextRotation = function()\n{\n\treturn (this.state != null && this.state.shape != null) ? this.state.shape.getTextRotation() : 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Inverts the bounds if <mxShape.isBoundsInverted> returns true or if the\n * horizontal style is false.\n */\nmxText.prototype.isPaintBoundsInverted = function()\n{\n\treturn !this.horizontal && this.state != null && this.state.view.graph.model.isVertex(this.state.cell);\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxText.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tmxShape.prototype.configureCanvas.apply(this, arguments);\n\t\n\tc.setFontColor(this.color);\n\tc.setFontBackgroundColor(this.background);\n\tc.setFontBorderColor(this.border);\n\tc.setFontFamily(this.family);\n\tc.setFontSize(this.size);\n\tc.setFontStyle(this.fontStyle);\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Sets the width and height of the container to 1px.\n */\nmxText.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = '1px';\n\tthis.node.style.height = '1px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: getHtmlValue\n * \n * Private helper function to create SVG elements\n */\nmxText.prototype.getHtmlValue = function()\n{\n\tvar val = this.value;\n\t\n\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t{\n\t\tval = mxUtils.htmlEntities(val, false);\n\t}\n\t\n\t// Handles trailing newlines to make sure they are visible in rendering output\n\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\n\treturn val;\n};\n\n/**\n * Function: getTextCss\n * \n * Private helper function to create SVG elements\n */\nmxText.prototype.getTextCss = function()\n{\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\tmxConstants.LINE_HEIGHT;\n\n\tvar css = 'display: inline-block; font-size: ' + this.size + 'px; ' +\n\t\t'font-family: ' + this.family + '; color: ' + this.color + '; line-height: ' + lh +\n\t\t'; pointer-events: ' + ((this.pointerEvents) ? 'all' : 'none') + '; ';\n\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tcss += 'font-weight: bold; ';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tcss += 'font-style: italic; ';\n\t}\n\t\n\tvar deco = [];\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tdeco.push('underline');\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\tdeco.push('line-through');\n\t}\n\t\n\tif (deco.length > 0)\n\t{\n\t\tcss += 'text-decoration: ' + deco.join(' ') + '; ';\n\t}\n\n\treturn css;\n};\n\n/**\n * Function: redrawHtmlShape\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShape = function()\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.redrawHtmlShapeWithCss3();\t\n\t}\n\telse\n\t{\n\t\tvar style = this.node.style;\n\t\n\t\t// Resets CSS styles\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.overflow = '';\n\t\tstyle.width = '';\n\t\tstyle.height = '';\n\t\t\n\t\tthis.updateValue();\n\t\tthis.updateFont(this.node);\n\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\t\n\t\tthis.offsetWidth = null;\n\t\tthis.offsetHeight = null;\n\t\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t{\n\t\t\tthis.updateHtmlFilter();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateHtmlTransform();\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHtmlShapeWithCss3\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShapeWithCss3 = function()\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar flex = 'position: absolute; left: ' + Math.round(this.bounds.x) + 'px; ' +\n\t\t'top: ' + Math.round(this.bounds.y) + 'px; pointer-events: none; ';\n\tvar block = this.getTextCss();\n\t\n\tmxSvgCanvas2D.createCss(w + 2, h, this.align, this.valign, this.wrap, this.overflow, this.clipped,\n\t\t(this.background != null) ? mxUtils.htmlEntities(this.background) : null,\n\t\t(this.border != null) ? mxUtils.htmlEntities(this.border) : null,\n\t\tflex, block, this.scale, mxUtils.bind(this, function(dx, dy, flex, item, block, ofl)\n\t{\n\t\tvar r = this.getTextRotation();\n\t\tvar tr = ((this.scale != 1) ? 'scale(' + this.scale + ') ' : '') +\n\t\t\t((r != 0) ? 'rotate(' + r + 'deg) ' : '') +\n\t\t\t((this.margin.x != 0 || this.margin.y != 0) ?\n\t\t\t\t'translate(' + (this.margin.x * 100) + '%,' +\n\t\t\t\t\t(this.margin.y * 100) + '%)' : '');\n\t\t\n\t\tif (tr != '')\n\t\t{\n\t\t\ttr = 'transform-origin: 0 0; transform: ' + tr + '; ';\n\t\t}\n\n\t\tif (ofl == '')\n\t\t{\n\t\t\tflex += item;\n\t\t\titem = 'display:inline-block; min-width: 100%; ' + tr;\n\t\t}\n\t\telse\n\t\t{\n\t\t\titem += tr;\n\t\t\t\n\t\t\tif (mxClient.IS_SF)\n\t\t\t{\n\t\t\t\titem += '-webkit-clip-path: content-box;';\n\t\t\t}\n\t\t}\n\n\t\tif (this.opacity < 100)\n\t\t{\n\t\t\tblock += 'opacity: ' + (this.opacity / 100) + '; ';\n\t\t}\n\t\t\n\t\tthis.node.setAttribute('style', flex);\n\t\t\n\t\tvar html = (mxUtils.isNode(this.value)) ? this.value.outerHTML : this.getHtmlValue();\n\t\t\n\t\tif (this.node.firstChild == null)\n\t\t{\n\t\t\tthis.node.innerHTML = '<div><div>' + html +'</div></div>';\n\t\t}\n\n\t\tthis.node.firstChild.firstChild.setAttribute('style', block);\n\t\tthis.node.firstChild.setAttribute('style', item);\n\t}));\n};\n\n/**\n * Function: updateHtmlTransform\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateHtmlTransform = function()\n{\n\tvar theta = this.getTextRotation();\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\t\n\tif (theta != 0)\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', (-dx * 100) + '%' + ' ' + (-dy * 100) + '%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%) ' +\n\t\t\t'scale(' + this.scale + ') rotate(' + theta + 'deg)');\n\t}\n\telse\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', '0% 0%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'scale(' + this.scale + ') ' +\n\t\t\t'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)');\n\t}\n\n\tstyle.left = Math.round(this.bounds.x - Math.ceil(dx * ((this.overflow != 'fill' &&\n\t\tthis.overflow != 'width') ? 3 : 1))) + 'px';\n\tstyle.top = Math.round(this.bounds.y - dy * ((this.overflow != 'fill') ? 3 : 1)) + 'px';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tstyle.opacity = this.opacity / 100;\n\t}\n\telse\n\t{\n\t\tstyle.opacity = '';\n\t}\n};\n\n/**\n * Function: updateInnerHtml\n * \n * Sets the inner HTML of the given element to the <value>.\n */\nmxText.prototype.updateInnerHtml = function(elt)\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\telt.innerHTML = this.value.outerHTML;\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\t// LATER: Can be cached in updateValue\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div>&nbsp;</div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tval = '<div style=\"display:inline-block;_display:inline;\">' + val + '</div>';\n\t\t\n\t\telt.innerHTML = val;\n\t}\n};\n\n/**\n * Function: updateHtmlFilter\n *\n * Rotated text rendering quality is bad for IE9 quirks/IE8 standards\n */\nmxText.prototype.updateHtmlFilter = function()\n{\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\tvar s = this.scale;\n\t\n\t// Resets filter before getting offsetWidth\n\tmxUtils.setOpacity(this.node, this.opacity);\n\t\n\t// Adds 1 to match table height in 1.x\n\tvar ow = 0;\n\tvar oh = 0;\n\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\tvar sizeDiv = this.node;\n\t\n\t// Fallback for hidden text rendering in IE quirks mode\n\tif (td != null)\n\t{\n\t\ttd.style.overflow = '';\n\t\ttd.style.height = '';\n\t\ttd.style.width = '';\n\t\t\n\t\tthis.updateFont(td);\n\t\tthis.updateSize(td, false);\n\t\tthis.updateInnerHtml(td);\n\t\t\n\t\tvar w = Math.round(this.bounds.width / this.scale);\n\n\t\tif (this.wrap && w > 0)\n\t\t{\n\t\t\ttd.style.whiteSpace = 'normal';\n\t\t\ttd.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\tow = w;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, this.bounds.width);\n\t\t\t}\n\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttd.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\tsizeDiv = td;\n\t\t\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\n\t\t\tif (this.wrap && td.style.wordWrap == 'break-word')\n\t\t\t{\n\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t}\n\t\t}\n\n\t\t// Required to update the height of the text box after wrapping width is known \n\t\tif (!this.clipped && this.wrap && w > 0)\n\t\t{\n\t\t\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\t\n\t\toh = sizeDiv.offsetHeight + 2;\n\t\t\n\t\tif (mxClient.IS_QUIRKS && this.border != null && this.border != mxConstants.NONE)\n\t\t{\n\t\t\toh += 3;\n\t\t}\n\t}\n\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t{\n\t\tsizeDiv = sizeDiv.firstChild;\n\t\toh = sizeDiv.offsetHeight;\n\t}\n\n\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\n\tif (this.clipped)\n\t{\n\t\toh = Math.min(oh, this.bounds.height);\n\t}\n\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\t// Handles special case for live preview with no wrapper DIV and no textDiv\n\tif (this.overflow == 'fill')\n\t{\n\t\toh = h;\n\t\tow = w;\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\toh = sizeDiv.scrollHeight;\n\t\tow = w;\n\t}\n\t\n\t// Stores for later use\n\tthis.offsetWidth = ow;\n\tthis.offsetHeight = oh;\n\t\n\t// Simulates max-height CSS in quirks mode\n\tif (mxClient.IS_QUIRKS && (this.clipped || (this.overflow == 'width' && h > 0)))\n\t{\n\t\th = Math.min(h, oh);\n\t\tstyle.height = Math.round(h) + 'px';\n\t}\n\telse\n\t{\n\t\th = oh;\n\t}\n\n\tif (this.overflow != 'fill' && this.overflow != 'width')\n\t{\n\t\tif (this.clipped)\n\t\t{\n\t\t\tow = Math.min(w, ow);\n\t\t}\n\t\t\n\t\tw = ow;\n\n\t\t// Simulates max-width CSS in quirks mode\n\t\tif ((mxClient.IS_QUIRKS && this.clipped) || this.wrap)\n\t\t{\n\t\t\tstyle.width = Math.round(w) + 'px';\n\t\t}\n\t}\n\n\th *= s;\n\tw *= s;\n\t\n\t// Rotation case is handled via VML canvas\n\tvar rad = this.getTextRotation() * (Math.PI / 180);\n\t\n\t// Precalculate cos and sin for the rotation\n\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\trad %= 2 * Math.PI;\n\t\n\tif (rad < 0)\n\t{\n\t\trad += 2 * Math.PI;\n\t}\n\t\n\trad %= Math.PI;\n\t\n\tif (rad > Math.PI / 2)\n\t{\n\t\trad = Math.PI - rad;\n\t}\n\t\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(-rad);\n\n\tvar tx = w * -(dx + 0.5);\n\tvar ty = h * -(dy + 0.5);\n\n\tvar top_fix = (h - h * cos + w * sin) / 2 + real_sin * tx - real_cos * ty;\n\tvar left_fix = (w - w * cos + h * sin) / 2 - real_cos * tx - real_sin * ty;\n\t\n\tif (rad != 0)\n\t{\n\t\tvar f = 'progid:DXImageTransform.Microsoft.Matrix(M11=' + real_cos + ', M12='+\n\t\t\treal_sin + ', M21=' + (-real_sin) + ', M22=' + real_cos + ', sizingMethod=\\'auto expand\\')';\n\t\t\n\t\tif (style.filter != null && style.filter.length > 0)\n\t\t{\n\t\t\tstyle.filter += ' ' + f;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.filter = f;\n\t\t}\n\t}\n\t\n\t// Workaround for rendering offsets\n\tvar dy = 0;\n\t\n\tif (this.overflow != 'fill' && mxClient.IS_QUIRKS)\n\t{\n\t\tif (this.valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy -= 1;\n\t\t}\n\t\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdy += 1;\n\t\t}\n\t}\n\n\tstyle.zoom = s;\n\tstyle.left = Math.round(this.bounds.x + left_fix - w / 2) + 'px';\n\tstyle.top = Math.round(this.bounds.y + top_fix - h / 2 + dy) + 'px';\n};\n\n/**\n * Function: updateValue\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateValue = function()\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\tthis.node.innerHTML = '';\n\t\tthis.node.appendChild(this.value);\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tvar bg = (this.background != null && this.background != mxConstants.NONE) ? this.background : null;\n\t\tvar bd = (this.border != null && this.border != mxConstants.NONE) ? this.border : null;\n\n\t\tif (this.overflow == 'fill' || this.overflow == 'width')\n\t\t{\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tthis.node.style.backgroundColor = bg;\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tthis.node.style.border = '1px solid ' + bd;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar css = '';\n\t\t\t\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tcss += 'background-color:' + mxUtils.htmlEntities(bg) + ';';\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(bd) + ';';\n\t\t\t}\n\t\t\t\n\t\t\t// Wrapper DIV for background, zoom needed for inline in quirks\n\t\t\t// and to measure wrapped font sizes in all browsers\n\t\t\t// FIXME: Background size in quirks mode for wrapped text\n\t\t\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t\t\tmxConstants.LINE_HEIGHT;\n\t\t\tval = '<div style=\"zoom:1;' + css + 'display:inline-block;_display:inline;text-decoration:inherit;' +\n\t\t\t\t'padding-bottom:1px;padding-right:1px;line-height:' + lh + '\">' + val + '</div>';\n\t\t}\n\n\t\tthis.node.innerHTML = val;\n\t\t\n\t\t// Sets text direction\n\t\tvar divs = this.node.getElementsByTagName('div');\n\t\t\n\t\tif (divs.length > 0)\n\t\t{\n\t\t\tvar dir = this.textDirection;\n\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t\t{\n\t\t\t\tdir = this.getAutoDirection();\n\t\t\t}\n\t\t\t\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].setAttribute('dir', dir);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].removeAttribute('dir');\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateFont\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateFont = function(node)\n{\n\tvar style = node.style;\n\t\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\tstyle.fontSize = this.size + 'px';\n\tstyle.fontFamily = this.family;\n\tstyle.verticalAlign = 'top';\n\tstyle.color = this.color;\n\t\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\telse\n\t{\n\t\tstyle.fontWeight = '';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\telse\n\t{\n\t\tstyle.fontStyle = '';\n\t}\n\t\n\tvar txtDecor = [];\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttxtDecor.push('underline');\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\ttxtDecor.push('line-through');\n\t}\n\t\n\tstyle.textDecoration = txtDecor.join(' ');\n\t\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle.textAlign = 'center';\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle.textAlign = 'right';\n\t}\n\telse\n\t{\n\t\tstyle.textAlign = 'left';\n\t}\n};\n\n/**\n * Function: updateSize\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateSize = function(node, enableWrap)\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar style = node.style;\n\t\n\t// NOTE: Do not use maxWidth here because wrapping will\n\t// go wrong if the cell is outside of the viewable area\n\tif (this.clipped)\n\t{\n\t\tstyle.overflow = 'hidden';\n\t\t\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tstyle.maxHeight = h + 'px';\n\t\t\tstyle.maxWidth = w + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.width = w + 'px';\n\t\t}\n\t}\n\telse if (this.overflow == 'fill')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.height = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.maxHeight = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\t\n\tif (this.wrap && w > 0)\n\t{\n\t\tstyle.wordWrap = mxConstants.WORD_WRAP;\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.width = w + 'px';\n\n\t\tif (enableWrap && this.overflow != 'fill' && this.overflow != 'width')\n\t\t{\n\t\t\tvar sizeDiv = node;\n\t\t\t\n\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t{\n\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t\n\t\t\t\tif (node.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar tmp = sizeDiv.offsetWidth;\n\t\t\t\n\t\t\t// Workaround for text measuring in hidden containers\n\t\t\tif (tmp == 0)\n\t\t\t{\n\t\t\t\tvar prev = node.parentNode;\n\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(node);\n\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\tnode.style.visibility = '';\n\t\t\t\tprev.appendChild(node);\n\t\t\t}\n\n\t\t\ttmp += 3;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t}\n\t\t\t\n\t\t\tstyle.width = tmp + 'px';\n\t\t}\n\t}\n\telse\n\t{\n\t\tstyle.whiteSpace = 'nowrap';\n\t}\n};\n\n/**\n * Function: getMargin\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateMargin = function()\n{\n\tthis.margin = mxUtils.getAlignmentAsPoint(this.align, this.valign);\n};\n\n/**\n * Function: getSpacing\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.getSpacing = function()\n{\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tdx = (this.spacingLeft - this.spacingRight) / 2;\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tdx = -this.spacingRight - this.baseSpacingRight;\n\t}\n\telse\n\t{\n\t\tdx = this.spacingLeft + this.baseSpacingLeft;\n\t}\n\n\tif (this.valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tdy = (this.spacingTop - this.spacingBottom) / 2;\n\t}\n\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = -this.spacingBottom - this.baseSpacingBottom;;\n\t}\n\telse\n\t{\n\t\tdy = this.spacingTop + this.baseSpacingTop;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n__mxOutput.mxText = typeof mxText !== 'undefined' ? mxText : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTriangle\n * \n * Implementation of the triangle shape.\n * \n * Constructor: mxTriangle\n *\n * Constructs a new triangle shape.\n */\nfunction mxTriangle()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxTriangle, mxActor);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxTriangle.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxTriangle.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0, 0), new mxPoint(w, 0.5 * h), new mxPoint(0, h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxTriangle = typeof mxTriangle !== 'undefined' ? mxTriangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHexagon\n * \n * Implementation of the hexagon shape.\n * \n * Constructor: mxHexagon\n *\n * Constructs a new hexagon shape.\n */\nfunction mxHexagon()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxHexagon, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxHexagon.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0.25 * w, 0), new mxPoint(0.75 * w, 0), new mxPoint(w, 0.5 * h), new mxPoint(0.75 * w, h),\n\t                   new mxPoint(0.25 * w, h), new mxPoint(0, 0.5 * h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxHexagon = typeof mxHexagon !== 'undefined' ? mxHexagon : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLine\n *\n * Extends <mxShape> to implement a horizontal line shape.\n * This shape is registered under <mxConstants.SHAPE_LINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLine\n *\n * Constructs a new line shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLine(bounds, stroke, strokewidth, vertical)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.vertical = (vertical != null) ? vertical : this.vertical;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLine, mxShape);\n\n/**\n * Function: vertical\n * \n * Whether to paint a vertical line.\n */\nmxLine.prototype.vertical = false;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxLine.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.begin();\n\n\tif (this.vertical)\n\t{\n\t\tvar mid = x + w / 2;\n\t\tc.moveTo(mid, y);\n\t\tc.lineTo(mid, y + h);\n\t}\n\telse\n\t{\n\t\tvar mid = y + h / 2;\n\t\tc.moveTo(x, mid);\n\t\tc.lineTo(x + w, mid);\n\t}\n\n\tc.stroke();\n};\n\n__mxOutput.mxLine = typeof mxLine !== 'undefined' ? mxLine : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageShape\n *\n * Extends <mxShape> to implement an image shape. This shape is registered\n * under <mxConstants.SHAPE_IMAGE> in <mxCellRenderer>.\n * \n * Constructor: mxImageShape\n * \n * Constructs a new image shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * image - String that specifies the URL of the image. This is stored in\n * <image>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 0. This is stored in <strokewidth>.\n */\nfunction mxImageShape(bounds, image, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.image = image;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.shadow = false;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxImageShape, mxRectangleShape);\n\n/**\n * Variable: preserveImageAspect\n *\n * Switch to preserve image aspect. Default is true.\n */\nmxImageShape.prototype.preserveImageAspect = true;\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxImageShape.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: apply\n * \n * Overrides <mxShape.apply> to replace the fill and stroke colors with the\n * respective values from <mxConstants.STYLE_IMAGE_BACKGROUND> and\n * <mxConstants.STYLE_IMAGE_BORDER>.\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_IMAGE_BACKGROUND> => fill\n * - <mxConstants.STYLE_IMAGE_BORDER> => stroke\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxImageShape.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tthis.fill = null;\n\tthis.stroke = null;\n\tthis.gradient = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.preserveImageAspect = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_ASPECT, 1) == 1;\n\t\t\n\t\t// Legacy support for imageFlipH/V\n\t\tthis.flipH = this.flipH || mxUtils.getValue(this.style, 'imageFlipH', 0) == 1;\n\t\tthis.flipV = this.flipV || mxUtils.getValue(this.style, 'imageFlipV', 0) == 1;\n\t}\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxImageShape.prototype.isHtmlAllowed = function()\n{\n\treturn !this.preserveImageAspect;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxImageShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\n\treturn node;\n};\n\n/**\n * Function: isRoundable\n * \n * Disables inherited roundable support.\n */\nmxImageShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn false;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic background painting implementation.\n */\nmxImageShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, null);\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (fill != null)\n\t\t{\n\t\t\t// Stroke rendering required for shadow\n\t\t\tc.setFillColor(fill);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.fillAndStroke();\n\t\t}\n\n\t\t// FlipH/V are implicit via mxShape.updateTransform\n\t\tc.image(x, y, w, h, this.image, this.preserveImageAspect, false, false);\n\t\t\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (stroke != null)\n\t\t{\n\t\t\tc.setShadow(false);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.stroke();\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxRectangleShape.prototype.paintBackground.apply(this, arguments);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Overrides <mxShape.redraw> to preserve the aspect ratio of images.\n */\nmxImageShape.prototype.redrawHtmlShape = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = Math.max(0, Math.round(this.bounds.width)) + 'px';\n\tthis.node.style.height = Math.max(0, Math.round(this.bounds.height)) + 'px';\n\tthis.node.innerHTML = '';\n\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, '');\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, '');\n\t\tthis.node.style.backgroundColor = fill;\n\t\tthis.node.style.borderColor = stroke;\n\t\t\n\t\t// VML image supports PNG in IE6\n\t\tvar useVml = mxClient.IS_IE6 || ((document.documentMode == null || document.documentMode <= 8) && this.rotation != 0);\n\t\tvar img = document.createElement((useVml) ? mxClient.VML_PREFIX + ':image' : 'img');\n\t\timg.setAttribute('border', '0');\n\t\timg.style.position = 'absolute';\n\t\timg.src = this.image;\n\n\t\tvar filter = (this.opacity < 100) ? 'alpha(opacity=' + this.opacity + ')' : '';\n\t\tthis.node.style.filter = filter;\n\t\t\n\t\tif (this.flipH && this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2)';\n\t\t}\n\t\telse if (this.flipH)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(mirror=1)';\n\t\t}\n\t\telse if (this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)';\n\t\t}\n\n\t\tif (img.style.filter != filter)\n\t\t{\n\t\t\timg.style.filter = filter;\n\t\t}\n\n\t\tif (img.nodeName == 'image')\n\t\t{\n\t\t\timg.style.rotation = this.rotation;\n\t\t}\n\t\telse if (this.rotation != 0)\n\t\t{\n\t\t\t// LATER: Add flipV/H support\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', 'rotate(' + this.rotation + 'deg)');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', '');\n\t\t}\n\n\t\t// Known problem: IE clips top line of image for certain angles\n\t\timg.style.width = this.node.style.width;\n\t\timg.style.height = this.node.style.height;\n\t\t\n\t\tthis.node.style.backgroundImage = '';\n\t\tthis.node.appendChild(img);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(this.node);\n\t}\n};\n\n__mxOutput.mxImageShape = typeof mxImageShape !== 'undefined' ? mxImageShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLabel\n *\n * Extends <mxShape> to implement an image shape with a label.\n * This shape is registered under <mxConstants.SHAPE_LABEL> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLabel\n *\n * Constructs a new label shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLabel(bounds, fill, stroke, strokewidth)\n{\n\tmxRectangleShape.call(this, bounds, fill, stroke, strokewidth);\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLabel, mxRectangleShape);\n\n/**\n * Variable: imageSize\n *\n * Default width and height for the image. Default is\n * <mxConstants.DEFAULT_IMAGESIZE>.\n */\nmxLabel.prototype.imageSize = mxConstants.DEFAULT_IMAGESIZE;\n\n/**\n * Variable: spacing\n *\n * Default value for image spacing. Default is 2.\n */\nmxLabel.prototype.spacing = 2;\n\n/**\n * Variable: indicatorSize\n *\n * Default width and height for the indicicator. Default is 10.\n */\nmxLabel.prototype.indicatorSize = 10;\n\n/**\n * Variable: indicatorSpacing\n *\n * Default spacing between image and indicator. Default is 2.\n */\nmxLabel.prototype.indicatorSpacing = 2;\n\n/**\n * Function: init\n *\n * Initializes the shape and the <indicator>.\n */\nmxLabel.prototype.init = function(container)\n{\n\tmxShape.prototype.init.apply(this, arguments);\n\n\tif (this.indicatorShape != null)\n\t{\n\t\tthis.indicator = new this.indicatorShape();\n\t\tthis.indicator.dialect = this.dialect;\n\t\tthis.indicator.init(this.node);\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Reconfigures this shape. This will update the colors of the indicator\n * and reconfigure it if required.\n */\nmxLabel.prototype.redraw = function()\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.fill = this.indicatorColor;\n\t\tthis.indicator.stroke = this.indicatorStrokeColor;\n\t\tthis.indicator.gradient = this.indicatorGradientColor;\n\t\tthis.indicator.direction = this.indicatorDirection;\n\t\tthis.indicator.redraw();\n\t}\n\t\n\tmxShape.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n * no indicator shape.\n */\nmxLabel.prototype.isHtmlAllowed = function()\n{\n\treturn mxRectangleShape.prototype.isHtmlAllowed.apply(this, arguments) &&\n\t\tthis.indicatorColor == null && this.indicatorShape == null;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tthis.paintImage(c, x, y, w, h);\n\tthis.paintIndicator(c, x, y, w, h);\n\t\n\tmxRectangleShape.prototype.paintForeground.apply(this, arguments);\n};\n\n/**\n * Function: paintImage\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintImage = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.image, false, false, false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getImageBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_WIDTH, mxConstants.DEFAULT_IMAGESIZE);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_HEIGHT, mxConstants.DEFAULT_IMAGESIZE);\n\tvar spacing = mxUtils.getNumber(this.style, mxConstants.STYLE_SPACING, this.spacing) + 5;\n\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\n\tif (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n\n/**\n * Function: paintIndicator\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintIndicator = function(c, x, y, w, h)\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tthis.indicator.paint(c);\n\t}\n\telse if (this.indicatorImage != null)\n\t{\n\t\tvar bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImage, false, false, false);\n\t}\n};\n\n/**\n * Function: getIndicatorBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getIndicatorBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_WIDTH, this.indicatorSize);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_HEIGHT, this.indicatorSize);\n\tvar spacing = this.spacing + 5;\t\t\n\t\n\tif (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse if (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\t\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n/**\n * Function: redrawHtmlShape\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.redrawHtmlShape = function()\n{\n\tmxRectangleShape.prototype.redrawHtmlShape.apply(this, arguments);\n\t\n\t// Removes all children\n\twhile(this.node.hasChildNodes())\n\t{\n\t\tthis.node.removeChild(this.node.lastChild);\n\t}\n\t\n\tif (this.image != null)\n\t{\n\t\tvar node = document.createElement('img');\n\t\tnode.style.position = 'relative';\n\t\tnode.setAttribute('border', '0');\n\t\t\n\t\tvar bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t\tbounds.x -= this.bounds.x;\n\t\tbounds.y -= this.bounds.y;\n\n\t\tnode.style.left = Math.round(bounds.x) + 'px';\n\t\tnode.style.top = Math.round(bounds.y) + 'px';\n\t\tnode.style.width = Math.round(bounds.width) + 'px';\n\t\tnode.style.height = Math.round(bounds.height) + 'px';\n\t\t\n\t\tnode.src = this.image;\n\t\t\n\t\tthis.node.appendChild(node);\n\t}\n};\n\n__mxOutput.mxLabel = typeof mxLabel !== 'undefined' ? mxLabel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCylinder\n *\n * Extends <mxShape> to implement an cylinder shape. If a\n * custom shape with one filled area and an overlay path is\n * needed, then this shape's <redrawPath> should be overridden.\n * This shape is registered under <mxConstants.SHAPE_CYLINDER>\n * in <mxCellRenderer>.\n * \n * Constructor: mxCylinder\n *\n * Constructs a new cylinder shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCylinder(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxCylinder, mxShape);\n\n/**\n * Variable: maxHeight\n *\n * Defines the maximum height of the top and bottom part\n * of the cylinder shape.\n */\nmxCylinder.prototype.maxHeight = 40;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Sets stroke tolerance to 0 for SVG.\n */\nmxCylinder.prototype.svgStrokeTolerance = 0;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxCylinder.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h, false);\n\tc.fillAndStroke();\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tc.begin();\n\t\tthis.redrawPath(c, x, y, w, h, true);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getCylinderSize\n *\n * Returns the cylinder size.\n */\nmxCylinder.prototype.getCylinderSize = function(x, y, w, h)\n{\n\treturn Math.min(this.maxHeight, Math.round(h / 5));\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.redrawPath = function(c, x, y, w, h, isForeground)\n{\n\tvar dy = this.getCylinderSize(x, y, w, h);\n\t\n\tif ((isForeground && this.fill != null) || (!isForeground && this.fill == null))\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n\t\t\n\t\t// Needs separate shapes for correct hit-detection\n\t\tif (!isForeground)\n\t\t{\n\t\t\tc.stroke();\n\t\t\tc.begin();\n\t\t}\n\t}\n\t\n\tif (!isForeground)\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n\t\tc.lineTo(w, h - dy);\n\t\tc.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n\t\tc.close();\n\t}\n};\n\n__mxOutput.mxCylinder = typeof mxCylinder !== 'undefined' ? mxCylinder : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnector\n * \n * Extends <mxShape> to implement a connector shape. The connector\n * shape allows for arrow heads on either side.\n * \n * This shape is registered under <mxConstants.SHAPE_CONNECTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxConnector\n * \n * Constructs a new connector shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * Default is 'black'.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxConnector(points, stroke, strokewidth)\n{\n\tmxPolyline.call(this, points, stroke, strokewidth);\n};\n\n/**\n * Extends mxPolyline.\n */\nmxUtils.extend(mxConnector, mxPolyline);\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxConnector.prototype.updateBoundingBox = function()\n{\n\tthis.useSvgBoundingBox = this.style != null && this.style[mxConstants.STYLE_CURVED] == 1;\n\tmxShape.prototype.updateBoundingBox.apply(this, arguments);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// The indirection via functions for markers is needed in\n\t// order to apply the offsets before painting the line and\n\t// paint the markers after painting the line.\n\tvar sourceMarker = this.createMarker(c, pts, true);\n\tvar targetMarker = this.createMarker(c, pts, false);\n\n\tmxPolyline.prototype.paintEdgeShape.apply(this, arguments);\n\t\n\t// Disables shadows, dashed styles and fixes fill color for markers\n\tc.setFillColor(this.stroke);\n\tc.setShadow(false);\n\tc.setDashed(false);\n\t\n\tif (sourceMarker != null)\n\t{\n\t\tsourceMarker();\n\t}\n\t\n\tif (targetMarker != null)\n\t{\n\t\ttargetMarker();\n\t}\n};\n\n/**\n * Function: createMarker\n * \n * Prepares the marker by adding offsets in pts and returning a function to\n * paint the marker.\n */\nmxConnector.prototype.createMarker = function(c, pts, source)\n{\n\tvar result = null;\n\tvar n = pts.length;\n\tvar type = mxUtils.getValue(this.style, (source) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW);\n\tvar p0 = (source) ? pts[1] : pts[n - 2];\n\tvar pe = (source) ? pts[0] : pts[n - 1];\n\t\n\tif (type != null && p0 != null && pe != null)\n\t{\n\t\tvar count = 1;\n\t\t\n\t\t// Uses next non-overlapping point\n\t\twhile (count < n - 1 && Math.round(p0.x - pe.x) == 0 && Math.round(p0.y - pe.y) == 0)\n\t\t{\n\t\t\tp0 = (source) ? pts[1 + count] : pts[n - 2 - count];\n\t\t\tcount++;\n\t\t}\n\t\n\t\t// Computes the norm and the inverse norm\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\n\t\tvar dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\n\t\tvar unitX = dx / dist;\n\t\tvar unitY = dy / dist;\n\t\n\t\tvar size = mxUtils.getNumber(this.style, (source) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\n\t\t// Allow for stroke width in the end point used and the \n\t\t// orthogonal vectors describing the direction of the marker\n\t\tvar filled = this.style[(source) ? mxConstants.STYLE_STARTFILL : mxConstants.STYLE_ENDFILL] != 0;\n\t\t\n\t\tresult = mxMarker.createMarker(c, this, type, pe, unitX, unitY, size, source, this.strokewidth, filled);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\t// Adds marker sizes\n\tvar size = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_MARKERSIZE) + 1;\n\t}\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = Math.max(size, mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE)) + 1;\n\t}\n\t\n\tbbox.grow(size * this.scale);\n};\n\n__mxOutput.mxConnector = typeof mxConnector !== 'undefined' ? mxConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlane\n *\n * Extends <mxShape> to implement a swimlane shape. This shape is registered\n * under <mxConstants.SHAPE_SWIMLANE> in <mxCellRenderer>. Use the\n * <mxConstants.STYLE_STYLE_STARTSIZE> to define the size of the title\n * region, <mxConstants.STYLE_SWIMLANE_FILLCOLOR> for the content area fill,\n * <mxConstants.STYLE_SEPARATORCOLOR> to draw an additional vertical separator\n * and <mxConstants.STYLE_SWIMLANE_LINE> to hide the line between the title\n * region and the content area. The <mxConstants.STYLE_HORIZONTAL> affects\n * the orientation of this shape, not only its label.\n * \n * Constructor: mxSwimlane\n *\n * Constructs a new swimlane shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxSwimlane(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxSwimlane, mxShape);\n\n/**\n * Variable: imageSize\n *\n * Default imagewidth and imageheight if an image but no imagewidth\n * and imageheight are defined in the style. Value is 16.\n */\nmxSwimlane.prototype.imageSize = 16;\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxSwimlane.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: getTitleSize\n * \n * Returns the title size.\n */\nmxSwimlane.prototype.getTitleSize = function()\n{\n\treturn Math.max(0, mxUtils.getValue(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounding box for the label.\n */\nmxSwimlane.prototype.getLabelBounds = function(rect)\n{\n\tvar start = this.getTitleSize();\n\tvar bounds = new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n\tvar horizontal = this.isHorizontal();\n\t\n\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t// East is default\n\tvar shapeVertical = (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n\tvar realHorizontal = horizontal == !shapeVertical;\n\t\n\tvar realFlipH = !realHorizontal && flipH != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\tvar realFlipV = realHorizontal && flipV != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\n\t// Shape is horizontal\n\tif (!shapeVertical)\n\t{\n\t\tvar tmp = Math.min(bounds.height, start * this.scale);\n\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.y += bounds.height - tmp;\n\t\t}\n\n\t\tbounds.height = tmp;\n\t}\n\telse\n\t{\n\t\tvar tmp = Math.min(bounds.width, start * this.scale);\n\t\t\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.x += bounds.width - tmp;\t\n\t\t}\n\n\t\tbounds.width = tmp;\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t\treturn new mxRectangle(x, y, w, start);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t\treturn new mxRectangle(x, y, start, h);\n\t}\n};\n\n/**\n * Function: getSwimlaneArcSize\n * \n * Returns the arcsize for the swimlane.\n */\nmxSwimlane.prototype.getSwimlaneArcSize = function(w, h, start)\n{\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\treturn Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\n\t\treturn start * f * 3; \n\t}\n};\n\n/**\n * Function: isHorizontal\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.isHorizontal = function()\n{\n\treturn mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_FILLCOLOR, mxConstants.NONE);\n\tvar swimlaneLine = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_LINE, 1) == 1;\n\tvar r = 0;\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t}\n\t\n\tc.translate(x, y);\n\t\n\tif (!this.isRounded)\n\t{\n\t\tthis.paintSwimlane(c, x, y, w, h, start, fill, swimlaneLine);\n\t}\n\telse\n\t{\n\t\tr = this.getSwimlaneArcSize(w, h, start);\n\t\tr = Math.min(((this.isHorizontal()) ? h : w) - start, Math.min(start, r));\n\t\tthis.paintRoundedSwimlane(c, x, y, w, h, start, r, fill, swimlaneLine);\n\t}\n\t\n\tvar sep = mxUtils.getValue(this.style, mxConstants.STYLE_SEPARATORCOLOR, mxConstants.NONE);\n\tthis.paintSeparator(c, x, y, w, h, start, sep);\n\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x - x, bounds.y - y, bounds.width, bounds.height,\n\t\t\t\tthis.image, false, false, false);\n\t}\n\t\n\tif (this.glass)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintGlassEffect(c, 0, 0, w, start, r);\n\t}\n};\n\n/**\n * Function: paintSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintSwimlane = function(c, x, y, w, h, start, fill, swimlaneLine)\n{\n\tc.begin();\n\t\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t{\n\t\tc.pointerEvents = false;\n\t}\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(w, 0);\n\t\tc.lineTo(w, start);\n\t\tc.fillAndStroke();\n\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(0, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(start, h);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintRoundedSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintRoundedSwimlane = function(c, x, y, w, h, start, r, fill, swimlaneLine)\n{\n\tc.begin();\n\t\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t{\n\t\tc.pointerEvents = false;\n\t}\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(w, start);\n\t\tc.lineTo(w, r);\n\t\tc.quadTo(w, 0, w - Math.min(w / 2, r), 0);\n\t\tc.lineTo(Math.min(w / 2, r), 0);\n\t\tc.quadTo(0, 0, 0, r);\n\t\tc.lineTo(0, start);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h - r);\n\t\t\tc.quadTo(0, h, Math.min(w / 2, r), h);\n\t\t\tc.lineTo(w - Math.min(w / 2, r), h);\n\t\t\tc.quadTo(w, h, w, h - r);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(r, 0);\n\t\tc.quadTo(0, 0, 0, Math.min(h / 2, r));\n\t\tc.lineTo(0, h - Math.min(h / 2, r));\n\t\tc.quadTo(0, h, r, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, h);\n\t\t\tc.lineTo(w - r, h);\n\t\t\tc.quadTo(w, h, w, h - Math.min(h / 2, r));\n\t\t\tc.lineTo(w, Math.min(h / 2, r));\n\t\t\tc.quadTo(w, 0, w - r, 0);\n\t\t\tc.lineTo(start, 0);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintDivider\n *\n * Paints the divider between swimlane title and content area.\n */\nmxSwimlane.prototype.paintDivider = function(c, x, y, w, h, start, shadow)\n{\n\tif (!shadow)\n\t{\n\t\tc.setShadow(false);\n\t}\n\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(w, start);\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(start, h);\n\t}\n\n\tc.stroke();\n};\n\n/**\n * Function: paintSeparator\n *\n * Paints the vertical or horizontal separator line between swimlanes.\n */\nmxSwimlane.prototype.paintSeparator = function(c, x, y, w, h, start, color)\n{\n\tif (color != mxConstants.NONE)\n\t{\n\t\tc.setStrokeColor(color);\n\t\tc.setDashed(true);\n\t\tc.begin();\n\t\t\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tc.moveTo(w, start);\n\t\t\tc.lineTo(w, h);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t\tc.setDashed(false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.getImageBounds = function(x, y, w, h)\n{\n\tif (this.isHorizontal())\n\t{\n\t\treturn new mxRectangle(x + w - this.imageSize, y, this.imageSize, this.imageSize);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangle(x, y, this.imageSize, this.imageSize);\n\t}\n};\n\n__mxOutput.mxSwimlane = typeof mxSwimlane !== 'undefined' ? mxSwimlane : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphLayout\n * \n * Base class for all layout algorithms in mxGraph. Main public functions are\n * <moveCell> for handling a moved cell within a layouted parent, and <execute> for\n * running the layout on a given parent cell.\n *\n * Known Subclasses:\n *\n * <mxCircleLayout>, <mxCompactTreeLayout>, <mxCompositeLayout>,\n * <mxFastOrganicLayout>, <mxParallelEdgeLayout>, <mxPartitionLayout>,\n * <mxStackLayout>\n * \n * Constructor: mxGraphLayout\n *\n * Constructs a new layout using the given layouts.\n *\n * Arguments:\n * \n * graph - Enclosing \n */\nfunction mxGraphLayout(graph)\n{\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphLayout.prototype.graph = null;\n\n/**\n * Variable: useBoundingBox\n *\n * Boolean indicating if the bounding box of the label should be used if\n * its available. Default is true.\n */\nmxGraphLayout.prototype.useBoundingBox = true;\n\n/**\n * Variable: parent\n *\n * The parent cell of the layout, if any\n */\nmxGraphLayout.prototype.parent = null;\n\n/**\n * Function: moveCell\n * \n * Notified when a cell is being moved in a parent that has automatic\n * layout to update the cell state (eg. index) so that the outcome of the\n * layout will position the vertex as close to the point (x, y) as\n * possible.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * x - X-coordinate of the new cell location.\n * y - Y-coordinate of the new cell location.\n */\nmxGraphLayout.prototype.moveCell = function(cell, x, y) { };\n\n/**\n * Function: resizeCell\n * \n * Notified when a cell is being resized in a parent that has automatic\n * layout to update the other cells in the layout.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * bounds - <mxRectangle> that represents the new cell bounds.\n */\nmxGraphLayout.prototype.resizeCell = function(cell, bounds) { };\n\n/**\n * Function: execute\n * \n * Executes the layout algorithm for the children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be layed out.\n */\nmxGraphLayout.prototype.execute = function(parent) { };\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxGraphLayout.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: getConstraint\n * \n * Returns the constraint for the given key and cell. The optional edge and\n * source arguments are used to return inbound and outgoing routing-\n * constraints for the given edge and vertex. This implementation always\n * returns the value for the given key in the style of the given cell.\n * \n * Parameters:\n * \n * key - Key of the constraint to be returned.\n * cell - <mxCell> whose constraint should be returned.\n * edge - Optional <mxCell> that represents the connection whose constraint\n * should be returned. Default is null.\n * source - Optional boolean that specifies if the connection is incoming\n * or outgoing. Default is null.\n */\nmxGraphLayout.prototype.getConstraint = function(key, cell, edge, source)\n{\n\treturn this.graph.getCurrentCellStyle(cell)[key]\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> of cell paths for the visited cells.\n */\nmxGraphLayout.traverse = function(vertex, directed, func, edge, visited)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.graph.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.graph.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.graph.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || isSource)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.graph.view.getVisibleTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n * traverseAncestors - boolean whether to \n */\nmxGraphLayout.prototype.isAncestor = function(parent, child, traverseAncestors)\n{\n\tif (!traverseAncestors)\n\t{\n\t\treturn (this.graph.model.getParent(child) == parent);\n\t}\t\n\t\n\tif (child == parent)\n\t{\n\t\treturn false;\n\t}\n\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.graph.model.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: isVertexMovable\n * \n * Returns a boolean indicating if the given <mxCell> is movable or\n * bendable by the algorithm. This implementation returns true if the given\n * cell is movable in the graph.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraphLayout.prototype.isVertexMovable = function(cell)\n{\n\treturn this.graph.isCellMovable(cell);\n};\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn !this.graph.getModel().isVertex(vertex) ||\n\t\t!this.graph.isCellVisible(vertex);\n};\n\n/**\n * Function: isEdgeIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * cell - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isEdgeIgnored = function(edge)\n{\n\tvar model = this.graph.getModel();\n\t\n\treturn !model.isEdge(edge) ||\n\t\t!this.graph.isCellVisible(edge) ||\n\t\tmodel.getTerminal(edge, true) == null ||\n\t\tmodel.getTerminal(edge, false) == null;\n};\n\n/**\n * Function: setEdgeStyleEnabled\n * \n * Disables or enables the edge style of the given edge.\n */\nmxGraphLayout.prototype.setEdgeStyleEnabled = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_NOEDGESTYLE,\n\t\t\t(value) ? '0' : '1', [edge]);\n};\n\n/**\n * Function: setOrthogonalEdge\n * \n * Disables or enables orthogonal end segments of the given edge.\n */\nmxGraphLayout.prototype.setOrthogonalEdge = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_ORTHOGONAL,\n\t\t\t(value) ? '1' : '0', [edge]);\n};\n\n/**\n * Function: getParentOffset\n * \n * Determines the offset of the given parent to the parent\n * of the layout\n */\nmxGraphLayout.prototype.getParentOffset = function(parent)\n{\n\tvar result = new mxPoint();\n\n\tif (parent != null && parent != this.parent)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isAncestor(this.parent, parent))\n\t\t{\n\t\t\tvar parentGeo = model.getGeometry(parent);\n\n\t\t\twhile (parent != this.parent)\n\t\t\t{\n\t\t\t\tresult.x = result.x + parentGeo.x;\n\t\t\t\tresult.y = result.y + parentGeo.y;\n\n\t\t\t\tparent = model.getParent(parent);;\n\t\t\t\tparentGeo = model.getGeometry(parent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: setEdgePoints\n * \n * Replaces the array of mxPoints in the geometry of the given edge\n * with the given array of mxPoints.\n */\nmxGraphLayout.prototype.setEdgePoints = function(edge, points)\n{\n\tif (edge != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar geometry = model.getGeometry(edge);\n\n\t\tif (geometry == null)\n\t\t{\n\t\t\tgeometry = new mxGeometry();\n\t\t\tgeometry.setRelative(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t}\n\n\t\tif (this.parent != null && points != null)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tpoints[i].x = points[i].x - parentOffset.x;\n\t\t\t\tpoints[i].y = points[i].y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tgeometry.points = points;\n\t\tmodel.setGeometry(edge, geometry);\n\t}\n};\n\n/**\n * Function: setVertexLocation\n * \n * Sets the new position of the given cell taking into account the size of\n * the bounding box if <useBoundingBox> is true. The change is only carried\n * out if the new location is not equal to the existing location, otherwise\n * the geometry is not replaced with an updated instance. The new or old\n * bounds are returned (including overlapping labels).\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry is to be set.\n * x - Integer that defines the x-coordinate of the new location.\n * y - Integer that defines the y-coordinate of the new location.\n */\nmxGraphLayout.prototype.setVertexLocation = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(cell);\n\tvar result = null;\n\t\n\tif (geometry != null)\n\t{\n\t\tresult = new mxRectangle(x, y, geometry.width, geometry.height);\n\t\t\n\t\t// Checks for oversize labels and shifts the result\n\t\t// TODO: Use mxUtils.getStringSize for label bounds\n\t\tif (this.useBoundingBox)\n\t\t{\n\t\t\tvar state = this.graph.getView().getState(cell);\n\t\t\t\n\t\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar box = state.text.boundingBox;\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.x < state.x)\n\t\t\t\t{\n\t\t\t\t\tx += (state.x - box.x) / scale;\n\t\t\t\t\tresult.width = box.width;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y < state.y)\n\t\t\t\t{\n\t\t\t\t\ty += (state.y - box.y) / scale;\n\t\t\t\t\tresult.height = box.height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.parent != null)\n\t\t{\n\t\t\tvar parent = model.getParent(cell);\n\n\t\t\tif (parent != null && parent != this.parent)\n\t\t\t{\n\t\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\t\tx = x - parentOffset.x;\n\t\t\t\ty = y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tif (geometry.x != x || geometry.y != y)\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t\tgeometry.x = x;\n\t\t\tgeometry.y = y;\n\t\t\t\n\t\t\tmodel.setGeometry(cell, geometry);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVertexBounds\n * \n * Returns an <mxRectangle> that defines the bounds of the given cell or\n * the bounding box if <useBoundingBox> is true.\n */\nmxGraphLayout.prototype.getVertexBounds = function(cell)\n{\n\tvar geo = this.graph.getModel().getGeometry(cell);\n\n\t// Checks for oversize label bounding box and corrects\n\t// the return value accordingly\n\t// TODO: Use mxUtils.getStringSize for label bounds\n\tif (this.useBoundingBox)\n\t{\n\t\tvar state = this.graph.getView().getState(cell);\n\n\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tvar scale = this.graph.getView().scale;\n\t\t\tvar tmp = state.text.boundingBox;\n\n\t\t\tvar dx0 = Math.max(state.x - tmp.x, 0) / scale;\n\t\t\tvar dy0 = Math.max(state.y - tmp.y, 0) / scale;\n\t\t\tvar dx1 = Math.max((tmp.x + tmp.width) - (state.x + state.width), 0) / scale;\n  \t\t\tvar dy1 = Math.max((tmp.y + tmp.height) - (state.y + state.height), 0) / scale;\n\n\t\t\tgeo = new mxRectangle(geo.x - dx0, geo.y - dy0, geo.width + dx0 + dx1, geo.height + dy0 + dy1);\n\t\t}\n\t}\n\n\tif (this.parent != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tgeo = geo.clone();\n\n\t\tif (parent != null && parent != this.parent)\n\t\t{\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\t\t\tgeo.x = geo.x + parentOffset.x;\n\t\t\tgeo.y = geo.y + parentOffset.y;\n\t\t}\n\t}\n\n\treturn new mxRectangle(geo.x, geo.y, geo.width, geo.height);\n};\n\n/**\n * Function: arrangeGroups\n * \n * Shortcut to <mxGraph.updateGroupBounds> with moveGroup set to true.\n */\nmxGraphLayout.prototype.arrangeGroups = function(cells, border, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\treturn this.graph.updateGroupBounds(cells, border, true, topBorder, rightBorder, bottomBorder, leftBorder);\n};\n\n/**\n * Class: WeightedCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the weighted\n * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==\n * (x.equals(y))\n *\n * Constructor: WeightedCellSorter\n * \n * Constructs a new weighted cell sorted for the given cell and weight.\n */\nfunction WeightedCellSorter(cell, weightedValue)\n{\n\tthis.cell = cell;\n\tthis.weightedValue = weightedValue;\n};\n\n/**\n * Variable: weightedValue\n * \n * The weighted value of the cell stored.\n */\nWeightedCellSorter.prototype.weightedValue = 0;\n\n/**\n * Variable: nudge\n * \n * Whether or not to flip equal weight values.\n */\nWeightedCellSorter.prototype.nudge = false;\n\n/**\n * Variable: visited\n * \n * Whether or not this cell has been visited in the current assignment.\n */\nWeightedCellSorter.prototype.visited = false;\n\n/**\n * Variable: rankIndex\n * \n * The index this cell is in the model rank.\n */\nWeightedCellSorter.prototype.rankIndex = null;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated.\n */\nWeightedCellSorter.prototype.cell = null;\n\n/**\n * Function: compare\n * \n * Compares two WeightedCellSorters.\n */\nWeightedCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.weightedValue > a.weightedValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.weightedValue < a.weightedValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b.nudge)\n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxGraphLayout = typeof mxGraphLayout !== 'undefined' ? mxGraphLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStackLayout\n * \n * Extends <mxGraphLayout> to create a horizontal or vertical stack of the\n * child vertices. The children do not need to be connected for this layout\n * to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxStackLayout(graph, true);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxStackLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxStackLayout(graph, horizontal, spacing, x0, y0, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = (spacing != null) ? spacing : 0;\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.border = (border != null) ? border : 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxStackLayout.prototype = new mxGraphLayout();\nmxStackLayout.prototype.constructor = mxStackLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxStackLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n *\n * Specifies the spacing between the cells. Default is 0.\n */\nmxStackLayout.prototype.spacing = null;\n\n/**\n * Variable: x0\n *\n * Specifies the horizontal origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.x0 = null;\n\n/**\n * Variable: y0\n *\n * Specifies the vertical origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.y0 = null;\n\n/**\n * Variable: border\n *\n * Border to be added if fill is true. Default is 0.\n */\nmxStackLayout.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginTop = 0;\n\n/**\n * Variable: marginLeft\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginLeft = 0;\n\n/**\n * Variable: marginRight\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginRight = 0;\n\n/**\n * Variable: marginBottom\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginBottom = 0;\n\n/**\n * Variable: keepFirstLocation\n * \n * Boolean indicating if the location of the first cell should be\n * kept, that is, it will not be moved to x0 or y0. Default is false.\n */\nmxStackLayout.prototype.keepFirstLocation = false;\n\n/**\n * Variable: fill\n * \n * Boolean indicating if dimension should be changed to fill out the parent\n * cell. Default is false.\n */\nmxStackLayout.prototype.fill = false;\n\t\n/**\n * Variable: resizeParent\n * \n * If the parent should be resized to match the width/height of the\n * stack. Default is false.\n */\nmxStackLayout.prototype.resizeParent = false;\n\n/**\n * Variable: resizeParentMax\n * \n * Use maximum of existing value and new value for resize of parent.\n * Default is false.\n */\nmxStackLayout.prototype.resizeParentMax = false;\n\n/**\n * Variable: resizeLast\n * \n * If the last element should be resized to fill out the parent. Default is\n * false. If <resizeParent> is true then this is ignored.\n */\nmxStackLayout.prototype.resizeLast = false;\n\n/**\n * Variable: wrap\n * \n * Value at which a new column or row should be created. Default is null.\n */\nmxStackLayout.prototype.wrap = null;\n\n/**\n * Variable: borderCollapse\n * \n * If the strokeWidth should be ignored. Default is true.\n */\nmxStackLayout.prototype.borderCollapse = true;\n\n/**\n * Variable: allowGaps\n * \n * If gaps should be allowed in the stack. Default is false.\n */\nmxStackLayout.prototype.allowGaps = false;\n\n/**\n * Variable: gridSize\n * \n * Grid size for alignment of position and size. Default is 0.\n */\nmxStackLayout.prototype.gridSize = 0;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxStackLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxStackLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\tvar horizontal = this.isHorizontal();\n\t\n\tif (cell != null && parent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar value = (horizontal) ? x : y;\n\t\tvar pstate = this.graph.getView().getState(parent);\n\n\t\tif (pstate != null)\n\t\t{\n\t\t\tvalue -= (horizontal) ? pstate.x : pstate.y;\n\t\t}\n\t\t\n\t\tvalue /= this.graph.view.scale;\n\t\t\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != cell)\n\t\t\t{\n\t\t\t\tvar bounds = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = (horizontal) ?\n\t\t\t\t\t\tbounds.x + bounds.width / 2 :\n\t\t\t\t\t\tbounds.y + bounds.height / 2;\n\t\t\t\t\t\n\t\t\t\t\tif (last <= value && tmp > value)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlast = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: getParentSize\n * \n * Returns the size for the parent container or the size of the graph\n * container if the parent is a layer or the root of the model.\n */\nmxStackLayout.prototype.getParentSize = function(parent)\n{\n\tvar model = this.graph.getModel();\t\t\t\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null && ((pgeo == null &&\n\t\tmodel.isLayer(parent)) || parent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\t\n\treturn pgeo;\n};\n\n/**\n * Function: getLayoutCells\n * \n * Returns the cells to be layouted.\n */\nmxStackLayout.prototype.getLayoutCells = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(parent);\n\tvar cells = [];\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isVertexIgnored(child) && this.isVertexMovable(child))\n\t\t{\n\t\t\tcells.push(child);\n\t\t}\n\t}\n\t\n\tif (this.allowGaps)\n\t{\n\t\tcells.sort(mxUtils.bind(this, function(c1, c2)\n\t\t{\n\t\t\tvar geo1 = this.graph.getCellGeometry(c1);\n\t\t\tvar geo2 = this.graph.getCellGeometry(c2);\n\t\t\t\n\t\t\treturn (this.horizontal) ?\n\t\t\t\t((geo1.x == geo2.x) ? 0 : ((geo1.x > geo2.x > 0) ? 1 : -1)) :\n\t\t\t\t((geo1.y == geo2.y) ? 0 : ((geo1.y > geo2.y > 0) ? 1 : -1));\n\t\t}));\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: snap\n * \n * Snaps the given value to the grid size.\n */\nmxStackLayout.prototype.snap = function(value)\n{\n\tif (this.gridSize != null && this.gridSize > 0)\n\t{\n\t\tvalue = Math.max(value, this.gridSize);\n\t\t\n\t\tif (value / this.gridSize > 1)\n\t\t{\n\t\t\tvar mod = value % this.gridSize;\n\t\t\tvalue += mod > this.gridSize / 2 ? (this.gridSize - mod) : -mod;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.execute = function(parent)\n{\n\tif (parent != null)\n\t{\n\t\tvar pgeo = this.getParentSize(parent);\n\t\tvar horizontal = this.isHorizontal();\n\t\tvar model = this.graph.getModel();\t\n\t\tvar fillValue = null;\n\t\t\n\t\tif (pgeo != null)\n\t\t{\n\t\t\tfillValue = (horizontal) ? pgeo.height - this.marginTop - this.marginBottom :\n\t\t\t\tpgeo.width - this.marginLeft - this.marginRight;\n\t\t}\n\t\t\n\t\tfillValue -= 2 * this.border;\n\t\tvar x0 = this.x0 + this.border + this.marginLeft;\n\t\tvar y0 = this.y0 + this.border + this.marginTop;\n\t\t\n\t\t// Handles swimlane start size\n\t\tif (this.graph.isSwimlane(parent))\n\t\t{\n\t\t\t// Uses computed style to get latest \n\t\t\tvar style = this.graph.getCellStyle(parent);\n\t\t\tvar start = mxUtils.getNumber(style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE);\n\t\t\tvar horz = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true) == 1;\n\n\t\t\tif (pgeo != null)\n\t\t\t{\n\t\t\t\tif (horz)\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.height);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.width);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal == horz)\n\t\t\t{\n\t\t\t\tfillValue -= start;\n\t\t\t}\n\n\t\t\tif (horz)\n\t\t\t{\n\t\t\t\ty0 += start;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx0 += start;\n\t\t\t}\n\t\t}\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar tmp = 0;\n\t\t\tvar last = null;\n\t\t\tvar lastValue = 0;\n\t\t\tvar lastChild = null;\n\t\t\tvar cells = this.getLayoutCells(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar child = cells[i];\n\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (this.wrap != null && last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((horizontal && last.x + last.width +\n\t\t\t\t\t\t\tgeo.width + 2 * this.spacing > this.wrap) ||\n\t\t\t\t\t\t\t(!horizontal && last.y + last.height +\n\t\t\t\t\t\t\tgeo.height + 2 * this.spacing > this.wrap))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlast = null;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ty0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tx0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = 0;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttmp = Math.max(tmp, (horizontal) ? geo.height : geo.width);\n\t\t\t\t\tvar sw = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (!this.borderCollapse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childStyle = this.graph.getCellStyle(child);\n\t\t\t\t\t\tsw = mxUtils.getNumber(childStyle, mxConstants.STYLE_STROKEWIDTH, 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar temp = lastValue + this.spacing + Math.floor(sw / 2);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = this.snap(((this.allowGaps) ? Math.max(temp, geo.x) :\n\t\t\t\t\t\t\t\ttemp) - this.marginLeft) + this.marginLeft;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = this.snap(((this.allowGaps) ? Math.max(temp, geo.y) :\n\t\t\t\t\t\t\t\ttemp) - this.marginTop) + this.marginTop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!this.keepFirstLocation)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = (this.allowGaps && geo.x > x0) ? Math.max(this.snap(geo.x -\n\t\t\t\t\t\t\t\tthis.marginLeft) + this.marginLeft, x0) : x0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = (this.allowGaps && geo.y > y0) ? Math.max(this.snap(geo.y -\n\t\t\t\t\t\t\t\tthis.marginTop) + this.marginTop, y0) : y0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y = y0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.fill && fillValue != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = fillValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = fillValue;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = this.snap(geo.width);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = this.snap(geo.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.setChildGeometry(child, geo);\n\t\t\t\t\tlastChild = child;\n\t\t\t\t\tlast = geo;\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.x + last.width + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.y + last.height + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resizeParent && pgeo != null && last != null && !this.graph.isCellCollapsed(parent))\n\t\t\t{\n\t\t\t\tthis.updateParentGeometry(parent, pgeo, last);\n\t\t\t}\n\t\t\telse if (this.resizeLast && pgeo != null && last != null && lastChild != null)\n\t\t\t{\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tlast.width = pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlast.height = pgeo.height - last.y - this.spacing - this.marginBottom;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.setChildGeometry(lastChild, last);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: setChildGeometry\n * \n * Sets the specific geometry to the given child cell.\n * \n * Parameters:\n * \n * child - The given child of <mxCell>.\n * geo - The specific geometry of <mxGeometry>.\n */\nmxStackLayout.prototype.setChildGeometry = function(child, geo)\n{\n\tvar geo2 = this.graph.getCellGeometry(child);\n\t\n\tif (geo2 == null || geo.x != geo2.x || geo.y != geo2.y ||\n\t\tgeo.width != geo2.width || geo.height != geo2.height)\n\t{\n\t\tthis.graph.getModel().setGeometry(child, geo);\n\t}\n};\n\n/**\n * Function: updateParentGeometry\n * \n * Updates the geometry of the given parent cell.\n * \n * Parameters:\n * \n * parent - The given parent of <mxCell>.\n * pgeo - The new <mxGeometry> for parent.\n * last - The last <mxGeometry>.\n */\nmxStackLayout.prototype.updateParentGeometry = function(parent, pgeo, last)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\t\n\n\tvar pgeo2 = pgeo.clone();\n\t\n\tif (horizontal)\n\t{\n\t\tvar tmp = last.x + last.width + this.marginRight + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.width = Math.max(pgeo2.width, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.width = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tmp = last.y + last.height + this.marginBottom + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.height = Math.max(pgeo2.height, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.height = tmp;\n\t\t}\n\t}\n\t\n\tif (pgeo.x != pgeo2.x || pgeo.y != pgeo2.y ||\n\t\tpgeo.width != pgeo2.width || pgeo.height != pgeo2.height)\n\t{\n\t\tmodel.setGeometry(parent, pgeo2);\n\t}\n};\n\n__mxOutput.mxStackLayout = typeof mxStackLayout !== 'undefined' ? mxStackLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPartitionLayout\n * \n * Extends <mxGraphLayout> for partitioning the parent cell vertically or\n * horizontally by filling the complete area with the child cells. A horizontal\n * layout partitions the height of the given parent whereas a a non-horizontal\n * layout partitions the width. If the parent is a layer (that is, a child of\n * the root node), then the current graph size is partitioned. The children do\n * not need to be connected for this layout to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxPartitionLayout(graph, true, 10, 20);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxPartitionLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxPartitionLayout(graph, horizontal, spacing, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = spacing || 0;\n\tthis.border = border || 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxPartitionLayout.prototype = new mxGraphLayout();\nmxPartitionLayout.prototype.constructor = mxPartitionLayout;\n\n/**\n * Variable: horizontal\n * \n * Boolean indicating the direction in which the space is partitioned.\n * Default is true.\n */\nmxPartitionLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n * \n * Integer that specifies the absolute spacing in pixels between the\n * children. Default is 0.\n */\nmxPartitionLayout.prototype.spacing = null;\n\n/**\n * Variable: border\n * \n * Integer that specifies the absolute inset in pixels for the parent that\n * contains the children. Default is 0.\n */\nmxPartitionLayout.prototype.border = null;\n\n/**\n * Variable: resizeVertices\n * \n * Boolean that specifies if vertices should be resized. Default is true.\n */\nmxPartitionLayout.prototype.resizeVertices = true;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxPartitionLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxPartitionLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\t\n\tif (cell != null &&\n\t\tparent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\t// Finds index of the closest swimlane\n\t\t// TODO: Take into account the orientation\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\tvar bounds = this.getVertexBounds(child);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tvar tmp = bounds.x + bounds.width / 2;\n\t\t\t\t\n\t\t\t\tif (last < x && tmp > x)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlast = tmp;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\t\t\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. All children where <isVertexIgnored>\n * returns false and <isVertexMovable> returns true are modified.\n */\nmxPartitionLayout.prototype.execute = function(parent)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null &&\n\t\t((pgeo == null &&\n\t\tmodel.isLayer(parent)) ||\n\t\tparent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\n\tif (pgeo != null)\n\t{\n\t\tvar children = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(child) &&\n\t\t\t\tthis.isVertexMovable(child))\n\t\t\t{\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar n = children.length;\n\n\t\tif (n > 0)\n\t\t{\n\t\t\tvar x0 = this.border;\n\t\t\tvar y0 = this.border;\n\t\t\tvar other = (horizontal) ? pgeo.height : pgeo.width;\n\t\t\tother -= 2 * this.border;\n\n\t\t\tvar size = (this.graph.isSwimlane(parent)) ?\n\t\t\t\tthis.graph.getStartSize(parent) :\n\t\t\t\tnew mxRectangle();\n\n\t\t\tother -= (horizontal) ? size.height : size.width;\n\t\t\tx0 = x0 + size.width;\n\t\t\ty0 = y0 + size.height;\n\n\t\t\tvar tmp = this.border + (n - 1) * this.spacing;\n\t\t\tvar value = (horizontal) ?\n\t\t\t\t((pgeo.width - x0 - tmp) / n) :\n\t\t\t\t((pgeo.height - y0 - tmp) / n);\n\t\t\t\n\t\t\t// Avoids negative values, that is values where the sum of the\n\t\t\t// spacing plus the border is larger then the available space\n\t\t\tif (value > 0)\n\t\t\t{\n\t\t\t\tmodel.beginUpdate();\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t\tgeo.y = y0;\n\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.width = value;\n\t\t\t\t\t\t\t\t\tgeo.height = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tx0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.height = value;\n\t\t\t\t\t\t\t\t\tgeo.width = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ty0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel.setGeometry(child, geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxPartitionLayout = typeof mxPartitionLayout !== 'undefined' ? mxPartitionLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCompactTreeLayout\n * \n * Extends <mxGraphLayout> to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new compact tree layout for the specified graph\n * and orientation.\n */\nfunction mxCompactTreeLayout(graph, horizontal, invert)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.invert = (invert != null) ? invert : false;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompactTreeLayout.prototype = new mxGraphLayout();\nmxCompactTreeLayout.prototype.constructor = mxCompactTreeLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxCompactTreeLayout.prototype.horizontal = null;\t \n\n/**\n * Variable: invert\n *\n * Specifies if edge directions should be inverted. Default is false.\n */\nmxCompactTreeLayout.prototype.invert = null;\t \n\n/**\n * Variable: resizeParent\n * \n * If the parents should be resized to match the width/height of the\n * children. Default is true.\n */\nmxCompactTreeLayout.prototype.resizeParent = true;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxCompactTreeLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents. Default is 10.\n */\nmxCompactTreeLayout.prototype.groupPadding = 10;\n\n/**\n * Variable: groupPaddingTop\n * \n * Top padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingTop = 0;\n\n/**\n * Variable: groupPaddingRight\n * \n * Right padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingRight = 0;\n\n/**\n * Variable: groupPaddingBottom\n * \n * Bottom padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingBottom = 0;\n\n/**\n * Variable: groupPaddingLeft\n * \n * Left padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingLeft = 0;\n\n/**\n * Variable: parentsChanged\n *\n * A set of the parents that need updating based on children\n * process as part of the layout.\n */\nmxCompactTreeLayout.prototype.parentsChanged = null;\n\n/**\n * Variable: moveTree\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.moveTree = false;\n\n/**\n * Variable: visited\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.visited = null;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 10.\n */\nmxCompactTreeLayout.prototype.levelDistance = 10;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 20.\n */\nmxCompactTreeLayout.prototype.nodeDistance = 20;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCompactTreeLayout.prototype.resetEdges = true;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefVertEdgeOff = 4;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex.\n */\nmxCompactTreeLayout.prototype.minEdgeJetty = 8;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed.\n */\nmxCompactTreeLayout.prototype.channelBuffer = 4;\n\n/**\n * Variable: edgeRouting\n * \n * Whether or not to apply the internal tree edge routing.\n */\nmxCompactTreeLayout.prototype.edgeRouting = true;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxCompactTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: alignRanks\n * \n * Whether or not the tops of cells in each rank should be aligned\n * across the rank\n */\nmxCompactTreeLayout.prototype.alignRanks = false;\n\n/**\n * Variable: maxRankHeight\n * \n * An array of the maximum height of cells (relative to the layout direction)\n * per rank\n */\nmxCompactTreeLayout.prototype.maxRankHeight = null;\n\n/**\n * Variable: root\n * \n * The cell to use as the root of the tree\n */\nmxCompactTreeLayout.prototype.root = null;\n\n/**\n * Variable: node\n * \n * The internal node representation of the root cell. Do not set directly\n * , this value is only exposed to assist with post-processing functionality\n */\nmxCompactTreeLayout.prototype.node = null;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxCompactTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxCompactTreeLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n * Overrides <root> if specified.\n */\nmxCompactTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.getModel();\n\n\tif (root == null)\n\t{\n\t\t// Takes the parent as the root if it has outgoing edges\n\t\tif (this.graph.getEdges(parent, model.getParent(parent),\n\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t{\n\t\t\tthis.root = parent;\n\t\t}\n\t\t\n\t\t// Tries to find a suitable root in the parent's\n\t\t// children\n\t\telse\n\t\t{\n\t\t\tvar roots = this.graph.findTreeRoots(parent, true, this.invert);\n\t\t\t\n\t\t\tif (roots.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < roots.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (!this.isVertexIgnored(roots[i]) &&\n\t\t\t\t\t\tthis.graph.getEdges(roots[i], null,\n\t\t\t\t\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.root = roots[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.root = root;\n\t}\n\t\n\tif (this.root != null)\n\t{\n\t\tif (this.resizeParent)\n\t\t{\n\t\t\tthis.parentsChanged = new Object();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.parentsChanged = null;\n\t\t}\n\n\t\t//  Maintaining parent location\n\t\tthis.parentX = null;\n\t\tthis.parentY = null;\n\t\t\n\t\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tthis.parentX = geo.x;\n\t\t\t\tthis.parentY = geo.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmodel.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tthis.visited = new Object();\n\t\t\tthis.node = this.dfs(this.root, parent);\n\t\t\t\n\t\t\tif (this.alignRanks)\n\t\t\t{\n\t\t\t\tthis.maxRankHeight = [];\n\t\t\t\tthis.findRankHeights(this.node, 0);\n\t\t\t\tthis.setCellHeights(this.node, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.node != null)\n\t\t\t{\n\t\t\t\tthis.layout(this.node);\n\t\t\t\tvar x0 = this.graph.gridSize;\n\t\t\t\tvar y0 = x0;\n\t\t\t\t\n\t\t\t\tif (!this.moveTree)\n\t\t\t\t{\n\t\t\t\t\tvar g = this.getVertexBounds(this.root);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx0 = g.x;\n\t\t\t\t\t\ty0 = g.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bounds = null;\n\t\t\t\t\n\t\t\t\tif (this.isHorizontal())\n\t\t\t\t{\n\t\t\t\t\tbounds = this.horizontalLayout(this.node, x0, y0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbounds = this.verticalLayout(this.node, null, x0, y0);\n\t\t\t\t}\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\tvar dy = 0;\n\n\t\t\t\t\tif (bounds.x < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = Math.abs(x0 - bounds.x);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bounds.y < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = Math.abs(y0 - bounds.y);\t\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.moveNode(this.node, dx, dy);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.resizeParent)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.adjustParents();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.edgeRouting)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Iterate through all edges setting their positions\n\t\t\t\t\t\tthis.localEdgeProcessing(this.node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Maintaining parent location\n\t\t\t\tif (this.parentX != null && this.parentY != null)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\tgeo.x = this.parentX;\n\t\t\t\t\t\tgeo.y = this.parentY;\n\t\t\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: moveNode\n * \n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.moveNode = function(node, dx, dy)\n{\n\tnode.x += dx;\n\tnode.y += dy;\n\tthis.apply(node);\n\t\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.moveNode(child, dx, dy);\n\t\tchild = child.next;\n\t}\n};\n\n\n/**\n * Function: sortOutgoingEdges\n * \n * Called if <sortEdges> is true to sort the array of outgoing edges in place.\n */\nmxCompactTreeLayout.prototype.sortOutgoingEdges = function(source, edges)\n{\n\tvar lookup = new mxDictionary();\n\t\n\tedges.sort(function(e1, e2)\n\t{\n\t\tvar end1 = e1.getTerminal(e1.getTerminal(false) == source);\n\t\tvar p1 = lookup.get(end1);\n\t\t\n\t\tif (p1 == null)\n\t\t{\n\t\t\tp1 = mxCellPath.create(end1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end1, p1);\n\t\t}\n\n\t\tvar end2 = e2.getTerminal(e2.getTerminal(false) == source);\n\t\tvar p2 = lookup.get(end2);\n\t\t\n\t\tif (p2 == null)\n\t\t{\n\t\t\tp2 = mxCellPath.create(end2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end2, p2);\n\t\t}\n\n\t\treturn mxCellPath.compare(p1, p2);\n\t});\n};\n\n/**\n * Function: findRankHeights\n * \n * Stores the maximum height (relative to the layout\n * direction) of cells in each rank\n */\nmxCompactTreeLayout.prototype.findRankHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] == null || this.maxRankHeight[rank] < node.height)\n\t{\n\t\tthis.maxRankHeight[rank] = node.height;\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.findRankHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: setCellHeights\n * \n * Set the cells heights (relative to the layout\n * direction) when the tops of each rank are to be aligned\n */\nmxCompactTreeLayout.prototype.setCellHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] != null && this.maxRankHeight[rank] > node.height)\n\t{\n\t\tnode.height = this.maxRankHeight[rank];\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.setCellHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: dfs\n * \n * Does a depth first search starting at the specified cell.\n * Makes sure the specified parent is never left by the\n * algorithm.\n */\nmxCompactTreeLayout.prototype.dfs = function(cell, parent)\n{\n\tvar id = mxCellPath.create(cell);\n\tvar node = null;\n\t\n\tif (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell))\n\t{\n\t\tthis.visited[id] = cell;\n\t\tnode = this.createNode(cell);\n\n\t\tvar model = this.graph.getModel();\n\t\tvar prev = null;\n\t\tvar out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n\t\tvar view = this.graph.getView();\n\t\t\n\t\tif (this.sortEdges)\n\t\t{\n\t\t\tthis.sortOutgoingEdges(cell, out);\n\t\t}\n\n\t\tfor (var i = 0; i < out.length; i++)\n\t\t{\n\t\t\tvar edge = out[i];\n\t\t\t\n\t\t\tif (!this.isEdgeIgnored(edge))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.edgeRouting)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if terminal in same swimlane\n\t\t\t\tvar state = view.getState(edge);\n\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);\n\t\t\t\tvar tmp = this.dfs(target, parent);\n\t\t\t\t\n\t\t\t\tif (tmp != null && model.getGeometry(target) != null)\n\t\t\t\t{\n\t\t\t\t\tif (prev == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.child = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprev.next = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tprev = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: layout\n * \n * Starts the actual compact tree layout algorithm\n * at the given node.\n */\nmxCompactTreeLayout.prototype.layout = function(node)\n{\n\tif (node != null)\n\t{\n\t\tvar child = node.child;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tthis.layout(child);\n\t\t\tchild = child.next;\n\t\t}\n\t\t\n\t\tif (node.child != null)\n\t\t{\n\t\t\tthis.attachParent(node, this.join(node));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.layoutLeaf(node);\n\t\t}\n\t}\n};\n\n/**\n * Function: horizontalLayout\n */\nmxCompactTreeLayout.prototype.horizontalLayout = function(node, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetX;\n\tnode.y += y0 + node.offsetY;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.horizontalLayout(child, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.y + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\t\n/**\n * Function: verticalLayout\n */\nmxCompactTreeLayout.prototype.verticalLayout = function(node, parent, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetY;\n\tnode.y += y0 + node.offsetX;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.x + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: attachParent\n */\nmxCompactTreeLayout.prototype.attachParent = function(node, height)\n{\n\tvar x = this.nodeDistance + this.levelDistance;\n\tvar y2 = (height - node.width) / 2 - this.nodeDistance;\n\tvar y1 = y2 + node.width + 2 * this.nodeDistance - height;\n\t\n\tnode.child.offsetX = x + node.height;\n\tnode.child.offsetY = y1;\n\t\n\tnode.contour.upperHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y1, node.contour.upperHead));\n\tnode.contour.lowerHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y2, node.contour.lowerHead));\n};\n\n/**\n * Function: layoutLeaf\n */\nmxCompactTreeLayout.prototype.layoutLeaf = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tnode.contour.upperTail = this.createLine(\n\t\tnode.height + dist, 0);\n\tnode.contour.upperHead = node.contour.upperTail;\n\tnode.contour.lowerTail = this.createLine(\n\t\t0, -node.width - dist);\n\tnode.contour.lowerHead = this.createLine(\n\t\tnode.height + dist, 0, node.contour.lowerTail);\n};\n\n/**\n * Function: join\n */\nmxCompactTreeLayout.prototype.join = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tvar child = node.child;\n\tnode.contour = child.contour;\n\tvar h = child.width + dist;\n\tvar sum = h;\n\tchild = child.next;\n\t\n\twhile (child != null)\n\t{\n\t\tvar d = this.merge(node.contour, child.contour);\n\t\tchild.offsetY = d + h;\n\t\tchild.offsetX = 0;\n\t\th = child.width + dist;\n\t\tsum += d + h;\n\t\tchild = child.next;\n\t}\n\t\n\treturn sum;\n};\n\n/**\n * Function: merge\n */\nmxCompactTreeLayout.prototype.merge = function(p1, p2)\n{\n\tvar x = 0;\n\tvar y = 0;\n\tvar total = 0;\n\t\n\tvar upper = p1.lowerHead;\n\tvar lower = p2.upperHead;\n\t\n\twhile (lower != null && upper != null)\n\t{\n\t\tvar d = this.offset(x, y, lower.dx, lower.dy,\n\t\t\tupper.dx, upper.dy);\n\t\ty += d;\n\t\ttotal += d;\n\t\t\n\t\tif (x + lower.dx <= upper.dx)\n\t\t{\n\t\t\tx += lower.dx;\n\t\t\ty += lower.dy;\n\t\t\tlower = lower.next;\n\t\t}\n\t\telse\n\t\t{\t\t\t\t\n\t\t\tx -= upper.dx;\n\t\t\ty -= upper.dy;\n\t\t\tupper = upper.next;\n\t\t}\n\t}\n\t\n\tif (lower != null)\n\t{\n\t\tvar b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n\t\tp1.upperTail = (b.next != null) ? p2.upperTail : b;\n\t\tp1.lowerTail = p2.lowerTail;\n\t}\n\telse\n\t{\n\t\tvar b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n\t\t\n\t\tif (b.next == null)\n\t\t{\n\t\t\tp1.lowerTail = b;\n\t\t}\n\t}\n\t\n\tp1.lowerHead = p2.lowerHead;\n\t\n\treturn total;\n};\n\n/**\n * Function: offset\n */\nmxCompactTreeLayout.prototype.offset = function(p1, p2, a1, a2, b1, b2)\n{\n\tvar d = 0;\n\t\n\tif (b1 <= p1 || p1 + a1 <= 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar t = b1 * a2 - a1 * b2;\n\t\n\tif (t > 0)\n\t{\n\t\tif (p1 < 0)\n\t\t{\n\t\t\tvar s = p1 * a2;\n\t\t\td = s / a1 - p2;\n\t\t}\n\t\telse if (p1 > 0)\n\t\t{\n\t\t\tvar s = p1 * b2;\n\t\t\td = s / b1 - p2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\td = -p2;\n\t\t}\n\t}\n\telse if (b1 < p1 + a1)\n\t{\n\t\tvar s = (b1 - p1) * a2;\n\t\td = b2 - (p2 + s / a1);\n\t}\n\telse if (b1 > p1 + a1)\n\t{\n\t\tvar s = (a1 + p1) * b2;\n\t\td = s / b1 - (p2 + a2);\n\t}\n\telse\n\t{\n\t\td = b2 - (p2 + a2);\n\t}\n\n\tif (d > 0)\n\t{\n\t\treturn d;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n/**\n * Function: bridge\n */\nmxCompactTreeLayout.prototype.bridge = function(line1, x1, y1, line2, x2, y2)\n{\n\tvar dx = x2 + line2.dx - x1;\n\tvar dy = 0;\n\tvar s = 0;\n\t\n\tif (line2.dx == 0)\n\t{\n\t\tdy = line2.dy;\n\t}\n\telse\n\t{\n\t\ts = dx * line2.dy;\n\t\tdy = s / line2.dx;\n\t}\n\t\n\tvar r = this.createLine(dx, dy, line2.next);\n\tline1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n\t\n\treturn r;\n};\n\n/**\n * Function: createNode\n */\nmxCompactTreeLayout.prototype.createNode = function(cell)\n{\n\tvar node = new Object();\n\tnode.cell = cell;\n\tnode.x = 0;\n\tnode.y = 0;\n\tnode.width = 0;\n\tnode.height = 0;\n\t\n\tvar geo = this.getVertexBounds(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tnode.width = geo.height;\n\t\t\tnode.height = geo.width;\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.width = geo.width;\n\t\t\tnode.height = geo.height;\n\t\t}\n\t}\n\t\n\tnode.offsetX = 0;\n\tnode.offsetY = 0;\n\tnode.contour = new Object();\n\t\n\treturn node;\n};\n\n/**\n * Function: apply\n */\nmxCompactTreeLayout.prototype.apply = function(node, bounds)\n{\n\tvar model = this.graph.getModel();\n\tvar cell = node.cell;\n\tvar g = model.getGeometry(cell);\n\n\tif (cell != null && g != null)\n\t{\n\t\tif (this.isVertexMovable(cell))\n\t\t{\n\t\t\tg = this.setVertexLocation(cell, node.x, node.y);\n\t\t\t\n\t\t\tif (this.resizeParent)\n\t\t\t{\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\tvar id = mxCellPath.create(parent);\n\t\t\t\t\n\t\t\t\t// Implements set semantic\n\t\t\t\tif (this.parentsChanged[id] == null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentsChanged[id] = parent;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bounds == null)\n\t\t{\n\t\t\tbounds = new mxRectangle(g.x, g.y, g.width, g.height);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds = new mxRectangle(Math.min(bounds.x, g.x),\n\t\t\t\tMath.min(bounds.y, g.y),\n\t\t\t\tMath.max(bounds.x + bounds.width, g.x + g.width),\n\t\t\t\tMath.max(bounds.y + bounds.height, g.y + g.height));\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: createLine\n */\nmxCompactTreeLayout.prototype.createLine = function(dx, dy, next)\n{\n\tvar line = new Object();\n\tline.dx = dx;\n\tline.dy = dy;\n\tline.next = next;\n\t\n\treturn line;\n};\n\n/**\n * Function: adjustParents\n * \n * Adjust parent cells whose child geometries have changed. The default \n * implementation adjusts the group to just fit around the children with \n * a padding.\n */\nmxCompactTreeLayout.prototype.adjustParents = function()\n{\n\tvar tmp = [];\n\t\n\tfor (var id in this.parentsChanged)\n\t{\n\t\ttmp.push(this.parentsChanged[id]);\n\t}\n\t\n\tthis.arrangeGroups(mxUtils.sortCells(tmp, true), this.groupPadding, this.groupPaddingTop,\n\t\tthis.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.localEdgeProcessing = function(node)\n{\n\tthis.processNodeOutgoing(node);\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.localEdgeProcessing(child);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: processNodeOutgoing\n *\n * Separates the x position of edges as they connect to vertices\n */\nmxCompactTreeLayout.prototype.processNodeOutgoing = function(node)\n{\n\tvar child = node.child;\n\tvar parentCell = node.cell;\n\n\tvar childCount = 0;\n\tvar sortedCells = [];\n\n\twhile (child != null)\n\t{\n\t\tchildCount++;\n\n\t\tvar sortingCriterion = child.x;\n\n\t\tif (this.horizontal)\n\t\t{\n\t\t\tsortingCriterion = child.y;\n\t\t}\n\n\t\tsortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n\t\tchild = child.next;\n\t}\n\n\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\tvar availableWidth = node.width;\n\n\tvar requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n\n\t// Add a buffer on the edges of the vertex if the edge count allows\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tavailableWidth -= 2 * this.prefHozEdgeSep;\n\t}\n\n\tvar edgeSpacing = availableWidth / childCount;\n\n\tvar currentXOffset = edgeSpacing / 2.0;\n\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tcurrentXOffset += this.prefHozEdgeSep;\n\t}\n\n\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\tvar maxYOffset = 0;\n\n\tvar parentBounds = this.getVertexBounds(parentCell);\n\tchild = node.child;\n\n\tfor (var j = 0; j < sortedCells.length; j++)\n\t{\n\t\tvar childCell = sortedCells[j].cell.cell;\n\t\tvar childBounds = this.getVertexBounds(childCell);\n\n\t\tvar edges = this.graph.getEdgesBetween(parentCell,\n\t\t\t\tchildCell, false);\n\t\t\n\t\tvar newPoints = [];\n\t\tvar x = 0;\n\t\tvar y = 0;\n\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.horizontal)\n\t\t\t{\n\t\t\t\t// Use opposite co-ords, calculation was done for \n\t\t\t\t// \n\t\t\t\tx = parentBounds.x + parentBounds.width;\n\t\t\t\ty = parentBounds.y + currentXOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = parentBounds.x + parentBounds.width\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = childBounds.y + childBounds.height / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = parentBounds.x + currentXOffset;\n\t\t\t\ty = parentBounds.y + parentBounds.height;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = parentBounds.y + parentBounds.height\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = childBounds.x + childBounds.width / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t}\n\n\t\tif (j < childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t}\n\t\telse if (j > childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t}\n\t\t// Ignore the case if equals, this means the second of 2\n\t\t// jettys with the same y (even number of edges)\n\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2] = currentX;\n\t\tcurrentXOffset += edgeSpacing;\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2 + 1] = currentYOffset;\n\n\t\tmaxYOffset = Math.max(maxYOffset, currentYOffset);\n\t}\n};\n__mxOutput.mxCompactTreeLayout = typeof mxCompactTreeLayout !== 'undefined' ? mxCompactTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRadialTreeLayout\n * \n * Extends <mxGraphLayout> to implement a radial tree algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxRadialTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxRadialTreeLayout\n * \n * Constructs a new radial tree layout for the specified graph\n */\nfunction mxRadialTreeLayout(graph)\n{\n\tmxCompactTreeLayout.call(this, graph , false);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxUtils.extend(mxRadialTreeLayout, mxCompactTreeLayout);\n\n/**\n * Variable: angleOffset\n *\n * The initial offset to compute the angle position.\n */\nmxRadialTreeLayout.prototype.angleOffset = 0.5;\n\n/**\n * Variable: rootx\n *\n * The X co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rootx = 0;\n\n/**\n * Variable: rooty\n *\n * The Y co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rooty = 0;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 120.\n */\nmxRadialTreeLayout.prototype.levelDistance = 120;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 10.\n */\nmxRadialTreeLayout.prototype.nodeDistance = 10;\n\n/**\n * Variable: autoRadius\n * \n * Specifies if the radios should be computed automatically\n */\nmxRadialTreeLayout.prototype.autoRadius = false;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxRadialTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: rowMinX\n * \n * Array of leftmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMinX = [];\n\n/**\n * Variable: rowMaxX\n * \n * Array of rightmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMaxX = [];\n\n/**\n * Variable: rowMinCenX\n * \n * Array of x coordinate of leftmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMinCenX = [];\n\n/**\n * Variable: rowMaxCenX\n * \n * Array of x coordinate of rightmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMaxCenX = [];\n\n/**\n * Variable: rowRadi\n * \n * Array of y deltas of each row behind root vertex, also the radius in the tree\n */\nmxRadialTreeLayout.prototype.rowRadi = [];\n\n/**\n * Variable: row\n * \n * Array of vertices on each row\n */\nmxRadialTreeLayout.prototype.row = [];\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxRadialTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n */\nmxRadialTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\t\n\tthis.useBoundingBox = false;\n\tthis.edgeRouting = false;\n\t//this.horizontal = false;\n\n\tmxCompactTreeLayout.prototype.execute.apply(this, arguments);\n\t\n\tvar bounds = null;\n\tvar rootBounds = this.getVertexBounds(this.root);\n\tthis.centerX = rootBounds.x + rootBounds.width / 2;\n\tthis.centerY = rootBounds.y + rootBounds.height / 2;\n\n\t// Calculate the bounds of the involved vertices directly from the values set in the compact tree\n\tfor (var vertex in this.visited)\n\t{\n\t\tvar vertexBounds = this.getVertexBounds(this.visited[vertex]);\n\t\tbounds = (bounds != null) ? bounds : vertexBounds.clone();\n\t\tbounds.add(vertexBounds);\n\t}\n\t\n\tthis.calcRowDims([this.node], 0);\n\t\n\tvar maxLeftGrad = 0;\n\tvar maxRightGrad = 0;\n\n\t// Find the steepest left and right gradients\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar leftGrad = (this.centerX - this.rowMinX[i] - this.nodeDistance) / this.rowRadi[i];\n\t\tvar rightGrad = (this.rowMaxX[i] - this.centerX - this.nodeDistance) / this.rowRadi[i];\n\t\t\n\t\tmaxLeftGrad = Math.max (maxLeftGrad, leftGrad);\n\t\tmaxRightGrad = Math.max (maxRightGrad, rightGrad);\n\t}\n\t\n\t// Extend out row so they meet the maximum gradient and convert to polar co-ords\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar xLeftLimit = this.centerX - this.nodeDistance - maxLeftGrad * this.rowRadi[i];\n\t\tvar xRightLimit = this.centerX + this.nodeDistance + maxRightGrad * this.rowRadi[i];\n\t\tvar fullWidth = xRightLimit - xLeftLimit;\n\t\t\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tvar xProportion = (vertexBounds.x + vertexBounds.width / 2 - xLeftLimit) / (fullWidth);\n\t\t\tvar theta =  2 * Math.PI * xProportion;\n\t\t\tnode.theta = theta;\n\t\t}\n\t}\n\n\t// Post-process from outside inwards to try to align parents with children\n\tfor (var i = this.row.length - 2; i >= 0; i--)\n\t{\n\t\tvar row = this.row[i];\n\t\t\n\t\tfor (var j = 0; j < row.length; j++)\n\t\t{\n\t\t\tvar node = row[j];\n\t\t\tvar child = node.child;\n\t\t\tvar counter = 0;\n\t\t\tvar totalTheta = 0;\n\t\t\t\n\t\t\twhile (child != null)\n\t\t\t{\n\t\t\t\ttotalTheta += child.theta;\n\t\t\t\tcounter++;\n\t\t\t\tchild = child.next;\n\t\t\t}\n\t\t\t\n\t\t\tif (counter > 0)\n\t\t\t{\n\t\t\t\tvar averTheta = totalTheta / counter;\n\t\t\t\t\n\t\t\t\tif (averTheta > node.theta && j < row.length - 1)\n\t\t\t\t{\n\t\t\t\t\tvar nextTheta = row[j+1].theta;\n\t\t\t\t\tnode.theta = Math.min (averTheta, nextTheta - Math.PI/10);\n\t\t\t\t}\n\t\t\t\telse if (averTheta < node.theta && j > 0 )\n\t\t\t\t{\n\t\t\t\t\tvar lastTheta = row[j-1].theta;\n\t\t\t\t\tnode.theta = Math.max (averTheta, lastTheta + Math.PI/10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Set locations\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tthis.setVertexLocation(node.cell,\n\t\t\t\t\t\t\t\t\tthis.centerX - vertexBounds.width / 2 + this.rowRadi[i] * Math.cos(node.theta),\n\t\t\t\t\t\t\t\t\tthis.centerY - vertexBounds.height / 2 + this.rowRadi[i] * Math.sin(node.theta));\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRowDims\n * \n * Recursive function to calculate the dimensions of each row\n * \n * Parameters:\n * \n * row - Array of internal nodes, the children of which are to be processed.\n * rowNum - Integer indicating which row is being processed.\n */\nmxRadialTreeLayout.prototype.calcRowDims = function(row, rowNum)\n{\n\tif (row == null || row.length == 0)\n\t{\n\t\treturn;\n\t}\n\n\t// Place root's children proportionally around the first level\n\tthis.rowMinX[rowNum] = this.centerX;\n\tthis.rowMaxX[rowNum] = this.centerX;\n\tthis.rowMinCenX[rowNum] = this.centerX;\n\tthis.rowMaxCenX[rowNum] = this.centerX;\n\tthis.row[rowNum] = [];\n\n\tvar rowHasChildren = false;\n\n\tfor (var i = 0; i < row.length; i++)\n\t{\n\t\tvar child = row[i] != null ? row[i].child : null;\n\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar cell = child.cell;\n\t\t\tvar vertexBounds = this.getVertexBounds(cell);\n\t\t\t\n\t\t\tthis.rowMinX[rowNum] = Math.min(vertexBounds.x, this.rowMinX[rowNum]);\n\t\t\tthis.rowMaxX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width, this.rowMaxX[rowNum]);\n\t\t\tthis.rowMinCenX[rowNum] = Math.min(vertexBounds.x + vertexBounds.width / 2, this.rowMinCenX[rowNum]);\n\t\t\tthis.rowMaxCenX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width / 2, this.rowMaxCenX[rowNum]);\n\t\t\tthis.rowRadi[rowNum] = vertexBounds.y - this.getVertexBounds(this.root).y;\n\t\n\t\t\tif (child.child != null)\n\t\t\t{\n\t\t\t\trowHasChildren = true;\n\t\t\t}\n\t\t\t\n\t\t\tthis.row[rowNum].push(child);\n\t\t\tchild = child.next;\n\t\t}\n\t}\n\t\n\tif (rowHasChildren)\n\t{\n\t\tthis.calcRowDims(this.row[rowNum], rowNum + 1);\n\t}\n};\n\n__mxOutput.mxRadialTreeLayout = typeof mxRadialTreeLayout !== 'undefined' ? mxRadialTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxFastOrganicLayout\n * \n * Extends <mxGraphLayout> to implement a fast organic layout algorithm.\n * The vertices need to be connected for this layout to work, vertices\n * with no connections are ignored.\n * \n * Example:\n * \n * (code)\n * var layout = new mxFastOrganicLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new fast organic layout for the specified graph.\n */\nfunction mxFastOrganicLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxFastOrganicLayout.prototype = new mxGraphLayout();\nmxFastOrganicLayout.prototype.constructor = mxFastOrganicLayout;\n\n/**\n * Variable: useInputOrigin\n * \n * Specifies if the top left corner of the input cells should be the origin\n * of the layout result. Default is true.\n */\nmxFastOrganicLayout.prototype.useInputOrigin = true;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxFastOrganicLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxFastOrganicLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: forceConstant\n * \n * The force constant by which the attractive forces are divided and the\n * replusive forces are multiple by the square of. The value equates to the\n * average radius there is of free space around each node. Default is 50.\n */\nmxFastOrganicLayout.prototype.forceConstant = 50;\n\n/**\n * Variable: forceConstantSquared\n * \n * Cache of <forceConstant>^2 for performance.\n */\nmxFastOrganicLayout.prototype.forceConstantSquared = 0;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.minDistanceLimit = 2;\n\n/**\n * Variable: maxDistanceLimit\n * \n * Maximal distance limit. Default is 500. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.maxDistanceLimit = 500;\n\n/**\n * Variable: minDistanceLimitSquared\n * \n * Cached version of <minDistanceLimit> squared.\n */\nmxFastOrganicLayout.prototype.minDistanceLimitSquared = 4;\n\n/**\n * Variable: initialTemp\n * \n * Start value of temperature. Default is 200.\n */\nmxFastOrganicLayout.prototype.initialTemp = 200;\n\n/**\n * Variable: temperature\n * \n * Temperature to limit displacement at later stages of layout.\n */\nmxFastOrganicLayout.prototype.temperature = 0;\n\n/**\n * Variable: maxIterations\n * \n * Total number of iterations to run the layout though.\n */\nmxFastOrganicLayout.prototype.maxIterations = 0;\n\n/**\n * Variable: iteration\n * \n * Current iteration count.\n */\nmxFastOrganicLayout.prototype.iteration = 0;\n\n/**\n * Variable: vertexArray\n * \n * An array of all vertices to be laid out.\n */\nmxFastOrganicLayout.prototype.vertexArray;\n\n/**\n * Variable: dispX\n * \n * An array of locally stored X co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispX;\n\n/**\n * Variable: dispY\n * \n * An array of locally stored Y co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispY;\n\n/**\n * Variable: cellLocation\n * \n * An array of locally stored co-ordinate positions for the vertices.\n */\nmxFastOrganicLayout.prototype.cellLocation;\n\n/**\n * Variable: radius\n * \n * The approximate radius of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radius;\n\n/**\n * Variable: radiusSquared\n * \n * The approximate radius squared of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radiusSquared;\n\n/**\n * Variable: isMoveable\n * \n * Array of booleans representing the movable states of the vertices.\n */\nmxFastOrganicLayout.prototype.isMoveable;\n\n/**\n * Variable: neighbours\n * \n * Local copy of cell neighbours.\n */\nmxFastOrganicLayout.prototype.neighbours;\n\n/**\n * Variable: indices\n * \n * Hashtable from cells to local indices.\n */\nmxFastOrganicLayout.prototype.indices;\n\n/**\n * Variable: allowedToRun\n * \n * Boolean flag that specifies if the layout is allowed to run. If this is\n * set to false, then the layout exits in the following iteration.\n */\nmxFastOrganicLayout.prototype.allowedToRun = true;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxFastOrganicLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. This operates on all children of the\n * given parent where <isVertexIgnored> returns false.\n */\nmxFastOrganicLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tthis.vertexArray = [];\n\tvar cells = this.graph.getChildVertices(parent);\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.isVertexIgnored(cells[i]))\n\t\t{\n\t\t\tthis.vertexArray.push(cells[i]);\n\t\t}\n\t}\n\t\n\tvar initialBounds = (this.useInputOrigin) ?\n\t\t\tthis.graph.getBoundingBoxFromGeometry(this.vertexArray) :\n\t\t\t\tnull;\n\tvar n = this.vertexArray.length;\n\n\tthis.indices = [];\n\tthis.dispX = [];\n\tthis.dispY = [];\n\tthis.cellLocation = [];\n\tthis.isMoveable = [];\n\tthis.neighbours = [];\n\tthis.radius = [];\n\tthis.radiusSquared = [];\n\n\tif (this.forceConstant < 0.001)\n\t{\n\t\tthis.forceConstant = 0.001;\n\t}\n\n\tthis.forceConstantSquared = this.forceConstant * this.forceConstant;\n\n\t// Create a map of vertices first. This is required for the array of\n\t// arrays called neighbours which holds, for each vertex, a list of\n\t// ints which represents the neighbours cells to that vertex as\n\t// the indices into vertexArray\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tvar vertex = this.vertexArray[i];\n\t\tthis.cellLocation[i] = [];\n\t\t\n\t\t// Set up the mapping from array indices to cells\n\t\tvar id = mxObjectIdentity.get(vertex);\n\t\tthis.indices[id] = i;\n\t\tvar bounds = this.getVertexBounds(vertex);\n\n\t\t// Set the X,Y value of the internal version of the cell to\n\t\t// the center point of the vertex for better positioning\n\t\tvar width = bounds.width;\n\t\tvar height = bounds.height;\n\t\t\n\t\t// Randomize (0, 0) locations\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\t\n\t\tthis.cellLocation[i][0] = x + width / 2.0;\n\t\tthis.cellLocation[i][1] = y + height / 2.0;\n\t\tthis.radius[i] = Math.min(width, height);\n\t\tthis.radiusSquared[i] = this.radius[i] * this.radius[i];\n\t}\n\n\t// Moves cell location back to top-left from center locations used in\n\t// algorithm, resetting the edge points is part of the transaction\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < n; i++)\n\t\t{\n\t\t\tthis.dispX[i] = 0;\n\t\t\tthis.dispY[i] = 0;\n\t\t\tthis.isMoveable[i] = this.isVertexMovable(this.vertexArray[i]);\n\n\t\t\t// Get lists of neighbours to all vertices, translate the cells\n\t\t\t// obtained in indices into vertexArray and store as an array\n\t\t\t// against the orginial cell index\n\t\t\tvar edges = this.graph.getConnections(this.vertexArray[i], parent);\n\t\t\tvar cells = this.graph.getOpposites(edges, this.vertexArray[i]);\n\t\t\tthis.neighbours[i] = [];\n\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(edges[j]);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \tthis.setEdgeStyleEnabled(edges[j], false);\n\t\t\t    }\n\n\t\t\t\t// Looks the cell up in the indices dictionary\n\t\t\t\tvar id = mxObjectIdentity.get(cells[j]);\n\t\t\t\tvar index = this.indices[id];\n\n\t\t\t\t// Check the connected cell in part of the vertex list to be\n\t\t\t\t// acted on by this layout\n\t\t\t\tif (index != null)\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = index;\n\t\t\t\t}\n\n\t\t\t\t// Else if index of the other cell doesn't correspond to\n\t\t\t\t// any cell listed to be acted upon in this layout. Set\n\t\t\t\t// the index to the value of this vertex (a dummy self-loop)\n\t\t\t\t// so the attraction force of the edge is not calculated\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.temperature = this.initialTemp;\n\n\t\t// If max number of iterations has not been set, guess it\n\t\tif (this.maxIterations == 0)\n\t\t{\n\t\t\tthis.maxIterations = 20 * Math.sqrt(n);\n\t\t}\n\t\t\n\t\t// Main iteration loop\n\t\tfor (this.iteration = 0; this.iteration < this.maxIterations; this.iteration++)\n\t\t{\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Calculate repulsive forces on all vertices\n\t\t\tthis.calcRepulsion();\n\n\t\t\t// Calculate attractive forces through edges\n\t\t\tthis.calcAttraction();\n\n\t\t\tthis.calcPositions();\n\t\t\tthis.reduceTemperature();\n\t\t}\n\n\t\tvar minx = null;\n\t\tvar miny = null;\n\t\t\n\t\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t\t{\n\t\t\tvar vertex = this.vertexArray[i];\n\t\t\t\n\t\t\tif (this.isVertexMovable(vertex))\n\t\t\t{\n\t\t\t\tvar bounds = this.getVertexBounds(vertex);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tthis.cellLocation[i][0] -= bounds.width / 2.0;\n\t\t\t\t\tthis.cellLocation[i][1] -= bounds.height / 2.0;\n\t\t\t\t\t\n\t\t\t\t\tvar x = this.graph.snap(Math.round(this.cellLocation[i][0]));\n\t\t\t\t\tvar y = this.graph.snap(Math.round(this.cellLocation[i][1]));\n\t\t\t\t\t\n\t\t\t\t\tthis.setVertexLocation(vertex, x, y);\n\t\t\t\t\t\n\t\t\t\t\tif (minx == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = Math.min(minx, x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (miny == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = y;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = Math.min(miny, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Modifies the cloned geometries in-place. Not needed\n\t\t// to clone the geometries again as we're in the same\n\t\t// undoable change.\n\t\tvar dx = -(minx || 0) + 1;\n\t\tvar dy = -(miny || 0) + 1;\n\t\t\n\t\tif (initialBounds != null)\n\t\t{\n\t\t\tdx += initialBounds.x;\n\t\t\tdy += initialBounds.y;\n\t\t}\n\t\t\n\t\tthis.graph.moveCells(this.vertexArray, dx, dy);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: calcPositions\n * \n * Takes the displacements calculated for each cell and applies them to the\n * local cache of cell positions. Limits the displacement to the current\n * temperature.\n */\nmxFastOrganicLayout.prototype.calcPositions = function()\n{\n\tfor (var index = 0; index < this.vertexArray.length; index++)\n\t{\n\t\tif (this.isMoveable[index])\n\t\t{\n\t\t\t// Get the distance of displacement for this node for this\n\t\t\t// iteration\n\t\t\tvar deltaLength = Math.sqrt(this.dispX[index] * this.dispX[index] +\n\t\t\t\tthis.dispY[index] * this.dispY[index]);\n\n\t\t\tif (deltaLength < 0.001)\n\t\t\t{\n\t\t\t\tdeltaLength = 0.001;\n\t\t\t}\n\n\t\t\t// Scale down by the current temperature if less than the\n\t\t\t// displacement distance\n\t\t\tvar newXDisp = this.dispX[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\tvar newYDisp = this.dispY[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\t// reset displacements\n\t\t\tthis.dispX[index] = 0;\n\t\t\tthis.dispY[index] = 0;\n\n\t\t\t// Update the cached cell locations\n\t\t\tthis.cellLocation[index][0] += newXDisp;\n\t\t\tthis.cellLocation[index][1] += newYDisp;\n\t\t}\n\t}\n};\n\n/**\n * Function: calcAttraction\n * \n * Calculates the attractive forces between all laid out nodes linked by\n * edges\n */\nmxFastOrganicLayout.prototype.calcAttraction = function()\n{\n\t// Check the neighbours of each vertex and calculate the attractive\n\t// force of the edge connecting them\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tfor (var k = 0; k < this.neighbours[i].length; k++)\n\t\t{\n\t\t\t// Get the index of the othe cell in the vertex array\n\t\t\tvar j = this.neighbours[i][k];\n\t\t\t\n\t\t\t// Do not proceed self-loops\n\t\t\tif (i != j &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\t// The distance between the nodes\n\t\t\t\tvar deltaLengthSquared = xDelta * xDelta + yDelta\n\t\t\t\t\t\t* yDelta - this.radiusSquared[i] - this.radiusSquared[j];\n\n\t\t\t\tif (deltaLengthSquared < this.minDistanceLimitSquared)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthSquared = this.minDistanceLimitSquared;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar deltaLength = Math.sqrt(deltaLengthSquared);\n\t\t\t\tvar force = (deltaLengthSquared) / this.forceConstant;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] -= displacementX;\n\t\t\t\tthis.dispY[i] -= displacementY;\n\t\t\t\t\n\t\t\t\tthis.dispX[j] += displacementX;\n\t\t\t\tthis.dispY[j] += displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRepulsion\n * \n * Calculates the repulsive forces between all laid out nodes\n */\nmxFastOrganicLayout.prototype.calcRepulsion = function()\n{\n\tvar vertexCount = this.vertexArray.length;\n\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tfor (var j = i; j < vertexCount; j++)\n\t\t{\n\t\t\t// Exits if the layout is no longer allowed to run\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (j != i &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\tif (xDelta == 0)\n\t\t\t\t{\n\t\t\t\t\txDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (yDelta == 0)\n\t\t\t\t{\n\t\t\t\t\tyDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Distance between nodes\n\t\t\t\tvar deltaLength = Math.sqrt((xDelta * xDelta)\n\t\t\t\t\t\t+ (yDelta * yDelta));\n\t\t\t\tvar deltaLengthWithRadius = deltaLength - this.radius[i]\n\t\t\t\t\t\t- this.radius[j];\n\n\t\t\t\tif (deltaLengthWithRadius > this.maxDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\t// Ignore vertices too far apart\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (deltaLengthWithRadius < this.minDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthWithRadius = this.minDistanceLimit;\n\t\t\t\t}\n\n\t\t\t\tvar force = this.forceConstantSquared / deltaLengthWithRadius;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] += displacementX;\n\t\t\t\tthis.dispY[i] += displacementY;\n\n\t\t\t\tthis.dispX[j] -= displacementX;\n\t\t\t\tthis.dispY[j] -= displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reduceTemperature\n * \n * Reduces the temperature of the layout from an initial setting in a linear\n * fashion to zero.\n */\nmxFastOrganicLayout.prototype.reduceTemperature = function()\n{\n\tthis.temperature = this.initialTemp * (1.0 - this.iteration / this.maxIterations);\n};\n\n__mxOutput.mxFastOrganicLayout = typeof mxFastOrganicLayout !== 'undefined' ? mxFastOrganicLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCircleLayout\n * \n * Extends <mxGraphLayout> to implement a circluar layout for a given radius.\n * The vertices do not need to be connected for this layout to work and all\n * connections between vertices are not taken into account.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCircleLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCircleLayout\n *\n * Constructs a new circular layout for the specified radius.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n * radius - Optional radius as an int. Default is 100.\n */\nfunction mxCircleLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.radius = (radius != null) ? radius : 100;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCircleLayout.prototype = new mxGraphLayout();\nmxCircleLayout.prototype.constructor = mxCircleLayout;\n\n/**\n * Variable: radius\n * \n * Integer specifying the size of the radius. Default is 100.\n */\nmxCircleLayout.prototype.radius = null;\n\n/**\n * Variable: moveCircle\n * \n * Boolean specifying if the circle should be moved to the top,\n * left corner specified by <x0> and <y0>. Default is false.\n */\nmxCircleLayout.prototype.moveCircle = false;\n\n/**\n * Variable: x0\n * \n * Integer specifying the left coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.x0 = 0;\n\n/**\n * Variable: y0\n * \n * Integer specifying the top coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.y0 = 0;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCircleLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxCircleLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxCircleLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\t// Gets all vertices inside the parent and finds\n\t\t// the maximum dimension of the largest vertex\n\t\tvar max = 0;\n\t\tvar top = null;\n\t\tvar left = null;\n\t\tvar vertices = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(cell);\n\t\t\t\tvar bounds = this.getVertexBounds(cell);\n\t\t\t\t\n\t\t\t\tif (top == null)\n\t\t\t\t{\n\t\t\t\t\ttop = bounds.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttop = Math.min(top, bounds.y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (left == null)\n\t\t\t\t{\n\t\t\t\t\tleft = bounds.x;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleft = Math.min(left, bounds.x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmax = Math.max(max, Math.max(bounds.width, bounds.height));\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(cell);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \t\tthis.setEdgeStyleEnabled(cell, false);\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar r = this.getRadius(vertices.length, max);\n\n\t\t// Moves the circle to the specified origin\n\t\tif (this.moveCircle)\n\t\t{\n\t\t\tleft = this.x0;\n\t\t\ttop = this.y0;\n\t\t}\n\t\t\n\t\tthis.circle(vertices, r, left, top);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: getRadius\n * \n * Returns the radius to be used for the given vertex count. Max is the maximum\n * width or height of all vertices in the layout.\n */\nmxCircleLayout.prototype.getRadius = function(count, max)\n{\n\treturn Math.max(count * max / Math.PI, this.radius);\n};\n\n/**\n * Function: circle\n * \n * Executes the circular layout for the specified array\n * of vertices and the given radius. This is called from\n * <execute>.\n */\nmxCircleLayout.prototype.circle = function(vertices, r, left, top)\n{\n\tvar vertexCount = vertices.length;\n\tvar phi = 2 * Math.PI / vertexCount;\n\t\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tif (this.isVertexMovable(vertices[i]))\n\t\t{\n\t\t\tthis.setVertexLocation(vertices[i],\n\t\t\t\tMath.round(left + r + r * Math.sin(i * phi)),\n\t\t\t\tMath.round(top + r + r * Math.cos(i * phi)));\n\t\t}\n\t}\n};\n\n__mxOutput.mxCircleLayout = typeof mxCircleLayout !== 'undefined' ? mxCircleLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxParallelEdgeLayout\n * \n * Extends <mxGraphLayout> for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n * \n * Example:\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * \n * graph.addListener(mxEvent.CELL_CONNECTED, function(sender, evt)\n * {\n *   var model = graph.getModel();\n *   var edge = evt.getProperty('edge');\n *   var src = model.getTerminal(edge, true);\n *   var trg = model.getTerminal(edge, false);\n *   \n *   layout.isEdgeIgnored = function(edge2)\n *   {\n *     var src2 = model.getTerminal(edge2, true);\n *     var trg2 = model.getTerminal(edge2, false);\n *     \n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *   \n *   layout.execute(graph.getDefaultParent());\n * });\n * (end)\n * \n * Constructor: mxParallelEdgeLayout\n * \n * Constructs a new parallel edge layout for the specified graph.\n */\nfunction mxParallelEdgeLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxParallelEdgeLayout.prototype = new mxGraphLayout();\nmxParallelEdgeLayout.prototype.constructor = mxParallelEdgeLayout;\n\n/**\n * Variable: spacing\n * \n * Defines the spacing between the parallels. Default is 20.\n */\nmxParallelEdgeLayout.prototype.spacing = 20;\n\n/**\n * Variable: checkOverlap\n * \n * Specifies if only overlapping edges should be considered\n * parallel. Default is false.\n */\nmxParallelEdgeLayout.prototype.checkOverlap = false;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxParallelEdgeLayout.prototype.execute = function(parent, cells)\n{\n\tvar lookup = this.findParallels(parent, cells);\n\t\n\tthis.graph.model.beginUpdate();\t\n\ttry\n\t{\n\t\tfor (var i in lookup)\n\t\t{\n\t\t\tvar parallels = lookup[i];\n\n\t\t\tif (parallels.length > 1)\n\t\t\t{\n\t\t\t\tthis.layout(parallels);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.model.endUpdate();\n\t}\n};\n\n/**\n * Function: findParallels\n * \n * Finds the parallel edges in the given parent.\n */\nmxParallelEdgeLayout.prototype.findParallels = function(parent, cells)\n{\n\tvar lookup = [];\n\t\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!this.isEdgeIgnored(cell))\n\t\t{\n\t\t\tvar id = this.getEdgeId(cell);\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tif (lookup[id] == null)\n\t\t\t\t{\n\t\t\t\t\tlookup[id] = [];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlookup[id].push(cell);\n\t\t\t}\n\t\t}\n\t});\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\taddCell(cells[i]);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\taddCell(model.getChildAt(parent, i));\n\t\t}\n\t}\n\t\n\treturn lookup;\n};\n\n/**\n * Function: getEdgeId\n * \n * Returns a unique ID for the given edge. The id is independent of the\n * edge direction and is built using the visible terminal of the given\n * edge.\n */\nmxParallelEdgeLayout.prototype.getEdgeId = function(edge)\n{\n\tvar view = this.graph.getView();\n\t\n\t// Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n\tvar src = view.getVisibleTerminal(edge, true);\n\tvar trg = view.getVisibleTerminal(edge, false);\n\tvar pts = '';\n\n\tif (src != null && trg != null)\n\t{\n\t\tsrc = mxObjectIdentity.get(src);\n\t\ttrg = mxObjectIdentity.get(trg);\n\t\t\n\t\tif (this.checkOverlap)\n\t\t{\n\t\t\tvar state = this.graph.view.getState(edge);\n\t\t\t\n\t\t\tif (state != null && state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tvar tmp = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < state.absolutePoints.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = state.absolutePoints[i];\n\t\t\t\t\t\n\t\t\t\t\tif (pt != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.push(pt.x, pt.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpts = tmp.join(',');\n\t\t\t}\n\t\t};\n\t\t\n\t\treturn ((src > trg) ? trg + '-' + src : src + '-' + trg) + pts;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: layout\n * \n * Lays out the parallel edges in the given array.\n */\nmxParallelEdgeLayout.prototype.layout = function(parallels)\n{\n\tvar edge = parallels[0];\n\tvar view = this.graph.getView();\n\tvar model = this.graph.getModel();\n\tvar src = model.getGeometry(view.getVisibleTerminal(edge, true));\n\tvar trg = model.getGeometry(view.getVisibleTerminal(edge, false));\n\t\n\t// Routes multiple loops\n\tif (src == trg)\n\t{\n\t\tvar x0 = src.x + src.width + this.spacing;\n\t\tvar y0 = src.y + src.height / 2;\n\n\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t{\n\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\tx0 += this.spacing;\n\t\t}\n\t}\n\telse if (src != null && trg != null)\n\t{\n\t\t// Routes parallel edges\n\t\tvar scx = src.x + src.width / 2;\n\t\tvar scy = src.y + src.height / 2;\n\t\t\n\t\tvar tcx = trg.x + trg.width / 2;\n\t\tvar tcy = trg.y + trg.height / 2;\n\t\t\n\t\tvar dx = tcx - scx;\n\t\tvar dy = tcy - scy;\n\n\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (len > 0)\n\t\t{\n\t\t\tvar x0 = scx + dx / 2;\n\t\t\tvar y0 = scy + dy / 2;\n\t\t\t\n\t\t\tvar nx = dy * this.spacing / len;\n\t\t\tvar ny = dx * this.spacing / len;\n\t\t\t\n\t\t\tx0 += nx * (parallels.length - 1) / 2;\n\t\t\ty0 -= ny * (parallels.length - 1) / 2;\n\t\n\t\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t\t{\n\t\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\t\tx0 -= nx;\n\t\t\t\ty0 += ny;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: route\n * \n * Routes the given edge via the given point.\n */\nmxParallelEdgeLayout.prototype.route = function(edge, x, y)\n{\n\tif (this.graph.isCellMovable(edge))\n\t{\n\t\tthis.setEdgePoints(edge, [new mxPoint(x, y)]);\n\t}\n};\n\n__mxOutput.mxParallelEdgeLayout = typeof mxParallelEdgeLayout !== 'undefined' ? mxParallelEdgeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCompositeLayout\n * \n * Allows to compose multiple layouts into a single layout. The master layout\n * is the layout that handles move operations if another layout than the first\n * element in <layouts> should be used. The <master> layout is not executed as\n * the code assumes that it is part of <layouts>.\n * \n * Example:\n * (code)\n * var first = new mxFastOrganicLayout(graph);\n * var second = new mxParallelEdgeLayout(graph);\n * var layout = new mxCompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompositeLayout\n *\n * Constructs a new layout using the given layouts. The graph instance is\n * required for creating the transaction that contains all layouts.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * layouts - Array of <mxGraphLayouts>.\n * master - Optional layout that handles moves. If no layout is given then\n * the first layout of the above array is used to handle moves.\n */\nfunction mxCompositeLayout(graph, layouts, master)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.layouts = layouts;\n\tthis.master = master;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompositeLayout.prototype = new mxGraphLayout();\nmxCompositeLayout.prototype.constructor = mxCompositeLayout;\n\t\n/**\n * Variable: layouts\n * \n * Holds the array of <mxGraphLayouts> that this layout contains.\n */\nmxCompositeLayout.prototype.layouts = null;\n\n/**\n * Variable: master\n * \n * Reference to the <mxGraphLayouts> that handles moves. If this is null\n * then the first layout in <layouts> is used.\n */\nmxCompositeLayout.prototype.master = null;\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell> by calling move on <master> or the first\n * layout in <layouts>.\n */\nmxCompositeLayout.prototype.moveCell = function(cell, x, y)\n{\n\tif (this.master != null)\n\t{\n\t\tthis.master.moveCell.apply(this.master, arguments);\n\t}\n\telse\n\t{\n\t\tthis.layouts[0].moveCell.apply(this.layouts[0], arguments);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute> by executing all <layouts> in a\n * single transaction.\n */\nmxCompositeLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < this.layouts.length; i++)\n\t\t{\n\t\t\tthis.layouts[i].execute.apply(this.layouts[i], arguments);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n__mxOutput.mxCompositeLayout = typeof mxCompositeLayout !== 'undefined' ? mxCompositeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeLabelLayout\n * \n * Extends <mxGraphLayout> to implement an edge label layout. This layout\n * makes use of cell states, which means the graph must be validated in\n * a graph view (so that the label bounds are available) before this layout\n * can be executed.\n * \n * Example:\n * \n * (code)\n * var layout = new mxEdgeLabelLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxEdgeLabelLayout\n *\n * Constructs a new edge label layout.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n */\nfunction mxEdgeLabelLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxEdgeLabelLayout.prototype = new mxGraphLayout();\nmxEdgeLabelLayout.prototype.constructor = mxEdgeLabelLayout;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxEdgeLabelLayout.prototype.execute = function(parent)\n{\n\tvar view = this.graph.view;\n\tvar model = this.graph.getModel();\n\t\n\t// Gets all vertices and edges inside the parent\n\tvar edges = [];\n\tvar vertices = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar cell = model.getChildAt(parent, i);\n\t\tvar state = view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(state);\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\tedges.push(state);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.placeLabels(vertices, edges);\n};\n\n/**\n * Function: placeLabels\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.placeLabels = function(v, e)\n{\n\tvar model = this.graph.getModel();\n\t\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < e.length; i++)\n\t\t{\n\t\t\tvar edge = e[i];\n\t\t\t\n\t\t\tif (edge != null && edge.text != null &&\n\t\t\t\tedge.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < v.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar vertex = v[j];\n\t\t\t\t\t\n\t\t\t\t\tif (vertex != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.avoid(edge, vertex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: avoid\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.avoid = function(edge, vertex)\n{\n\tvar model = this.graph.getModel();\n\tvar labRect = edge.text.boundingBox;\n\t\n\tif (mxUtils.intersects(labRect, vertex))\n\t{\n\t\tvar dy1 = -labRect.y - labRect.height + vertex.y;\n\t\tvar dy2 = -labRect.y + vertex.y + vertex.height;\n\t\t\n\t\tvar dy = (Math.abs(dy1) < Math.abs(dy2)) ? dy1 : dy2;\n\t\t\n\t\tvar dx1 = -labRect.x - labRect.width + vertex.x;\n\t\tvar dx2 = -labRect.x + vertex.x + vertex.width;\n\t\n\t\tvar dx = (Math.abs(dx1) < Math.abs(dx2)) ? dx1 : dx2;\n\t\t\n\t\tif (Math.abs(dx) < Math.abs(dy))\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\n\t\tvar g = model.getGeometry(edge.cell);\n\t\t\n\t\tif (g != null)\n\t\t{\n\t\t\tg = g.clone();\n\t\t\t\n\t\t\tif (g.offset != null)\n\t\t\t{\n\t\t\t\tg.offset.x += dx;\n\t\t\t\tg.offset.y += dy;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\t\n\t\t\tmodel.setGeometry(edge.cell, g);\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeLabelLayout = typeof mxEdgeLabelLayout !== 'undefined' ? mxEdgeLabelLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphAbstractHierarchyCell\n * \n * An abstraction of an internal hierarchy node or edge\n * \n * Constructor: mxGraphAbstractHierarchyCell\n *\n * Constructs a new hierarchical layout algorithm.\n */\nfunction mxGraphAbstractHierarchyCell()\n{\n\tthis.x = [];\n\tthis.y = [];\n\tthis.temp = [];\n};\n\n/**\n * Variable: maxRank\n * \n * The maximum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.maxRank = -1;\n\n/**\n * Variable: minRank\n * \n * The minimum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.minRank = -1;\n\n/**\n * Variable: x\n * \n * The x position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.x = null;\n\n/**\n * Variable: y\n * \n * The y position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.y = null;\n\n/**\n * Variable: width\n * \n * The width of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.width = 0;\n\n/**\n * Variable: height\n * \n * The height of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.height = 0;\n\n/**\n * Variable: nextLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.nextLayerConnectedCells = null;\n\n/**\n * Variable: previousLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.previousLayerConnectedCells = null;\n\n/**\n * Variable: temp\n * \n * Temporary variable for general use. Generally, try to avoid\n * carrying information between stages. Currently, the longest\n * path layering sets temp to the rank position in fixRanks()\n * and the crossing reduction uses this. This meant temp couldn't\n * be used for hashing the nodes in the model dfs and so hashCode\n * was created\n */\nmxGraphAbstractHierarchyCell.prototype.temp = null;\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.getNextLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: isEdge\n * \n * Returns whether or not this cell is an edge\n */\nmxGraphAbstractHierarchyCell.prototype.isEdge = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isVertex\n * \n * Returns whether or not this cell is a node\n */\nmxGraphAbstractHierarchyCell.prototype.isVertex = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\treturn null;\n};\n\n/**\n * Function: setX\n * \n * Set the value of x for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setX = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.x[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.x[layer - this.minRank - 1] = value;\n\t}\n};\n\n/**\n * Function: getX\n * \n * Gets the value of x on the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getX = function(layer)\n{\n\tif (this.isVertex())\n\t{\n\t\treturn this.x[0];\n\t}\n\telse if (this.isEdge())\n\t{\n\t\treturn this.x[layer - this.minRank - 1];\n\t}\n\n\treturn 0.0;\n};\n\n/**\n * Function: setY\n * \n * Set the value of y for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setY = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.y[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.y[layer -this. minRank - 1] = value;\n\t}\n};\n\n__mxOutput.mxGraphAbstractHierarchyCell = typeof mxGraphAbstractHierarchyCell !== 'undefined' ? mxGraphAbstractHierarchyCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyNode\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyNode\n *\n * Constructs an internal node to represent the specified real graph cell\n *\n * Arguments:\n * \n * cell - the real graph cell this node represents\n */\nfunction mxGraphHierarchyNode(cell)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.cell = cell;\n\tthis.id = mxObjectIdentity.get(cell);\n\tthis.connectsAsTarget = [];\n\tthis.connectsAsSource = [];\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyNode.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyNode.prototype.constructor = mxGraphHierarchyNode;\n\n/**\n * Variable: cell\n * \n * The graph cell this object represents.\n */\nmxGraphHierarchyNode.prototype.cell = null;\n\n/**\n * Variable: id\n * \n * The object identity of the wrapped cell\n */\nmxGraphHierarchyNode.prototype.id = null;\n\n/**\n * Variable: connectsAsTarget\n * \n * Collection of hierarchy edges that have this node as a target\n */\nmxGraphHierarchyNode.prototype.connectsAsTarget = null;\n\n/**\n * Variable: connectsAsSource\n * \n * Collection of hierarchy edges that have this node as a source\n */\nmxGraphHierarchyNode.prototype.connectsAsSource = null;\n\n/**\n * Variable: hashCode\n * \n * Assigns a unique hashcode for each node. Used by the model dfs instead\n * of copying HashSets\n */\nmxGraphHierarchyNode.prototype.hashCode = false;\n\n/**\n * Function: getRankValue\n * \n * Returns the integer value of the layer that this node resides in\n */\nmxGraphHierarchyNode.prototype.getRankValue = function(layer)\n{\n\treturn this.maxRank;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyNode.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\tthis.nextLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsTarget.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsTarget[i];\n\n\t\t\tif (edge.maxRank == -1 || edge.maxRank == layer + 1)\n\t\t\t{\n\t\t\t\t// Either edge is not in any rank or\n\t\t\t\t// no dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.nextLayerConnectedCells[0];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyNode.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\t\tthis.previousLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsSource.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsSource[i];\n\n\t\t\tif (edge.minRank == -1 || edge.minRank == layer - 1)\n\t\t\t{\n\t\t\t\t// No dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[0];\n};\n\n/**\n * Function: isVertex\n * \n * Returns true.\n */\nmxGraphHierarchyNode.prototype.isVertex = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[0];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[0] = value;\n};\n\n/**\n * Function: isAncestor\n */\nmxGraphHierarchyNode.prototype.isAncestor = function(otherNode)\n{\n\t// Firstly, the hash code of this node needs to be shorter than the\n\t// other node\n\tif (otherNode != null && this.hashCode != null && otherNode.hashCode != null\n\t\t\t&& this.hashCode.length < otherNode.hashCode.length)\n\t{\n\t\tif (this.hashCode == otherNode.hashCode)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (this.hashCode == null || this.hashCode == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Secondly, this hash code must match the start of the other\n\t\t// node's hash code. Arrays.equals cannot be used here since\n\t\t// the arrays are different length, and we do not want to\n\t\t// perform another array copy.\n\t\tfor (var i = 0; i < this.hashCode.length; i++)\n\t\t{\n\t\t\tif (this.hashCode[i] != otherNode.hashCode[i])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the core vertex associated with this wrapper\n */\nmxGraphHierarchyNode.prototype.getCoreCell = function()\n{\n\treturn this.cell;\n};\n\n__mxOutput.mxGraphHierarchyNode = typeof mxGraphHierarchyNode !== 'undefined' ? mxGraphHierarchyNode : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyEdge\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyEdge\n *\n * Constructs a hierarchy edge\n *\n * Arguments:\n * \n * edges - a list of real graph edges this abstraction represents\n */\nfunction mxGraphHierarchyEdge(edges)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.edges = edges;\n\tthis.ids = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.ids.push(mxObjectIdentity.get(edges[i]));\n\t}\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyEdge.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyEdge.prototype.constructor = mxGraphHierarchyEdge;\n\n/**\n * Variable: edges\n * \n * The graph edge(s) this object represents. Parallel edges are all grouped\n * together within one hierarchy edge.\n */\nmxGraphHierarchyEdge.prototype.edges = null;\n\n/**\n * Variable: ids\n * \n * The object identities of the wrapped cells\n */\nmxGraphHierarchyEdge.prototype.ids = null;\n\n/**\n * Variable: source\n * \n * The node this edge is sourced at\n */\nmxGraphHierarchyEdge.prototype.source = null;\n\n/**\n * Variable: target\n * \n * The node this edge targets\n */\nmxGraphHierarchyEdge.prototype.target = null;\n\n/**\n * Variable: isReversed\n * \n * Whether or not the direction of this edge has been reversed\n * internally to create a DAG for the hierarchical layout\n */\nmxGraphHierarchyEdge.prototype.isReversed = false;\n\n/**\n * Function: invert\n * \n * Inverts the direction of this internal edge(s)\n */\nmxGraphHierarchyEdge.prototype.invert = function(layer)\n{\n\tvar temp = this.source;\n\tthis.source = this.target;\n\tthis.target = temp;\n\tthis.isReversed = !this.isReversed;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyEdge.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\t\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.nextLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == this.temp.length - 1)\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn this.nextLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyEdge.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.previousLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: isEdge\n * \n * Returns true.\n */\nmxGraphHierarchyEdge.prototype.isEdge = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[layer - this.minRank - 1];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[layer - this.minRank - 1] = value;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the first core edge associated with this wrapper\n */\nmxGraphHierarchyEdge.prototype.getCoreCell = function()\n{\n\tif (this.edges != null && this.edges.length > 0)\n\t{\n\t\treturn this.edges[0];\n\t}\n\t\n\treturn null;\n};\n\n__mxOutput.mxGraphHierarchyEdge = typeof mxGraphHierarchyEdge !== 'undefined' ? mxGraphHierarchyEdge : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxGraphHierarchyModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxGraphHierarchyModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxGraphHierarchyModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxGraphHierarchyModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxGraphHierarchyModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxGraphHierarchyModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxGraphHierarchyModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxGraphHierarchyModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxGraphHierarchyModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxGraphHierarchyModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxGraphHierarchyModel.prototype.tightenToSource = false;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxGraphHierarchyModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxGraphHierarchyModel.prototype.initialRank = function()\n{\n\tvar startNodes = [];\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = this.SOURCESCANSTARTRANK;\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\t\t\tthis.maxRank = Math.min(this.maxRank, minimumLayer);\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] -= this.maxRank;\n\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n\tfor ( var i = 0; i < startNodesCopy.length; i++)\n\t{\n\t\tvar internalNode = startNodesCopy[i];\n\t\tvar currentMaxLayer = 0;\n\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n\n\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[j];\n\t\t\tvar otherNode = internalEdge.target;\n\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n\t\t\t\t\totherNode.temp[0] + 1);\n\t\t\tcurrentMaxLayer = internalNode.temp[0];\n\t\t}\n\t}\n\t\n\t// Reset the maxRank to that which would be expected for a from-sink\n\t// scan\n\tthis.maxRank = this.SOURCESCANSTARTRANK - this.maxRank;\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxGraphHierarchyModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxGraphHierarchyModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxGraphHierarchyModel = typeof mxGraphHierarchyModel !== 'undefined' ? mxGraphHierarchyModel : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxSwimlaneModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxSwimlaneModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxSwimlaneModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxSwimlaneModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxSwimlaneModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxSwimlaneModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxSwimlaneModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxSwimlaneModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxSwimlaneModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxSwimlaneModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxSwimlaneModel.prototype.tightenToSource = false;\n\n/**\n * Variable: ranksPerGroup\n *\n * An array of the number of ranks within each swimlane\n */\nmxSwimlaneModel.prototype.ranksPerGroup = null;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxSwimlaneModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\tvar swimlanes = layout.swimlanes;\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\t\tinternalVertices[i].swimlaneIndex = -1;\n\n\t\tfor (var ii = 0; ii < swimlanes.length; ii++)\n\t\t{\n\t\t\tif (graph.model.getParent(vertices[i]) == swimlanes[ii])\n\t\t\t{\n\t\t\t\tinternalVertices[i].swimlaneIndex = ii;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxSwimlaneModel.prototype.initialRank = function()\n{\n\tthis.ranksPerGroup = [];\n\t\n\tvar startNodes = [];\n\tvar seen = new Object();\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\t\t\tthis.maxChainDfs(null, internalNode, null, seen, 0);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Calculate the lower and upper rank bounds of each swimlane\n\tvar lowerRank = [];\n\tvar upperRank = [];\n\t\n\tfor (var i = this.ranksPerGroup.length - 1; i >= 0; i--)\n\t{\n\t\tif (i == this.ranksPerGroup.length - 1)\n\t\t{\n\t\t\tlowerRank[i] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlowerRank[i] = upperRank[i+1] + 1;\n\t\t}\n\t\t\n\t\tupperRank[i] = lowerRank[i] + this.ranksPerGroup[i];\n\t}\n\t\n\tthis.maxRank = upperRank[0];\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\t\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = upperRank[0];\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tif (minimumLayer > upperRank[internalNode.swimlaneIndex])\n\t\t\t{\n\t\t\t\tminimumLayer = upperRank[internalNode.swimlaneIndex];\n\t\t\t}\n\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n//\tfor (var key in this.vertexMapper)\n//\t{\n//\t\tvar internalNode = this.vertexMapper[key];\n//\t\t// Mark the node as not having had a layer assigned\n//\t\tinternalNode.temp[0] -= this.maxRank;\n//\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n//\tfor ( var i = 0; i < startNodesCopy.length; i++)\n//\t{\n//\t\tvar internalNode = startNodesCopy[i];\n//\t\tvar currentMaxLayer = 0;\n//\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n//\n//\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n//\t\t{\n//\t\t\tvar internalEdge = layerDeterminingEdges[j];\n//\t\t\tvar otherNode = internalEdge.target;\n//\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n//\t\t\t\t\totherNode.temp[0] + 1);\n//\t\t\tcurrentMaxLayer = internalNode.temp[0];\n//\t\t}\n//\t}\n};\n\n/**\n * Function: maxChainDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of chains within groups.\n * Any cycles should be removed prior to running, but previously seen cells\n * are ignored.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * seen - a set of all nodes seen by this dfs\n * chainCount - the number of edges in the chain of vertices going through\n * the current swimlane\n */\nmxSwimlaneModel.prototype.maxChainDfs = function(parent, root, connectingEdge, seen, chainCount)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = mxCellPath.create(root.cell);\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvar slIndex = root.swimlaneIndex;\n\t\t\t\n\t\t\tif (this.ranksPerGroup[slIndex] == null || this.ranksPerGroup[slIndex] < chainCount)\n\t\t\t{\n\t\t\t\tthis.ranksPerGroup[slIndex] = chainCount;\n\t\t\t}\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), 0);\n\t\t\t\t}\n\t\t\t\telse if (root.swimlaneIndex == targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), chainCount + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxSwimlaneModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxSwimlaneModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\tvar incomingEdges = root.connectsAsTarget.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\t\t\t\t\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex <= targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < incomingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = incomingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.source;\n\n\t\t\t\t// Only navigate in target->source direction from a lower index \n\t\t\t\t// swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxSwimlaneModel = typeof mxSwimlaneModel !== 'undefined' ? mxSwimlaneModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayoutStage\n * \n * The specific layout interface for hierarchical layouts. It adds a\n * <code>run</code> method with a parameter for the hierarchical layout model\n * that is shared between the layout stages.\n * \n * Constructor: mxHierarchicalLayoutStage\n *\n * Constructs a new hierarchical layout stage.\n */\nfunction mxHierarchicalLayoutStage() { };\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxHierarchicalLayoutStage.prototype.execute = function(parent) { };\n\n__mxOutput.mxHierarchicalLayoutStage = typeof mxHierarchicalLayoutStage !== 'undefined' ? mxHierarchicalLayoutStage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMedianHybridCrossingReduction\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well heuristic to straighten edges as\n * far as possible.\n * \n * Constructor: mxMedianHybridCrossingReduction\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxMedianHybridCrossingReduction(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxMedianHybridCrossingReduction.\n */\nmxMedianHybridCrossingReduction.prototype = new mxHierarchicalLayoutStage();\nmxMedianHybridCrossingReduction.prototype.constructor = mxMedianHybridCrossingReduction;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMedianHybridCrossingReduction.prototype.layout = null;\n\n/**\n * Variable: maxIterations\n * \n * The maximum number of iterations to perform whilst reducing edge\n * crossings. Default is 24.\n */\nmxMedianHybridCrossingReduction.prototype.maxIterations = 24;\n\n/**\n * Variable: nestedBestRanks\n * \n * Stores each rank as a collection of cells in the best order found for\n * each layer so far\n */\nmxMedianHybridCrossingReduction.prototype.nestedBestRanks = null;\n\n/**\n * Variable: currentBestCrossings\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.currentBestCrossings = 0;\n\n/**\n * Variable: iterationsWithoutImprovement\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.iterationsWithoutImprovement = 0;\n\n/**\n * Variable: maxNoImprovementIterations\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.maxNoImprovementIterations = 2;\n\n/**\n * Function: execute\n * \n * Performs a vertex ordering within ranks as described by Gansner et al\n * 1993\n */\nmxMedianHybridCrossingReduction.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\n\t// Stores initial ordering as being the best one found so far\n\tthis.nestedBestRanks = [];\n\t\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.nestedBestRanks[i] = model.ranks[i].slice();\n\t}\n\n\tvar iterationsWithoutImprovement = 0;\n\tvar currentBestCrossings = this.calculateCrossings(model);\n\n\tfor (var i = 0; i < this.maxIterations &&\n\t\titerationsWithoutImprovement < this.maxNoImprovementIterations; i++)\n\t{\n\t\tthis.weightedMedian(i, model);\n\t\tthis.transpose(i, model);\n\t\tvar candidateCrossings = this.calculateCrossings(model);\n\n\t\tif (candidateCrossings < currentBestCrossings)\n\t\t{\n\t\t\tcurrentBestCrossings = candidateCrossings;\n\t\t\titerationsWithoutImprovement = 0;\n\n\t\t\t// Store the current rankings as the best ones\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tthis.nestedBestRanks[j][cell.getGeneralPurposeVariable(j)] = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Increase count of iterations where we haven't improved the\n\t\t\t// layout\n\t\t\titerationsWithoutImprovement++;\n\n\t\t\t// Restore the best values to the cells\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tcell.setGeneralPurposeVariable(j, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (currentBestCrossings == 0)\n\t\t{\n\t\t\t// Do nothing further\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Store the best rankings but in the model\n\tvar ranks = [];\n\tvar rankList = [];\n\n\tfor (var i = 0; i < model.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tranks[i] = rankList[i];\n\t}\n\n\tfor (var i = 0; i < this.nestedBestRanks.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.nestedBestRanks[i].length; j++)\n\t\t{\n\t\t\trankList[i].push(this.nestedBestRanks[i][j]);\n\t\t}\n\t}\n\n\tmodel.ranks = ranks;\n};\n\n\n/**\n * Function: calculateCrossings\n * \n * Calculates the total number of edge crossing in the current graph.\n * Returns the current number of edge crossings in the hierarchy graph\n * model in the current candidate layout\n * \n * Parameters:\n * \n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateCrossings = function(model)\n{\n\tvar numRanks = model.ranks.length;\n\tvar totalCrossings = 0;\n\n\tfor (var i = 1; i < numRanks; i++)\n\t{\n\t\ttotalCrossings += this.calculateRankCrossing(i, model);\n\t}\n\t\n\treturn totalCrossings;\n};\n\n/**\n * Function: calculateRankCrossing\n * \n * Calculates the number of edges crossings between the specified rank and\n * the rank below it. Returns the number of edges crossings with the rank\n * beneath\n * \n * Parameters:\n * \n * i -  the topmost rank of the pair ( higher rank value )\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateRankCrossing = function(i, model)\n{\n\tvar totalCrossings = 0;\n\tvar rank = model.ranks[i];\n\tvar previousRank = model.ranks[i - 1];\n\n\tvar tmpIndices = [];\n\n\t// Iterate over the top rank and fill in the connection information\n\tfor (var j = 0; j < rank.length; j++)\n\t{\n\t\tvar node = rank[j];\n\t\tvar rankPosition = node.getGeneralPurposeVariable(i);\n\t\tvar connectedCells = node.getPreviousLayerConnectedCells(i);\n\t\tvar nodeIndices = [];\n\n\t\tfor (var k = 0; k < connectedCells.length; k++)\n\t\t{\n\t\t\tvar connectedNode = connectedCells[k];\n\t\t\tvar otherCellRankPosition = connectedNode.getGeneralPurposeVariable(i - 1);\n\t\t\tnodeIndices.push(otherCellRankPosition);\n\t\t}\n\t\t\n\t\tnodeIndices.sort(function(x, y) { return x - y; });\n\t\ttmpIndices[rankPosition] = nodeIndices;\n\t}\n\t\n\tvar indices = [];\n\n\tfor (var j = 0; j < tmpIndices.length; j++)\n\t{\n\t\tindices = indices.concat(tmpIndices[j]);\n\t}\n\n\tvar firstIndex = 1;\n\t\n\twhile (firstIndex < previousRank.length)\n\t{\n\t\tfirstIndex <<= 1;\n\t}\n\n\tvar treeSize = 2 * firstIndex - 1;\n\tfirstIndex -= 1;\n\n\tvar tree = [];\n\t\n\tfor (var j = 0; j < treeSize; ++j)\n\t{\n\t\ttree[j] = 0;\n\t}\n\n\tfor (var j = 0; j < indices.length; j++)\n\t{\n\t\tvar index = indices[j];\n\t    var treeIndex = index + firstIndex;\n\t    ++tree[treeIndex];\n\t    \n\t    while (treeIndex > 0)\n\t    {\n\t    \tif (treeIndex % 2)\n\t    \t{\n\t    \t\ttotalCrossings += tree[treeIndex + 1];\n\t    \t}\n\t      \n\t    \ttreeIndex = (treeIndex - 1) >> 1;\n\t    \t++tree[treeIndex];\n\t    }\n\t}\n\n\treturn totalCrossings;\n};\n\n/**\n * Function: transpose\n * \n * Takes each possible adjacent cell pair on each rank and checks if\n * swapping them around reduces the number of crossing\n * \n * Parameters:\n * \n * mainLoopIteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.transpose = function(mainLoopIteration, model)\n{\n\tvar improved = true;\n\n\t// Track the number of iterations in case of looping\n\tvar count = 0;\n\tvar maxCount = 10;\n\twhile (improved && count++ < maxCount)\n\t{\n\t\t// On certain iterations allow allow swapping of cell pairs with\n\t\t// equal edge crossings switched or not switched. This help to\n\t\t// nudge a stuck layout into a lower crossing total.\n\t\tvar nudge = mainLoopIteration % 2 == 1 && count % 2 == 1;\n\t\timproved = false;\n\t\t\n\t\tfor (var i = 0; i < model.ranks.length; i++)\n\t\t{\n\t\t\tvar rank = model.ranks[i];\n\t\t\tvar orderedCells = [];\n\t\t\t\n\t\t\tfor (var j = 0; j < rank.length; j++)\n\t\t\t{\n\t\t\t\tvar cell = rank[j];\n\t\t\t\tvar tempRank = cell.getGeneralPurposeVariable(i);\n\t\t\t\t\n\t\t\t\t// FIXME: Workaround to avoid negative tempRanks\n\t\t\t\tif (tempRank < 0)\n\t\t\t\t{\n\t\t\t\t\ttempRank = j;\n\t\t\t\t}\n\t\t\t\torderedCells[tempRank] = cell;\n\t\t\t}\n\t\t\t\n\t\t\tvar leftCellAboveConnections = null;\n\t\t\tvar leftCellBelowConnections = null;\n\t\t\tvar rightCellAboveConnections = null;\n\t\t\tvar rightCellBelowConnections = null;\n\t\t\t\n\t\t\tvar leftAbovePositions = null;\n\t\t\tvar leftBelowPositions = null;\n\t\t\tvar rightAbovePositions = null;\n\t\t\tvar rightBelowPositions = null;\n\t\t\t\n\t\t\tvar leftCell = null;\n\t\t\tvar rightCell = null;\n\n\t\t\tfor (var j = 0; j < (rank.length - 1); j++)\n\t\t\t{\n\t\t\t\t// For each intra-rank adjacent pair of cells\n\t\t\t\t// see if swapping them around would reduce the\n\t\t\t\t// number of edges crossing they cause in total\n\t\t\t\t// On every cell pair except the first on each rank, we\n\t\t\t\t// can save processing using the previous values for the\n\t\t\t\t// right cell on the new left cell\n\t\t\t\tif (j == 0)\n\t\t\t\t{\n\t\t\t\t\tleftCell = orderedCells[j];\n\t\t\t\t\tleftCellAboveConnections = leftCell\n\t\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\t\tleftCellBelowConnections = leftCell\n\t\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\t\t\t\t\tleftAbovePositions = [];\n\t\t\t\t\tleftBelowPositions = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellAboveConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftAbovePositions[k] = leftCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellBelowConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftBelowPositions[k] = leftCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftCellAboveConnections = rightCellAboveConnections;\n\t\t\t\t\tleftCellBelowConnections = rightCellBelowConnections;\n\t\t\t\t\tleftAbovePositions = rightAbovePositions;\n\t\t\t\t\tleftBelowPositions = rightBelowPositions;\n\t\t\t\t\tleftCell = rightCell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trightCell = orderedCells[j + 1];\n\t\t\t\trightCellAboveConnections = rightCell\n\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\trightCellBelowConnections = rightCell\n\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\n\t\t\t\trightAbovePositions = [];\n\t\t\t\trightBelowPositions = [];\n\n\t\t\t\tfor (var k = 0; k < rightCellAboveConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightAbovePositions[k] = rightCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rightCellBelowConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightBelowPositions[k] = rightCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t}\n\n\t\t\t\tvar totalCurrentCrossings = 0;\n\t\t\t\tvar totalSwitchedCrossings = 0;\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftAbovePositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightAbovePositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftAbovePositions[k] > rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftAbovePositions[k] < rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftBelowPositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightBelowPositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftBelowPositions[k] > rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftBelowPositions[k] < rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((totalSwitchedCrossings < totalCurrentCrossings) ||\n\t\t\t\t\t(totalSwitchedCrossings == totalCurrentCrossings &&\n\t\t\t\t\tnudge))\n\t\t\t\t{\n\t\t\t\t\tvar temp = leftCell.getGeneralPurposeVariable(i);\n\t\t\t\t\tleftCell.setGeneralPurposeVariable(i, rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(i));\n\t\t\t\t\trightCell.setGeneralPurposeVariable(i, temp);\n\n\t\t\t\t\t// With this pair exchanged we have to switch all of\n\t\t\t\t\t// values for the left cell to the right cell so the\n\t\t\t\t\t// next iteration for this rank uses it as the left\n\t\t\t\t\t// cell again\n\t\t\t\t\trightCellAboveConnections = leftCellAboveConnections;\n\t\t\t\t\trightCellBelowConnections = leftCellBelowConnections;\n\t\t\t\t\trightAbovePositions = leftAbovePositions;\n\t\t\t\t\trightBelowPositions = leftBelowPositions;\n\t\t\t\t\trightCell = leftCell;\n\t\t\t\t\t\n\t\t\t\t\tif (!nudge)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Don't count nudges as improvement or we'll end\n\t\t\t\t\t\t// up stuck in two combinations and not finishing\n\t\t\t\t\t\t// as early as we should\n\t\t\t\t\t\timproved = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: weightedMedian\n * \n * Sweeps up or down the layout attempting to minimise the median placement\n * of connected cells on adjacent ranks\n * \n * Parameters:\n * \n * iteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.weightedMedian = function(iteration, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (iteration % 2 == 0);\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank - 1; j >= 0; j--)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 1; j < model.maxRank; j++)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianRank\n * \n * Attempts to minimise the median placement of connected cells on this rank\n * and one of the adjacent ranks\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * downwardSweep - whether or not this is a downward sweep through the graph\n */\nmxMedianHybridCrossingReduction.prototype.medianRank = function(rankValue, downwardSweep)\n{\n\tvar numCellsForRank = this.nestedBestRanks[rankValue].length;\n\tvar medianValues = [];\n\tvar reservedPositions = [];\n\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tvar cell = this.nestedBestRanks[rankValue][i];\n\t\tvar sorterEntry = new MedianCellSorter();\n\t\tsorterEntry.cell = cell;\n\n\t\t// Flip whether or not equal medians are flipped on up and down\n\t\t// sweeps\n\t\t// TODO re-implement some kind of nudge\n\t\t// medianValues[i].nudge = !downwardSweep;\n\t\tvar nextLevelConnectedCells;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\t\n\t\tvar nextRankValue;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextRankValue = rankValue + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextRankValue = rankValue - 1;\n\t\t}\n\n\t\tif (nextLevelConnectedCells != null\n\t\t\t\t&& nextLevelConnectedCells.length != 0)\n\t\t{\n\t\t\tsorterEntry.medianValue = this.medianValue(\n\t\t\t\t\tnextLevelConnectedCells, nextRankValue);\n\t\t\tmedianValues.push(sorterEntry);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Nodes with no adjacent vertices are flagged in the reserved array\n\t\t\t// to indicate they should be left in their current position.\n\t\t\treservedPositions[cell.getGeneralPurposeVariable(rankValue)] = true;\n\t\t}\n\t}\n\t\n\tmedianValues.sort(MedianCellSorter.prototype.compare);\n\t\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tif (reservedPositions[i] == null)\n\t\t{\n\t\t\tvar cell = medianValues.shift().cell;\n\t\t\tcell.setGeneralPurposeVariable(rankValue, i);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianValue\n * \n * Calculates the median rank order positioning for the specified cell using\n * the connected cells on the specified rank. Returns the median rank\n * ordering value of the connected cells\n * \n * Parameters:\n * \n * connectedCells - the cells on the specified rank connected to the\n * specified cell\n * rankValue - the rank that the connected cell lie upon\n */\nmxMedianHybridCrossingReduction.prototype.medianValue = function(connectedCells, rankValue)\n{\n\tvar medianValues = [];\n\tvar arrayCount = 0;\n\t\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tvar cell = connectedCells[i];\n\t\tmedianValues[arrayCount++] = cell.getGeneralPurposeVariable(rankValue);\n\t}\n\n\t// Sort() sorts lexicographically by default (i.e. 11 before 9) so force\n\t// numerical order sort\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (arrayCount % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(arrayCount / 2)];\n\t}\n\telse if (arrayCount == 2)\n\t{\n\t\treturn ((medianValues[0] + medianValues[1]) / 2.0);\n\t}\n\telse\n\t{\n\t\tvar medianPoint = arrayCount / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1] - medianValues[0];\n\t\tvar rightMedian = medianValues[arrayCount - 1]\n\t\t\t\t- medianValues[medianPoint];\n\n\t\treturn (medianValues[medianPoint - 1] * rightMedian + medianValues[medianPoint]\n\t\t\t\t* leftMedian)\n\t\t\t\t/ (leftMedian + rightMedian);\n\t}\n};\n\n/**\n * Class: MedianCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the median\n * values. Does not violate (x.compareTo(y)==0) == (x.equals(y))\n *\n * Constructor: MedianCellSorter\n * \n * Constructs a new median cell sorter.\n */\nfunction MedianCellSorter()\n{\n\t// empty\n};\n\n/**\n * Variable: medianValue\n * \n * The weighted value of the cell stored.\n */\nMedianCellSorter.prototype.medianValue = 0;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated\n */\nMedianCellSorter.prototype.cell = false;\n\n/**\n * Function: compare\n * \n * Compares two MedianCellSorters.\n */\nMedianCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.medianValue > a.medianValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.medianValue < a.medianValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxMedianHybridCrossingReduction = typeof mxMedianHybridCrossingReduction !== 'undefined' ? mxMedianHybridCrossingReduction : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMinimumCycleRemover\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxMinimumCycleRemover\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxMinimumCycleRemover(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxMinimumCycleRemover.prototype = new mxHierarchicalLayoutStage();\nmxMinimumCycleRemover.prototype.constructor = mxMinimumCycleRemover;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMinimumCycleRemover.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxMinimumCycleRemover.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodesArray = model.vertexMapper.getValues();\n\tvar unseenNodes = new Object();\n\t\n\tfor (var i = 0; i < unseenNodesArray.length; i++)\n\t{\n\t\tunseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n\t}\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, rootsArray, true, null);\n\n\t// If there are any nodes that should be nodes that the dfs can miss\n\t// these need to be processed with the dfs and the roots assigned\n\t// correctly to form a correct internal model\n\tvar seenNodesCopy = mxUtils.clone(seenNodes, null, true);\n\n\t// Pick a random cell and dfs from it\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, unseenNodes, true, seenNodesCopy);\n};\n\n__mxOutput.mxMinimumCycleRemover = typeof mxMinimumCycleRemover !== 'undefined' ? mxMinimumCycleRemover : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCoordinateAssignment\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well as heuristics to straighten edges as\n * far as possible.\n * \n * Constructor: mxCoordinateAssignment\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxCoordinateAssignment(layout, intraCellSpacing, interRankCellSpacing,\n\torientation, initialX, parallelEdgeSpacing)\n{\n\tthis.layout = layout;\n\tthis.intraCellSpacing = intraCellSpacing;\n\tthis.interRankCellSpacing = interRankCellSpacing;\n\tthis.orientation = orientation;\n\tthis.initialX = initialX;\n\tthis.parallelEdgeSpacing = parallelEdgeSpacing;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxCoordinateAssignment.prototype = new mxHierarchicalLayoutStage();\nmxCoordinateAssignment.prototype.constructor = mxCoordinateAssignment;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxCoordinateAssignment.prototype.layout = null;\n\n/**\n * Variable: intraCellSpacing\n * \n * The minimum buffer between cells on the same rank. Default is 30.\n */\nmxCoordinateAssignment.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The minimum distance between cells on adjacent ranks. Default is 100.\n */\nmxCoordinateAssignment.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxCoordinateAssignment.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: maxIterations\n * \n * The number of heuristic iterations to run. Default is 8.\n */\nmxCoordinateAssignment.prototype.maxIterations = 8;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex Default is 5.\n */\nmxCoordinateAssignment.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex Default is 2.\n */\nmxCoordinateAssignment.prototype.prefVertEdgeOff = 2;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex Default is 12.\n */\nmxCoordinateAssignment.prototype.minEdgeJetty = 12;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed Default is 4.\n */\nmxCoordinateAssignment.prototype.channelBuffer = 4;\n\n/**\n * Variable: jettyPositions\n * \n * Map of internal edges and (x,y) pair of positions of the start and end jetty\n * for that edge where it connects to the source and target vertices.\n * Note this should technically be a WeakHashMap, but since JS does not\n * have an equivalent, housekeeping must be performed before using.\n * i.e. check all edges are still in the model and clear the values.\n * Note that the y co-ord is the offset of the jetty, not the\n * absolute point\n */\nmxCoordinateAssignment.prototype.jettyPositions = null;\n\n/**\n * Variable: orientation\n * \n * The position of the root ( start ) node(s) relative to the rest of the\n * laid out graph. Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxCoordinateAssignment.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: initialX\n * \n * The minimum x position node placement starts at\n */\nmxCoordinateAssignment.prototype.initialX = null;\n\n/**\n * Variable: limitX\n * \n * The maximum x value this positioning lays up to\n */\nmxCoordinateAssignment.prototype.limitX = null;\n\n/**\n * Variable: currentXDelta\n * \n * The sum of x-displacements for the current iteration\n */\nmxCoordinateAssignment.prototype.currentXDelta = null;\n\n/**\n * Variable: widestRank\n * \n * The rank that has the widest x position\n */\nmxCoordinateAssignment.prototype.widestRank = null;\n\n/**\n * Variable: rankTopY\n * \n * Internal cache of top-most values of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankTopY = null;\n\n/**\n * Variable: rankBottomY\n * \n * Internal cache of bottom-most value of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankBottomY = null;\n\n/**\n * Variable: widestRankValue\n * \n * The X-coordinate of the edge of the widest rank\n */\nmxCoordinateAssignment.prototype.widestRankValue = null;\n\n/**\n * Variable: rankWidths\n * \n * The width of all the ranks\n */\nmxCoordinateAssignment.prototype.rankWidths = null;\n\n/**\n * Variable: rankY\n * \n * The Y-coordinate of all the ranks\n */\nmxCoordinateAssignment.prototype.rankY = null;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxCoordinateAssignment.prototype.fineTuning = true;\n\n/**\n * Variable: nextLayerConnectedCache\n * \n * A store of connections to the layer above for speed\n */\nmxCoordinateAssignment.prototype.nextLayerConnectedCache = null;\n\n/**\n * Variable: previousLayerConnectedCache\n * \n * A store of connections to the layer below for speed\n */\nmxCoordinateAssignment.prototype.previousLayerConnectedCache = null;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents Default is 10.\n */\nmxCoordinateAssignment.prototype.groupPadding = 10;\n\n/**\n * Utility method to display current positions\n */\nmxCoordinateAssignment.prototype.printStatus = function()\n{\n\tvar model = this.layout.getModel();\n\tmxLog.show();\n\n\tmxLog.writeln('======Coord assignment debug=======');\n\n\tfor (var j = 0; j < model.ranks.length; j++)\n\t{\n\t\tmxLog.write('Rank ', j, ' : ' );\n\t\tvar rank = model.ranks[j];\n\t\t\n\t\tfor (var k = 0; k < rank.length; k++)\n\t\t{\n\t\t\tvar cell = rank[k];\n\t\t\t\n\t\t\tmxLog.write(cell.getGeneralPurposeVariable(j), '  ');\n\t\t}\n\t\tmxLog.writeln();\n\t}\n\t\n\tmxLog.writeln('====================================');\n};\n\n/**\n * Function: execute\n * \n * A basic horizontal coordinate assignment algorithm\n */\nmxCoordinateAssignment.prototype.execute = function(parent)\n{\n\tthis.jettyPositions = Object();\n\tvar model = this.layout.getModel();\n\tthis.currentXDelta = 0.0;\n\n\tthis.initialCoords(this.layout.getGraph(), model);\n\t\n//\tthis.printStatus();\n\t\n\tif (this.fineTuning)\n\t{\n\t\tthis.minNode(model);\n\t}\n\t\n\tvar bestXDelta = 100000000.0;\n\t\n\tif (this.fineTuning)\n\t{\n\t\tfor (var i = 0; i < this.maxIterations; i++)\n\t\t{\n//\t\t\tthis.printStatus();\n\t\t\n\t\t\t// Median Heuristic\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tthis.medianPos(i, model);\n\t\t\t\tthis.minNode(model);\n\t\t\t}\n\t\t\t\n\t\t\t// if the total offset is less for the current positioning,\n\t\t\t// there are less heavily angled edges and so the current\n\t\t\t// positioning is used\n\t\t\tif (this.currentXDelta < bestXDelta)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setX(j, cell.getGeneralPurposeVariable(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbestXDelta = this.currentXDelta;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Restore the best positions\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setGeneralPurposeVariable(j, cell.getX(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.minPath(this.layout.getGraph(), model);\n\t\t\t\n\t\t\tthis.currentXDelta = 0;\n\t\t}\n\t}\n\t\n\tthis.setCellLocations(this.layout.getGraph(), model);\n};\n\n/**\n * Function: minNode\n * \n * Performs one median positioning sweep in both directions\n */\nmxCoordinateAssignment.prototype.minNode = function(model)\n{\n\t// Queue all nodes\n\tvar nodeList = [];\n\t\n\t// Need to be able to map from cell to cellWrapper\n\tvar map = new mxDictionary();\n\tvar rank = [];\n\t\n\tfor (var i = 0; i <= model.maxRank; i++)\n\t{\n\t\trank[i] = model.ranks[i];\n\t\t\n\t\tfor (var j = 0; j < rank[i].length; j++)\n\t\t{\n\t\t\t// Use the weight to store the rank and visited to store whether\n\t\t\t// or not the cell is in the list\n\t\t\tvar node = rank[i][j];\n\t\t\tvar nodeWrapper = new WeightedCellSorter(node, i);\n\t\t\tnodeWrapper.rankIndex = j;\n\t\t\tnodeWrapper.visited = true;\n\t\t\tnodeList.push(nodeWrapper);\n\t\t\t\n\t\t\tmap.put(node, nodeWrapper);\n\t\t}\n\t}\n\t\n\t// Set a limit of the maximum number of times we will access the queue\n\t// in case a loop appears\n\tvar maxTries = nodeList.length * 10;\n\tvar count = 0;\n\t\n\t// Don't move cell within this value of their median\n\tvar tolerance = 1;\n\t\n\twhile (nodeList.length > 0 && count <= maxTries)\n\t{\n\t\tvar cellWrapper = nodeList.shift();\n\t\tvar cell = cellWrapper.cell;\n\t\t\n\t\tvar rankValue = cellWrapper.weightedValue;\n\t\tvar rankIndex = parseInt(cellWrapper.rankIndex);\n\t\t\n\t\tvar nextLayerConnectedCells = cell.getNextLayerConnectedCells(rankValue);\n\t\tvar previousLayerConnectedCells = cell.getPreviousLayerConnectedCells(rankValue);\n\t\t\n\t\tvar numNextLayerConnected = nextLayerConnectedCells.length;\n\t\tvar numPreviousLayerConnected = previousLayerConnectedCells.length;\n\n\t\tvar medianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\trankValue + 1);\n\t\tvar medianPreviousLevel = this.medianXValue(previousLayerConnectedCells,\n\t\t\t\trankValue - 1);\n\n\t\tvar numConnectedNeighbours = numNextLayerConnected\n\t\t\t\t+ numPreviousLayerConnected;\n\t\tvar currentPosition = cell.getGeneralPurposeVariable(rankValue);\n\t\tvar cellMedian = currentPosition;\n\t\t\n\t\tif (numConnectedNeighbours > 0)\n\t\t{\n\t\t\tcellMedian = (medianNextLevel * numNextLayerConnected + medianPreviousLevel\n\t\t\t\t\t* numPreviousLayerConnected)\n\t\t\t\t\t/ numConnectedNeighbours;\n\t\t}\n\n\t\t// Flag storing whether or not position has changed\n\t\tvar positionChanged = false;\n\t\t\n\t\tif (cellMedian < currentPosition - tolerance)\n\t\t{\n\t\t\tif (rankIndex == 0)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar leftCell = rank[rankValue][rankIndex - 1];\n\t\t\t\tvar leftLimit = leftCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\t\t\tif (leftLimit < cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (leftLimit < cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t- tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (cellMedian > currentPosition + tolerance)\n\t\t{\n\t\t\tvar rankSize = rank[rankValue].length;\n\t\t\t\n\t\t\tif (rankIndex == rankSize - 1)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar rightCell = rank[rankValue][rankIndex + 1];\n\t\t\t\tvar rightLimit = rightCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\t\t\t\t\n\t\t\t\tif (rightLimit > cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (rightLimit > cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t+ tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (positionChanged)\n\t\t{\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < nextLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = nextLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\t\t\t\t\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < previousLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = previousLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tcellWrapper.visited = false;\n\t\tcount++;\n\t}\n};\n\n/**\n * Function: medianPos\n * \n * Performs one median positioning sweep in one direction\n * \n * Parameters:\n * \n * i - the iteration of the whole process\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.medianPos = function(i, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (i % 2 == 0);\n\t\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank; j > 0; j--)\n\t\t{\n\t\t\tthis.rankMedianPosition(j - 1, model, j);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 0; j < model.maxRank - 1; j++)\n\t\t{\n\t\t\tthis.rankMedianPosition(j + 1, model, j);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankMedianPosition\n * \n * Performs median minimisation over one rank.\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * model - an internal model of the hierarchical layout\n * nextRankValue - the layer number whose connected cels are to be laid out\n * relative to\n */\nmxCoordinateAssignment.prototype.rankMedianPosition = function(rankValue, model, nextRankValue)\n{\n\tvar rank = model.ranks[rankValue];\n\n\t// Form an array of the order in which the cell are to be processed\n\t// , the order is given by the weighted sum of the in or out edges,\n\t// depending on whether we're traveling up or down the hierarchy.\n\tvar weightedValues = [];\n\tvar cellMap = new Object();\n\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar currentCell = rank[i];\n\t\tweightedValues[i] = new WeightedCellSorter();\n\t\tweightedValues[i].cell = currentCell;\n\t\tweightedValues[i].rankIndex = i;\n\t\tcellMap[currentCell.id] = weightedValues[i];\n\t\tvar nextLayerConnectedCells = null;\n\t\t\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\n\t\t// Calculate the weighing based on this node type and those this\n\t\t// node is connected to on the next layer\n\t\tweightedValues[i].weightedValue = this.calculatedWeightedValue(\n\t\t\t\tcurrentCell, nextLayerConnectedCells);\n\t}\n\n\tweightedValues.sort(WeightedCellSorter.prototype.compare);\n\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\t\n\tfor (var i = 0; i < weightedValues.length; i++)\n\t{\n\t\tvar numConnectionsNextLevel = 0;\n\t\tvar cell = weightedValues[i].cell;\n\t\tvar nextLayerConnectedCells = null;\n\t\tvar medianNextLevel = 0;\n\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getPreviousLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getNextLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\n\t\tif (nextLayerConnectedCells != null)\n\t\t{\n\t\t\tnumConnectionsNextLevel = nextLayerConnectedCells.length;\n\t\t\t\n\t\t\tif (numConnectionsNextLevel > 0)\n\t\t\t{\n\t\t\t\tmedianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\t\t\tnextRankValue);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// For case of no connections on the next level set the\n\t\t\t\t// median to be the current position and try to be\n\t\t\t\t// positioned there\n\t\t\t\tmedianNextLevel = cell.getGeneralPurposeVariable(rankValue);\n\t\t\t}\n\t\t}\n\n\t\tvar leftBuffer = 0.0;\n\t\tvar leftLimit = -100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex - 1; j >= 0;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar leftCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\tleftLimit = leftCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t+ leftCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t+ this.intraCellSpacing\n\t\t\t\t\t\t\t+ leftBuffer + cell.width / 2.0;\n\t\t\t\t\tj = -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftBuffer += leftCell.width + this.intraCellSpacing;\n\t\t\t\t\tj--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar rightBuffer = 0.0;\n\t\tvar rightLimit = 100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex + 1; j < weightedValues.length;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar rightCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\trightLimit = rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t- rightCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t- this.intraCellSpacing\n\t\t\t\t\t\t\t- rightBuffer - cell.width / 2.0;\n\t\t\t\t\tj = weightedValues.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trightBuffer += rightCell.width + this.intraCellSpacing;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (medianNextLevel >= leftLimit && medianNextLevel <= rightLimit)\n\t\t{\n\t\t\tcell.setGeneralPurposeVariable(rankValue, medianNextLevel);\n\t\t}\n\t\telse if (medianNextLevel < leftLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\tthis.currentXDelta += leftLimit - medianNextLevel;\n\t\t}\n\t\telse if (medianNextLevel > rightLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\tthis.currentXDelta += medianNextLevel - rightLimit;\n\t\t}\n\n\t\tweightedValues[i].visited = true;\n\t}\n};\n\n/**\n * Function: calculatedWeightedValue\n * \n * Calculates the priority the specified cell has based on the type of its\n * cell and the cells it is connected to on the next layer\n * \n * Parameters:\n * \n * currentCell - the cell whose weight is to be calculated\n * collection - the cells the specified cell is connected to\n */\nmxCoordinateAssignment.prototype.calculatedWeightedValue = function(currentCell, collection)\n{\n\tvar totalWeight = 0;\n\t\n\tfor (var i = 0; i < collection.length; i++)\n\t{\n\t\tvar cell = collection[i];\n\n\t\tif (currentCell.isVertex() && cell.isVertex())\n\t\t{\n\t\t\ttotalWeight++;\n\t\t}\n\t\telse if (currentCell.isEdge() && cell.isEdge())\n\t\t{\n\t\t\ttotalWeight += 8;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttotalWeight += 2;\n\t\t}\n\t}\n\n\treturn totalWeight;\n};\n\n/**\n * Function: medianXValue\n * \n * Calculates the median position of the connected cell on the specified\n * rank\n * \n * Parameters:\n * \n * connectedCells - the cells the candidate connects to on this level\n * rankValue - the layer number of this rank\n */\nmxCoordinateAssignment.prototype.medianXValue = function(connectedCells, rankValue)\n{\n\tif (connectedCells.length == 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar medianValues = [];\n\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tmedianValues[i] = connectedCells[i].getGeneralPurposeVariable(rankValue);\n\t}\n\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (connectedCells.length % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(connectedCells.length / 2)];\n\t}\n\telse\n\t{\n\t\tvar medianPoint = connectedCells.length / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1];\n\t\tvar rightMedian = medianValues[medianPoint];\n\n\t\treturn ((leftMedian + rightMedian) / 2);\n\t}\n};\n\n/**\n * Function: initialCoords\n * \n * Sets up the layout in an initial positioning. The ranks are all centered\n * as much as possible along the middle vertex in each rank. The other cells\n * are then placed as close as possible on either side.\n * \n * Parameters:\n * \n * facade - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.initialCoords = function(facade, model)\n{\n\tthis.calculateWidestRank(facade, model);\n\n\t// Sweep up and down from the widest rank\n\tfor (var i = this.widestRank; i >= 0; i--)\n\t{\n\t\tif (i < model.maxRank)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n\n\tfor (var i = this.widestRank+1; i <= model.maxRank; i++)\n\t{\n\t\tif (i > 0)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankCoordinates\n * \n * Sets up the layout in an initial positioning. All the first cells in each\n * rank are moved to the left and the rest of the rank inserted as close\n * together as their size and buffering permits. This method works on just\n * the specified rank.\n * \n * Parameters:\n * \n * rankValue - the current rank being processed\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.rankCoordinates = function(rankValue, graph, model)\n{\n\tvar rank = model.ranks[rankValue];\n\tvar maxY = 0.0;\n\tvar localX = this.initialX + (this.widestRankValue - this.rankWidths[rankValue])\n\t\t\t/ 2;\n\n\t// Store whether or not any of the cells' bounds were unavailable so\n\t// to only issue the warning once for all cells\n\tvar boundsWarning = false;\n\t\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar node = rank[i];\n\t\t\n\t\tif (node.isVertex())\n\t\t{\n\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tboundsWarning = true;\n\t\t\t}\n\n\t\t\tmaxY = Math.max(maxY, node.height);\n\t\t}\n\t\telse if (node.isEdge())\n\t\t{\n\t\t\t// The width is the number of additional parallel edges\n\t\t\t// time the parallel edge spacing\n\t\t\tvar numEdges = 1;\n\n\t\t\tif (node.edges != null)\n\t\t\t{\n\t\t\t\tnumEdges = node.edges.length;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t}\n\n\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t}\n\n\t\t// Set the initial x-value as being the best result so far\n\t\tlocalX += node.width / 2.0;\n\t\tnode.setX(rankValue, localX);\n\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\tlocalX += node.width / 2.0;\n\t\tlocalX += this.intraCellSpacing;\n\t}\n\n\tif (boundsWarning == true)\n\t{\n\t\tmxLog.warn('At least one cell has no bounds');\n\t}\n};\n\n/**\n * Function: calculateWidestRank\n * \n * Calculates the width rank in the hierarchy. Also set the y value of each\n * rank whilst performing the calculation\n * \n * Parameters:\n * \n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.calculateWidestRank = function(graph, model)\n{\n\t// Starting y co-ordinate\n\tvar y = -this.interRankCellSpacing;\n\t\n\t// Track the widest cell on the last rank since the y\n\t// difference depends on it\n\tvar lastRankMaxCellHeight = 0.0;\n\tthis.rankWidths = [];\n\tthis.rankY = [];\n\n\tfor (var rankValue = model.maxRank; rankValue >= 0; rankValue--)\n\t{\n\t\t// Keep track of the widest cell on this rank\n\t\tvar maxCellHeight = 0.0;\n\t\tvar rank = model.ranks[rankValue];\n\t\tvar localX = this.initialX;\n\n\t\t// Store whether or not any of the cells' bounds were unavailable so\n\t\t// to only issue the warning once for all cells\n\t\tvar boundsWarning = false;\n\t\t\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar node = rank[i];\n\n\t\t\tif (node.isVertex())\n\t\t\t{\n\t\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tboundsWarning = true;\n\t\t\t\t}\n\n\t\t\t\tmaxCellHeight = Math.max(maxCellHeight, node.height);\n\t\t\t}\n\t\t\telse if (node.isEdge())\n\t\t\t{\n\t\t\t\t// The width is the number of additional parallel edges\n\t\t\t\t// time the parallel edge spacing\n\t\t\t\tvar numEdges = 1;\n\n\t\t\t\tif (node.edges != null)\n\t\t\t\t{\n\t\t\t\t\tnumEdges = node.edges.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t\t}\n\n\t\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t\t}\n\n\t\t\t// Set the initial x-value as being the best result so far\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tnode.setX(rankValue, localX);\n\t\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tlocalX += this.intraCellSpacing;\n\n\t\t\tif (localX > this.widestRankValue)\n\t\t\t{\n\t\t\t\tthis.widestRankValue = localX;\n\t\t\t\tthis.widestRank = rankValue;\n\t\t\t}\n\n\t\t\tthis.rankWidths[rankValue] = localX;\n\t\t}\n\n\t\tif (boundsWarning == true)\n\t\t{\n\t\t\tmxLog.warn('At least one cell has no bounds');\n\t\t}\n\n\t\tthis.rankY[rankValue] = y;\n\t\tvar distanceToNextRank = maxCellHeight / 2.0\n\t\t\t\t+ lastRankMaxCellHeight / 2.0 + this.interRankCellSpacing;\n\t\tlastRankMaxCellHeight = maxCellHeight;\n\n\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.orientation == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\ty += distanceToNextRank;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty -= distanceToNextRank;\n\t\t}\n\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar cell = rank[i];\n\t\t\tcell.setY(rankValue, y);\n\t\t}\n\t}\n};\n\n/**\n * Function: minPath\n * \n * Straightens out chains of virtual nodes where possibleacade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.minPath = function(graph, model)\n{\n\t// Work down and up each edge with at least 2 control points\n\t// trying to straighten each one out. If the same number of\n\t// straight segments are formed in both directions, the \n\t// preferred direction used is the one where the final\n\t// control points have the least offset from the connectable \n\t// region of the terminating vertices\n\tvar edges = model.edgeMapper.getValues();\n\t\n\tfor (var j = 0; j < edges.length; j++)\n\t{\n\t\tvar cell = edges[j];\n\t\t\n\t\tif (cell.maxRank - cell.minRank - 1 < 1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// At least two virtual nodes in the edge\n\t\t// Check first whether the edge is already straight\n\t\tvar referenceX = cell\n\t\t\t\t.getGeneralPurposeVariable(cell.minRank + 1);\n\t\tvar edgeStraight = true;\n\t\tvar refSegCount = 0;\n\t\t\n\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t{\n\t\t\tvar x = cell.getGeneralPurposeVariable(i);\n\n\t\t\tif (referenceX != x)\n\t\t\t{\n\t\t\t\tedgeStraight = false;\n\t\t\t\treferenceX = x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trefSegCount++;\n\t\t\t}\n\t\t}\n\n\t\tif (!edgeStraight)\n\t\t{\n\t\t\tvar upSegCount = 0;\n\t\t\tvar downSegCount = 0;\n\t\t\tvar upXPositions = [];\n\t\t\tvar downXPositions = [];\n\n\t\t\tvar currentX = cell.getGeneralPurposeVariable(cell.minRank + 1);\n\n\t\t\tfor (var i = cell.minRank + 1; i < cell.maxRank - 1; i++)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment up with the current control point.\n\t\t\t\tvar nextX = cell.getX(i + 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i + 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = nextX;\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\tcurrentX = cell.getX(i);\n\n\t\t\tfor (var i = cell.maxRank - 1; i > cell.minRank + 1; i--)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment down with the current control point.\n\t\t\t\tvar nextX = cell.getX(i - 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i - 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = cell.getX(i-1);\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (downSegCount > refSegCount || upSegCount > refSegCount)\n\t\t\t{\n\t\t\t\tif (downSegCount >= upSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply down calculation values\n\t\t\t\t\tfor (var i = cell.maxRank - 2; i > cell.minRank; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, downXPositions[i - cell.minRank - 1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (upSegCount > downSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply up calculation values\n\t\t\t\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, upXPositions[i - cell.minRank - 2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Neither direction provided a favourable result\n\t\t\t\t\t// But both calculations are better than the\n\t\t\t\t\t// existing solution, so apply the one with minimal\n\t\t\t\t\t// offset to attached vertices at either end.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: repositionValid\n * \n * Determines whether or not a node may be moved to the specified x \n * position on the specified rank\n * \n * Parameters:\n *\n * model - the layout model\n * cell - the cell being analysed\n * rank - the layer of the cell\n * position - the x position being sought\n */\nmxCoordinateAssignment.prototype.repositionValid = function(model, cell, rank, position)\n{\n\tvar rankArray = model.ranks[rank];\n\tvar rankIndex = -1;\n\n\tfor (var i = 0; i < rankArray.length; i++)\n\t{\n\t\tif (cell == rankArray[i])\n\t\t{\n\t\t\trankIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (rankIndex < 0)\n\t{\n\t\treturn false;\n\t}\n\n\tvar currentX = cell.getGeneralPurposeVariable(rank);\n\n\tif (position < currentX)\n\t{\n\t\t// Trying to move node to the left.\n\t\tif (rankIndex == 0)\n\t\t{\n\t\t\t// Left-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar leftCell = rankArray[rankIndex - 1];\n\t\tvar leftLimit = leftCell.getGeneralPurposeVariable(rank);\n\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\tif (leftLimit <= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (position > currentX)\n\t{\n\t\t// Trying to move node to the right.\n\t\tif (rankIndex == rankArray.length - 1)\n\t\t{\n\t\t\t// Right-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar rightCell = rankArray[rankIndex + 1];\n\t\tvar rightLimit = rightCell.getGeneralPurposeVariable(rank);\n\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\n\t\tif (rightLimit >= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Function: setCellLocations\n * \n * Sets the cell locations in the facade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the input graph\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.setCellLocations = function(graph, model)\n{\n\tthis.rankTopY = [];\n\tthis.rankBottomY = [];\n\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.rankTopY[i] = Number.MAX_VALUE;\n\t\tthis.rankBottomY[i] = -Number.MAX_VALUE;\n\t}\n\t\n\tvar vertices = model.vertexMapper.getValues();\n\n\t// Process vertices all first, since they define the lower and \n\t// limits of each rank. Between these limits lie the channels\n\t// where the edges can be routed across the graph\n\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tthis.setVertexLocation(vertices[i]);\n\t}\n\t\n\t// Post process edge styles. Needs the vertex locations set for initial\n\t// values of the top and bottoms of each rank\n\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.ORTHOGONAL\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.POLYLINE\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t{\n\t\tthis.localEdgeProcessing(model);\n\t}\n\n\tvar edges = model.edgeMapper.getValues();\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.setEdgePosition(edges[i]);\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n * \n * Separates the x position of edges as they connect to vertices\n * \n * Parameters:\n *\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.localEdgeProcessing = function(model)\n{\n\t// Iterate through each vertex, look at the edges connected in\n\t// both directions.\n\tfor (var rankIndex = 0; rankIndex < model.ranks.length; rankIndex++)\n\t{\n\t\tvar rank = model.ranks[rankIndex];\n\n\t\tfor (var cellIndex = 0; cellIndex < rank.length; cellIndex++)\n\t\t{\n\t\t\tvar cell = rank[cellIndex];\n\n\t\t\tif (cell.isVertex())\n\t\t\t{\n\t\t\t\tvar currentCells = cell.getPreviousLayerConnectedCells(rankIndex);\n\n\t\t\t\tvar currentRank = rankIndex - 1;\n\n\t\t\t\t// Two loops, last connected cells, and next\n\t\t\t\tfor (var k = 0; k < 2; k++)\n\t\t\t\t{\n\t\t\t\t\tif (currentRank > -1\n\t\t\t\t\t\t\t&& currentRank < model.ranks.length\n\t\t\t\t\t\t\t&& currentCells != null\n\t\t\t\t\t\t\t&& currentCells.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sortedCells = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < currentCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar sorter = new WeightedCellSorter(\n\t\t\t\t\t\t\t\t\tcurrentCells[j], currentCells[j].getX(currentRank));\n\t\t\t\t\t\t\tsortedCells.push(sorter);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\t\t\t\t\t\tvar leftLimit = cell.x[0] - cell.width / 2;\n\t\t\t\t\t\tvar rightLimit = leftLimit + cell.width;\n\n\t\t\t\t\t\t// Connected edge count starts at 1 to allow for buffer\n\t\t\t\t\t\t// with edge of vertex\n\t\t\t\t\t\tvar connectedEdgeCount = 0;\n\t\t\t\t\t\tvar connectedEdgeGroupCount = 0;\n\t\t\t\t\t\tvar connectedEdges = [];\n\t\t\t\t\t\t// Calculate width requirements for all connected edges\n\t\t\t\t\t\tfor (var j = 0; j < sortedCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar innerCell = sortedCells[j].cell;\n\t\t\t\t\t\t\tvar connections;\n\n\t\t\t\t\t\t\tif (innerCell.isVertex())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Get the connecting edge\n\t\t\t\t\t\t\t\tif (k == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsSource;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsTarget;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor (var connIndex = 0; connIndex < connections.length; connIndex++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (connections[connIndex].source == innerCell\n\t\t\t\t\t\t\t\t\t\t\t|| connections[connIndex].target == innerCell)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeCount += connections[connIndex].edges\n\t\t\t\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\n\t\t\t\t\t\t\t\t\t\tconnectedEdges.push(connections[connIndex]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnectedEdgeCount += innerCell.edges.length;\n\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\t\t\t\t\t\t\t\tconnectedEdges.push(innerCell);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar requiredWidth = (connectedEdgeCount + 1)\n\t\t\t\t\t\t\t\t* this.prefHozEdgeSep;\n\n\t\t\t\t\t\t// Add a buffer on the edges of the vertex if the edge count allows\n\t\t\t\t\t\tif (cell.width > requiredWidth\n\t\t\t\t\t\t\t\t+ (2 * this.prefHozEdgeSep))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tleftLimit += this.prefHozEdgeSep;\n\t\t\t\t\t\t\trightLimit -= this.prefHozEdgeSep;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar availableWidth = rightLimit - leftLimit;\n\t\t\t\t\t\tvar edgeSpacing = availableWidth / connectedEdgeCount;\n\n\t\t\t\t\t\tvar currentX = leftLimit + edgeSpacing / 2.0;\n\t\t\t\t\t\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\t\t\t\t\t\tvar maxYOffset = 0;\n\n\t\t\t\t\t\tfor (var j = 0; j < connectedEdges.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar numActualEdges = connectedEdges[j].edges\n\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\tvar pos = this.jettyPositions[connectedEdges[j].ids[0]];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (pos == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos = [];\n\t\t\t\t\t\t\t\tthis.jettyPositions[connectedEdges[j].ids[0]] = pos;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (j < connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (j > connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Ignore the case if equals, this means the second of 2\n\t\t\t\t\t\t\t// jettys with the same y (even number of edges)\n\n\t\t\t\t\t\t\tfor (var m = 0; m < numActualEdges; m++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2] = currentX;\n\t\t\t\t\t\t\t\tcurrentX += edgeSpacing;\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2 + 1] = currentYOffset;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmaxYOffset = Math.max(maxYOffset,\n\t\t\t\t\t\t\t\t\tcurrentYOffset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentCells = cell.getNextLayerConnectedCells(rankIndex);\n\n\t\t\t\t\tcurrentRank = rankIndex + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setEdgePosition\n * \n * Fixes the control points\n */\nmxCoordinateAssignment.prototype.setEdgePosition = function(cell)\n{\n\t// For parallel edges we need to seperate out the points a\n\t// little\n\tvar offsetX = 0;\n\t// Only set the edge control points once\n\n\tif (cell.temp[0] != 101207)\n\t{\n\t\tvar maxRank = cell.maxRank;\n\t\tvar minRank = cell.minRank;\n\t\t\n\t\tif (maxRank == minRank)\n\t\t{\n\t\t\tmaxRank = cell.source.maxRank;\n\t\t\tminRank = cell.target.minRank;\n\t\t}\n\t\t\n\t\tvar parallelEdgeCount = 0;\n\t\tvar jettys = this.jettyPositions[cell.ids[0]];\n\n\t\tvar source = cell.isReversed ? cell.target.cell : cell.source.cell;\n\t\tvar graph = this.layout.graph;\n\t\tvar layoutReversed = this.orientation == mxConstants.DIRECTION_EAST\n\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH;\n\n\t\tfor (var i = 0; i < cell.edges.length; i++)\n\t\t{\n\t\t\tvar realEdge = cell.edges[i];\n\t\t\tvar realSource = this.layout.getVisibleTerminal(realEdge, true);\n\n\t\t\t//List oldPoints = graph.getPoints(realEdge);\n\t\t\tvar newPoints = [];\n\n\t\t\t// Single length reversed edges end up with the jettys in the wrong\n\t\t\t// places. Since single length edges only have jettys, not segment\n\t\t\t// control points, we just say the edge isn't reversed in this section\n\t\t\tvar reversed = cell.isReversed;\n\t\t\t\n\t\t\tif (realSource != source)\n\t\t\t{\n\t\t\t\t// The real edges include all core model edges and these can go\n\t\t\t\t// in both directions. If the source of the hierarchical model edge\n\t\t\t\t// isn't the source of the specific real edge in this iteration\n\t\t\t\t// treat if as reversed\n\t\t\t\treversed = !reversed;\n\t\t\t}\n\n\t\t\t// First jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar y = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 1 + arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ty += jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelSource = graph.model.getTerminal(realEdge, true);\n\n\t\t\t\tif (this.layout.isPort(modelSource) && graph.model.getParent(modelSource) == realSource)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelSource);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realSource.geometry.x + cell.source.width * modelSource.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH\n\t\t\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y + jetty));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y + jetty, x));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Declare variables to define loop through edge points and \n\t\t\t// change direction if edge is reversed\n\n\t\t\tvar loopStart = cell.x.length - 1;\n\t\t\tvar loopLimit = -1;\n\t\t\tvar loopDelta = -1;\n\t\t\tvar currentRank = cell.maxRank - 1;\n\n\t\t\tif (reversed)\n\t\t\t{\n\t\t\t\tloopStart = 0;\n\t\t\t\tloopLimit = cell.x.length;\n\t\t\t\tloopDelta = 1;\n\t\t\t\tcurrentRank = cell.minRank + 1;\n\t\t\t}\n\t\t\t// Reversed edges need the points inserted in\n\t\t\t// reverse order\n\t\t\tfor (var j = loopStart; (cell.maxRank != cell.minRank) && j != loopLimit; j += loopDelta)\n\t\t\t{\n\t\t\t\t// The horizontal position in a vertical layout\n\t\t\t\tvar positionX = cell.x[j] + offsetX;\n\n\t\t\t\t// Work out the vertical positions in a vertical layout\n\t\t\t\t// in the edge buffer channels above and below this rank\n\t\t\t\tvar topChannelY = (this.rankTopY[currentRank] + this.rankBottomY[currentRank + 1]) / 2.0;\n\t\t\t\tvar bottomChannelY = (this.rankTopY[currentRank - 1] + this.rankBottomY[currentRank]) / 2.0;\n\n\t\t\t\tif (reversed)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = topChannelY;\n\t\t\t\t\ttopChannelY = bottomChannelY;\n\t\t\t\t\tbottomChannelY = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, topChannelY));\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, bottomChannelY));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(topChannelY, positionX));\n\t\t\t\t\tnewPoints.push(new mxPoint(bottomChannelY, positionX));\n\t\t\t\t}\n\n\t\t\t\tthis.limitX = Math.max(this.limitX, positionX);\n\t\t\t\tcurrentRank += loopDelta;\n\t\t\t}\n\n\t\t\t// Second jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar rankY = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 3 - arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\tvar y = rankY - jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + 2 - arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelTarget = graph.model.getTerminal(realEdge, false);\n\t\t\t\tvar realTarget = this.layout.getVisibleTerminal(realEdge, false);\n\n\t\t\t\tif (this.layout.isPort(modelTarget) && graph.model.getParent(modelTarget) == realTarget)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelTarget);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realTarget.geometry.x + cell.target.width * modelTarget.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y - jetty));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y - jetty, x));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cell.isReversed)\n\t\t\t{\n\t\t\t\tthis.processReversedEdge(cell, realEdge);\n\t\t\t}\n\n\t\t\tthis.layout.setEdgePoints(realEdge, newPoints);\n\n\t\t\t// Increase offset so next edge is drawn next to\n\t\t\t// this one\n\t\t\tif (offsetX == 0.0)\n\t\t\t{\n\t\t\t\toffsetX = this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\telse if (offsetX > 0)\n\t\t\t{\n\t\t\t\toffsetX = -offsetX;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toffsetX = -offsetX + this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\t\n\t\t\tparallelEdgeCount++;\n\t\t}\n\n\t\tcell.temp[0] = 101207;\n\t}\n};\n\n\n/**\n * Function: setVertexLocation\n * \n * Fixes the position of the specified vertex.\n * \n * Parameters:\n * \n * cell - the vertex to position\n */\nmxCoordinateAssignment.prototype.setVertexLocation = function(cell)\n{\n\tvar realCell = cell.cell;\n\tvar positionX = cell.x[0] - cell.width / 2;\n\tvar positionY = cell.y[0] - cell.height / 2;\n\n\tthis.rankTopY[cell.minRank] = Math.min(this.rankTopY[cell.minRank], positionY);\n\tthis.rankBottomY[cell.minRank] = Math.max(this.rankBottomY[cell.minRank],\n\t\t\tpositionY + cell.height);\n\n\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionX, positionY);\n\t}\n\telse\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionY, positionX);\n\t}\n\n\tthis.limitX = Math.max(this.limitX, positionX + cell.width);\n};\n\n/**\n * Function: processReversedEdge\n * \n * Hook to add additional processing\n * \n * Parameters:\n * \n * edge - the hierarchical model edge\n * realEdge - the real edge in the graph\n */\nmxCoordinateAssignment.prototype.processReversedEdge = function(graph, model)\n{\n\t// hook for subclassers\n};\n\n__mxOutput.mxCoordinateAssignment = typeof mxCoordinateAssignment !== 'undefined' ? mxCoordinateAssignment : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneOrdering\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxSwimlaneOrdering\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxSwimlaneOrdering(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxSwimlaneOrdering.prototype = new mxHierarchicalLayoutStage();\nmxSwimlaneOrdering.prototype.constructor = mxSwimlaneOrdering;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxSwimlaneOrdering.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxSwimlaneOrdering.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodes = mxUtils.clone(model.vertexMapper, null, true);\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\t// Ancestor hashes only line up within a swimlane\n\t\tvar isAncestor = parent != null && parent.swimlaneIndex == node.swimlaneIndex && node.isAncestor(parent);\n\n\t\t// If the source->target swimlane indices go from higher to\n\t\t// lower, the edge is reverse\n\t\tvar reversedOverSwimlane = parent != null && connectingEdge != null &&\n\t\t\t\t\t\tparent.swimlaneIndex < node.swimlaneIndex && connectingEdge.source == node;\n\n\t\tif (isAncestor)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\telse if (reversedOverSwimlane)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsTarget);\n\t\t\tnode.connectsAsTarget.push(connectingEdge);\n\t\t\tparent.connectsAsSource.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsSource);\n\t\t}\n\t\t\n\t\tvar cellId = mxCellPath.create(node.cell);\n\t\tseenNodes[cellId] = node;\n\t\tdelete unseenNodes[cellId];\n\t}, rootsArray, true, null);\n};\n\n__mxOutput.mxSwimlaneOrdering = typeof mxSwimlaneOrdering !== 'undefined' ? mxSwimlaneOrdering : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxHierarchicalLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxHierarchicalLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\nvar mxHierarchicalEdgeStyle =\n{\n\tORTHOGONAL: 1,\n\tPOLYLINE: 2,\n\tSTRAIGHT: 3,\n\tCURVE: 4\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxHierarchicalLayout.prototype = new mxGraphLayout();\nmxHierarchicalLayout.prototype.constructor = mxHierarchicalLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxHierarchicalLayout.prototype.roots = null;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxHierarchicalLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxHierarchicalLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxHierarchicalLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 0.\n */\nmxHierarchicalLayout.prototype.parentBorder = 0;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxHierarchicalLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxHierarchicalLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxHierarchicalLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxHierarchicalLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxHierarchicalLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxHierarchicalLayout.prototype.fineTuning = true;\n\n/**\n * \n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxHierarchicalLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxHierarchicalLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same \n * ancestry chain. Default is true.\n */\nmxHierarchicalLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxGraphHierarchyModel> formed of the layout.\n */\nmxHierarchicalLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxGraphHierarchyModel> for this layout algorithm.\n */\nmxHierarchicalLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * roots - Optional starting roots of the layout.\n */\nmxHierarchicalLayout.prototype.execute = function(parent, roots)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\tif (roots != null && !(roots instanceof Array))\n\t{\n\t\troots = [roots];\n\t}\n\t\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (roots == null && parent == null)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\t\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\t\n\tif (roots != null)\n\t{\n\t\tvar rootsCopy = [];\n\n\t\tfor (var i = 0; i < roots.length; i++)\n\t\t{\n\t\t\tvar ancestor = parent != null ? model.isAncestor(parent, roots[i]) : true;\n\t\t\t\n\t\t\tif (ancestor && model.isVertex(roots[i]))\n\t\t\t{\n\t\t\t\trootsCopy.push(roots[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.roots = rootsCopy;\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxHierarchicalLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (model.isVertex(cell) && this.graph.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxHierarchicalLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) ||\n\t\t\t\t((source != target) &&\n\t\t\t\t\t\t((target == cell && (this.parent == null || this.isAncestor(this.parent, source, this.traverseAncestors))) ||\n\t\t\t\t\t\t \t(source == cell && (this.parent == null || this.isAncestor(this.parent, target, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxHierarchicalLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxHierarchicalLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = [];\n\n\tif (this.roots == null && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\tthis.filterDescendants(parent, filledVertexSet);\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twhile (!filledVertexSetEmpty)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(parent, filledVertexSet);\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\t\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\t// Iterate through the result removing parents who have children in this layout\n\t\n\t// Perform a layout for each seperate hierarchy\n\t// Track initial coordinate x-positioning\n\tvar initialX = 0;\n\n\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t{\n\t\tvar vertexSet = hierarchyVertices[i];\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var key in vertexSet)\n\t\t{\n\t\t\ttmp.push(vertexSet[key]);\n\t\t}\n\t\t\n\t\tthis.model = new mxGraphHierarchyModel(this, tmp, this.roots,\n\t\t\tparent, this.tightenToSource);\n\n\t\tthis.cycleStage(parent);\n\t\tthis.layeringStage();\n\t\t\n\t\tthis.crossingStage(parent);\n\t\tinitialX = this.placementStage(initialX, parent);\n\t}\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxHierarchicalLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxHierarchicalLayout.prototype.isPort = function(cell)\n{\n\tif (cell != null && cell.geometry != null)\n\t{\n\t\treturn cell.geometry.relative;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxHierarchicalLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n */\nmxHierarchicalLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar edgeIsSource = [];\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tedgeIsSource[i] = (this.getVisibleTerminal(edges[i], true) == vertex);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tif (!directed || edgeIsSource[i])\n\t\t\t\t{\n\t\t\t\t\tvar next = this.getVisibleTerminal(edges[i], !edgeIsSource[i]);\n\t\t\t\t\t\n\t\t\t\t\t// Check whether there are more edges incoming from the target vertex than outgoing\n\t\t\t\t\t// The hierarchical model treats bi-directional parallel edges as being sourced\n\t\t\t\t\t// from the more \"sourced\" terminal. If the directions are equal in number, the direction\n\t\t\t\t\t// is that of the natural direction from the roots of the layout.\n\t\t\t\t\t// The checks below are slightly more verbose than need be for performance reasons\n\t\t\t\t\tvar netCount = 1;\n\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (j == i)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar isSource2 = edgeIsSource[j];\n\t\t\t\t\t\t\tvar otherTerm = this.getVisibleTerminal(edges[j], !isSource2);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (otherTerm == next)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (isSource2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (netCount >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentComp = this.traverse(next, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxHierarchicalLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxMinimumCycleRemover(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxHierarchicalLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxHierarchicalLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxHierarchicalLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxHierarchicalLayout = typeof mxHierarchicalLayout !== 'undefined' ? mxHierarchicalLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxSwimlaneLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxSwimlaneLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxSwimlaneLayout.prototype = new mxGraphLayout();\nmxSwimlaneLayout.prototype.constructor = mxSwimlaneLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxSwimlaneLayout.prototype.roots = null;\n\n/**\n * Variable: swimlanes\n * \n * Holds the array of <mxCell> of the ordered swimlanes to lay out\n */\nmxSwimlaneLayout.prototype.swimlanes = null;\n\n/**\n * Variable: dummyVertexWidth\n * \n * The cell width of any dummy vertices inserted\n */\nmxSwimlaneLayout.prototype.dummyVertexWidth = 50;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxSwimlaneLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxSwimlaneLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxSwimlaneLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 30.\n */\nmxSwimlaneLayout.prototype.parentBorder = 30;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxSwimlaneLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxSwimlaneLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxSwimlaneLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxSwimlaneLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxSwimlaneLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxSwimlaneLayout.prototype.fineTuning = true;\n\n/**\n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxSwimlaneLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxSwimlaneLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same\n * ancestry chain. Default is true.\n */\nmxSwimlaneLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxSwimlaneModel> formed of the layout.\n */\nmxSwimlaneLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxSwimlaneLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxSwimlaneModel> for this layout algorithm.\n */\nmxSwimlaneLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * swimlanes - Ordered array of swimlanes to be laid out\n */\nmxSwimlaneLayout.prototype.execute = function(parent, swimlanes)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (swimlanes == null || swimlanes.length < 1)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\n\tif (parent == null)\n\t{\n\t\tparent = model.getParent(swimlanes[0]);\n\t}\n\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\n\tthis.swimlanes = swimlanes;\n\tvar dummyVertices = [];\n\t// Check the swimlanes all have vertices\n\t// in them\n\tfor (var i = 0; i < swimlanes.length; i++)\n\t{\n\t\tvar children = this.graph.getChildCells(swimlanes[i]);\n\t\t\n\t\tif (children == null || children.length == 0)\n\t\t{\n\t\t\tvar vertex = this.graph.insertVertex(swimlanes[i], null, null, 0, 0, this.dummyVertexWidth, 0);\n\t\t\tdummyVertices.push(vertex);\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\n\t\tthis.graph.removeCells(dummyVertices);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given array of groups so that it includes\n * all child vertices.\n * \n */\nmxSwimlaneLayout.prototype.updateGroupBounds = function()\n{\n\t// Get all vertices and edge in the layout\n\tvar cells = [];\n\tvar model = this.model;\n\t\n\tfor (var key in model.edgeMapper)\n\t{\n\t\tvar edge = model.edgeMapper[key];\n\t\t\n\t\tfor (var i = 0; i < edge.edges.length; i++)\n\t\t{\n\t\t\tcells.push(edge.edges[i]);\n\t\t}\n\t}\n\t\n\tvar layoutBounds = this.graph.getBoundingBoxFromGeometry(cells, true);\n\tvar childBounds = [];\n\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar bounds = this.graph.getBoundingBoxFromGeometry(children);\n\t\t\tchildBounds[i] = bounds;\n\t\t\tvar childrenY = bounds.y + geo.y - size.height - this.parentBorder;\n\t\t\tvar maxChildrenY = bounds.y + geo.y + bounds.height;\n\n\t\t\tif (layoutBounds == null)\n\t\t\t{\n\t\t\t\tlayoutBounds = new mxRectangle(0, childrenY, 0, maxChildrenY - childrenY);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlayoutBounds.y = Math.min(layoutBounds.y, childrenY);\n\t\t\t\tvar maxY = Math.max(layoutBounds.y + layoutBounds.height, maxChildrenY);\n\t\t\t\tlayoutBounds.height = maxY - layoutBounds.y;\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar newGeo = geo.clone();\n\t\t\t\n\t\t\tvar leftGroupBorder = (i == 0) ? this.parentBorder : this.interRankCellSpacing/2;\n\t\t\tvar w = size.width + leftGroupBorder;\n\t\t\tvar x = childBounds[i].x - w;\n\t\t\tvar y = layoutBounds.y - this.parentBorder;\n\n\t\t\tnewGeo.x += x;\n\t\t\tnewGeo.y = y;\n\t\t\t\n\t\t\tnewGeo.width = childBounds[i].width + w + this.interRankCellSpacing/2;\n\t\t\tnewGeo.height = layoutBounds.height + size.height + 2 * this.parentBorder;\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(lane, newGeo);\n\t\t\tthis.graph.moveCells(children, -x, geo.y - y);\n\t\t}\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxSwimlaneLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (cell != null && model.isVertex(cell) && this.graph.isCellVisible(cell) && model.isAncestor(parent, cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Only count connection within this swimlane\n\t\t\t\t\t\tvar other = this.getVisibleTerminal(conns[k], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (model.isAncestor(parent, other))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (model.isAncestor(parent, src))\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxSwimlaneLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) || ((source != target) && ((target == cell && (this.parent == null || this.graph.isValidAncestor(source, this.parent, this.traverseAncestors))) ||\n\t\t\t(source == cell && (this.parent == null ||\n\t\t\t\t\tthis.graph.isValidAncestor(target, this.parent, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxSwimlaneLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxSwimlaneLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = Object();\n\n\tif (this.swimlanes != null && this.swimlanes.length > 0 && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\t\n\t\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t\t{\n\t\t\tthis.filterDescendants(this.swimlanes[i], filledVertexSet);\n\t\t}\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Only test for candidates in each swimlane in order\n\t\tvar laneCounter = 0;\n\n\t\twhile (!filledVertexSetEmpty && laneCounter < this.swimlanes.length)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(this.swimlanes[laneCounter], filledVertexSet);\n\t\t\t\n\t\t\tif (candidateRoots.length == 0)\n\t\t\t{\n\t\t\t\tlaneCounter++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet, laneCounter);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\tvar tmp = [];\n\t\n\tfor (var key in allVertexSet)\n\t{\n\t\ttmp.push(allVertexSet[key]);\n\t}\n\t\n\tthis.model = new mxSwimlaneModel(this, tmp, this.roots,\n\t\tparent, this.tightenToSource);\n\n\tthis.cycleStage(parent);\n\tthis.layeringStage();\n\t\n\tthis.crossingStage(parent);\n\tthis.placementStage(0, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxSwimlaneLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && model.getParent(cell) != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxSwimlaneLayout.prototype.isPort = function(cell)\n{\n\tif (cell.geometry.relative)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxSwimlaneLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n * swimlaneIndex - the laid out order index of the swimlane vertex is contained in\n */\nmxSwimlaneLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet, swimlaneIndex)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar model = this.graph.model;\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar otherVertex = this.getVisibleTerminal(edges[i], true);\n\t\t\t\tvar isSource = otherVertex == vertex;\n\t\t\t\t\n\t\t\t\tif (isSource)\n\t\t\t\t{\n\t\t\t\t\totherVertex = this.getVisibleTerminal(edges[i], false);\n\t\t\t\t}\n\n\t\t\t\tvar otherIndex = 0;\n\t\t\t\t// Get the swimlane index of the other terminal\n\t\t\t\tfor (otherIndex = 0; otherIndex < this.swimlanes.length; otherIndex++)\n\t\t\t\t{\n\t\t\t\t\tif (model.isAncestor(this.swimlanes[otherIndex], otherVertex))\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (otherIndex >= this.swimlanes.length)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Traverse if the other vertex is within the same swimlane as\n\t\t\t\t// as the current vertex, or if the swimlane index of the other\n\t\t\t\t// vertex is greater than that of this vertex\n\t\t\t\tif ((otherIndex > swimlaneIndex) ||\n\t\t\t\t\t\t((!directed || isSource) && otherIndex == swimlaneIndex))\n\t\t\t\t{\n\t\t\t\t\tcurrentComp = this.traverse(otherVertex, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet, otherIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxSwimlaneLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxSwimlaneOrdering(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxSwimlaneLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxSwimlaneLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxSwimlaneLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxSwimlaneLayout = typeof mxSwimlaneLayout !== 'undefined' ? mxSwimlaneLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphModel\n * \n * Extends <mxEventSource> to implement a graph model. The graph model acts as\n * a wrapper around the cells which are in charge of storing the actual graph\n * datastructure. The model acts as a transactional wrapper with event\n * notification for all changes, whereas the cells contain the atomic\n * operations for updating the actual datastructure.\n * \n * Layers:\n * \n * The cell hierarchy in the model must have a top-level root cell which\n * contains the layers (typically one default layer), which in turn contain the\n * top-level cells of the layers. This means each cell is contained in a layer.\n * If no layers are required, then all new cells should be added to the default\n * layer.\n * \n * Layers are useful for hiding and showing groups of cells, or for placing\n * groups of cells on top of other cells in the display. To identify a layer,\n * the <isLayer> function is used. It returns true if the parent of the given\n * cell is the root of the model.\n * \n * Events:\n * \n * See events section for more details. There is a new set of events for\n * tracking transactional changes as they happen. The events are called\n * startEdit for the initial beginUpdate, executed for each executed change\n * and endEdit for the terminal endUpdate. The executed event contains a\n * property called change which represents the change after execution.\n * \n * Encoding the model:\n * \n * To encode a graph model, use the following code:\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will create an XML node that contains all the model information.\n * \n * Encoding and decoding changes:\n * \n * For the encoding of changes, a graph model listener is required that encodes\n * each change from the given array of changes.\n * \n * (code)\n * model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n *   var nodes = [];\n *   var codec = new mxCodec();\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     nodes.push(codec.encode(changes[i]));\n *   }\n *   // do something with the nodes\n * });\n * (end)\n * \n * For the decoding and execution of changes, the codec needs a lookup function\n * that allows it to resolve cell IDs as follows:\n * \n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * }\n * (end)\n * \n * For each encoded change (represented by a node), the following code can be\n * used to carry out the decoding and create a change object.\n * \n * (code)\n * var changes = [];\n * var change = codec.decode(node);\n * change.model = model;\n * change.execute();\n * changes.push(change);\n * (end)\n * \n * The changes can then be dispatched using the model as follows.\n * \n * (code)\n * var edit = new mxUndoableEdit(model, false);\n * edit.changes = changes;\n * \n * edit.notify = function()\n * {\n *   edit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n *   \t'edit', edit, 'changes', edit.changes));\n *   edit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n *   \t'edit', edit, 'changes', edit.changes));\n * }\n * \n * model.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n * model.fireEvent(new mxEventObject(mxEvent.CHANGE,\n * \t\t'edit', edit, 'changes', changes));\n * (end)\n *\n * Event: mxEvent.CHANGE\n *\n * Fires when an undoable edit is dispatched. The <code>edit</code> property\n * contains the <mxUndoableEdit>. The <code>changes</code> property contains\n * the array of atomic changes inside the undoable edit. The changes property\n * is <strong>deprecated</strong>, please use edit.changes instead.\n *\n * Example:\n * \n * For finding newly inserted cells, the following code can be used:\n * \n * (code)\n * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     var change = changes[i];\n *     \n *     if (change instanceof mxChildChange &&\n *       change.change.previous == null)\n *     {\n *       graph.startEditingAtCell(change.child);\n *       break;\n *     }\n *   }\n * });\n * (end)\n * \n * \n * Event: mxEvent.NOTIFY\n *\n * Same as <mxEvent.CHANGE>, this event can be used for classes that need to\n * implement a sync mechanism between this model and, say, a remote model. In\n * such a setup, only local changes should trigger a notify event and all\n * changes should trigger a change event.\n * \n * Event: mxEvent.EXECUTE\n * \n * Fires between begin- and endUpdate and after an atomic change was executed\n * in the model. The <code>change</code> property contains the atomic change\n * that was executed.\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n *\n * Event: mxEvent.BEGIN_UPDATE\n *\n * Fires after the <updateLevel> was incremented in <beginUpdate>. This event\n * contains no properties.\n * \n * Event: mxEvent.START_EDIT\n *\n * Fires after the <updateLevel> was changed from 0 to 1. This event\n * contains no properties.\n * \n * Event: mxEvent.END_UPDATE\n * \n * Fires after the <updateLevel> was decreased in <endUpdate> but before any\n * notification or change dispatching. The <code>edit</code> property contains\n * the <currentEdit>.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after the <updateLevel> was changed from 1 to 0. This event\n * contains no properties.\n * \n * Event: mxEvent.BEFORE_UNDO\n * \n * Fires before the change is dispatched after the update level has reached 0\n * in <endUpdate>. The <code>edit</code> property contains the <curreneEdit>.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the change was dispatched in <endUpdate>. The <code>edit</code>\n * property contains the <currentEdit>.\n * \n * Constructor: mxGraphModel\n * \n * Constructs a new graph model. If no root is specified then a new root\n * <mxCell> with a default layer is created.\n * \n * Parameters:\n * \n * root - <mxCell> that represents the root cell.\n */\nfunction mxGraphModel(root)\n{\n\tthis.currentEdit = this.createUndoableEdit();\n\t\n\tif (root != null)\n\t{\n\t\tthis.setRoot(root);\n\t}\n\telse\n\t{\n\t\tthis.clear();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphModel.prototype = new mxEventSource();\nmxGraphModel.prototype.constructor = mxGraphModel;\n\n/**\n * Variable: root\n * \n * Holds the root cell, which in turn contains the cells that represent the\n * layers of the diagram as child cells. That is, the actual elements of the\n * diagram are supposed to live in the third generation of cells and below.\n */\nmxGraphModel.prototype.root = null;\n\n/**\n * Variable: cells\n * \n * Maps from Ids to cells.\n */\nmxGraphModel.prototype.cells = null;\n\n/**\n * Variable: maintainEdgeParent\n * \n * Specifies if edges should automatically be moved into the nearest common\n * ancestor of their terminals. Default is true.\n */\nmxGraphModel.prototype.maintainEdgeParent = true;\n\n/**\n * Variable: ignoreRelativeEdgeParent\n * \n * Specifies if relative edge parents should be ignored for finding the nearest\n * common ancestors of an edge's terminals. Default is true.\n */\nmxGraphModel.prototype.ignoreRelativeEdgeParent = true;\n\n/**\n * Variable: createIds\n * \n * Specifies if the model should automatically create Ids for new cells.\n * Default is true.\n */\nmxGraphModel.prototype.createIds = true;\n\n/**\n * Variable: prefix\n * \n * Defines the prefix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.prefix = '';\n\n/**\n * Variable: postfix\n * \n * Defines the postfix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.postfix = '';\n\n/**\n * Variable: nextId\n * \n * Specifies the next Id to be created. Initial value is 0.\n */\nmxGraphModel.prototype.nextId = 0;\n\n/**\n * Variable: currentEdit\n * \n * Holds the changes for the current transaction. If the transaction is\n * closed then a new object is created for this variable using\n * <createUndoableEdit>.\n */\nmxGraphModel.prototype.currentEdit = null;\n\n/**\n * Variable: updateLevel\n * \n * Counter for the depth of nested transactions. Each call to <beginUpdate>\n * will increment this number and each call to <endUpdate> will decrement\n * it. When the counter reaches 0, the transaction is closed and the\n * respective events are fired. Initial value is 0.\n */\nmxGraphModel.prototype.updateLevel = 0;\n\n/**\n * Variable: endingUpdate\n * \n * True if the program flow is currently inside endUpdate.\n */\nmxGraphModel.prototype.endingUpdate = false;\n\n/**\n * Function: clear\n *\n * Sets a new root using <createRoot>.\n */\nmxGraphModel.prototype.clear = function()\n{\n\tthis.setRoot(this.createRoot());\n};\n\n/**\n * Function: isCreateIds\n *\n * Returns <createIds>.\n */\nmxGraphModel.prototype.isCreateIds = function()\n{\n\treturn this.createIds;\n};\n\n/**\n * Function: setCreateIds\n *\n * Sets <createIds>.\n */\nmxGraphModel.prototype.setCreateIds = function(value)\n{\n\tthis.createIds = value;\n};\n\n/**\n * Function: createRoot\n *\n * Creates a new root cell with a default layer (child 0).\n */\nmxGraphModel.prototype.createRoot = function()\n{\n\tvar cell = new mxCell();\n\tcell.insert(new mxCell());\n\t\n\treturn cell;\n};\n\n/**\n * Function: getCell\n *\n * Returns the <mxCell> for the specified Id or null if no cell can be\n * found for the given Id.\n *\n * Parameters:\n * \n * id - A string representing the Id of the cell.\n */\nmxGraphModel.prototype.getCell = function(id)\n{\n\treturn (this.cells != null) ? this.cells[id] : null;\n};\n\n/**\n * Function: filterCells\n * \n * Returns the cells from the given array where the given filter function\n * returns true.\n */\nmxGraphModel.prototype.filterCells = function(cells, filter)\n{\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (filter(cells[i]))\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getDescendants\n * \n * Returns all descendants of the given cell and the cell itself in an array.\n * \n * Parameters:\n * \n * parent - <mxCell> whose descendants should be returned.\n */\nmxGraphModel.prototype.getDescendants = function(parent)\n{\n\treturn this.filterDescendants(null, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Visits all cells recursively and applies the specified filter function\n * to each cell. If the function returns true then the cell is added\n * to the resulting array. The parent and result paramters are optional.\n * If parent is not specified then the recursion starts at <root>.\n * \n * Example:\n * The following example extracts all vertices from a given model:\n * (code)\n * var filter = function(cell)\n * {\n * \treturn model.isVertex(cell);\n * }\n * var vertices = model.filterDescendants(filter);\n * (end)\n * \n * Parameters:\n * \n * filter - JavaScript function that takes an <mxCell> as an argument\n * and returns a boolean.\n * parent - Optional <mxCell> that is used as the root of the recursion.\n */\nmxGraphModel.prototype.filterDescendants = function(filter, parent)\n{\n\t// Creates a new array for storing the result\n\tvar result = [];\n\n\t// Recursion starts at the root of the model\n\tparent = parent || this.getRoot();\n\t\n\t// Checks if the filter returns true for the cell\n\t// and adds it to the result array\n\tif (filter == null || filter(parent))\n\t{\n\t\tresult.push(parent);\n\t}\n\t\n\t// Visits the children of the cell\n\tvar childCount = this.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\t\tresult = result.concat(this.filterDescendants(filter, child));\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root of the model or the topmost parent of the given cell.\n *\n * Parameters:\n * \n * cell - Optional <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.getRoot = function(cell)\n{\n\tvar root = cell || this.root;\n\t\n\tif (cell != null)\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\troot = cell;\n\t\t\tcell = this.getParent(cell);\n\t\t}\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: setRoot\n * \n * Sets the <root> of the model using <mxRootChange> and adds the change to\n * the current transaction. This resets all datastructures in the model and\n * is the preferred way of clearing an existing model. Returns the new\n * root.\n * \n * Example:\n * \n * (code)\n * var root = new mxCell();\n * root.insert(new mxCell());\n * model.setRoot(root);\n * (end)\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.setRoot = function(root)\n{\n\tthis.execute(new mxRootChange(this, root));\n\t\n\treturn root;\n};\n\n/**\n * Function: rootChanged\n * \n * Inner callback to change the root of the model and update the internal\n * datastructures, such as <cells> and <nextId>. Returns the previous root.\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.rootChanged = function(root)\n{\n\tvar oldRoot = this.root;\n\tthis.root = root;\n\t\n\t// Resets counters and datastructures\n\tthis.nextId = 0;\n\tthis.cells = null;\n\tthis.cellAdded(root);\n\t\n\treturn oldRoot;\n};\n\n/**\n * Function: isRoot\n * \n * Returns true if the given cell is the root of the model and a non-null\n * value.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible root.\n */\nmxGraphModel.prototype.isRoot = function(cell)\n{\n\treturn cell != null && this.root == cell;\n};\n\n/**\n * Function: isLayer\n * \n * Returns true if <isRoot> returns true for the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible layer.\n */\nmxGraphModel.prototype.isLayer = function(cell)\n{\n\treturn this.isRoot(this.getParent(cell));\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child. Note \n * returns true if child == parent.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.isAncestor = function(parent, child)\n{\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: contains\n * \n * Returns true if the model contains the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n */\nmxGraphModel.prototype.contains = function(cell)\n{\n\treturn this.isAncestor(this.root, cell);\n};\n\n/**\n * Function: getParent\n * \n * Returns the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose parent should be returned.\n */\nmxGraphModel.prototype.getParent = function(cell)\n{\n\treturn (cell != null) ? cell.getParent() : null;\n};\n\n/**\n * Function: add\n * \n * Adds the specified child to the parent at the given index using\n * <mxChildChange> and adds the change to the current transaction. If no\n * index is specified then the child is appended to the parent's array of\n * children. Returns the inserted child.\n * \n * Parameters:\n * \n * parent - <mxCell> that specifies the parent to contain the child.\n * child - <mxCell> that specifies the child to be inserted.\n * index - Optional integer that specifies the index of the child.\n */\nmxGraphModel.prototype.add = function(parent, child, index)\n{\n\tif (child != parent && parent != null && child != null)\n\t{\t\n\t\t// Appends the child if no index was specified\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount(parent);\n\t\t}\n\t\t\n\t\tvar parentChanged = parent != this.getParent(child);\n\t\tthis.execute(new mxChildChange(this, parent, child, index));\n\n\t\t// Maintains the edges parents by moving the edges\n\t\t// into the nearest common ancestor of its terminals\n\t\tif (this.maintainEdgeParent && parentChanged)\n\t\t{\n\t\t\tthis.updateEdgeParents(child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: cellAdded\n * \n * Inner callback to update <cells> when a cell has been added. This\n * implementation resolves collisions by creating new Ids. To change the\n * ID of a cell after it was inserted into the model, use the following\n * code:\n * \n * (code\n * delete model.cells[cell.getId()];\n * cell.setId(newId);\n * model.cells[cell.getId()] = cell;\n * (end)\n *\n * If the change of the ID should be part of the command history, then the\n * cell should be removed from the model and a clone with the new ID should\n * be reinserted into the model instead.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been added.\n */\nmxGraphModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\t// Creates an Id for the cell if not Id exists\n\t\tif (cell.getId() == null && this.createIds)\n\t\t{\n\t\t\tcell.setId(this.createId(cell));\n\t\t}\n\t\t\n\t\tif (cell.getId() != null)\n\t\t{\n\t\t\tvar collision = this.getCell(cell.getId());\n\t\t\t\n\t\t\tif (collision != cell)\n\t\t\t{\t\n\t\t\t\t// Creates new Id for the cell\n\t\t\t\t// as long as there is a collision\n\t\t\t\twhile (collision != null)\n\t\t\t\t{\n\t\t\t\t\tcell.setId(this.createId(cell));\n\t\t\t\t\tcollision = this.getCell(cell.getId());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Lazily creates the cells dictionary\n\t\t\t\tif (this.cells == null)\n\t\t\t\t{\n\t\t\t\t\tthis.cells = new Object();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.cells[cell.getId()] = cell;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Makes sure IDs of deleted cells are not reused\n\t\tif (mxUtils.isNumeric(cell.getId()))\n\t\t{\n\t\t\tthis.nextId = Math.max(this.nextId, cell.getId());\n\t\t}\n\t\t\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tthis.cellAdded(this.getChildAt(cell, i));\n\t\t}\n\t}\n};\n\n/**\n * Function: createId\n * \n * Hook method to create an Id for the specified cell. This implementation\n * concatenates <prefix>, id and <postfix> to create the Id and increments\n * <nextId>. The cell is ignored by this implementation, but can be used in\n * overridden methods to prefix the Ids with eg. the cell type.\n *\n * Parameters:\n *\n * cell - <mxCell> to create the Id for.\n */\nmxGraphModel.prototype.createId = function(cell)\n{\n\tvar id = this.nextId;\n\tthis.nextId++;\n\t\n\treturn this.prefix + id + this.postfix;\n};\n\n/**\n * Function: updateEdgeParents\n * \n * Updates the parent for all edges that are connected to cell or one of\n * its descendants using <updateEdgeParent>.\n */\nmxGraphModel.prototype.updateEdgeParents = function(cell, root)\n{\n\t// Gets the topmost node of the hierarchy\n\troot = root || this.getRoot(cell);\n\t\n\t// Updates edges on children first\n\tvar childCount = this.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(cell, i);\n\t\tthis.updateEdgeParents(child, root);\n\t}\n\t\n\t// Updates the parents of all connected edges\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar edges = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tedges.push(this.getEdgeAt(cell, i));\n\t}\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar edge = edges[i];\n\t\t\n\t\t// Updates edge parent if edge and child have\n\t\t// a common root node (does not need to be the\n\t\t// model root node)\n\t\tif (this.isAncestor(root, edge))\n\t\t{\n\t\t\tthis.updateEdgeParent(edge, root);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateEdgeParent\n *\n * Inner callback to update the parent of the specified <mxCell> to the\n * nearest-common-ancestor of its two terminals.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * root - <mxCell> that represents the current root of the model.\n */\nmxGraphModel.prototype.updateEdgeParent = function(edge, root)\n{\n\tvar source = this.getTerminal(edge, true);\n\tvar target = this.getTerminal(edge, false);\n\tvar cell = null;\n\t\n\t// Uses the first non-relative descendants of the source terminal\n\twhile (source != null && !this.isEdge(source) &&\n\t\tsource.geometry != null && source.geometry.relative)\n\t{\n\t\tsource = this.getParent(source);\n\t}\n\t\n\t// Uses the first non-relative descendants of the target terminal\n\twhile (target != null && this.ignoreRelativeEdgeParent &&\n\t\t!this.isEdge(target) && target.geometry != null && \n\t\ttarget.geometry.relative)\n\t{\n\t\ttarget = this.getParent(target);\n\t}\n\t\n\tif (this.isAncestor(root, source) && this.isAncestor(root, target))\n\t{\n\t\tif (source == target)\n\t\t{\n\t\t\tcell = this.getParent(source);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcell = this.getNearestCommonAncestor(source, target);\n\t\t}\n\n\t\tif (cell != null && (this.getParent(cell) != this.root ||\n\t\t\tthis.isAncestor(cell, edge)) && this.getParent(edge) != cell)\n\t\t{\n\t\t\tvar geo = this.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar origin1 = this.getOrigin(this.getParent(edge));\n\t\t\t\tvar origin2 = this.getOrigin(cell);\n\t\t\t\t\n\t\t\t\tvar dx = origin2.x - origin1.x;\n\t\t\t\tvar dy = origin2.y - origin1.y;\n\t\t\t\t\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.translate(-dx, -dy);\n\t\t\t\tthis.setGeometry(edge, geo);\n\t\t\t}\n\n\t\t\tthis.add(cell, edge, this.getChildCount(cell));\n\t\t}\n\t}\n};\n\n/**\n * Function: getOrigin\n * \n * Returns the absolute, accumulated origin for the children inside the\n * given parent as an <mxPoint>.\n */\nmxGraphModel.prototype.getOrigin = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tresult = this.getOrigin(this.getParent(cell));\n\t\t\n\t\tif (!this.isEdge(cell))\n\t\t{\n\t\t\tvar geo = this.getGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint();\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getNearestCommonAncestor\n * \n * Returns the nearest common ancestor for the specified cells.\n *\n * Parameters:\n * \n * cell1 - <mxCell> that specifies the first cell in the tree.\n * cell2 - <mxCell> that specifies the second cell in the tree.\n */\nmxGraphModel.prototype.getNearestCommonAncestor = function(cell1, cell2)\n{\n\tif (cell1 != null && cell2 != null)\n\t{\t\t\n\t\t// Creates the cell path for the second cell\n\t\tvar path = mxCellPath.create(cell2);\n\n\t\tif (path != null && path.length > 0)\n\t\t{\n\t\t\t// Bubbles through the ancestors of the first\n\t\t\t// cell to find the nearest common ancestor.\n\t\t\tvar cell = cell1;\n\t\t\tvar current = mxCellPath.create(cell);\n\t\t\t\n\t\t\t// Inverts arguments\n\t\t\tif (path.length < current.length)\n\t\t\t{\n\t\t\t\tcell = cell2;\n\t\t\t\tvar tmp = current;\n\t\t\t\tcurrent = path;\n\t\t\t\tpath = tmp;\n\t\t\t}\n\t\t\t\n\t\t\twhile (cell != null)\n\t\t\t{\n\t\t\t\tvar parent = this.getParent(cell);\n\t\t\t\t\n\t\t\t\t// Checks if the cell path is equal to the beginning of the given cell path\n\t\t\t\tif (path.indexOf(current + mxCellPath.PATH_SEPARATOR) == 0 && parent != null)\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrent = mxCellPath.getParentPath(current);\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: remove\n * \n * Removes the specified cell from the model using <mxChildChange> and adds\n * the change to the current transaction. This operation will remove the\n * cell and all of its children from the model. Returns the removed cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be removed.\n */\nmxGraphModel.prototype.remove = function(cell)\n{\n\tif (cell == this.root)\n\t{\n\t\tthis.setRoot(null);\n\t}\n\telse if (this.getParent(cell) != null)\n\t{\n\t\tthis.execute(new mxChildChange(this, null, cell));\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellRemoved\n * \n * Inner callback to update <cells> when a cell has been removed.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been removed.\n */\nmxGraphModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null && this.cells != null)\n\t{\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tthis.cellRemoved(this.getChildAt(cell, i));\n\t\t}\n\t\t\n\t\t// Removes the dictionary entry for the cell\n\t\tif (this.cells != null && cell.getId() != null)\n\t\t{\n\t\t\tdelete this.cells[cell.getId()];\n\t\t}\n\t}\n};\n\n/**\n * Function: parentForCellChanged\n * \n * Inner callback to update the parent of a cell using <mxCell.insert>\n * on the parent and return the previous parent.\n *\n * Parameters:\n * \n * cell - <mxCell> to update the parent for.\n * parent - <mxCell> that specifies the new parent of the cell.\n * index - Optional integer that defines the index of the child\n * in the parent's child array.\n */\nmxGraphModel.prototype.parentForCellChanged = function(cell, parent, index)\n{\n\tvar previous = this.getParent(cell);\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent != previous || previous.getIndex(cell) != index)\n\t\t{\n\t\t\tparent.insert(cell, index);\n\t\t}\n\t}\n\telse if (previous != null)\n\t{\n\t\tvar oldIndex = previous.getIndex(cell);\n\t\tprevious.remove(oldIndex);\n\t}\n\t\n\t// Adds or removes the cell from the model\n\tvar par = this.contains(parent);\n\tvar pre = this.contains(previous);\n\t\n\tif (par && !pre)\n\t{\n\t\tthis.cellAdded(cell);\n\t}\n\telse if (pre && !par)\n\t{\n\t\tthis.cellRemoved(cell);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of children in the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose number of children should be returned.\n */\nmxGraphModel.prototype.getChildCount = function(cell)\n{\n\treturn (cell != null) ? cell.getChildCount() : 0;\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child of the given <mxCell> at the given index.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the parent.\n * index - Integer that specifies the index of the child to be returned.\n */\nmxGraphModel.prototype.getChildAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getChildAt(index) : null;\n};\n\n/**\n * Function: getChildren\n * \n * Returns all children of the given <mxCell> as an array of <mxCells>. The\n * return value should be only be read.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n */\nmxGraphModel.prototype.getChildren = function(cell)\n{\n\treturn (cell != null) ? cell.children : null;\n};\n\t\n/**\n * Function: getChildVertices\n * \n * Returns the child vertices of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child vertices should be returned.\n */\nmxGraphModel.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\t\n/**\n * Function: getChildEdges\n * \n * Returns the child edges of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child edges should be returned.\n */\nmxGraphModel.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the children of the given cell that are vertices and/or edges\n * depending on the arguments.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n * vertices - Boolean indicating if child vertices should be returned.\n * Default is false.\n * edges - Boolean indicating if child edges should be returned.\n * Default is false.\n */\nmxGraphModel.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\t\n\tvar childCount = this.getChildCount(parent);\n\tvar result = [];\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\n\t\tif ((!edges && !vertices) || (edges && this.isEdge(child)) ||\n\t\t\t(vertices && this.isVertex(child)))\n\t\t{\n\t\t\tresult.push(child);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\t\n/**\n * Function: getTerminal\n * \n * Returns the source or target <mxCell> of the given edge depending on the\n * value of the boolean parameter.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * isSource - Boolean indicating which end of the edge should be returned.\n */\nmxGraphModel.prototype.getTerminal = function(edge, isSource)\n{\n\treturn (edge != null) ? edge.getTerminal(isSource) : null;\n};\n\n/**\n * Function: setTerminal\n * \n * Sets the source or target terminal of the given <mxCell> using\n * <mxTerminalChange> and adds the change to the current transaction.\n * This implementation updates the parent of the edge using <updateEdgeParent>\n * if required.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.setTerminal = function(edge, terminal, isSource)\n{\n\tvar terminalChanged = terminal != this.getTerminal(edge, isSource);\n\tthis.execute(new mxTerminalChange(this, edge, terminal, isSource));\n\t\n\tif (this.maintainEdgeParent && terminalChanged)\n\t{\n\t\tthis.updateEdgeParent(edge, this.getRoot());\n\t}\n\t\n\treturn terminal;\n};\n\t\n/**\n * Function: setTerminals\n * \n * Sets the source and target <mxCell> of the given <mxCell> in a single\n * transaction using <setTerminal> for each end of the edge.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * source - <mxCell> that specifies the new source terminal.\n * target - <mxCell> that specifies the new target terminal.\n */\nmxGraphModel.prototype.setTerminals = function(edge, source, target)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tthis.setTerminal(edge, source, true);\n\t\tthis.setTerminal(edge, target, false);\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: terminalForCellChanged\n * \n * Inner helper function to update the terminal of the edge using\n * <mxCell.insertEdge> and return the previous terminal.\n * \n * Parameters:\n * \n * edge - <mxCell> that specifies the edge to be updated.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.terminalForCellChanged = function(edge, terminal, isSource)\n{\n\tvar previous = this.getTerminal(edge, isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.insertEdge(edge, isSource);\n\t}\n\telse if (previous != null)\n\t{\n\t\tprevious.removeEdge(edge, isSource);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getEdgeCount\n * \n * Returns the number of distinct edges connected to the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the vertex.\n */\nmxGraphModel.prototype.getEdgeCount = function(cell)\n{\n\treturn (cell != null) ? cell.getEdgeCount() : 0;\n};\n\n/**\n * Function: getEdgeAt\n * \n * Returns the edge of cell at the given index.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the vertex.\n * index - Integer that specifies the index of the edge\n * to return.\n */\nmxGraphModel.prototype.getEdgeAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getEdgeAt(index) : null;\n};\n\t\n/**\n * Function: getDirectedEdgeCount\n * \n * Returns the number of incoming or outgoing edges, ignoring the given\n * edge.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edge count should be returned.\n * outgoing - Boolean that specifies if the number of outgoing or\n * incoming edges should be returned.\n * ignoredEdge - <mxCell> that represents an edge to be ignored.\n */\nmxGraphModel.prototype.getDirectedEdgeCount = function(cell, outgoing, ignoredEdge)\n{\n\tvar count = 0;\n\tvar edgeCount = this.getEdgeCount(cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\n\t\tif (edge != ignoredEdge && this.getTerminal(edge, outgoing) == cell)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n};\n\n/**\n * Function: getConnections\n * \n * Returns all edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * \n */\nmxGraphModel.prototype.getConnections = function(cell)\n{\n\treturn this.getEdges(cell, true, true, false);\n};\n\n/**\n * Function: getIncomingEdges\n * \n * Returns the incoming edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * \n */\nmxGraphModel.prototype.getIncomingEdges = function(cell)\n{\n\treturn this.getEdges(cell, true, false, false);\n};\n\n/**\n * Function: getOutgoingEdges\n * \n * Returns the outgoing edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * \n */\nmxGraphModel.prototype.getOutgoingEdges = function(cell)\n{\n\treturn this.getEdges(cell, false, true, false);\n};\n\n/**\n * Function: getEdges\n * \n * Returns all distinct edges connected to this cell as a new array of\n * <mxCells>. If at least one of incoming or outgoing is true, then loops\n * are ignored, otherwise if both are false, then all edges connected to\n * the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n * incoming - Optional boolean that specifies if incoming edges should be\n * returned. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should be\n * returned. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be returned.\n * Default is true. \n */\nmxGraphModel.prototype.getEdges = function(cell, incoming, outgoing, includeLoops)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\t\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar result = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\t\tvar source = this.getTerminal(edge, true);\n\t\tvar target = this.getTerminal(edge, false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming && target == cell) ||\n\t\t\t(outgoing && source == cell))))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns all edges between the given source and target pair. If directed\n * is true, then only edges from the source to the target are returned,\n * otherwise, all edges between the two cells are returned.\n * \n * Parameters:\n * \n * source - <mxCell> that defines the source terminal of the edge to be\n * returned.\n * target - <mxCell> that defines the target terminal of the edge to be\n * returned.\n * directed - Optional boolean that specifies if the direction of the\n * edge should be taken into account. Default is false.\n */\nmxGraphModel.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\t\n\tvar tmp1 = this.getEdgeCount(source);\n\tvar tmp2 = this.getEdgeCount(target);\n\t\n\t// Assumes the source has less connected edges\n\tvar terminal = source;\n\tvar edgeCount = tmp1;\n\t\n\t// Uses the smaller array of connected edges\n\t// for searching the edge\n\tif (tmp2 < tmp1)\n\t{\n\t\tedgeCount = tmp2;\n\t\tterminal = target;\n\t}\n\t\n\tvar result = [];\n\t\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(terminal, i);\n\t\tvar src = this.getTerminal(edge, true);\n\t\tvar trg = this.getTerminal(edge, false);\n\t\tvar directedMatch = (src == source) && (trg == target);\n\t\tvar oppositeMatch = (trg == source) && (src == target);\n\n\t\tif (directedMatch || (!directed && oppositeMatch))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all opposite vertices wrt terminal for the given edges, only\n * returning sources and/or targets as specified. The result is returned\n * as an array of <mxCells>.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contain the edges to be examined.\n * terminal - <mxCell> that specifies the known end of the edges.\n * sources - Boolean that specifies if source terminals should be contained\n * in the result. Default is true.\n * targets - Boolean that specifies if target terminals should be contained\n * in the result. Default is true.\n */\nmxGraphModel.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar source = this.getTerminal(edges[i], true);\n\t\t\tvar target = this.getTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of\n\t\t\t// the edge and if the target should be\n\t\t\t// stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tterminals.push(target);\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of\n\t\t\t// the edge and if the source should be\n\t\t\t// stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tterminals.push(source);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getTopmostCells\n * \n * Returns the topmost cells of the hierarchy in an array that contains no\n * descendants for each <mxCell> that it contains. Duplicates should be\n * removed in the cells array to improve performance.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose topmost ancestors should be returned.\n */\nmxGraphModel.prototype.getTopmostCells = function(cells)\n{\n\tvar dict = new mxDictionary();\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tdict.put(cells[i], true);\n\t}\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tvar cell = cells[i];\n\t\tvar topmost = true;\n\t\tvar parent = this.getParent(cell);\n\t\t\n\t\twhile (parent != null)\n\t\t{\n\t\t\tif (dict.get(parent))\n\t\t\t{\n\t\t\t\ttopmost = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tparent = this.getParent(parent);\n\t\t}\n\t\t\n\t\tif (topmost)\n\t\t{\n\t\t\ttmp.push(cell);\n\t\t}\n\t}\n\t\n\treturn tmp;\n};\n\n/**\n * Function: isVertex\n * \n * Returns true if the given cell is a vertex.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible vertex.\n */\nmxGraphModel.prototype.isVertex = function(cell)\n{\n\treturn (cell != null) ? cell.isVertex() : false;\n};\n\n/**\n * Function: isEdge\n * \n * Returns true if the given cell is an edge.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible edge.\n */\nmxGraphModel.prototype.isEdge = function(cell)\n{\n\treturn (cell != null) ? cell.isEdge() : false;\n};\n\n/**\n * Function: isConnectable\n * \n * Returns true if the given <mxCell> is connectable. If <edgesConnectable>\n * is false, then this function returns false for all edges else it returns\n * the return value of <mxCell.isConnectable>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraphModel.prototype.isConnectable = function(cell)\n{\n\treturn (cell != null) ? cell.isConnectable() : false;\n};\n\n/**\n * Function: getValue\n * \n * Returns the user object of the given <mxCell> using <mxCell.getValue>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be returned.\n */\nmxGraphModel.prototype.getValue = function(cell)\n{\n\treturn (cell != null) ? cell.getValue() : null;\n};\n\n/**\n * Function: setValue\n * \n * Sets the user object of then given <mxCell> using <mxValueChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be changed.\n * value - Object that defines the new user object.\n */\nmxGraphModel.prototype.setValue = function(cell, value)\n{\n\tthis.execute(new mxValueChange(this, cell, value));\n\t\n\treturn value;\n};\n\n/**\n * Function: valueForCellChanged\n * \n * Inner callback to update the user object of the given <mxCell>\n * using <mxCell.valueChanged> and return the previous value,\n * that is, the return value of <mxCell.valueChanged>.\n * \n * To change a specific attribute in an XML node, the following code can be\n * used.\n * \n * (code)\n * graph.getModel().valueForCellChanged = function(cell, value)\n * {\n *   var previous = cell.value.getAttribute('label');\n *   cell.value.setAttribute('label', value);\n *   \n *   return previous;\n * };\n * (end) \n */\nmxGraphModel.prototype.valueForCellChanged = function(cell, value)\n{\n\treturn cell.valueChanged(value);\n};\n\n/**\n * Function: getGeometry\n * \n * Returns the <mxGeometry> of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraphModel.prototype.getGeometry = function(cell)\n{\n\treturn (cell != null) ? cell.getGeometry() : null;\n};\n\n/**\n * Function: setGeometry\n * \n * Sets the <mxGeometry> of the given <mxCell>. The actual update\n * of the cell is carried out in <geometryForCellChanged>. The\n * <mxGeometryChange> action is used to encapsulate the change.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be changed.\n * geometry - <mxGeometry> that defines the new geometry.\n */\nmxGraphModel.prototype.setGeometry = function(cell, geometry)\n{\n\tif (geometry != this.getGeometry(cell))\n\t{\n\t\tthis.execute(new mxGeometryChange(this, cell, geometry));\n\t}\n\t\n\treturn geometry;\n};\n\n/**\n * Function: geometryForCellChanged\n * \n * Inner callback to update the <mxGeometry> of the given <mxCell> using\n * <mxCell.setGeometry> and return the previous <mxGeometry>.\n */\nmxGraphModel.prototype.geometryForCellChanged = function(cell, geometry)\n{\n\tvar previous = this.getGeometry(cell);\n\tcell.setGeometry(geometry);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getStyle\n * \n * Returns the style of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be returned.\n */\nmxGraphModel.prototype.getStyle = function(cell)\n{\n\treturn (cell != null) ? cell.getStyle() : null;\n};\n\n/**\n * Function: setStyle\n * \n * Sets the style of the given <mxCell> using <mxStyleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be changed.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.setStyle = function(cell, style)\n{\n\tif (style != this.getStyle(cell))\n\t{\n\t\tthis.execute(new mxStyleChange(this, cell, style));\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: styleForCellChanged\n * \n * Inner callback to update the style of the given <mxCell>\n * using <mxCell.setStyle> and return the previous style.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.styleForCellChanged = function(cell, style)\n{\n\tvar previous = this.getStyle(cell);\n\tcell.setStyle(style);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isCollapsed\n * \n * Returns true if the given <mxCell> is collapsed.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraphModel.prototype.isCollapsed = function(cell)\n{\n\treturn (cell != null) ? cell.isCollapsed() : false;\n};\n\n/**\n * Function: setCollapsed\n * \n * Sets the collapsed state of the given <mxCell> using <mxCollapseChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be changed.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.setCollapsed = function(cell, collapsed)\n{\n\tif (collapsed != this.isCollapsed(cell))\n\t{\n\t\tthis.execute(new mxCollapseChange(this, cell, collapsed));\n\t}\n\t\n\treturn collapsed;\n};\n\t\n/**\n * Function: collapsedStateForCellChanged\n *\n * Inner callback to update the collapsed state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous collapsed state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.collapsedStateForCellChanged = function(cell, collapsed)\n{\n\tvar previous = this.isCollapsed(cell);\n\tcell.setCollapsed(collapsed);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the given <mxCell> is visible.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraphModel.prototype.isVisible = function(cell)\n{\n\treturn (cell != null) ? cell.isVisible() : false;\n};\n\n/**\n * Function: setVisible\n * \n * Sets the visible state of the given <mxCell> using <mxVisibleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose visible state should be changed.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.setVisible = function(cell, visible)\n{\n\tif (visible != this.isVisible(cell))\n\t{\n\t\tthis.execute(new mxVisibleChange(this, cell, visible));\n\t}\n\t\n\treturn visible;\n};\n\t\n/**\n * Function: visibleStateForCellChanged\n *\n * Inner callback to update the visible state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous visible state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.visibleStateForCellChanged = function(cell, visible)\n{\n\tvar previous = this.isVisible(cell);\n\tcell.setVisible(visible);\n\t\n\treturn previous;\n};\n\n/**\n * Function: execute\n * \n * Executes the given edit and fires events if required. The edit object\n * requires an execute function which is invoked. The edit is added to the\n * <currentEdit> between <beginUpdate> and <endUpdate> calls, so that\n * events will be fired if this execute is an individual transaction, that\n * is, if no previous <beginUpdate> calls have been made without calling\n * <endUpdate>. This implementation fires an <execute> event before\n * executing the given change.\n * \n * Parameters:\n * \n * change - Object that described the change.\n */\nmxGraphModel.prototype.execute = function(change)\n{\n\tchange.execute();\n\tthis.beginUpdate();\n\tthis.currentEdit.add(change);\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE, 'change', change));\n\t// New global executed event\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\tthis.endUpdate();\n};\n\n/**\n * Function: beginUpdate\n * \n * Increments the <updateLevel> by one. The event notification\n * is queued until <updateLevel> reaches 0 by use of\n * <endUpdate>.\n *\n * All changes on <mxGraphModel> are transactional,\n * that is, they are executed in a single undoable change\n * on the model (without transaction isolation).\n * Therefore, if you want to combine any\n * number of changes into a single undoable change,\n * you should group any two or more API calls that\n * modify the graph model between <beginUpdate>\n * and <endUpdate> calls as shown here:\n * \n * (code)\n * var model = graph.getModel();\n * var parent = graph.getDefaultParent();\n * var index = model.getChildCount(parent);\n * model.beginUpdate();\n * try\n * {\n *   model.add(parent, v1, index);\n *   model.add(parent, v2, index+1);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n * \n * Of course there is a shortcut for appending a\n * sequence of cells into the default parent:\n * \n * (code)\n * graph.addCells([v1, v2]).\n * (end)\n */\nmxGraphModel.prototype.beginUpdate = function()\n{\n\tthis.updateLevel++;\n\tthis.fireEvent(new mxEventObject(mxEvent.BEGIN_UPDATE));\n\t\n\tif (this.updateLevel == 1)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t}\n};\n\n/**\n * Function: endUpdate\n * \n * Decrements the <updateLevel> by one and fires an <undo>\n * event if the <updateLevel> reaches 0. This function\n * indirectly fires a <change> event by invoking the notify\n * function on the <currentEdit> und then creates a new\n * <currentEdit> using <createUndoableEdit>.\n *\n * The <undo> event is fired only once per edit, whereas\n * the <change> event is fired whenever the notify\n * function is invoked, that is, on undo and redo of\n * the edit.\n */\nmxGraphModel.prototype.endUpdate = function()\n{\n\tthis.updateLevel--;\n\t\n\tif (this.updateLevel == 0)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tif (!this.endingUpdate)\n\t{\n\t\tthis.endingUpdate = this.updateLevel == 0;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_UPDATE, 'edit', this.currentEdit));\n\n\t\ttry\n\t\t{\t\t\n\t\t\tif (this.endingUpdate && !this.currentEdit.isEmpty())\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_UNDO, 'edit', this.currentEdit));\n\t\t\t\tvar tmp = this.currentEdit;\n\t\t\t\tthis.currentEdit = this.createUndoableEdit();\n\t\t\t\ttmp.notify();\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', tmp));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.endingUpdate = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: createUndoableEdit\n * \n * Creates a new <mxUndoableEdit> that implements the\n * notify function to fire a <change> and <notify> event\n * through the <mxUndoableEdit>'s source.\n * \n * Parameters:\n * \n * significant - Optional boolean that specifies if the edit to be created is\n * significant. Default is true.\n */\nmxGraphModel.prototype.createUndoableEdit = function(significant)\n{\n\tvar edit = new mxUndoableEdit(this, (significant != null) ? significant : true);\n\t\n\tedit.notify = function()\n\t{\n\t\t// LATER: Remove changes property (deprecated)\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t};\n\t\n\treturn edit;\n};\n\n/**\n * Function: mergeChildren\n * \n * Merges the children of the given cell into the given target cell inside\n * this model. All cells are cloned unless there is a corresponding cell in\n * the model with the same id, in which case the source cell is ignored and\n * all edges are connected to the corresponding cell in this model. Edges\n * are considered to have no identity and are always cloned unless the\n * cloneAllEdges flag is set to false, in which case edges with the same\n * id in the target model are reconnected to reflect the terminals of the\n * source edges.\n */\nmxGraphModel.prototype.mergeChildren = function(from, to, cloneAllEdges)\n{\n\tcloneAllEdges = (cloneAllEdges != null) ? cloneAllEdges : true;\n\t\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar mapping = new Object();\n\t\tthis.mergeChildrenImpl(from, to, cloneAllEdges, mapping);\n\t\t\n\t\t// Post-processes all edges in the mapping and\n\t\t// reconnects the terminals to the corresponding\n\t\t// cells in the target model\n\t\tfor (var key in mapping)\n\t\t{\n\t\t\tvar cell = mapping[key];\n\t\t\tvar terminal = this.getTerminal(cell, true);\n\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, true);\n\t\t\t}\n\t\t\t\n\t\t\tterminal = this.getTerminal(cell, false);\n\t\t\t\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, false);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: mergeChildren\n * \n * Clones the children of the source cell into the given target cell in\n * this model and adds an entry to the mapping that maps from the source\n * cell to the target cell with the same id or the clone of the source cell\n * that was inserted into this model.\n */\nmxGraphModel.prototype.mergeChildrenImpl = function(from, to, cloneAllEdges, mapping)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar childCount = from.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = from.getChildAt(i);\n\t\t\t\n\t\t\tif (typeof(cell.getId) == 'function')\n\t\t\t{\n\t\t\t\tvar id = cell.getId();\n\t\t\t\tvar target = (id != null && (!this.isEdge(cell) || !cloneAllEdges)) ?\n\t\t\t\t\t\tthis.getCell(id) : null;\n\t\t\t\t\n\t\t\t\t// Clones and adds the child if no cell exists for the id\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar clone = cell.clone();\n\t\t\t\t\tclone.setId(id);\n\t\t\t\t\t\n\t\t\t\t\t// Sets the terminals from the original cell to the clone\n\t\t\t\t\t// because the lookup uses strings not cells in JS\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(true), true);\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(false), false);\n\t\t\t\t\t\n\t\t\t\t\t// Do *NOT* use model.add as this will move the edge away\n\t\t\t\t\t// from the parent in updateEdgeParent if maintainEdgeParent\n\t\t\t\t\t// is enabled in the target model\n\t\t\t\t\ttarget = to.insert(clone);\n\t\t\t\t\tthis.cellAdded(target);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Stores the mapping for later reconnecting edges\n\t\t\t\tmapping[mxCellPath.create(cell)] = target;\n\t\t\t\t\n\t\t\t\t// Recurses\n\t\t\t\tthis.mergeChildrenImpl(cell, target, cloneAllEdges, mapping);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: getParents\n * \n * Returns an array that represents the set (no duplicates) of all parents\n * for the given array of cells.\n * \n * Parameters:\n * \n * cells - Array of cells whose parents should be returned.\n */\nmxGraphModel.prototype.getParents = function(cells)\n{\n\tvar parents = [];\n\t\n\tif (cells != null)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = this.getParent(cells[i]);\n\t\t\t\n\t\t\tif (parent != null && !dict.get(parent))\n\t\t\t{\n\t\t\t\tdict.put(parent, true);\n\t\t\t\tparents.push(parent);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn parents;\n};\n\n//\n// Cell Cloning\n//\n\n/**\n * Function: cloneCell\n * \n * Returns a deep clone of the given <mxCell> (including\n * the children) which is created using <cloneCells>.\n *\n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n * includeChildren - Optional boolean indicating if the cells should be cloned\n * with all descendants. Default is true.\n */\nmxGraphModel.prototype.cloneCell = function(cell, includeChildren)\n{\n\tif (cell != null)\n\t{\n\t\treturn this.cloneCells([cell], includeChildren)[0];\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: cloneCells\n * \n * Returns an array of clones for the given array of <mxCells>.\n * Depending on the value of includeChildren, a deep clone is created for\n * each cell. Connections are restored based if the corresponding\n * cell is contained in the passed in array.\n *\n * Parameters:\n * \n * cells - Array of <mxCell> to be cloned.\n * includeChildren - Optional boolean indicating if the cells should be cloned\n * with all descendants. Default is true.\n * mapping - Optional mapping for existing clones.\n */\nmxGraphModel.prototype.cloneCells = function(cells, includeChildren, mapping)\n{\n\tincludeChildren = (includeChildren != null) ? includeChildren : true;\n\tmapping = (mapping != null) ? mapping : new Object();\n\tvar clones = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (cells[i] != null)\n\t\t{\n\t\t\tclones.push(this.cloneCellImpl(cells[i], mapping, includeChildren));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones.push(null);\n\t\t}\n\t}\n\t\n\tfor (var i = 0; i < clones.length; i++)\n\t{\n\t\tif (clones[i] != null)\n\t\t{\n\t\t\tthis.restoreClone(clones[i], cells[i], mapping);\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\t\t\t\n/**\n * Function: cloneCellImpl\n * \n * Inner helper method for cloning cells recursively.\n */\nmxGraphModel.prototype.cloneCellImpl = function(cell, mapping, includeChildren)\n{\n\tvar ident = mxObjectIdentity.get(cell);\n\tvar clone = mapping[ident];\n\t\n\tif (clone == null)\n\t{\n\t\tclone = this.cellCloned(cell);\n\t\tmapping[ident] = clone;\n\n\t\tif (includeChildren)\n\t\t{\n\t\t\tvar childCount = this.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cloneChild = this.cloneCellImpl(\n\t\t\t\t\tthis.getChildAt(cell, i), mapping, true);\n\t\t\t\tclone.insert(cloneChild);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn clone;\n};\n\n/**\n * Function: cellCloned\n * \n * Hook for cloning the cell. This returns cell.clone() or\n * any possible exceptions.\n */\nmxGraphModel.prototype.cellCloned = function(cell)\n{\n\treturn cell.clone();\n};\n\n/**\n * Function: restoreClone\n * \n * Inner helper method for restoring the connections in\n * a network of cloned cells.\n */\nmxGraphModel.prototype.restoreClone = function(clone, cell, mapping)\n{\n\tvar source = this.getTerminal(cell, true);\n\t\n\tif (source != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(source)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\ttmp.insertEdge(clone, true);\n\t\t}\n\t}\n\t\n\tvar target = this.getTerminal(cell, false);\n\t\n\tif (target != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(target)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\t\n\t\t\ttmp.insertEdge(clone, false);\n\t\t}\n\t}\n\t\n\tvar childCount = this.getChildCount(clone);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.restoreClone(this.getChildAt(clone, i),\n\t\t\tthis.getChildAt(cell, i), mapping);\n\t}\n};\n\n//\n// Atomic changes\n//\n\n/**\n * Class: mxRootChange\n * \n * Action to change the root in a model.\n *\n * Constructor: mxRootChange\n * \n * Constructs a change of the root in the\n * specified model.\n */\nfunction mxRootChange(model, root)\n{\n\tthis.model = model;\n\tthis.root = root;\n\tthis.previous = root;\n};\n\n/**\n * Function: execute\n * \n * Carries out a change of the root using\n * <mxGraphModel.rootChanged>.\n */\nmxRootChange.prototype.execute = function()\n{\n\tthis.root = this.previous;\n\tthis.previous = this.model.rootChanged(this.previous);\n};\n\n/**\n * Class: mxChildChange\n * \n * Action to add or remove a child in a model.\n *\n * Constructor: mxChildChange\n * \n * Constructs a change of a child in the\n * specified model.\n */\nfunction mxChildChange(model, parent, child, index)\n{\n\tthis.model = model;\n\tthis.parent = parent;\n\tthis.previous = parent;\n\tthis.child = child;\n\tthis.index = index;\n\tthis.previousIndex = index;\n};\n\n/**\n * Function: execute\n * \n * Changes the parent of <child> using\n * <mxGraphModel.parentForCellChanged> and\n * removes or restores the cell's\n * connections.\n */\nmxChildChange.prototype.execute = function()\n{\n\tif (this.child != null)\n\t{\n\t\tvar tmp = this.model.getParent(this.child);\n\t\tvar tmp2 = (tmp != null) ? tmp.getIndex(this.child) : 0;\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.connect(this.child, false);\n\t\t}\n\t\t\n\t\ttmp = this.model.parentForCellChanged(\n\t\t\tthis.child, this.previous, this.previousIndex);\n\t\t\t\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.connect(this.child, true);\n\t\t}\n\t\t\n\t\tthis.parent = this.previous;\n\t\tthis.previous = tmp;\n\t\tthis.index = this.previousIndex;\n\t\tthis.previousIndex = tmp2;\n\t}\n};\n\n/**\n * Function: disconnect\n * \n * Disconnects the given cell recursively from its\n * terminals and stores the previous terminal in the\n * cell's terminals.\n */\nmxChildChange.prototype.connect = function(cell, isConnect)\n{\n\tisConnect = (isConnect != null) ? isConnect : true;\n\t\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\t\n\tif (source != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, source, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, true);\n\t\t}\n\t}\n\t\n\tif (target != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, target, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, false);\n\t\t}\n\t}\n\t\n\tcell.setTerminal(source, true);\n\tcell.setTerminal(target, false);\n\t\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i=0; i<childCount; i++)\n\t{\n\t\tthis.connect(this.model.getChildAt(cell, i), isConnect);\n\t}\n};\n\n/**\n * Class: mxTerminalChange\n * \n * Action to change a terminal in a model.\n *\n * Constructor: mxTerminalChange\n * \n * Constructs a change of a terminal in the \n * specified model.\n */\nfunction mxTerminalChange(model, cell, terminal, source)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.terminal = terminal;\n\tthis.previous = terminal;\n\tthis.source = source;\n};\n\n/**\n * Function: execute\n * \n * Changes the terminal of <cell> to <previous> using\n * <mxGraphModel.terminalForCellChanged>.\n */\nmxTerminalChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.terminal = this.previous;\n\t\tthis.previous = this.model.terminalForCellChanged(\n\t\t\tthis.cell, this.previous, this.source);\n\t}\n};\n\n/**\n * Class: mxValueChange\n * \n * Action to change a user object in a model.\n *\n * Constructor: mxValueChange\n * \n * Constructs a change of a user object in the \n * specified model.\n */\nfunction mxValueChange(model, cell, value)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the value of <cell> to <previous> using\n * <mxGraphModel.valueForCellChanged>.\n */\nmxValueChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.value = this.previous;\n\t\tthis.previous = this.model.valueForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxStyleChange\n * \n * Action to change a cell's style in a model.\n *\n * Constructor: mxStyleChange\n * \n * Constructs a change of a style in the\n * specified model.\n */\nfunction mxStyleChange(model, cell, style)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.style = style;\n\tthis.previous = style;\n};\n\n/**\n * Function: execute\n * \n * Changes the style of <cell> to <previous> using\n * <mxGraphModel.styleForCellChanged>.\n */\nmxStyleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.style = this.previous;\n\t\tthis.previous = this.model.styleForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxGeometryChange\n * \n * Action to change a cell's geometry in a model.\n *\n * Constructor: mxGeometryChange\n * \n * Constructs a change of a geometry in the\n * specified model.\n */\nfunction mxGeometryChange(model, cell, geometry)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.geometry = geometry;\n\tthis.previous = geometry;\n};\n\n/**\n * Function: execute\n * \n * Changes the geometry of <cell> ro <previous> using\n * <mxGraphModel.geometryForCellChanged>.\n */\nmxGeometryChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.geometry = this.previous;\n\t\tthis.previous = this.model.geometryForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCollapseChange\n * \n * Action to change a cell's collapsed state in a model.\n *\n * Constructor: mxCollapseChange\n * \n * Constructs a change of a collapsed state in the\n * specified model.\n */\nfunction mxCollapseChange(model, cell, collapsed)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.collapsed = collapsed;\n\tthis.previous = collapsed;\n};\n\n/**\n * Function: execute\n * \n * Changes the collapsed state of <cell> to <previous> using\n * <mxGraphModel.collapsedStateForCellChanged>.\n */\nmxCollapseChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.collapsed = this.previous;\n\t\tthis.previous = this.model.collapsedStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxVisibleChange\n * \n * Action to change a cell's visible state in a model.\n *\n * Constructor: mxVisibleChange\n * \n * Constructs a change of a visible state in the\n * specified model.\n */\nfunction mxVisibleChange(model, cell, visible)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.visible = visible;\n\tthis.previous = visible;\n};\n\n/**\n * Function: execute\n * \n * Changes the visible state of <cell> to <previous> using\n * <mxGraphModel.visibleStateForCellChanged>.\n */\nmxVisibleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.visible = this.previous;\n\t\tthis.previous = this.model.visibleStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCellAttributeChange\n * \n * Action to change the attribute of a cell's user object.\n * There is no method on the graph model that uses this\n * action. To use the action, you can use the code shown\n * in the example below.\n * \n * Example:\n * \n * To change the attributeName in the cell's user object\n * to attributeValue, use the following code:\n * \n * (code)\n * model.beginUpdate();\n * try\n * {\n *   var edit = new mxCellAttributeChange(\n *     cell, attributeName, attributeValue);\n *   model.execute(edit);\n * }\n * finally\n * {\n *   model.endUpdate();\n * } \n * (end)\n *\n * Constructor: mxCellAttributeChange\n * \n * Constructs a change of a attribute of the DOM node\n * stored as the value of the given <mxCell>.\n */\nfunction mxCellAttributeChange(cell, attribute, value)\n{\n\tthis.cell = cell;\n\tthis.attribute = attribute;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the attribute of the cell's user object by\n * using <mxCell.setAttribute>.\n */\nmxCellAttributeChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tvar tmp = this.cell.getAttribute(this.attribute);\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.cell.value.removeAttribute(this.attribute);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.cell.setAttribute(this.attribute, this.previous);\n\t\t}\n\t\t\n\t\tthis.previous = tmp;\n\t}\n};\n\n__mxOutput.mxGraphModel = typeof mxGraphModel !== 'undefined' ? mxGraphModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCell\n *\n * Cells are the elements of the graph model. They represent the state\n * of the groups, vertices and edges in a graph.\n * \n * Custom attributes:\n * \n * For custom attributes we recommend using an XML node as the value of a cell.\n * The following code can be used to create a cell with an XML node as the\n * value:\n * \n * (code)\n * var doc = mxUtils.createXmlDocument();\n * var node = doc.createElement('MyNode')\n * node.setAttribute('label', 'MyLabel');\n * node.setAttribute('attribute1', 'value1');\n * graph.insertVertex(graph.getDefaultParent(), null, node, 40, 40, 80, 30);\n * (end)\n * \n * For the label to work, <mxGraph.convertValueToString> and\n * <mxGraph.cellLabelChanged> should be overridden as follows:\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     return cell.getAttribute('label', '')\n *   }\n * };\n * \n * var cellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     // Clones the value for correct undo/redo\n *     var elt = cell.value.cloneNode(true);\n *     elt.setAttribute('label', newValue);\n *     newValue = elt;\n *   }\n *   \n *   cellLabelChanged.apply(this, arguments);\n * };\n * (end)\n * \n * Callback: onInit\n *\n * Called from within the constructor.\n * \n * Constructor: mxCell\n *\n * Constructs a new cell to be used in a graph model.\n * This method invokes <onInit> upon completion.\n * \n * Parameters:\n * \n * value - Optional object that represents the cell value.\n * geometry - Optional <mxGeometry> that specifies the geometry.\n * style - Optional formatted string that defines the style.\n */\nfunction mxCell(value, geometry, style)\n{\n\tthis.value = value;\n\tthis.setGeometry(geometry);\n\tthis.setStyle(style);\n\t\n\tif (this.onInit != null)\n\t{\n\t\tthis.onInit();\n\t}\n};\n\n/**\n * Variable: id\n *\n * Holds the Id. Default is null.\n */\nmxCell.prototype.id = null;\n\n/**\n * Variable: value\n *\n * Holds the user object. Default is null.\n */\nmxCell.prototype.value = null;\n\n/**\n * Variable: geometry\n *\n * Holds the <mxGeometry>. Default is null.\n */\nmxCell.prototype.geometry = null;\n\n/**\n * Variable: style\n *\n * Holds the style as a string of the form [(stylename|key=value);]. Default is\n * null.\n */\nmxCell.prototype.style = null;\n\n/**\n * Variable: vertex\n *\n * Specifies whether the cell is a vertex. Default is false.\n */\nmxCell.prototype.vertex = false;\n\n/**\n * Variable: edge\n *\n * Specifies whether the cell is an edge. Default is false.\n */\nmxCell.prototype.edge = false;\n\n/**\n * Variable: connectable\n *\n * Specifies whether the cell is connectable. Default is true.\n */\nmxCell.prototype.connectable = true;\n\n/**\n * Variable: visible\n *\n * Specifies whether the cell is visible. Default is true.\n */\nmxCell.prototype.visible = true;\n\n/**\n * Variable: collapsed\n *\n * Specifies whether the cell is collapsed. Default is false.\n */\nmxCell.prototype.collapsed = false;\n\n/**\n * Variable: parent\n *\n * Reference to the parent cell.\n */\nmxCell.prototype.parent = null;\n\n/**\n * Variable: source\n *\n * Reference to the source terminal.\n */\nmxCell.prototype.source = null;\n\n/**\n * Variable: target\n *\n * Reference to the target terminal.\n */\nmxCell.prototype.target = null;\n\n/**\n * Variable: children\n *\n * Holds the child cells.\n */\nmxCell.prototype.children = null;\n\n/**\n * Variable: edges\n *\n * Holds the edges.\n */\nmxCell.prototype.edges = null;\n\n/**\n * Variable: mxTransient\n *\n * List of members that should not be cloned inside <clone>. This field is\n * passed to <mxUtils.clone> and is not made persistent in <mxCellCodec>.\n * This is not a convention for all classes, it is only used in this class\n * to mark transient fields since transient modifiers are not supported by\n * the language.\n */\nmxCell.prototype.mxTransient = ['id', 'value', 'parent', 'source',\n                                'target', 'children', 'edges'];\n\n/**\n * Function: getId\n *\n * Returns the Id of the cell as a string.\n */\nmxCell.prototype.getId = function()\n{\n\treturn this.id;\n};\n\t\t\n/**\n * Function: setId\n *\n * Sets the Id of the cell to the given string.\n */\nmxCell.prototype.setId = function(id)\n{\n\tthis.id = id;\n};\n\n/**\n * Function: getValue\n *\n * Returns the user object of the cell. The user\n * object is stored in <value>.\n */\nmxCell.prototype.getValue = function()\n{\n\treturn this.value;\n};\n\t\t\n/**\n * Function: setValue\n *\n * Sets the user object of the cell. The user object\n * is stored in <value>.\n */\nmxCell.prototype.setValue = function(value)\n{\n\tthis.value = value;\n};\n\n/**\n * Function: valueChanged\n *\n * Changes the user object after an in-place edit\n * and returns the previous value. This implementation\n * replaces the user object with the given value and\n * returns the old user object.\n */\nmxCell.prototype.valueChanged = function(newValue)\n{\n\tvar previous = this.getValue();\n\tthis.setValue(newValue);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getGeometry\n *\n * Returns the <mxGeometry> that describes the <geometry>.\n */\nmxCell.prototype.getGeometry = function()\n{\n\treturn this.geometry;\n};\n\n/**\n * Function: setGeometry\n *\n * Sets the <mxGeometry> to be used as the <geometry>.\n */\nmxCell.prototype.setGeometry = function(geometry)\n{\n\tthis.geometry = geometry;\n};\n\n/**\n * Function: getStyle\n *\n * Returns a string that describes the <style>.\n */\nmxCell.prototype.getStyle = function()\n{\n\treturn this.style;\n};\n\n/**\n * Function: setStyle\n *\n * Sets the string to be used as the <style>.\n */\nmxCell.prototype.setStyle = function(style)\n{\n\tthis.style = style;\n};\n\n/**\n * Function: isVertex\n *\n * Returns true if the cell is a vertex.\n */\nmxCell.prototype.isVertex = function()\n{\n\treturn this.vertex != 0;\n};\n\n/**\n * Function: setVertex\n *\n * Specifies if the cell is a vertex. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * vertex - Boolean that specifies if the cell is a vertex.\n */\nmxCell.prototype.setVertex = function(vertex)\n{\n\tthis.vertex = vertex;\n};\n\n/**\n * Function: isEdge\n *\n * Returns true if the cell is an edge.\n */\nmxCell.prototype.isEdge = function()\n{\n\treturn this.edge != 0;\n};\n\t\n/**\n * Function: setEdge\n * \n * Specifies if the cell is an edge. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * edge - Boolean that specifies if the cell is an edge.\n */\nmxCell.prototype.setEdge = function(edge)\n{\n\tthis.edge = edge;\n};\n\n/**\n * Function: isConnectable\n *\n * Returns true if the cell is connectable.\n */\nmxCell.prototype.isConnectable = function()\n{\n\treturn this.connectable != 0;\n};\n\n/**\n * Function: setConnectable\n *\n * Sets the connectable state.\n * \n * Parameters:\n * \n * connectable - Boolean that specifies the new connectable state.\n */\nmxCell.prototype.setConnectable = function(connectable)\n{\n\tthis.connectable = connectable;\n};\n\n/**\n * Function: isVisible\n *\n * Returns true if the cell is visibile.\n */\nmxCell.prototype.isVisible = function()\n{\n\treturn this.visible != 0;\n};\n\n/**\n * Function: setVisible\n *\n * Specifies if the cell is visible.\n * \n * Parameters:\n * \n * visible - Boolean that specifies the new visible state.\n */\nmxCell.prototype.setVisible = function(visible)\n{\n\tthis.visible = visible;\n};\n\n/**\n * Function: isCollapsed\n *\n * Returns true if the cell is collapsed.\n */\nmxCell.prototype.isCollapsed = function()\n{\n\treturn this.collapsed != 0;\n};\n\n/**\n * Function: setCollapsed\n *\n * Sets the collapsed state.\n * \n * Parameters:\n * \n * collapsed - Boolean that specifies the new collapsed state.\n */\nmxCell.prototype.setCollapsed = function(collapsed)\n{\n\tthis.collapsed = collapsed;\n};\n\n/**\n * Function: getParent\n *\n * Returns the cell's parent.\n */\nmxCell.prototype.getParent = function()\n{\n\treturn this.parent;\n};\n\n/**\n * Function: setParent\n *\n * Sets the parent cell.\n * \n * Parameters:\n * \n * parent - <mxCell> that represents the new parent.\n */\nmxCell.prototype.setParent = function(parent)\n{\n\tthis.parent = parent;\n};\n\n/**\n * Function: getTerminal\n *\n * Returns the source or target terminal.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source terminal should be\n * returned.\n */\nmxCell.prototype.getTerminal = function(source)\n{\n\treturn (source) ? this.source : this.target;\n};\n\n/**\n * Function: setTerminal\n *\n * Sets the source or target terminal and returns the new terminal.\n * \n * Parameters:\n * \n * terminal - <mxCell> that represents the new source or target terminal.\n * isSource - Boolean that specifies if the source or target terminal\n * should be set.\n */\nmxCell.prototype.setTerminal = function(terminal, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.source = terminal;\n\t}\n\telse\n\t{\n\t\tthis.target = terminal;\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of child cells.\n */\nmxCell.prototype.getChildCount = function()\n{\n\treturn (this.children == null) ? 0 : this.children.length;\n};\n\n/**\n * Function: getIndex\n *\n * Returns the index of the specified child in the child array.\n * \n * Parameters:\n * \n * child - Child whose index should be returned.\n */\nmxCell.prototype.getIndex = function(child)\n{\n\treturn mxUtils.indexOf(this.children, child);\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child at the specified index.\n * \n * Parameters:\n * \n * index - Integer that specifies the child to be returned.\n */\nmxCell.prototype.getChildAt = function(index)\n{\n\treturn (this.children == null) ? null : this.children[index];\n};\n\n/**\n * Function: insert\n *\n * Inserts the specified child into the child array at the specified index\n * and updates the parent reference of the child. If not childIndex is\n * specified then the child is appended to the child array. Returns the\n * inserted child.\n * \n * Parameters:\n * \n * child - <mxCell> to be inserted or appended to the child array.\n * index - Optional integer that specifies the index at which the child\n * should be inserted into the child array.\n */\nmxCell.prototype.insert = function(child, index)\n{\n\tif (child != null)\n\t{\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount();\n\t\t\t\n\t\t\tif (child.getParent() == this)\n\t\t\t{\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\n\t\tchild.removeFromParent();\n\t\tchild.setParent(this);\n\t\t\n\t\tif (this.children == null)\n\t\t{\n\t\t\tthis.children = [];\n\t\t\tthis.children.push(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.children.splice(index, 0, child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: remove\n *\n * Removes the child at the specified index from the child array and\n * returns the child that was removed. Will remove the parent reference of\n * the child.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the child to be\n * removed.\n */\nmxCell.prototype.remove = function(index)\n{\n\tvar child = null;\n\t\n\tif (this.children != null && index >= 0)\n\t{\n\t\tchild = this.getChildAt(index);\n\t\t\n\t\tif (child != null)\n\t\t{\n\t\t\tthis.children.splice(index, 1);\n\t\t\tchild.setParent(null);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: removeFromParent\n *\n * Removes the cell from its parent.\n */\nmxCell.prototype.removeFromParent = function()\n{\n\tif (this.parent != null)\n\t{\n\t\tvar index = this.parent.getIndex(this);\n\t\tthis.parent.remove(index);\n\t}\n};\n\n/**\n * Function: getEdgeCount\n *\n * Returns the number of edges in the edge array.\n */\nmxCell.prototype.getEdgeCount = function()\n{\n\treturn (this.edges == null) ? 0 : this.edges.length;\n};\n\n/**\n * Function: getEdgeIndex\n *\n * Returns the index of the specified edge in <edges>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose index in <edges> should be returned.\n */\nmxCell.prototype.getEdgeIndex = function(edge)\n{\n\treturn mxUtils.indexOf(this.edges, edge);\n};\n\n/**\n * Function: getEdgeAt\n *\n * Returns the edge at the specified index in <edges>.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the edge to be returned.\n */\nmxCell.prototype.getEdgeAt = function(index)\n{\n\treturn (this.edges == null) ? null : this.edges[index];\n};\n\n/**\n * Function: insertEdge\n *\n * Inserts the specified edge into the edge array and returns the edge.\n * Will update the respective terminal reference of the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.insertEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tedge.removeFromTerminal(isOutgoing);\n\t\tedge.setTerminal(this, isOutgoing);\n\t\t\n\t\tif (this.edges == null ||\n\t\t\tedge.getTerminal(!isOutgoing) != this ||\n\t\t\tmxUtils.indexOf(this.edges, edge) < 0)\n\t\t{\n\t\t\tif (this.edges == null)\n\t\t\t{\n\t\t\t\tthis.edges = [];\n\t\t\t}\n\t\t\t\n\t\t\tthis.edges.push(edge);\n\t\t}\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeEdge\n *\n * Removes the specified edge from the edge array and returns the edge.\n * Will remove the respective terminal reference from the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be removed from the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.removeEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tif (edge.getTerminal(!isOutgoing) != this &&\n\t\t\tthis.edges != null)\n\t\t{\n\t\t\tvar index = this.getEdgeIndex(edge);\n\t\t\t\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\tthis.edges.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge.setTerminal(null, isOutgoing);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeFromTerminal\n *\n * Removes the edge from its source or target terminal.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the edge should be removed from its\n * source or target terminal.\n */\nmxCell.prototype.removeFromTerminal = function(isSource)\n{\n\tvar terminal = this.getTerminal(isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.removeEdge(this, isSource);\n\t}\n};\n\n/**\n * Function: hasAttribute\n * \n * Returns true if the user object is an XML node that contains the given\n * attribute.\n * \n * Parameters:\n * \n * name - Name of the attribute.\n */\nmxCell.prototype.hasAttribute = function(name)\n{\n\tvar userObject = this.getValue();\n\t\n\treturn (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT && userObject.hasAttribute) ?\n\t\tuserObject.hasAttribute(name) : userObject.getAttribute(name) != null;\n};\n\n/**\n * Function: getAttribute\n *\n * Returns the specified attribute from the user object if it is an XML\n * node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be returned.\n * defaultValue - Optional default value to use if the attribute has no\n * value.\n */\nmxCell.prototype.getAttribute = function(name, defaultValue)\n{\n\tvar userObject = this.getValue();\n\t\n\tvar val = (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT) ?\n\t\tuserObject.getAttribute(name) : null;\n\t\t\n\treturn (val != null) ? val : defaultValue;\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the specified attribute on the user object if it is an XML node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be set.\n * value - New value of the attribute.\n */\nmxCell.prototype.setAttribute = function(name, value)\n{\n\tvar userObject = this.getValue();\n\t\n\tif (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tuserObject.setAttribute(name, value);\n\t}\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of the cell. Uses <cloneValue> to clone\n * the user object. All fields in <mxTransient> are ignored\n * during the cloning.\n */\nmxCell.prototype.clone = function()\n{\n\tvar clone = mxUtils.clone(this, this.mxTransient);\n\tclone.setValue(this.cloneValue());\n\t\n\treturn clone;\n};\n\n/**\n * Function: cloneValue\n *\n * Returns a clone of the cell's user object.\n */\nmxCell.prototype.cloneValue = function()\n{\n\tvar value = this.getValue();\n\t\n\tif (value != null)\n\t{\n\t\tif (typeof(value.clone) == 'function')\n\t\t{\n\t\t\tvalue = value.clone();\n\t\t}\n\t\telse if (!isNaN(value.nodeType))\n\t\t{\n\t\t\tvalue = value.cloneNode(true);\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n__mxOutput.mxCell = typeof mxCell !== 'undefined' ? mxCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGeometry\n * \n * Extends <mxRectangle> to represent the geometry of a cell.\n * \n * For vertices, the geometry consists of the x- and y-location, and the width\n * and height. For edges, the geometry consists of the optional terminal- and\n * control points. The terminal points are only required if an edge is\n * unconnected, and are stored in the <sourcePoint> and <targetPoint>\n * variables, respectively.\n * \n * Example:\n * \n * If an edge is unconnected, that is, it has no source or target terminal,\n * then a geometry with terminal points for a new edge can be defined as\n * follows.\n * \n * (code)\n * geometry.setTerminalPoint(new mxPoint(x1, y1), true);\n * geometry.points = [new mxPoint(x2, y2)];\n * geometry.setTerminalPoint(new mxPoint(x3, y3), false);\n * (end)\n * \n * Control points are used regardless of the connected state of an edge and may\n * be ignored or interpreted differently depending on the edge's <mxEdgeStyle>.\n * \n * To disable automatic reset of control points after a cell has been moved or\n * resized, the the <mxGraph.resizeEdgesOnMove> and\n * <mxGraph.resetEdgesOnResize> may be used.\n *\n * Edge Labels:\n * \n * Using the x- and y-coordinates of a cell's geometry, it is possible to\n * position the label on edges on a specific location on the actual edge shape\n * as it appears on the screen. The x-coordinate of an edge's geometry is used\n * to describe the distance from the center of the edge from -1 to 1 with 0\n * being the center of the edge and the default value. The y-coordinate of an\n * edge's geometry is used to describe the absolute, orthogonal distance in\n * pixels from that point. In addition, the <mxGeometry.offset> is used as an\n * absolute offset vector from the resulting point.\n * \n * This coordinate system is applied if <relative> is true, otherwise the\n * offset defines the absolute vector from the edge's center point to the\n * label and the values for <x> and <y> are ignored.\n * \n * The width and height parameter for edge geometries can be used to set the\n * label width and height (eg. for word wrapping).\n * \n * Ports:\n * \n * The term \"port\" refers to a relatively positioned, connectable child cell,\n * which is used to specify the connection between the parent and another cell\n * in the graph. Ports are typically modeled as vertices with relative\n * geometries.\n * \n * Offsets:\n * \n * The <offset> field is interpreted in 3 different ways, depending on the cell\n * and the geometry. For edges, the offset defines the absolute offset for the\n * edge label. For relative geometries, the offset defines the absolute offset\n * for the origin (top, left corner) of the vertex, otherwise the offset\n * defines the absolute offset for the label inside the vertex or group.\n * \n * Constructor: mxGeometry\n *\n * Constructs a new object to describe the size and location of a vertex or\n * the control points of an edge.\n */\nfunction mxGeometry(x, y, width, height)\n{\n\tmxRectangle.call(this, x, y, width, height);\n};\n\n/**\n * Extends mxRectangle.\n */\nmxGeometry.prototype = new mxRectangle();\nmxGeometry.prototype.constructor = mxGeometry;\n\n/**\n * Variable: TRANSLATE_CONTROL_POINTS\n * \n * Global switch to translate the points in translate. Default is true.\n */\nmxGeometry.prototype.TRANSLATE_CONTROL_POINTS = true;\n\n/**\n * Variable: alternateBounds\n *\n * Stores alternate values for x, y, width and height in a rectangle. See\n * <swap> to exchange the values. Default is null.\n */\nmxGeometry.prototype.alternateBounds = null;\n\n/**\n * Variable: sourcePoint\n *\n * Defines the source <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a source vertex. Otherwise it is\n * ignored. Default is  null.\n */\nmxGeometry.prototype.sourcePoint = null;\n\n/**\n * Variable: targetPoint\n *\n * Defines the target <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a target vertex. Otherwise it is\n * ignored. Default is null.\n */\nmxGeometry.prototype.targetPoint = null;\n\n/**\n * Variable: points\n *\n * Array of <mxPoints> which specifies the control points along the edge.\n * These points are the intermediate points on the edge, for the endpoints\n * use <targetPoint> and <sourcePoint> or set the terminals of the edge to\n * a non-null value. Default is null.\n */\nmxGeometry.prototype.points = null;\n\n/**\n * Variable: offset\n *\n * For edges, this holds the offset (in pixels) from the position defined\n * by <x> and <y> on the edge. For relative geometries (for vertices), this\n * defines the absolute offset from the point defined by the relative\n * coordinates. For absolute geometries (for vertices), this defines the\n * offset for the label. Default is null.\n */\nmxGeometry.prototype.offset = null;\n\n/**\n * Variable: relative\n *\n * Specifies if the coordinates in the geometry are to be interpreted as\n * relative coordinates. For edges, this is used to define the location of\n * the edge label relative to the edge as rendered on the display. For\n * vertices, this specifies the relative location inside the bounds of the\n * parent cell.\n * \n * If this is false, then the coordinates are relative to the origin of the\n * parent cell or, for edges, the edge label position is relative to the\n * center of the edge as rendered on screen.\n * \n * Default is false.\n */\nmxGeometry.prototype.relative = false;\n\n/**\n * Function: swap\n * \n * Swaps the x, y, width and height with the values stored in\n * <alternateBounds> and puts the previous values into <alternateBounds> as\n * a rectangle. This operation is carried-out in-place, that is, using the\n * existing geometry instance. If this operation is called during a graph\n * model transactional change, then the geometry should be cloned before\n * calling this method and setting the geometry of the cell using\n * <mxGraphModel.setGeometry>.\n */\nmxGeometry.prototype.swap = function()\n{\n\tif (this.alternateBounds != null)\n\t{\n\t\tvar old = new mxRectangle(\n\t\t\tthis.x, this.y, this.width, this.height);\n\n\t\tthis.x = this.alternateBounds.x;\n\t\tthis.y = this.alternateBounds.y;\n\t\tthis.width = this.alternateBounds.width;\n\t\tthis.height = this.alternateBounds.height;\n\n\t\tthis.alternateBounds = old;\n\t}\n};\n\n/**\n * Function: getTerminalPoint\n * \n * Returns the <mxPoint> representing the source or target point of this\n * edge. This is only used if the edge has no source or target vertex.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the source or target point\n * should be returned.\n */\nmxGeometry.prototype.getTerminalPoint = function(isSource)\n{\n\treturn (isSource) ? this.sourcePoint : this.targetPoint;\n};\n\n/**\n * Function: setTerminalPoint\n * \n * Sets the <sourcePoint> or <targetPoint> to the given <mxPoint> and\n * returns the new point.\n * \n * Parameters:\n * \n * point - Point to be used as the new source or target point.\n * isSource - Boolean that specifies if the source or target point\n * should be set.\n */\nmxGeometry.prototype.setTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.sourcePoint = point;\n\t}\n\telse\n\t{\n\t\tthis.targetPoint = point;\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the geometry by the given angle around the given center. That is,\n * <x> and <y> of the geometry, the <sourcePoint>, <targetPoint> and all\n * <points> are translated by the given amount. <x> and <y> are only\n * translated if <relative> is false.\n * \n * Parameters:\n * \n * angle - Number that specifies the rotation angle in degrees.\n * cx - <mxPoint> that specifies the center of the rotation.\n */\nmxGeometry.prototype.rotate = function(angle, cx)\n{\n\tvar rad = mxUtils.toRadians(angle);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\t\n\t// Rotates the geometry\n\tif (!this.relative)\n\t{\n\t\tvar ct = new mxPoint(this.getCenterX(), this.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\n\t\tthis.x = Math.round(pt.x - this.width / 2);\n\t\tthis.y = Math.round(pt.y - this.height / 2);\n\t}\n\n\t// Rotates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.sourcePoint, cos, sin, cx);\n\t\tthis.sourcePoint.x = Math.round(pt.x);\n\t\tthis.sourcePoint.y = Math.round(pt.y);\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.targetPoint, cos, sin, cx);\n\t\tthis.targetPoint.x = Math.round(pt.x);\n\t\tthis.targetPoint.y = Math.round(pt.y);\t\n\t}\n\t\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(this.points[i], cos, sin, cx);\n\t\t\t\tthis.points[i].x = Math.round(pt.x);\n\t\t\t\tthis.points[i].y = Math.round(pt.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: translate\n * \n * Translates the geometry by the specified amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are translated\n * by the given amount. <x> and <y> are only translated if <relative> is false.\n * If <TRANSLATE_CONTROL_POINTS> is false, then <points> are not modified by\n * this function.\n * \n * Parameters:\n * \n * dx - Number that specifies the x-coordinate of the translation.\n * dy - Number that specifies the y-coordinate of the translation.\n */\nmxGeometry.prototype.translate = function(dx, dy)\n{\n\tdx = parseFloat(dx);\n\tdy = parseFloat(dy);\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) + dx;\n\t\tthis.y = parseFloat(this.y) + dy;\n\t}\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) + dx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) + dy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) + dx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) + dy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.TRANSLATE_CONTROL_POINTS && this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) + dx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) + dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: scale\n * \n * Scales the geometry by the given amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are scaled\n * by the given amount. <x>, <y>, <width> and <height> are only scaled if\n * <relative> is false. If <fixedAspect> is true, then the smaller value\n * is used to scale the width and the height.\n * \n * Parameters:\n * \n * sx - Number that specifies the horizontal scale factor.\n * sy - Number that specifies the vertical scale factor.\n * fixedAspect - Optional boolean to keep the aspect ratio fixed.\n */\nmxGeometry.prototype.scale = function(sx, sy, fixedAspect)\n{\n\tsx = parseFloat(sx);\n\tsy = parseFloat(sy);\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) * sx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) * sy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) * sx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) * sy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) * sx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) * sy;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) * sx;\n\t\tthis.y = parseFloat(this.y) * sy;\n\n\t\tif (fixedAspect)\n\t\t{\n\t\t\tsy = sx = Math.min(sx, sy);\n\t\t}\n\t\t\n\t\tthis.width = parseFloat(this.width) * sx;\n\t\tthis.height = parseFloat(this.height) * sy;\n\t}\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this geometry.\n */\nmxGeometry.prototype.equals = function(obj)\n{\n\treturn mxRectangle.prototype.equals.apply(this, arguments) &&\n\t\tthis.relative == obj.relative &&\n\t\t((this.sourcePoint == null && obj.sourcePoint == null) || (this.sourcePoint != null && this.sourcePoint.equals(obj.sourcePoint))) &&\n\t\t((this.targetPoint == null && obj.targetPoint == null) || (this.targetPoint != null && this.targetPoint.equals(obj.targetPoint))) &&\n\t\t((this.points == null && obj.points == null) || (this.points != null && mxUtils.equalPoints(this.points, obj.points))) &&\n\t\t((this.alternateBounds == null && obj.alternateBounds == null) || (this.alternateBounds != null && this.alternateBounds.equals(obj.alternateBounds))) &&\n\t\t((this.offset == null && obj.offset == null) || (this.offset != null && this.offset.equals(obj.offset)));\n};\n\n__mxOutput.mxGeometry = typeof mxGeometry !== 'undefined' ? mxGeometry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCellPath =\n{\n\n\t/**\n\t * Class: mxCellPath\n\t * \n\t * Implements a mechanism for temporary cell Ids.\n\t * \n\t * Variable: PATH_SEPARATOR\n\t * \n\t * Defines the separator between the path components. Default is \".\".\n\t */\n\tPATH_SEPARATOR: '.',\n\t\n\t/**\n\t * Function: create\n\t * \n\t * Creates the cell path for the given cell. The cell path is a\n\t * concatenation of the indices of all ancestors on the (finite) path to\n\t * the root, eg. \"0.0.0.1\".\n\t * \n\t * Parameters:\n\t * \n\t * cell - Cell whose path should be returned.\n\t */\n\tcreate: function(cell)\n\t{\n\t\tvar result = '';\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tvar parent = cell.getParent();\n\t\t\t\n\t\t\twhile (parent != null)\n\t\t\t{\n\t\t\t\tvar index = parent.getIndex(cell);\n\t\t\t\tresult = index + mxCellPath.PATH_SEPARATOR + result;\n\t\t\t\t\n\t\t\t\tcell = parent;\n\t\t\t\tparent = cell.getParent();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes trailing separator\n\t\tvar n = result.length;\n\t\t\n\t\tif (n > 1)\n\t\t{\n\t\t\tresult = result.substring(0, n - 1);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getParentPath\n\t * \n\t * Returns the path for the parent of the cell represented by the given\n\t * path. Returns null if the given path has no parent.\n\t * \n\t * Parameters:\n\t * \n\t * path - Path whose parent path should be returned.\n\t */\n\tgetParentPath: function(path)\n\t{\n\t\tif (path != null)\n\t\t{\n\t\t\tvar index = path.lastIndexOf(mxCellPath.PATH_SEPARATOR);\n\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\treturn path.substring(0, index);\n\t\t\t}\n\t\t\telse if (path.length > 0)\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: resolve\n\t * \n\t * Returns the cell for the specified cell path using the given root as the\n\t * root of the path.\n\t * \n\t * Parameters:\n\t * \n\t * root - Root cell of the path to be resolved.\n\t * path - String that defines the path.\n\t */\n\tresolve: function(root, path)\n\t{\n\t\tvar parent = root;\n\t\t\n\t\tif (path != null)\n\t\t{\n\t\t\tvar tokens = path.split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\n\t\t\tfor (var i=0; i<tokens.length; i++)\n\t\t\t{\n\t\t\t\tparent = parent.getChildAt(parseInt(tokens[i]));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn parent;\n\t},\n\t\n\t/**\n\t * Function: compare\n\t * \n\t * Compares the given cell paths and returns -1 if p1 is smaller, 0 if\n\t * p1 is equal and 1 if p1 is greater than p2.\n\t */\n\tcompare: function(p1, p2)\n\t{\n\t\tvar min = Math.min(p1.length, p2.length);\n\t\tvar comp = 0;\n\t\t\n\t\tfor (var i = 0; i < min; i++)\n\t\t{\n\t\t\tif (p1[i] != p2[i])\n\t\t\t{\n\t\t\t\tif (p1[i].length == 0 ||\n\t\t\t\t\tp2[i].length == 0)\n\t\t\t\t{\n\t\t\t\t\tcomp = (p1[i] == p2[i]) ? 0 : ((p1[i] > p2[i]) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar t1 = parseInt(p1[i]);\n\t\t\t\t\tvar t2 = parseInt(p2[i]);\n\t\t\t\t\t\n\t\t\t\t\tcomp = (t1 == t2) ? 0 : ((t1 > t2) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Compares path length if both paths are equal to this point\n\t\tif (comp == 0)\n\t\t{\n\t\t\tvar t1 = p1.length;\n\t\t\tvar t2 = p2.length;\n\t\t\t\n\t\t\tif (t1 != t2)\n\t\t\t{\n\t\t\t\tcomp = (t1 > t2) ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn comp;\n\t}\n\n};\n\n__mxOutput.mxCellPath = typeof mxCellPath !== 'undefined' ? mxCellPath : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxPerimeter =\n{\n\t/**\n\t * Class: mxPerimeter\n\t * \n\t * Provides various perimeter functions to be used in a style\n\t * as the value of <mxConstants.STYLE_PERIMETER>. Perimeters for\n\t * rectangle, circle, rhombus and triangle are available.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t * (end)\n\t * \n\t * Or programmatically:\n\t * \n\t * (code)\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\t * (end)\n\t * \n\t * When adding new perimeter functions, it is recommended to use the \n\t * mxPerimeter-namespace as follows:\n\t * \n\t * (code)\n\t * mxPerimeter.CustomPerimeter = function (bounds, vertex, next, orthogonal)\n\t * {\n\t *   var x = 0; // Calculate x-coordinate\n\t *   var y = 0; // Calculate y-coordainte\n\t *   \n\t *   return new mxPoint(x, y);\n\t * }\n\t * (end)\n\t * \n\t * The new perimeter should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('customPerimeter', mxPerimeter.CustomPerimeter);\n\t * (end)\n\t * \n\t * The custom perimeter above can now be used in a specific vertex as follows:\n\t * \n\t * (code)\n\t * model.setStyle(vertex, 'perimeter=customPerimeter');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxPerimeter.CustomPerimeter for the value in\n\t * the cell style above.\n\t * \n\t * Or it can be used for all vertices in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultVertexStyle();\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.CustomPerimeter;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * The parameters are explained in <RectanglePerimeter>.\n\t * \n\t * Function: RectanglePerimeter\n\t * \n\t * Describes a rectangular perimeter for the given bounds.\n\t *\n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the absolute bounds of the\n\t * vertex.\n\t * vertex - <mxCellState> that represents the vertex.\n\t * next - <mxPoint> that represents the nearest neighbour point on the\n\t * given edge.\n\t * orthogonal - Boolean that specifies if the orthogonal projection onto\n\t * the perimeter should be returned. If this is false then the intersection\n\t * of the perimeter and the line between the next and the center point is\n\t * returned.\n\t */\n\tRectanglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\t\tvar alpha = Math.atan2(dy, dx);\n\t\tvar p = new mxPoint(0, 0);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI/2;\n\t\tvar beta = pi2 - alpha;\n\t\tvar t = Math.atan2(bounds.height, bounds.width);\n\t\t\n\t\tif (alpha < -pi + t || alpha > pi - t)\n\t\t{\n\t\t\t// Left edge\n\t\t\tp.x = bounds.x;\n\t\t\tp.y = cy - bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse if (alpha < -t)\n\t\t{\n\t\t\t// Top Edge\n\t\t\tp.y = bounds.y;\n\t\t\tp.x = cx - bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\telse if (alpha < t)\n\t\t{\n\t\t\t// Right Edge\n\t\t\tp.x = bounds.x + bounds.width;\n\t\t\tp.y = cy + bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Bottom Edge\n\t\t\tp.y = bounds.y + bounds.height;\n\t\t\tp.x = cx + bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (next.x >= bounds.x &&\n\t\t\t\tnext.x <= bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = next.x;\n\t\t\t}\n\t\t\telse if (next.y >= bounds.y &&\n\t\t\t\t\t   next.y <= bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = next.y;\n\t\t\t}\n\t\t\tif (next.x < bounds.x)\n\t\t\t{\n\t\t\t\tp.x = bounds.x;\n\t\t\t}\n\t\t\telse if (next.x > bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = bounds.x + bounds.width;\n\t\t\t}\n\t\t\tif (next.y < bounds.y)\n\t\t\t{\n\t\t\t\tp.y = bounds.y;\n\t\t\t}\n\t\t\telse if (next.y > bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = bounds.y + bounds.height;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: EllipsePerimeter\n\t * \n\t * Describes an elliptic perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tEllipsePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar a = bounds.width / 2;\n\t\tvar b = bounds.height / 2;\n\t\tvar cx = x + a;\n\t\tvar cy = y + b;\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\t\n\t\t// Calculates straight line equation through\n\t\t// point and ellipse center y = d * x + h\n\t\tvar dx = parseInt(px - cx);\n\t\tvar dy = parseInt(py - cy);\n\t\t\n\t\tif (dx == 0 && dy != 0)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy + b * dy / Math.abs(dy));\n\t\t}\n\t\telse if (dx == 0 && dy == 0)\n\t\t{\n\t\t\treturn new mxPoint(px, py);\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (py >= y && py <= y + bounds.height)\n\t\t\t{\n\t\t\t\tvar ty = py - cy;\n\t\t\t\tvar tx = Math.sqrt(a*a*(1-(ty*ty)/(b*b))) || 0;\n\t\t\t\t\n\t\t\t\tif (px <= x)\n\t\t\t\t{\n\t\t\t\t\ttx = -tx;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(cx+tx, py);\n\t\t\t}\n\t\t\t\n\t\t\tif (px >= x && px <= x + bounds.width)\n\t\t\t{\n\t\t\t\tvar tx = px - cx;\n\t\t\t\tvar ty = Math.sqrt(b*b*(1-(tx*tx)/(a*a))) || 0;\n\t\t\t\t\n\t\t\t\tif (py <= y)\n\t\t\t\t{\n\t\t\t\t\tty = -ty;\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(px, cy+ty);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Calculates intersection\n\t\tvar d = dy / dx;\n\t\tvar h = cy - d * cx;\n\t\tvar e = a * a * d * d + b * b;\n\t\tvar f = -2 * cx * e;\n\t\tvar g = a * a * d * d * cx * cx +\n\t\t\t\tb * b * cx * cx -\n\t\t\t\ta * a * b * b;\n\t\tvar det = Math.sqrt(f * f - 4 * e * g);\n\t\t\n\t\t// Two solutions (perimeter points)\n\t\tvar xout1 = (-f + det) / (2 * e);\n\t\tvar xout2 = (-f - det) / (2 * e);\n\t\tvar yout1 = d * xout1 + h;\n\t\tvar yout2 = d * xout2 + h;\n\t\tvar dist1 = Math.sqrt(Math.pow((xout1 - px), 2)\n\t\t\t\t\t+ Math.pow((yout1 - py), 2));\n\t\tvar dist2 = Math.sqrt(Math.pow((xout2 - px), 2)\n\t\t\t\t\t+ Math.pow((yout2 - py), 2));\n\t\t\t\t\t\n\t\t// Correct solution\n\t\tvar xout = 0;\n\t\tvar yout = 0;\n\t\t\n\t\tif (dist1 < dist2)\n\t\t{\n\t\t\txout = xout1;\n\t\t\tyout = yout1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\txout = xout2;\n\t\t\tyout = yout2;\n\t\t}\n\t\t\n\t\treturn new mxPoint(xout, yout);\n\t},\n\n\t/**\n\t * Function: RhombusPerimeter\n\t * \n\t * Describes a rhombus (aka diamond) perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tRhombusPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\n\t\t// Special case for intersecting the diamond's corners\n\t\tif (cx == px)\n\t\t{\n\t\t\tif (cy > py)\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y); // top\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y + h); // bottom\n\t\t\t}\n\t\t}\n\t\telse if (cy == py)\n\t\t{\n\t\t\tif (cx > px)\n\t\t\t{\n\t\t\t\treturn new mxPoint(x, cy); // left\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(x + w, cy); // right\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tx = cx;\n\t\tvar ty = cy;\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// In which quadrant will the intersection be?\n\t\t// set the slope and offset of the border line accordingly\n\t\tif (px < cx)\n\t\t{\n\t\t\tif (py < cy)\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x, cy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x, cy);\n\t\t\t}\n\t\t}\n\t\telse if (py < cy)\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x + w, cy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x + w, cy);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: TrianglePerimeter\n\t * \n\t * Describes a triangle perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tTrianglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar direction = (vertex != null) ?\n\t\t\tvertex.style[mxConstants.STYLE_DIRECTION] : null;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_SOUTH;\n\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\t\t\n\t\tvar start = new mxPoint(x, y);\n\t\tvar corner = new mxPoint(x + w, cy);\n\t\tvar end = new mxPoint(x, y + h);\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tstart = end;\n\t\t\tcorner = new mxPoint(cx, y);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tcorner = new mxPoint(cx, y + h);\n\t\t\tend = new mxPoint(x + w, y);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tstart = new mxPoint(x + w, y);\n\t\t\tcorner = new mxPoint(x, cy);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\n\t\tvar alpha = (vertical) ? Math.atan2(dx, dy) : Math.atan2(dy, dx);\n\t\tvar t = (vertical) ? Math.atan2(w, h) : Math.atan2(h, w);\n\t\t\n\t\tvar base = false;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tbase = alpha > -t && alpha < t;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbase = alpha < -Math.PI + t || alpha > Math.PI - t;\t\n\t\t}\n\n\t\tvar result = null;\t\t\t\n\n\t\tif (base)\n\t\t{\n\t\t\tif (orthogonal && ((vertical && next.x >= start.x && next.x <= end.x) ||\n\t\t\t\t(!vertical && next.y >= start.y && next.y <= end.y)))\n\t\t\t{\n\t\t\t\tif (vertical)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(next.x, start.y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(start.x, next.y);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 + h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty + h);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 - h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w, y + h / 2 +\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x, y + h / 2 -\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (orthogonal)\n\t\t\t{\n\t\t\t\tvar pt = new mxPoint(cx, cy);\n\t\t\n\t\t\t\tif (next.y >= y && next.y <= y + h)\n\t\t\t\t{\n\t\t\t\t\tpt.x = (vertical) ? cx : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_WEST) ?\n\t\t\t\t\t\t\tx + w : x);\n\t\t\t\t\tpt.y = next.y;\n\t\t\t\t}\n\t\t\t\telse if (next.x >= x && next.x <= x + w)\n\t\t\t\t{\n\t\t\t\t\tpt.x = next.x;\n\t\t\t\t\tpt.y = (!vertical) ? cy : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_NORTH) ?\n\t\t\t\t\t\t\ty + h : y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Compute angle\n\t\t\t\tdx = next.x - pt.x;\n\t\t\t\tdy = next.y - pt.y;\n\t\t\t\t\n\t\t\t\tcx = pt.x;\n\t\t\t\tcy = pt.y;\n\t\t\t}\n\n\t\t\tif ((vertical && next.x <= x + w / 2) ||\n\t\t\t\t(!vertical && next.y <= y + h / 2))\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tstart.x, start.y, corner.x, corner.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tcorner.x, corner.y, end.x, end.y);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\tresult = new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: HexagonPerimeter\n\t * \n\t * Describes a hexagon perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tHexagonPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\tvar dx = px - cx;\n\t\tvar dy = py - cy;\n\t\tvar alpha = -Math.atan2(dy, dx);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI / 2;\n\n\t\tvar result = new mxPoint(cx, cy);\n\n\t\tvar direction = (vertex != null) ? mxUtils.getValue(\n\t\t\t\tvertex.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_EAST) : mxConstants.DIRECTION_EAST;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH\n\t\t\t\t|| direction == mxConstants.DIRECTION_SOUTH;\n\t\tvar a = new mxPoint();\n\t\tvar b = new mxPoint();\n\n\t\t//Only consider corrects quadrants for the orthogonal case.\n\t\tif ((px < x) && (py < y) || (px < x) && (py > y + h)\n\t\t\t\t|| (px > x + w) && (py < y) || (px > x + w) && (py > y + h))\n\t\t{\n\t\t\torthogonal = false;\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (px == cx)\n\t\t\t\t{\n\t\t\t\t\tif (py <= y)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py >= y + h)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px < x)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (py == y)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t}\n\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (py == cy)\n\t\t\t\t{\n\t\t\t\t\tif (px <= x)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px >= x + w)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py < y)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (px == x)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, cy);\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, cy);\n\t\t\t\t}\n\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tx = cx;\n\t\t\tvar ty = cy;\n\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t\t\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tty = y + h;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tty = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t\t\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\ttx = x + w;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttx = x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 4, w / 2);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == pi2)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi2))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\n\t\t\t\tif ((alpha < beta) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha > pi2) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (((alpha > (pi - beta)) && (alpha <= pi))\n\t\t\t\t\t\t|| ((alpha < (-pi + beta)) && (alpha >= -pi)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > -pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -pi2) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 2, w / 4);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha == pi) || (alpha == -pi))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == 0)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y + h);\n\t\t\t\t}\n\n\t\t\t\tif ((alpha > 0) && (alpha < beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > (pi - beta)) && (alpha < pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < 0) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < (-pi + beta)) && (alpha > -pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n__mxOutput.mxPerimeter = typeof mxPerimeter !== 'undefined' ? mxPerimeter : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2017, draw.io AG\n */\n/**\n * Class: mxPrintPreview\n * \n * Implements printing of a diagram across multiple pages. The following opens\n * a print preview for an existing graph:\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.open();\n * (end)\n * \n * Use <mxUtils.getScaleForPageCount> as follows in order to print the graph\n * across a given number of pages:\n * \n * (code)\n * var pageCount = mxUtils.prompt('Enter page count', '1');\n * \n * if (pageCount != null)\n * {\n *   var scale = mxUtils.getScaleForPageCount(pageCount, graph);\n *   var preview = new mxPrintPreview(graph, scale);\n *   preview.open();\n * }\n * (end)\n * \n * Additional pages:\n * \n * To add additional pages before and after the output, <getCoverPages> and\n * <getAppendices> can be used, respectively.\n * \n * (code)\n * var preview = new mxPrintPreview(graph, 1);\n * \n * preview.getCoverPages = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Cover Page</p>'\n *   }))];\n * };\n * \n * preview.getAppendices = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Appendix</p>'\n *   }))];\n * };\n * \n * preview.open();\n * (end)\n * \n * CSS:\n * \n * The CSS from the original page is not carried over to the print preview.\n * To add CSS to the page, use the css argument in the <open> function or\n * override <writeHead> to add the respective link tags as follows:\n * \n * (code)\n * var writeHead = preview.writeHead;\n * preview.writeHead = function(doc, css)\n * {\n *   writeHead.apply(this, arguments);\n *   doc.writeln('<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">');\n * };\n * (end)\n * \n * Padding:\n * \n * To add a padding to the page in the preview (but not the print output), use\n * the following code:\n * \n * (code)\n * preview.writeHead = function(doc)\n * {\n *   writeHead.apply(this, arguments);\n *   \n *   doc.writeln('<style type=\"text/css\">');\n *   doc.writeln('@media screen {');\n *   doc.writeln('  body > div { padding-top:30px;padding-left:40px;box-sizing:content-box; }');\n *   doc.writeln('}');\n *   doc.writeln('</style>');\n * };\n * (end)\n * \n * Headers:\n * \n * Apart from setting the title argument in the mxPrintPreview constructor you\n * can override <renderPage> as follows to add a header to any page:\n * \n * (code)\n * var oldRenderPage = mxPrintPreview.prototype.renderPage;\n * mxPrintPreview.prototype.renderPage = function(w, h, x, y, content, pageNumber)\n * {\n *   var div = oldRenderPage.apply(this, arguments);\n *   \n *   var header = document.createElement('div');\n *   header.style.position = 'absolute';\n *   header.style.top = '0px';\n *   header.style.width = '100%';\n *   header.style.textAlign = 'right';\n *   mxUtils.write(header, 'Your header here');\n *   div.firstChild.appendChild(header);\n *   \n *   return div;\n * };\n * (end)\n * \n * The pageNumber argument contains the number of the current page, starting at\n * 1. To display a header on the first page only, check pageNumber and add a\n * vertical offset in the constructor call for the height of the header.\n * \n * Page Format:\n * \n * For landscape printing, use <mxConstants.PAGE_FORMAT_A4_LANDSCAPE> as\n * the pageFormat in <mxUtils.getScaleForPageCount> and <mxPrintPreview>.\n * Keep in mind that one can not set the defaults for the print dialog\n * of the operating system from JavaScript so the user must manually choose\n * a page format that matches this setting.\n * \n * You can try passing the following CSS directive to <open> to set the\n * page format in the print dialog to landscape. However, this CSS\n * directive seems to be ignored in most major browsers, including IE.\n * \n * (code)\n * @page {\n *   size: landscape;\n * }\n * (end)\n * \n * Note that the print preview behaves differently in IE when used from the\n * filesystem or via HTTP so printing should always be tested via HTTP.\n * \n * If you are using a DOCTYPE in the source page you can override <getDoctype>\n * and provide the same DOCTYPE for the print preview if required. Here is\n * an example for IE8 standards mode.\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.getDoctype = function()\n * {\n *   return '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=5,IE=8\" ><![endif]-->';\n * };\n * preview.open();\n * (end)\n * \n * Constructor: mxPrintPreview\n *\n * Constructs a new print preview for the given parameters.\n * \n * Parameters:\n * \n * graph - <mxGraph> to be previewed.\n * scale - Optional scale of the output. Default is 1 / <mxGraph.pageScale>.\n * pageFormat - <mxRectangle> that specifies the page format (in pixels).\n * border - Border in pixels along each side of every page. Note that the\n * actual print function in the browser will add another border for\n * printing.\n * This should match the page format of the printer. Default uses the\n * <mxGraph.pageFormat> of the given graph.\n * x0 - Optional left offset of the output. Default is 0.\n * y0 - Optional top offset of the output. Default is 0.\n * borderColor - Optional color of the page border. Default is no border.\n * Note that a border is sometimes useful to highlight the printed page\n * border in the print preview of the browser.\n * title - Optional string that is used for the window title. Default\n * is 'Printer-friendly version'.\n * pageSelector - Optional boolean that specifies if the page selector\n * should appear in the window with the print preview. Default is true.\n */\nfunction mxPrintPreview(graph, scale, pageFormat, border, x0, y0, borderColor, title, pageSelector)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.border = (border != null) ? border : 0;\n\tthis.pageFormat = mxRectangle.fromRectangle((pageFormat != null) ? pageFormat : graph.pageFormat);\n\tthis.title = (title != null) ? title : 'Printer-friendly version';\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.borderColor = borderColor;\n\tthis.pageSelector = (pageSelector != null) ? pageSelector : true;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> that should be previewed.\n */\nmxPrintPreview.prototype.graph = null;\n\n/**\n * Variable: pageFormat\n *\n * Holds the <mxRectangle> that defines the page format.\n */\nmxPrintPreview.prototype.pageFormat = null;\n\n/**\n * Variable: scale\n * \n * Holds the scale of the print preview.\n */\nmxPrintPreview.prototype.scale = null;\n\n/**\n * Variable: border\n * \n * The border inset around each side of every page in the preview. This is set\n * to 0 if autoOrigin is false.\n */\nmxPrintPreview.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * The margin at the top of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginTop = 0;\n\n/**\n * Variable: marginBottom\n * \n * The margin at the bottom of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginBottom = 0;\n\n/**\n * Variable: x0\n * \n * Holds the horizontal offset of the output.\n */\nmxPrintPreview.prototype.x0 = 0;\n\n/**\n * Variable: y0\n *\n * Holds the vertical offset of the output.\n */\nmxPrintPreview.prototype.y0 = 0;\n\n/**\n * Variable: autoOrigin\n * \n * Specifies if the origin should be automatically computed based on the top,\n * left corner of the actual diagram contents. The required offset will be added\n * to <x0> and <y0> in <open>. Default is true.\n */\nmxPrintPreview.prototype.autoOrigin = true;\n\n/**\n * Variable: printOverlays\n * \n * Specifies if overlays should be printed. Default is false.\n */\nmxPrintPreview.prototype.printOverlays = false;\n\n/**\n * Variable: printControls\n * \n * Specifies if controls (such as folding icons) should be printed. Default is\n * false.\n */\nmxPrintPreview.prototype.printControls = false;\n\n/**\n * Variable: printBackgroundImage\n * \n * Specifies if the background image should be printed. Default is false.\n */\nmxPrintPreview.prototype.printBackgroundImage = false;\n\n/**\n * Variable: backgroundColor\n * \n * Holds the color value for the page background color. Default is #ffffff.\n */\nmxPrintPreview.prototype.backgroundColor = '#ffffff';\n\n/**\n * Variable: borderColor\n * \n * Holds the color value for the page border.\n */\nmxPrintPreview.prototype.borderColor = null;\n\n/**\n * Variable: title\n * \n * Holds the title of the preview window.\n */\nmxPrintPreview.prototype.title = null;\n\n/**\n * Variable: pageSelector\n * \n * Boolean that specifies if the page selector should be\n * displayed. Default is true.\n */\nmxPrintPreview.prototype.pageSelector = null;\n\n/**\n * Variable: wnd\n * \n * Reference to the preview window.\n */\nmxPrintPreview.prototype.wnd = null;\n\n/**\n * Variable: targetWindow\n * \n * Assign any window here to redirect the rendering in <open>.\n */\nmxPrintPreview.prototype.targetWindow = null;\n\n/**\n * Variable: pageCount\n * \n * Holds the actual number of pages in the preview.\n */\nmxPrintPreview.prototype.pageCount = 0;\n\n/**\n * Variable: clipping\n * \n * Specifies is clipping should be used to avoid creating too many cell states\n * in large diagrams. The bounding box of the cells in the original diagram is\n * used if this is enabled. Default is true.\n */\nmxPrintPreview.prototype.clipping = true;\n\n/**\n * Function: getWindow\n * \n * Returns <wnd>.\n */\nmxPrintPreview.prototype.getWindow = function()\n{\n\treturn this.wnd;\n};\n\n/**\n * Function: getDocType\n * \n * Returns the string that should go before the HTML tag in the print preview\n * page. This implementation returns an X-UA meta tag for IE5 in quirks mode,\n * IE8 in IE8 standards mode and edge in IE9 standards mode.\n */\nmxPrintPreview.prototype.getDoctype = function()\n{\n\tvar dt = '';\n\t\n\tif (document.documentMode == 5)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=5\">';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\">';\n\t}\n\telse if (document.documentMode > 8)\n\t{\n\t\t// Comment needed to make standards doctype apply in IE\n\t\tdt = '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><![endif]-->';\n\t}\n\t\n\treturn dt;\n};\n\n/**\n * Function: appendGraph\n * \n * Adds the given graph to the existing print preview.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.appendGraph = function(graph, scale, x0, y0, forcePageBreaks, keepOpen)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.x0 = x0;\n\tthis.y0 = y0;\n\tthis.open(null, null, forcePageBreaks, keepOpen);\n};\n\n/**\n * Function: open\n * \n * Shows the print preview window. The window is created here if it does\n * not exist.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.open = function(css, targetWindow, forcePageBreaks, keepOpen)\n{\n\t// Closing the window while the page is being rendered may cause an\n\t// exception in IE. This and any other exceptions are simply ignored.\n\tvar previousInitializeOverlay = this.graph.cellRenderer.initializeOverlay;\n\tvar div = null;\n\t\n\ttry\n\t{\n\t\t// Temporarily overrides the method to redirect rendering of overlays\n\t\t// to the draw pane so that they are visible in the printout\n\t\tif (this.printOverlays)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initializeOverlay = function(state, overlay)\n\t\t\t{\n\t\t\t\toverlay.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (this.printControls)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initControl = function(state, control, handleEvents, clickHandler)\n\t\t\t{\n\t\t\t\tcontrol.dialect = state.view.graph.dialect;\n\t\t\t\tcontrol.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tthis.wnd = (targetWindow != null) ? targetWindow : this.wnd;\n\t\tvar isNewWindow = false;\n\t\t\n\t\tif (this.wnd == null)\n\t\t{\n\t\t\tisNewWindow = true;\n\t\t\tthis.wnd = window.open();\n\t\t}\n\t\t\n\t\tvar doc = this.wnd.document;\n\t\t\n\t\tif (isNewWindow)\n\t\t{\n\t\t\tvar dt = this.getDoctype();\n\t\t\t\n\t\t\tif (dt != null && dt.length > 0)\n\t\t\t{\n\t\t\t\tdoc.writeln(dt);\n\t\t\t}\n\t\t\t\n\t\t\tif (mxClient.IS_VML)\n\t\t\t{\n\t\t\t\tdoc.writeln('<html xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (document.compatMode === 'CSS1Compat')\n\t\t\t\t{\n\t\t\t\t\tdoc.writeln('<!DOCTYPE html>');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdoc.writeln('<html>');\n\t\t\t}\n\t\t\t\n\t\t\tdoc.writeln('<head>');\n\t\t\tthis.writeHead(doc, css);\n\t\t\tdoc.writeln('</head>');\n\t\t\tdoc.writeln('<body class=\"mxPage\">');\n\t\t}\n\n\t\t// Computes the horizontal and vertical page count\n\t\tvar bounds = this.graph.getGraphBounds().clone();\n\t\tvar currentScale = this.graph.getView().getScale();\n\t\tvar sc = currentScale / this.scale;\n\t\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\t\t// Uses the absolute origin with no offset for all printing\n\t\tif (!this.autoOrigin)\n\t\t{\n\t\t\tthis.x0 -= tr.x * this.scale;\n\t\t\tthis.y0 -= tr.y * this.scale;\n\t\t\tbounds.width += bounds.x;\n\t\t\tbounds.height += bounds.y;\n\t\t\tbounds.x = 0;\n\t\t\tbounds.y = 0;\n\t\t\tthis.border = 0;\n\t\t}\n\t\t\n\t\t// Store the available page area\n\t\tvar availableWidth = this.pageFormat.width - (this.border * 2);\n\t\tvar availableHeight = this.pageFormat.height - (this.border * 2);\n\t\n\t\t// Adds margins to page format\n\t\tthis.pageFormat.height += this.marginTop + this.marginBottom;\n\n\t\t// Compute the unscaled, untranslated bounds to find\n\t\t// the number of vertical and horizontal pages\n\t\tbounds.width /= sc;\n\t\tbounds.height /= sc;\n\n\t\tvar hpages = Math.max(1, Math.ceil((bounds.width + this.x0) / availableWidth));\n\t\tvar vpages = Math.max(1, Math.ceil((bounds.height + this.y0) / availableHeight));\n\t\tthis.pageCount = hpages * vpages;\n\t\t\n\t\tvar writePageSelector = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.pageSelector && (vpages > 1 || hpages > 1))\n\t\t\t{\n\t\t\t\tvar table = this.createPageSelector(vpages, hpages);\n\t\t\t\tdoc.body.appendChild(table);\n\t\t\t\t\n\t\t\t\t// Implements position: fixed in IE quirks mode\n\t\t\t\tif (mxClient.IS_IE && doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7)\n\t\t\t\t{\n\t\t\t\t\ttable.style.position = 'absolute';\n\t\t\t\t\t\n\t\t\t\t\tvar update = function()\n\t\t\t\t\t{\n\t\t\t\t\t\ttable.style.top = ((doc.body.scrollTop || doc.documentElement.scrollTop) + 10) + 'px';\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'scroll', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'resize', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar addPage = mxUtils.bind(this, function(div, addBreak)\n\t\t{\n\t\t\t// Border of the DIV (aka page) inside the document\n\t\t\tif (this.borderColor != null)\n\t\t\t{\n\t\t\t\tdiv.style.borderColor = this.borderColor;\n\t\t\t\tdiv.style.borderStyle = 'solid';\n\t\t\t\tdiv.style.borderWidth = '1px';\n\t\t\t}\n\t\t\t\n\t\t\t// Needs to be assigned directly because IE doesn't support\n\t\t\t// child selectors, eg. body > div { background: white; }\n\t\t\tdiv.style.background = this.backgroundColor;\n\t\t\t\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tdiv.style.pageBreakAfter = 'always';\n\t\t\t}\n\n\t\t\t// NOTE: We are dealing with cross-window DOM here, which\n\t\t\t// is a problem in IE, so we copy the HTML markup instead.\n\t\t\t// The underlying problem is that the graph display markup\n\t\t\t// creation (in mxShape, mxGraphView) is hardwired to using\n\t\t\t// document.createElement and hence we must use this document\n\t\t\t// to create the complete page and then copy it over to the\n\t\t\t// new window.document. This can be fixed later by using the\n\t\t\t// ownerDocument of the container in mxShape and mxGraphView.\n\t\t\tif (isNewWindow && (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE))\n\t\t\t{\n\t\t\t\t// For some obscure reason, removing the DIV from the\n\t\t\t\t// parent before fetching its outerHTML has missing\n\t\t\t\t// fillcolor properties and fill children, so the div\n\t\t\t\t// must be removed afterwards to keep the fillcolors.\n\t\t\t\tdoc.writeln(div.outerHTML);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse if (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE)\n\t\t\t{\n\t\t\t\tvar clone = doc.createElement('div');\n\t\t\t\tclone.innerHTML = div.outerHTML;\n\t\t\t\tclone = clone.getElementsByTagName('div')[0];\n\t\t\t\tdoc.body.appendChild(clone);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tthis.addPageBreak(doc);\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar cov = this.getCoverPages(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\tif (cov != null)\n\t\t{\n\t\t\tfor (var i = 0; i < cov.length; i++)\n\t\t\t{\n\t\t\t\taddPage(cov[i], true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar apx = this.getAppendices(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\t// Appends each page to the page output for printing, making\n\t\t// sure there will be a page break after each page (ie. div)\n\t\tfor (var i = 0; i < vpages; i++)\n\t\t{\n\t\t\tvar dy = i * availableHeight / this.scale - this.y0 / this.scale +\n\t\t\t\t\t(bounds.y - tr.y * currentScale) / currentScale;\n\t\t\t\n\t\t\tfor (var j = 0; j < hpages; j++)\n\t\t\t{\n\t\t\t\tif (this.wnd == null)\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = j * availableWidth / this.scale - this.x0 / this.scale +\n\t\t\t\t\t\t(bounds.x - tr.x * currentScale) / currentScale;\n\t\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\t\tvar clip = new mxRectangle(dx, dy, availableWidth, availableHeight);\n\t\t\t\tdiv = this.renderPage(this.pageFormat.width, this.pageFormat.height, 0, 0, mxUtils.bind(this, function(div)\n\t\t\t\t{\n\t\t\t\t\tthis.addGraphFragment(-dx, -dy, this.scale, pageNum, div, clip);\n\t\t\t\t\t\n\t\t\t\t\tif (this.printBackgroundImage)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.insertBackgroundImage(div, -dx, -dy);\n\t\t\t\t\t}\n\t\t\t\t}), pageNum);\n\n\t\t\t\t// Gives the page a unique ID for later accessing the page\n\t\t\t\tdiv.setAttribute('id', 'mxPage-'+pageNum);\n\n\t\t\t\taddPage(div, apx != null || i < vpages - 1 || j < hpages - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (apx != null)\n\t\t{\n\t\t\tfor (var i = 0; i < apx.length; i++)\n\t\t\t{\n\t\t\t\taddPage(apx[i], i < apx.length - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (isNewWindow && !keepOpen)\n\t\t{\n\t\t\tthis.closeDocument();\n\t\t\twritePageSelector();\n\t\t}\n\t\t\n\t\tthis.wnd.focus();\n\t}\n\tcatch (e)\n\t{\n\t\t// Removes the DIV from the document in case of an error\n\t\tif (div != null && div.parentNode != null)\n\t\t{\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.cellRenderer.initializeOverlay = previousInitializeOverlay;\n\t}\n\n\treturn this.wnd;\n};\n\n/**\n * Function: addPageBreak\n * \n * Adds a page break to the given document.\n */\nmxPrintPreview.prototype.addPageBreak = function(doc)\n{\n\tvar hr = doc.createElement('hr');\n\thr.className = 'mxPageBreak';\n\tdoc.body.appendChild(hr);\n};\n\n/**\n * Function: closeDocument\n * \n * Writes the closing tags for body and page after calling <writePostfix>.\n */\nmxPrintPreview.prototype.closeDocument = function()\n{\n\ttry\n\t{\n\t\tif (this.wnd != null && this.wnd.document != null)\n\t\t{\n\t\t\tvar doc = this.wnd.document;\n\t\t\t\n\t\t\tthis.writePostfix(doc);\n\t\t\tdoc.writeln('</body>');\n\t\t\tdoc.writeln('</html>');\n\t\t\tdoc.close();\n\t\t\t\n\t\t\t// Removes all event handlers in the print output\n\t\t\tmxEvent.release(doc.body);\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore any errors resulting from wnd no longer being available\n\t}\n};\n\n/**\n * Function: writeHead\n * \n * Writes the HEAD section into the given document, without the opening\n * and closing HEAD tags.\n */\nmxPrintPreview.prototype.writeHead = function(doc, css)\n{\n\tif (this.title != null)\n\t{\n\t\tdoc.writeln('<title>' + this.title + '</title>');\n\t}\n\t\n\t// Adds required namespaces\n\tif (mxClient.IS_VML)\n\t{\n\t\tdoc.writeln('<style type=\"text/css\">v\\\\:*{behavior:url(#default#VML)}o\\\\:*{behavior:url(#default#VML)}</style>');\n\t}\n\n\t// Adds all required stylesheets\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css', doc);\n\n\t// Removes horizontal rules and page selector from print output\n\tdoc.writeln('<style type=\"text/css\">');\n\tdoc.writeln('@media print {');\n\tdoc.writeln('  * { -webkit-print-color-adjust: exact; }');\n\tdoc.writeln('  table.mxPageSelector { display: none; }');\n\tdoc.writeln('  hr.mxPageBreak { display: none; }');\n\tdoc.writeln('}');\n\tdoc.writeln('@media screen {');\n\t\n\t// NOTE: position: fixed is not supported in IE, so the page selector\n\t// position (absolute) needs to be updated in IE (see below)\n\tdoc.writeln('  table.mxPageSelector { position: fixed; right: 10px; top: 10px;' +\n\t\t\t'font-family: Arial; font-size:10pt; border: solid 1px darkgray;' +\n\t\t\t'background: white; border-collapse:collapse; }');\n\tdoc.writeln('  table.mxPageSelector td { border: solid 1px gray; padding:4px; }');\n\tdoc.writeln('  body.mxPage { background: gray; }');\n\tdoc.writeln('}');\n\t\n\tif (css != null)\n\t{\n\t\tdoc.writeln(css);\n\t}\n\t\n\tdoc.writeln('</style>');\n};\n\n/**\n * Function: writePostfix\n * \n * Called before closing the body of the page. This implementation is empty.\n */\nmxPrintPreview.prototype.writePostfix = function(doc)\n{\n\t// empty\n};\n\n/**\n * Function: createPageSelector\n * \n * Creates the page selector table.\n */\nmxPrintPreview.prototype.createPageSelector = function(vpages, hpages)\n{\n\tvar doc = this.wnd.document;\n\tvar table = doc.createElement('table');\n\ttable.className = 'mxPageSelector';\n\ttable.setAttribute('border', '0');\n\n\tvar tbody = doc.createElement('tbody');\n\t\n\tfor (var i = 0; i < vpages; i++)\n\t{\n\t\tvar row = doc.createElement('tr');\n\t\t\n\t\tfor (var j = 0; j < hpages; j++)\n\t\t{\n\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\tvar cell = doc.createElement('td');\n\t\t\tvar a = doc.createElement('a');\n\t\t\ta.setAttribute('href', '#mxPage-' + pageNum);\n\n\t\t\t// Workaround for FF where the anchor is appended to the URL of the original document\n\t\t\tif (mxClient.IS_NS && !mxClient.IS_SF && !mxClient.IS_GC)\n\t\t\t{\n\t\t\t\tvar js = 'var page = document.getElementById(\\'mxPage-' + pageNum + '\\');page.scrollIntoView(true);event.preventDefault();';\n\t\t\t\ta.setAttribute('onclick', js);\n\t\t\t}\n\t\t\t\n\t\t\tmxUtils.write(a, pageNum, doc);\n\t\t\tcell.appendChild(a);\n\t\t\trow.appendChild(cell);\n\t\t}\n\t\t\n\t\ttbody.appendChild(row);\n\t}\n\t\n\ttable.appendChild(tbody);\n\t\n\treturn table;\n};\n\n/**\n * Function: renderPage\n * \n * Creates a DIV that prints a single page of the given\n * graph using the given scale and returns the DIV that\n * represents the page.\n * \n * Parameters:\n * \n * w - Width of the page in pixels.\n * h - Height of the page in pixels.\n * dx - Optional horizontal page offset in pixels (used internally).\n * dy - Optional vertical page offset in pixels (used internally).\n * content - Callback that adds the HTML content to the inner div of a page.\n * Takes the inner div as the argument.\n * pageNumber - Integer representing the page number.\n */\nmxPrintPreview.prototype.renderPage = function(w, h, dx, dy, content, pageNumber)\n{\n\tvar doc = this.wnd.document;\n\tvar div = document.createElement('div');\n\tvar arg = null;\n\n\ttry\n\t{\n\t\t// Workaround for ignored clipping in IE 9 standards\n\t\t// when printing with page breaks and HTML labels.\n\t\tif (dx != 0 || dy != 0)\n\t\t{\n\t\t\tdiv.style.position = 'relative';\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.position = 'relative';\n\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\t\t\t\n\t\t\tvar viewport = document.createElement('div');\n\t\t\tviewport.style.position = 'relative';\n\t\t\tviewport.style.marginLeft = dx + 'px';\n\t\t\tviewport.style.marginTop = dy + 'px';\n\n\t\t\t// FIXME: IE8 standards output problems\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t\tviewport.style.position = 'absolute';\n\t\t\t}\n\t\t\n\t\t\tif (doc.documentMode == 10)\n\t\t\t{\n\t\t\t\tviewport.style.width = '100%';\n\t\t\t\tviewport.style.height = '100%';\n\t\t\t}\n\t\t\t\n\t\t\tinnerDiv.appendChild(viewport);\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = viewport;\n\t\t}\n\t\t// FIXME: IE10/11 too many pages\n\t\telse\n\t\t{\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.overflow = 'hidden';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\t// IE8 uses above branch currently\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tdiv.style.position = 'relative';\n\t\t\t}\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\n\t\t\tif (mxClient.IS_IE && (doc.documentMode == null || doc.documentMode == 5 ||\n\t\t\t\tdoc.documentMode == 8 || doc.documentMode == 7))\n\t\t\t{\n\t\t\t\tinnerDiv.style.marginTop = this.border + 'px';\n\t\t\t\tinnerDiv.style.marginLeft = this.border + 'px';\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\t}\n\t\n\t\t\tif (this.graph.dialect == mxConstants.DIALECT_VML)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t}\n\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = innerDiv;\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\tdiv.parentNode.removeChild(div);\n\t\tdiv = null;\n\t\t\n\t\tthrow e;\n\t}\n\n\tcontent(arg);\n\t \n\treturn div;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root cell for painting the graph.\n */\nmxPrintPreview.prototype.getRoot = function()\n{\n\tvar root = this.graph.view.currentRoot;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.graph.getModel().getRoot();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: useCssTransforms\n * \n * Returns true if CSS transforms should be used for scaling content.\n * This returns true if foreignObject is supported and we're not in Safari\n * as it has clipping bugs for transformed CSS content with foreignObjects.\n */\nmxPrintPreview.prototype.useCssTransforms = function()\n{\n\treturn !mxClient.NO_FO && !mxClient.IS_SF;\n};\n\n/**\n * Function: addGraphFragment\n * \n * Adds a graph fragment to the given div.\n * \n * Parameters:\n * \n * dx - Horizontal translation for the diagram.\n * dy - Vertical translation for the diagram.\n * scale - Scale for the diagram.\n * pageNumber - Number of the page to be rendered.\n * div - Div that contains the output.\n * clip - Contains the clipping rectangle as an <mxRectangle>.\n */\nmxPrintPreview.prototype.addGraphFragment = function(dx, dy, scale, pageNumber, div, clip)\n{\n\tvar view = this.graph.getView();\n\tvar previousContainer = this.graph.container;\n\tthis.graph.container = div;\n\t\n\tvar canvas = view.getCanvas();\n\tvar backgroundPane = view.getBackgroundPane();\n\tvar drawPane = view.getDrawPane();\n\tvar overlayPane = view.getOverlayPane();\n\tvar realScale = scale;\n\n\tif (this.graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tview.createSvg();\n\t\t\n\t\t// Uses CSS transform for scaling\n\t\tif (this.useCssTransforms())\n\t\t{\n\t\t\tvar g = view.getDrawPane().parentNode;\n\t\t\tvar prev = g.getAttribute('transform');\n\t\t\tg.setAttribute('transformOrigin', '0 0');\n\t\t\tg.setAttribute('transform', 'scale(' + scale + ',' + scale + ')' +\n\t\t\t\t'translate(' + dx + ',' + dy + ')');\n\t\t\t\n\t\t\tscale = 1;\n\t\t\tdx = 0;\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse if (this.graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tview.createVml();\n\t}\n\telse\n\t{\n\t\tview.createHtml();\n\t}\n\t\n\t// Disables events on the view\n\tvar eventsEnabled = view.isEventsEnabled();\n\tview.setEventsEnabled(false);\n\t\n\t// Disables the graph to avoid cursors\n\tvar graphEnabled = this.graph.isEnabled();\n\tthis.graph.setEnabled(false);\n\n\t// Resets the translation\n\tvar translate = view.getTranslate();\n\tview.translate = new mxPoint(dx, dy);\n\t\n\t// Redraws only states that intersect the clip\n\tvar redraw = this.graph.cellRenderer.redraw;\n\tvar states = view.states;\n\tvar s = view.scale;\n\n\t// Gets the transformed clip for intersection check below\n\tif (this.clipping)\n\t{\n\t\tvar tempClip = new mxRectangle((clip.x + translate.x) * s, (clip.y + translate.y) * s,\n\t\t\t\tclip.width * s / realScale, clip.height * s / realScale);\n\n\t\t// Checks clipping rectangle for speedup\n\t\t// Must create terminal states for edge clipping even if terminal outside of clip\n\t\tthis.graph.cellRenderer.redraw = function(state, force, rendering)\n\t\t{\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\t// Gets original state from graph to find bounding box\n\t\t\t\tvar orig = states.get(state.cell);\n\t\t\t\t\n\t\t\t\tif (orig != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = view.getBoundingBox(orig, false);\n\t\t\t\t\t\n\t\t\t\t\t// Stops rendering if outside clip for speedup but ignores\n\t\t\t\t\t// edge labels where width and height is set to 0\n\t\t\t\t\tif (bbox != null && bbox.width > 0 && bbox.height > 0 &&\n\t\t\t\t\t\t!mxUtils.intersects(tempClip, bbox))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tredraw.apply(this, arguments);\n\t\t};\n\t}\n\t\n\tvar temp = null;\n\t\n\ttry\n\t{\n\t\t// Creates the temporary cell states in the view and\n\t\t// draws them onto the temporary DOM nodes in the view\n\t\tvar cells = [this.getRoot()];\n\t\ttemp = new mxTemporaryCellStates(view, scale, cells, null, mxUtils.bind(this, function(state)\n\t\t{\n\t\t\treturn this.getLinkForCellState(state);\n\t\t}));\n\t}\n\tfinally\n\t{\n\t\t// Removes overlay pane with selection handles\n\t\t// controls and icons from the print output\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tview.overlayPane.innerHTML = '';\n\t\t\tview.canvas.style.overflow = 'hidden';\n\t\t\tview.canvas.style.position = 'relative';\n\t\t\tview.canvas.style.top = this.marginTop + 'px';\n\t\t\tview.canvas.style.width = clip.width + 'px';\n\t\t\tview.canvas.style.height = clip.height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Removes everything but the SVG node\n\t\t\tvar tmp = div.firstChild;\n\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\tvar next = tmp.nextSibling;\n\t\t\t\tvar name = tmp.nodeName.toLowerCase();\n\n\t\t\t\t// Note: Width and height are required in FF 11\n\t\t\t\tif (name == 'svg')\n\t\t\t\t{\n\t\t\t\t\ttmp.style.overflow = 'hidden';\n\t\t\t\t\ttmp.style.position = 'relative';\n\t\t\t\t\ttmp.style.top = this.marginTop + 'px';\n\t\t\t\t\ttmp.setAttribute('width', clip.width);\n\t\t\t\t\ttmp.setAttribute('height', clip.height);\n\t\t\t\t\ttmp.style.width = '';\n\t\t\t\t\ttmp.style.height = '';\n\t\t\t\t}\n\t\t\t\t// Tries to fetch all text labels and only text labels\n\t\t\t\telse if (tmp.style.cursor != 'default' && name != 'div')\n\t\t\t\t{\n\t\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp = next;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Puts background image behind SVG output\n\t\tif (this.printBackgroundImage)\n\t\t{\n\t\t\tvar svgs = div.getElementsByTagName('svg');\n\t\t\t\n\t\t\tif (svgs.length > 0)\n\t\t\t{\n\t\t\t\tsvgs[0].style.position = 'absolute';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Completely removes the overlay pane to remove more handles\n\t\tview.overlayPane.parentNode.removeChild(view.overlayPane);\n\n\t\t// Restores the state of the view\n\t\tthis.graph.setEnabled(graphEnabled);\n\t\tthis.graph.container = previousContainer;\n\t\tthis.graph.cellRenderer.redraw = redraw;\n\t\tview.canvas = canvas;\n\t\tview.backgroundPane = backgroundPane;\n\t\tview.drawPane = drawPane;\n\t\tview.overlayPane = overlayPane;\n\t\tview.translate = translate;\n\t\ttemp.destroy();\n\t\tview.setEventsEnabled(eventsEnabled);\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state. This returns null.\n */\nmxPrintPreview.prototype.getLinkForCellState = function(state)\n{\n\treturn this.graph.getLinkForCell(state.cell);\n};\n\n/**\n * Function: insertBackgroundImage\n * \n * Inserts the background image into the given div.\n */\nmxPrintPreview.prototype.insertBackgroundImage = function(div, dx, dy)\n{\n\tvar bg = this.graph.backgroundImage;\n\t\n\tif (bg != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.style.position = 'absolute';\n\t\timg.style.marginLeft = Math.round(dx * this.scale) + 'px';\n\t\timg.style.marginTop = Math.round(dy * this.scale) + 'px';\n\t\timg.setAttribute('width', Math.round(this.scale * bg.width));\n\t\timg.setAttribute('height', Math.round(this.scale * bg.height));\n\t\timg.src = bg.src;\n\t\t\n\t\tdiv.insertBefore(img, div.firstChild);\n\t}\n};\n\n/**\n * Function: getCoverPages\n * \n * Returns the pages to be added before the print output. This returns null.\n */\nmxPrintPreview.prototype.getCoverPages = function()\n{\n\treturn null;\n};\n\n/**\n * Function: getAppendices\n * \n * Returns the pages to be added after the print output. This returns null.\n */\nmxPrintPreview.prototype.getAppendices = function()\n{\n\treturn null;\n};\n\n/**\n * Function: print\n * \n * Opens the print preview and shows the print dialog.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n */\nmxPrintPreview.prototype.print = function(css)\n{\n\tvar wnd = this.open(css);\n\t\n\tif (wnd != null)\n\t{\n\t\twnd.print();\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the print preview window.\n */\nmxPrintPreview.prototype.close = function()\n{\n\tif (this.wnd != null)\n\t{\n\t\tthis.wnd.close();\n\t\tthis.wnd = null;\n\t}\n};\n\n__mxOutput.mxPrintPreview = typeof mxPrintPreview !== 'undefined' ? mxPrintPreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheet\n *\n * Defines the appearance of the cells in a graph. See <putCellStyle> for an\n * example of creating a new cell style. It is recommended to use objects, not\n * arrays for holding cell styles. Existing styles can be cloned using\n * <mxUtils.clone> and turned into a string for debugging using\n * <mxUtils.toString>.\n *\n * Default Styles:\n *\n * The stylesheet contains two built-in styles, which are used if no style is\n * defined for a cell:\n *\n *   defaultVertex - Default style for vertices\n *   defaultEdge - Default style for edges\n *\n * Example:\n *\n * (code)\n * var vertexStyle = stylesheet.getDefaultVertexStyle();\n * vertexStyle[mxConstants.STYLE_ROUNDED] = true;\n * var edgeStyle = stylesheet.getDefaultEdgeStyle();\n * edgeStyle[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\n * (end)\n *\n * Modifies the built-in default styles.\n *\n * To avoid the default style for a cell, add a leading semicolon\n * to the style definition, eg.\n *\n * (code)\n * ;shadow=1\n * (end)\n *\n * Removing keys:\n *\n * For removing a key in a cell style of the form [stylename;|key=value;] the\n * special value none can be used, eg. highlight;fillColor=none\n *\n * See also the helper methods in mxUtils to modify strings of this format,\n * namely <mxUtils.setStyle>, <mxUtils.indexOfStylename>,\n * <mxUtils.addStylename>, <mxUtils.removeStylename>,\n * <mxUtils.removeAllStylenames> and <mxUtils.setStyleFlag>.\n *\n * Constructor: mxStylesheet\n *\n * Constructs a new stylesheet and assigns default styles.\n */\nfunction mxStylesheet()\n{\n\tthis.styles = new Object();\n\n\tthis.putDefaultVertexStyle(this.createDefaultVertexStyle());\n\tthis.putDefaultEdgeStyle(this.createDefaultEdgeStyle());\n};\n\n/**\n * Function: styles\n *\n * Maps from names to cell styles. Each cell style is a map of key,\n * value pairs.\n */\nmxStylesheet.prototype.styles;\n\n/**\n * Function: createDefaultVertexStyle\n *\n * Creates and returns the default vertex style.\n */\nmxStylesheet.prototype.createDefaultVertexStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n\tstyle[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_FILLCOLOR] = '#C3D9FF';\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#774400';\n\n\treturn style;\n};\n\n/**\n * Function: createDefaultEdgeStyle\n *\n * Creates and returns the default edge style.\n */\nmxStylesheet.prototype.createDefaultEdgeStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_CONNECTOR;\n\tstyle[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#446299';\n\n\treturn style;\n};\n\n/**\n * Function: putDefaultVertexStyle\n *\n * Sets the default style for vertices using defaultVertex as the\n * stylename.\n *\n * Parameters:\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putDefaultVertexStyle = function(style)\n{\n\tthis.putCellStyle('defaultVertex', style);\n};\n\n/**\n * Function: putDefaultEdgeStyle\n *\n * Sets the default style for edges using defaultEdge as the stylename.\n */\nmxStylesheet.prototype.putDefaultEdgeStyle = function(style)\n{\n\tthis.putCellStyle('defaultEdge', style);\n};\n\n/**\n * Function: getDefaultVertexStyle\n *\n * Returns the default style for vertices.\n */\nmxStylesheet.prototype.getDefaultVertexStyle = function()\n{\n\treturn this.styles['defaultVertex'];\n};\n\n/**\n * Function: getDefaultEdgeStyle\n *\n * Sets the default style for edges.\n */\nmxStylesheet.prototype.getDefaultEdgeStyle = function()\n{\n\treturn this.styles['defaultEdge'];\n};\n\n/**\n * Function: putCellStyle\n *\n * Stores the given map of key, value pairs under the given name in\n * <styles>.\n *\n * Example:\n *\n * The following example adds a new style called 'rounded' into an\n * existing stylesheet:\n *\n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n * style[mxConstants.STYLE_ROUNDED] = true;\n * graph.getStylesheet().putCellStyle('rounded', style);\n * (end)\n *\n * In the above example, the new style is an object. The possible keys of\n * the object are all the constants in <mxConstants> that start with STYLE\n * and the values are either JavaScript objects, such as\n * <mxPerimeter.RightAngleRectanglePerimeter> (which is in fact a function)\n * or expressions, such as true. Note that not all keys will be\n * interpreted by all shapes (eg. the line shape ignores the fill color).\n * The final call to this method associates the style with a name in the\n * stylesheet. The style is used in a cell with the following code:\n *\n * (code)\n * model.setStyle(cell, 'rounded');\n * (end)\n *\n * Parameters:\n *\n * name - Name for the style to be stored.\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putCellStyle = function(name, style)\n{\n\tthis.styles[name] = style;\n};\n\n/**\n * Function: getCellStyle\n *\n * Returns the cell style for the specified stylename or the given\n * defaultStyle if no style can be found for the given stylename.\n *\n * Parameters:\n *\n * name - String of the form [(stylename|key=value);] that represents the\n * style.\n * defaultStyle - Default style to be returned if no style can be found.\n */\nmxStylesheet.prototype.getCellStyle = function(name, defaultStyle)\n{\n\tvar style = defaultStyle;\n\n\tif (name != null && name.length > 0)\n\t{\n\t\tvar pairs = name.split(';');\n\n\t\tif (style != null &&\n\t\t\tname.charAt(0) != ';')\n\t\t{\n\t\t\tstyle = mxUtils.clone(style);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle = new Object();\n\t\t}\n\n\t\t// Parses each key, value pair into the existing style\n\t \tfor (var i = 0; i < pairs.length; i++)\n\t \t{\n\t \t\tvar tmp = pairs[i];\n\t \t\tvar pos = tmp.indexOf('=');\n\n\t \t\tif (pos >= 0)\n\t \t\t{\n\t\t \t\tvar key = tmp.substring(0, pos);\n\t\t \t\tvar value = tmp.substring(pos + 1);\n\n\t\t \t\tif (value == mxConstants.NONE)\n\t\t \t\t{\n\t\t \t\t\tdelete style[key];\n\t\t \t\t}\n\t\t \t\telse if (mxUtils.isNumeric(value))\n\t\t \t\t{\n\t\t \t\t\tstyle[key] = parseFloat(value);\n\t\t \t\t}\n\t\t \t\telse\n\t\t \t\t{\n\t\t\t \t\tstyle[key] = value;\n\t\t \t\t}\n\t\t\t}\n\t \t\telse\n\t \t\t{\n\t \t\t\t// Merges the entries from a named style\n\t\t\t\tvar tmpStyle = this.styles[tmp];\n\n\t\t\t\tif (tmpStyle != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var key in tmpStyle)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle[key] = tmpStyle[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t \t\t}\n\t\t}\n\t}\n\n\treturn style;\n};\n\n__mxOutput.mxStylesheet = typeof mxStylesheet !== 'undefined' ? mxStylesheet : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellState\n * \n * Represents the current state of a cell in a given <mxGraphView>.\n * \n * For edges, the edge label position is stored in <absoluteOffset>.\n * \n * The size for oversize labels can be retrieved using the boundingBox property\n * of the <text> field as shown below.\n * \n * (code)\n * var bbox = (state.text != null) ? state.text.boundingBox : null;\n * (end)\n * \n * Constructor: mxCellState\n * \n * Constructs a new object that represents the current state of the given\n * cell in the specified view.\n * \n * Parameters:\n * \n * view - <mxGraphView> that contains the state.\n * cell - <mxCell> that this state represents.\n * style - Array of key, value pairs that constitute the style.\n */\nfunction mxCellState(view, cell, style)\n{\n\tthis.view = view;\n\tthis.cell = cell;\n\tthis.style = (style != null) ? style : {};\n\t\n\tthis.origin = new mxPoint();\n\tthis.absoluteOffset = new mxPoint();\n};\n\n/**\n * Extends mxRectangle.\n */\nmxCellState.prototype = new mxRectangle();\nmxCellState.prototype.constructor = mxCellState;\n\n/**\n * Variable: view\n * \n * Reference to the enclosing <mxGraphView>.\n */\nmxCellState.prototype.view = null;\n\n/**\n * Variable: cell\n *\n * Reference to the <mxCell> that is represented by this state.\n */\nmxCellState.prototype.cell = null;\n\n/**\n * Variable: style\n * \n * Contains an array of key, value pairs that represent the style of the\n * cell.\n */\nmxCellState.prototype.style = null;\n\n/**\n * Variable: invalidStyle\n * \n * Specifies if the style is invalid. Default is false.\n */\nmxCellState.prototype.invalidStyle = false;\n\n/**\n * Variable: invalid\n * \n * Specifies if the state is invalid. Default is true.\n */\nmxCellState.prototype.invalid = true;\n\n/**\n * Variable: origin\n *\n * <mxPoint> that holds the origin for all child cells. Default is a new\n * empty <mxPoint>.\n */\nmxCellState.prototype.origin = null;\n\n/**\n * Variable: absolutePoints\n * \n * Holds an array of <mxPoints> that represent the absolute points of an\n * edge.\n */\nmxCellState.prototype.absolutePoints = null;\n\n/**\n * Variable: absoluteOffset\n *\n * <mxPoint> that holds the absolute offset. For edges, this is the\n * absolute coordinates of the label position. For vertices, this is the\n * offset of the label relative to the top, left corner of the vertex. \n */\nmxCellState.prototype.absoluteOffset = null;\n\n/**\n * Variable: visibleSourceState\n * \n * Caches the visible source terminal state.\n */\nmxCellState.prototype.visibleSourceState = null;\n\n/**\n * Variable: visibleTargetState\n * \n * Caches the visible target terminal state.\n */\nmxCellState.prototype.visibleTargetState = null;\n\n/**\n * Variable: terminalDistance\n * \n * Caches the distance between the end points for an edge.\n */\nmxCellState.prototype.terminalDistance = 0;\n\n/**\n * Variable: length\n *\n * Caches the length of an edge.\n */\nmxCellState.prototype.length = 0;\n\n/**\n * Variable: segments\n * \n * Array of numbers that represent the cached length of each segment of the\n * edge.\n */\nmxCellState.prototype.segments = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the cell graphically.\n */\nmxCellState.prototype.shape = null;\n\n/**\n * Variable: text\n * \n * Holds the <mxText> that represents the label of the cell. Thi smay be\n * null if the cell has no label.\n */\nmxCellState.prototype.text = null;\n\n/**\n * Variable: unscaledWidth\n * \n * Holds the unscaled width of the state.\n */\nmxCellState.prototype.unscaledWidth = null;\n\n/**\n * Variable: unscaledHeight\n * \n * Holds the unscaled height of the state.\n */\nmxCellState.prototype.unscaledHeight = null;\n\n/**\n * Function: getPerimeterBounds\n * \n * Returns the <mxRectangle> that should be used as the perimeter of the\n * cell.\n * \n * Parameters:\n * \n * border - Optional border to be added around the perimeter bounds.\n * bounds - Optional <mxRectangle> to be used as the initial bounds.\n */\nmxCellState.prototype.getPerimeterBounds = function(border, bounds)\n{\n\tborder = border || 0;\n\tbounds = (bounds != null) ? bounds : new mxRectangle(this.x, this.y, this.width, this.height);\n\t\n\tif (this.shape != null && this.shape.stencil != null && this.shape.stencil.aspect == 'fixed')\n\t{\n\t\tvar aspect = this.shape.stencil.computeAspect(this.style, bounds.x, bounds.y, bounds.width, bounds.height);\n\t\t\n\t\tbounds.x = aspect.x;\n\t\tbounds.y = aspect.y;\n\t\tbounds.width = this.shape.stencil.w0 * aspect.width;\n\t\tbounds.height = this.shape.stencil.h0 * aspect.height;\n\t}\n\t\n\tif (border != 0)\n\t{\n\t\tbounds.grow(border);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: setAbsoluteTerminalPoint\n * \n * Sets the first or last point in <absolutePoints> depending on isSource.\n * \n * Parameters:\n * \n * point - <mxPoint> that represents the terminal point.\n * isSource - Boolean that specifies if the first or last point should\n * be assigned.\n */\nmxCellState.prototype.setAbsoluteTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t}\n\t\t\n\t\tif (this.absolutePoints.length == 0)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[0] = point;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t\tthis.absolutePoints.push(null);\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse if (this.absolutePoints.length == 1)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[this.absolutePoints.length - 1] = point;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the given cursor on the shape and text shape.\n */\nmxCellState.prototype.setCursor = function(cursor)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.setCursor(cursor);\n\t}\n\t\n\tif (this.text != null)\n\t{\n\t\tthis.text.setCursor(cursor);\n\t}\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Returns the visible source or target terminal cell.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target cell should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminal = function(source)\n{\n\tvar tmp = this.getVisibleTerminalState(source);\n\t\n\treturn (tmp != null) ? tmp.cell : null;\n};\n\n/**\n * Function: getVisibleTerminalState\n * \n * Returns the visible source or target terminal state.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target state should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminalState = function(source)\n{\n\treturn (source) ? this.visibleSourceState : this.visibleTargetState;\n};\n\n/**\n * Function: setVisibleTerminalState\n * \n * Sets the visible source or target terminal state.\n * \n * Parameters:\n * \n * terminalState - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the source or target state should be set.\n */\nmxCellState.prototype.setVisibleTerminalState = function(terminalState, source)\n{\n\tif (source)\n\t{\n\t\tthis.visibleSourceState = terminalState;\n\t}\n\telse\n\t{\n\t\tthis.visibleTargetState = terminalState;\n\t}\n};\n\n/**\n * Function: getCellBounds\n * \n * Returns the unscaled, untranslated bounds.\n */\nmxCellState.prototype.getCellBounds = function()\n{\n\treturn this.cellBounds;\n};\n\n/**\n * Function: getPaintBounds\n * \n * Returns the unscaled, untranslated paint bounds. This is the same as\n * <getCellBounds> but with a 90 degree rotation if the shape's\n * isPaintBoundsInverted returns true.\n */\nmxCellState.prototype.getPaintBounds = function()\n{\n\treturn this.paintBounds;\n};\n\n/**\n * Function: updateCachedBounds\n * \n * Updates the cellBounds and paintBounds.\n */\nmxCellState.prototype.updateCachedBounds = function()\n{\n\tvar tr = this.view.translate;\n\tvar s = this.view.scale;\n\tthis.cellBounds = new mxRectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n\tthis.paintBounds = mxRectangle.fromRectangle(this.cellBounds);\n\t\n\tif (this.shape != null && this.shape.isPaintBoundsInverted())\n\t{\n\t\tthis.paintBounds.rotate90();\n\t}\n};\n\n/**\n * Destructor: setState\n * \n * Copies all fields from the given state to this state.\n */\nmxCellState.prototype.setState = function(state)\n{\n\tthis.view = state.view;\n\tthis.cell = state.cell;\n\tthis.style = state.style;\n\tthis.absolutePoints = state.absolutePoints;\n\tthis.origin = state.origin;\n\tthis.absoluteOffset = state.absoluteOffset;\n\tthis.boundingBox = state.boundingBox;\n\tthis.terminalDistance = state.terminalDistance;\n\tthis.segments = state.segments;\n\tthis.length = state.length;\n\tthis.x = state.x;\n\tthis.y = state.y;\n\tthis.width = state.width;\n\tthis.height = state.height;\n\tthis.unscaledWidth = state.unscaledWidth;\n\tthis.unscaledHeight = state.unscaledHeight;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxCellState.prototype.clone = function()\n{\n \tvar clone = new mxCellState(this.view, this.cell, this.style);\n\n\t// Clones the absolute points\n\tif (this.absolutePoints != null)\n\t{\n\t\tclone.absolutePoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.absolutePoints.length; i++)\n\t\t{\n\t\t\tclone.absolutePoints[i] = this.absolutePoints[i].clone();\n\t\t}\n\t}\n\n\tif (this.origin != null)\n\t{\n\t\tclone.origin = this.origin.clone();\n\t}\n\n\tif (this.absoluteOffset != null)\n\t{\n\t\tclone.absoluteOffset = this.absoluteOffset.clone();\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tclone.boundingBox = this.boundingBox.clone();\n\t}\n\n\tclone.terminalDistance = this.terminalDistance;\n\tclone.segments = this.segments;\n\tclone.length = this.length;\n\tclone.x = this.x;\n\tclone.y = this.y;\n\tclone.width = this.width;\n\tclone.height = this.height;\n\tclone.unscaledWidth = this.unscaledWidth;\n\tclone.unscaledHeight = this.unscaledHeight;\n\t\n\treturn clone;\n};\n\n/**\n * Destructor: destroy\n * \n * Destroys the state and all associated resources.\n */\nmxCellState.prototype.destroy = function()\n{\n\tthis.view.graph.cellRenderer.destroy(this);\n};\n\n__mxOutput.mxCellState = typeof mxCellState !== 'undefined' ? mxCellState : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphSelectionModel\n *\n * Implements the selection model for a graph. Here is a listener that handles\n * all removed selection cells.\n * \n * (code)\n * graph.getSelectionModel().addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var cells = evt.getProperty('added');\n *   \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     // Handle cells[i]...\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the selection was changed in <changeSelection>. The\n * <code>edit</code> property contains the <mxUndoableEdit> which contains the\n * <mxSelectionChange>.\n * \n * Event: mxEvent.CHANGE\n * \n * Fires after the selection changes by executing an <mxSelectionChange>. The\n * <code>added</code> and <code>removed</code> properties contain arrays of\n * cells that have been added to or removed from the selection, respectively.\n * The names are inverted due to historic reasons. This cannot be changed.\n * \n * Constructor: mxGraphSelectionModel\n *\n * Constructs a new graph selection model for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphSelectionModel(graph)\n{\n\tthis.graph = graph;\n\tthis.cells = [];\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphSelectionModel.prototype = new mxEventSource();\nmxGraphSelectionModel.prototype.constructor = mxGraphSelectionModel;\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphSelectionModel.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Variable: updatingSelectionResource\n *\n * Specifies the resource key for the status message while the selection is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingSelection'.\n */\nmxGraphSelectionModel.prototype.updatingSelectionResource = (mxClient.language != 'none') ? 'updatingSelection' : '';\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphSelectionModel.prototype.graph = null;\n\n/**\n * Variable: singleSelection\n *\n * Specifies if only one selected item at a time is allowed.\n * Default is false.\n */\nmxGraphSelectionModel.prototype.singleSelection = false;\n\n/**\n * Function: isSingleSelection\n *\n * Returns <singleSelection> as a boolean.\n */\nmxGraphSelectionModel.prototype.isSingleSelection = function()\n{\n\treturn this.singleSelection;\n};\n\n/**\n * Function: setSingleSelection\n *\n * Sets the <singleSelection> flag.\n * \n * Parameters:\n * \n * singleSelection - Boolean that specifies the new value for\n * <singleSelection>.\n */\nmxGraphSelectionModel.prototype.setSingleSelection = function(singleSelection)\n{\n\tthis.singleSelection = singleSelection;\n};\n\n/**\n * Function: isSelected\n *\n * Returns true if the given <mxCell> is selected.\n */\nmxGraphSelectionModel.prototype.isSelected = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn mxUtils.indexOf(this.cells, cell) >= 0;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isEmpty\n *\n * Returns true if no cells are currently selected.\n */\nmxGraphSelectionModel.prototype.isEmpty = function()\n{\n\treturn this.cells.length == 0;\n};\n\n/**\n * Function: clear\n *\n * Clears the selection and fires a <change> event if the selection was not\n * empty.\n */\nmxGraphSelectionModel.prototype.clear = function()\n{\n\tthis.changeSelection(null, this.cells);\n};\n\n/**\n * Function: setCell\n *\n * Selects the specified <mxCell> using <setCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraphSelectionModel.prototype.setCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.setCells([cell]);\n\t}\n};\n\n/**\n * Function: setCells\n *\n * Selects the given array of <mxCells> and fires a <change> event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraphSelectionModel.prototype.setCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\t\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, this.cells);\n\t}\n};\n\n/**\n * Function: getFirstSelectableCell\n *\n * Returns the first selectable cell in the given array of cells.\n */\nmxGraphSelectionModel.prototype.getFirstSelectableCell = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\treturn cells[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: addCell\n * \n * Adds the given <mxCell> to the selection and fires a <select> event.\n * \n * Parameters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.addCells([cell]);\n\t}\n};\n\n/**\n * Function: addCells\n * \n * Adds the given array of <mxCells> to the selection and fires a <select>\n * event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar remove = null;\n\t\t\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tremove = this.cells;\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (!this.isSelected(cells[i]) &&\n\t\t\t\tthis.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, remove);\n\t}\n};\n\n/**\n * Function: removeCell\n *\n * Removes the specified <mxCell> from the selection and fires a <select>\n * event for the remaining cells.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.removeCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.removeCells([cell]);\n\t}\n};\n\n/**\n * Function: removeCells\n */\nmxGraphSelectionModel.prototype.removeCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSelected(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.changeSelection(null, tmp);\t\n\t}\n};\n\n/**\n * Function: changeSelection\n *\n * Adds/removes the specified arrays of <mxCell> to/from the selection.\n * \n * Parameters:\n * \n * added - Array of <mxCell> to add to the selection.\n * remove - Array of <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.changeSelection = function(added, removed)\n{\n\tif ((added != null &&\n\t\tadded.length > 0 &&\n\t\tadded[0] != null) ||\n\t\t(removed != null &&\n\t\tremoved.length > 0 &&\n\t\tremoved[0] != null))\n\t{\n\t\tvar change = new mxSelectionChange(this, added, removed);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, false);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t}\n};\n\n/**\n * Function: cellAdded\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n * \n * Paramters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null &&\n\t\t!this.isSelected(cell))\n\t{\n\t\tthis.cells.push(cell);\n\t}\n};\n\n/**\n * Function: cellRemoved\n *\n * Inner callback to remove the specified <mxCell> from the selection. No\n * event is fired in this implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar index = mxUtils.indexOf(this.cells, cell);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tthis.cells.splice(index, 1);\n\t\t}\n\t}\n};\n\n/**\n * Class: mxSelectionChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxSelectionChange(selectionModel, added, removed)\n{\n\tthis.selectionModel = selectionModel;\n\tthis.added = (added != null) ? added.slice() : null;\n\tthis.removed = (removed != null) ? removed.slice() : null;\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxSelectionChange.prototype.execute = function()\n{\n\tvar t0 = mxLog.enter('mxSelectionChange.execute');\n\twindow.status = mxResources.get(\n\t\tthis.selectionModel.updatingSelectionResource) ||\n\t\tthis.selectionModel.updatingSelectionResource;\n\n\tif (this.removed != null)\n\t{\n\t\tfor (var i = 0; i < this.removed.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellRemoved(this.removed[i]);\n\t\t}\n\t}\n\n\tif (this.added != null)\n\t{\n\t\tfor (var i = 0; i < this.added.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellAdded(this.added[i]);\n\t\t}\n\t}\n\t\n\tvar tmp = this.added;\n\tthis.added = this.removed;\n\tthis.removed = tmp;\n\n\twindow.status = mxResources.get(this.selectionModel.doneResource) ||\n\t\tthis.selectionModel.doneResource;\n\tmxLog.leave('mxSelectionChange.execute', t0);\n\t\n\tthis.selectionModel.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'added', this.added, 'removed', this.removed));\n};\n\n__mxOutput.mxGraphSelectionModel = typeof mxGraphSelectionModel !== 'undefined' ? mxGraphSelectionModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellEditor\n *\n * In-place editor for the graph. To control this editor, use\n * <mxGraph.invokesStopCellEditing>, <mxGraph.enterStopsCellEditing> and\n * <mxGraph.escapeEnabled>. If <mxGraph.enterStopsCellEditing> is true then\n * ctrl-enter or shift-enter can be used to create a linefeed. The F2 and\n * escape keys can always be used to stop editing.\n * \n * To customize the location of the textbox in the graph, override\n * <getEditorBounds> as follows:\n * \n * (code)\n * graph.cellEditor.getEditorBounds = function(state)\n * {\n *   var result = mxCellEditor.prototype.getEditorBounds.apply(this, arguments);\n *   \n *   if (this.graph.getModel().isEdge(state.cell))\n *   {\n *     result.x = state.getCenterX() - result.width / 2;\n *     result.y = state.getCenterY() - result.height / 2;\n *   }\n *   \n *   return result;\n * };\n * (end)\n * \n * Note that this hook is only called if <autoSize> is false. If <autoSize> is true,\n * then <mxShape.getLabelBounds> is used to compute the current bounds of the textbox.\n * \n * The textarea uses the mxCellEditor CSS class. You can modify this class in\n * your custom CSS. Note: You should modify the CSS after loading the client\n * in the page.\n *\n * Example:\n * \n * To only allow numeric input in the in-place editor, use the following code.\n *\n * (code)\n * var text = graph.cellEditor.textarea;\n * \n * mxEvent.addListener(text, 'keydown', function (evt)\n * {\n *   if (!(evt.keyCode >= 48 && evt.keyCode <= 57) &&\n *       !(evt.keyCode >= 96 && evt.keyCode <= 105))\n *   {\n *     mxEvent.consume(evt);\n *   }\n * }); \n * (end)\n * \n * Placeholder:\n * \n * To implement a placeholder for cells without a label, use the\n * <emptyLabelText> variable.\n * \n * Resize in Chrome:\n * \n * Resize of the textarea is disabled by default. If you want to enable\n * this feature extend <init> and set this.textarea.style.resize = ''.\n * \n * To start editing on a key press event, the container of the graph\n * should have focus or a focusable parent should be used to add the\n * key press handler as follows.\n * \n * (code)\n * mxEvent.addListener(graph.container, 'keypress', mxUtils.bind(this, function(evt)\n * {\n *   if (!graph.isEditing() && !graph.isSelectionEmpty() && evt.which !== 0 &&\n *       !mxEvent.isAltDown(evt) && !mxEvent.isControlDown(evt) && !mxEvent.isMetaDown(evt))\n *   {\n *     graph.startEditing();\n *     \n *     if (mxClient.IS_FF)\n *     {\n *       graph.cellEditor.textarea.value = String.fromCharCode(evt.which);\n *     }\n *   }\n * }));\n * (end)\n * \n * To allow focus for a DIV, and hence to receive key press events, some browsers\n * require it to have a valid tabindex attribute. In this case the following\n * code may be used to keep the container focused.\n * \n * (code)\n * var graphFireMouseEvent = graph.fireMouseEvent;\n * graph.fireMouseEvent = function(evtName, me, sender)\n * {\n *   if (evtName == mxEvent.MOUSE_DOWN)\n *   {\n *     this.container.focus();\n *   }\n *   \n *   graphFireMouseEvent.apply(this, arguments);\n * };\n * (end)\n *\n * Constructor: mxCellEditor\n *\n * Constructs a new in-place editor for the specified graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellEditor(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Stops editing after zoom changes\n\tthis.zoomHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (this.graph.isEditing())\n\t\t{\n\t\t\tthis.resize();\n\t\t}\n\t});\n\t\n\tthis.graph.view.addListener(mxEvent.SCALE, this.zoomHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.zoomHandler);\n\t\n\t// Adds handling of deleted cells while editing\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.editingCell != null && this.graph.getView().getState(this.editingCell) == null)\n\t\t{\n\t\t\tthis.stopEditing(true);\n\t\t}\n\t});\n\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellEditor.prototype.graph = null;\n\n/**\n * Variable: textarea\n *\n * Holds the DIV that is used for text editing. Note that this may be null before the first\n * edit. Instantiated in <init>.\n */\nmxCellEditor.prototype.textarea = null;\n\n/**\n * Variable: editingCell\n * \n * Reference to the <mxCell> that is currently being edited.\n */\nmxCellEditor.prototype.editingCell = null;\n\n/**\n * Variable: trigger\n * \n * Reference to the event that was used to start editing.\n */\nmxCellEditor.prototype.trigger = null;\n\n/**\n * Variable: modified\n * \n * Specifies if the label has been modified.\n */\nmxCellEditor.prototype.modified = false;\n\n/**\n * Variable: autoSize\n * \n * Specifies if the textarea should be resized while the text is being edited.\n * Default is true.\n */\nmxCellEditor.prototype.autoSize = true;\n\n/**\n * Variable: selectText\n * \n * Specifies if the text should be selected when editing starts. Default is\n * true.\n */\nmxCellEditor.prototype.selectText = true;\n\n/**\n * Variable: emptyLabelText\n * \n * Text to be displayed for empty labels. Default is '' or '<br>' in Firefox as\n * a workaround for the missing cursor bug for empty content editable. This can\n * be set to eg. \"[Type Here]\" to easier visualize editing of empty labels. The\n * value is only displayed before the first keystroke and is never used as the\n * actual editing value.\n */\nmxCellEditor.prototype.emptyLabelText = (mxClient.IS_FF) ? '<br>' : '';\n\n/**\n * Variable: escapeCancelsEditing\n * \n * If true, pressing the escape key will stop editing and not accept the new\n * value. Change this to false to accept the new value on escape, and cancel\n * editing on Shift+Escape instead. Default is true.\n */\nmxCellEditor.prototype.escapeCancelsEditing = true;\n\n/**\n * Variable: textNode\n * \n * Reference to the label DOM node that has been hidden.\n */\nmxCellEditor.prototype.textNode = '';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the textarea. Default is 5.\n */\nmxCellEditor.prototype.zIndex = 5;\n\n/**\n * Variable: minResize\n * \n * Defines the minimum width and height to be used in <resize>. Default is 0x20px.\n */\nmxCellEditor.prototype.minResize = new mxRectangle(0, 20);\n\n/**\n * Variable: wordWrapPadding\n * \n * Correction factor for word wrapping width. Default is 2 in quirks, 0 in IE\n * 11 and 1 in all other browsers and modes.\n */\nmxCellEditor.prototype.wordWrapPadding = (mxClient.IS_QUIRKS) ? 2 : (!mxClient.IS_IE11) ? 1 : 0;\n\n/**\n * Variable: blurEnabled\n *\n * If <focusLost> should be called if <textarea> loses the focus. Default is false.\n */\nmxCellEditor.prototype.blurEnabled = false;\n\n/**\n * Variable: initialValue\n * \n * Holds the initial editing value to check if the current value was modified.\n */\nmxCellEditor.prototype.initialValue = null;\n\n/**\n * Variable: align\n * \n * Holds the current temporary horizontal alignment for the cell style. If this\n * is modified then the current text alignment is changed and the cell style is\n * updated when the value is applied.\n */\nmxCellEditor.prototype.align = null;\n\n/**\n * Function: init\n *\n * Creates the <textarea> and installs the event listeners. The key handler\n * updates the <modified> state.\n */\nmxCellEditor.prototype.init = function ()\n{\n\tthis.textarea = document.createElement('div');\n\tthis.textarea.className = 'mxCellEditor mxPlainTextEditor';\n\tthis.textarea.contentEditable = true;\n\t\n\t// Workaround for selection outside of DIV if height is 0\n\tif (mxClient.IS_GC)\n\t{\n\t\tthis.textarea.style.minHeight = '1em';\n\t}\n\n\tthis.textarea.style.position = ((this.isLegacyEditor())) ? 'absolute' : 'relative';\n\tthis.installListeners(this.textarea);\n};\n\n/**\n * Function: applyValue\n * \n * Called in <stopEditing> if cancel is false to invoke <mxGraph.labelChanged>.\n */\nmxCellEditor.prototype.applyValue = function(state, value)\n{\n\tthis.graph.labelChanged(state.cell, value, this.trigger);\n};\n\n/**\n * Function: setAlign\n * \n * Sets the temporary horizontal alignment for the current editing session.\n */\nmxCellEditor.prototype.setAlign = function (align)\n{\n\tif (this.textarea != null)\n\t{\n\t\tthis.textarea.style.textAlign = align;\n\t}\n\t\n\tthis.align = align;\n\tthis.resize();\n};\n\n/**\n * Function: getInitialValue\n * \n * Gets the initial editing value for the given cell.\n */\nmxCellEditor.prototype.getInitialValue = function(state, trigger)\n{\n\tvar result = mxUtils.htmlEntities(this.graph.getEditingValue(state.cell, trigger), false);\n\t\n    // Workaround for trailing line breaks being ignored in the editor\n\tif (!mxClient.IS_QUIRKS && document.documentMode != 8 && document.documentMode != 9 &&\n\t\tdocument.documentMode != 10)\n\t{\n\t\tresult = mxUtils.replaceTrailingNewlines(result, '<div><br></div>');\n\t}\n    \n    return result.replace(/\\n/g, '<br>');\n};\n\n/**\n * Function: getCurrentValue\n * \n * Returns the current editing value.\n */\nmxCellEditor.prototype.getCurrentValue = function(state)\n{\n\treturn mxUtils.extractTextWithWhitespace(this.textarea.childNodes);\n};\n\n/**\n * Function: isCancelEditingKeyEvent\n * \n * Returns true if <escapeCancelsEditing> is true and shift, control and meta\n * are not pressed.\n */\nmxCellEditor.prototype.isCancelEditingKeyEvent = function(evt)\n{\n\treturn this.escapeCancelsEditing || mxEvent.isShiftDown(evt) || mxEvent.isControlDown(evt) || mxEvent.isMetaDown(evt);\n};\n\n/**\n * Function: installListeners\n * \n * Installs listeners for focus, change and standard key event handling.\n */\nmxCellEditor.prototype.installListeners = function(elt)\n{\n\t// Applies value if text is dragged\n\t// LATER: Gesture mouse events ignored for starting move\n\tmxEvent.addListener(elt, 'dragstart', mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.stopEditing(false);\n\t\tmxEvent.consume(evt);\n\t}));\n\n\t// Applies value if focus is lost\n\tmxEvent.addListener(elt, 'blur', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.blurEnabled)\n\t\t{\n\t\t\tthis.focusLost(evt);\n\t\t}\n\t}));\n\n\t// Updates modified state and handles placeholder text\n\tmxEvent.addListener(elt, 'keydown', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt))\n\t\t{\n\t\t\tif (this.isStopEditingEvent(evt))\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(false);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t\telse if (evt.keyCode == 27 /* Escape */)\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(this.isCancelEditingKeyEvent(evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}));\n\n\t// Keypress only fires if printable key was pressed and handles removing the empty placeholder\n\tvar keypressHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Clears the initial empty label on the first keystroke\n\t\t\t// and workaround for FF which fires keypress for delete and backspace\n\t\t\tif (this.clearOnChange && elt.innerHTML == this.getEmptyLabelText() &&\n\t\t\t\t(!mxClient.IS_FF || (evt.keyCode != 8 /* Backspace */ && evt.keyCode != 46 /* Delete */)))\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t\telt.innerHTML = '';\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, 'keypress', keypressHandler);\n\tmxEvent.addListener(elt, 'paste', keypressHandler);\n\t\n\t// Handler for updating the empty label text value after a change\n\tvar keyupHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Uses an optional text value for sempty labels which is cleared\n\t\t\t// when the first keystroke appears. This makes it easier to see\n\t\t\t// that a label is being edited even if the label is empty.\n\t\t\t// In Safari and FF, an empty text is represented by <BR> which isn't enough to force a valid size\n\t\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t\t{\n\t\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\t\tthis.clearOnChange = this.textarea.innerHTML.length > 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keyup', keyupHandler);\n\tmxEvent.addListener(elt, 'cut', keyupHandler);\n\tmxEvent.addListener(elt, 'paste', keyupHandler);\n\n\t// Adds automatic resizing of the textbox while typing using input, keyup and/or DOM change events\n\tvar evtName = (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keydown';\n\t\n\tvar resizeHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null && this.autoSize && !mxEvent.isConsumed(evt))\n\t\t{\n\t\t\t// Asynchronous is needed for keydown and shows better results for input events overall\n\t\t\t// (ie non-blocking and cases where the offsetWidth/-Height was wrong at this time)\n\t\t\tif (this.resizeThread != null)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.resizeThread);\n\t\t\t}\n\t\t\t\n\t\t\tthis.resizeThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resizeThread = null;\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(elt, evtName, resizeHandler);\n\tmxEvent.addListener(window, 'resize', resizeHandler);\n\n\tif (document.documentMode >= 9)\n\t{\n\t\tmxEvent.addListener(elt, 'DOMNodeRemoved', resizeHandler);\n\t\tmxEvent.addListener(elt, 'DOMNodeInserted', resizeHandler);\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(elt, 'cut', resizeHandler);\n\t\tmxEvent.addListener(elt, 'paste', resizeHandler);\n\t}\n};\n\n/**\n * Function: isStopEditingEvent\n * \n * Returns true if the given keydown event should stop cell editing. This\n * returns true if F2 is pressed of if <mxGraph.enterStopsCellEditing> is true\n * and enter is pressed without control or shift.\n */\nmxCellEditor.prototype.isStopEditingEvent = function(evt)\n{\n\treturn evt.keyCode == 113 /* F2 */ || (this.graph.isEnterStopsCellEditing() &&\n\t\tevt.keyCode == 13 /* Enter */ && !mxEvent.isControlDown(evt) &&\n\t\t!mxEvent.isShiftDown(evt));\n};\n\n/**\n * Function: isEventSource\n * \n * Returns true if this editor is the source for the given native event.\n */\nmxCellEditor.prototype.isEventSource = function(evt)\n{\n\treturn mxEvent.getSource(evt) == this.textarea;\n};\n\n/**\n * Function: resize\n * \n * Returns <modified>.\n */\nmxCellEditor.prototype.resize = function()\n{\n\tvar state = this.graph.getView().getState(this.editingCell);\n\t\n\tif (state == null)\n\t{\n\t\tthis.stopEditing(true);\n\t}\n\telse if (this.textarea != null)\n\t{\n\t\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n \t\tvar scale = this.graph.getView().scale;\n \t\tvar m = null;\n\t\t\n\t\tif (!this.autoSize || (state.style[mxConstants.STYLE_OVERFLOW] == 'fill'))\n\t\t{\n\t\t\t// Specifies the bounds of the editor box\n\t\t\tthis.bounds = this.getEditorBounds(state);\n\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + 'px';\n\t\t\tthis.textarea.style.height = Math.round(this.bounds.height / scale) + 'px';\n\t\t\t\n\t\t\t// FIXME: Offset when scaled\n\t\t\tif (document.documentMode == 8 || mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.round(this.bounds.x) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.round(this.bounds.y) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x + 1)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y + 1)) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\t// Installs native word wrapping and avoids word wrap for empty label placeholder\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + this.wordWrapPadding + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t \t{\n\t \t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\tm = (state.text != null && this.align == null) ? state.text.margin : null;\n\t\t\t\n\t\t\tif (m == null)\n\t\t\t{\n\t\t\t\tm = mxUtils.getAlignmentAsPoint(this.align || mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER),\n\t\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE));\n\t\t\t}\n\t\t\t\n\t \t\tif (isEdge)\n\t\t\t{\n\t\t\t\tthis.bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y, 0, 0);\n\t\t\t\t\n\t\t\t\tif (lw != null)\n\t\t\t \t{\n\t\t\t\t\tvar tmp = (parseFloat(lw) + 2) * scale;\n\t\t\t\t\tthis.bounds.width = tmp;\n\t\t\t\t\tthis.bounds.x += m.x * tmp;\n\t\t\t \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar bds = mxRectangle.fromRectangle(state);\n\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\tbds = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(bds) : bds;\n\t\t\t \t\n\t\t\t \tif (lw != null)\n\t\t\t \t{\n\t\t\t \t\tbds.width = parseFloat(lw) * scale;\n\t\t\t \t}\n\t\t\t \t\n\t\t\t \tif (!state.view.graph.cellRenderer.legacySpacing || state.style[mxConstants.STYLE_OVERFLOW] != 'width')\n\t\t\t \t{\n\t\t\t\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 2) * scale;\n\t\t\t\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\t\t\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\t\t\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\t\t\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\t\t\t\t\n\t\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\t\tbds = new mxRectangle(bds.x + spacingLeft, bds.y + spacingTop,\n\t\t\t\t\t\tbds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (spacingLeft + spacingRight) : 0),\n\t\t\t\t\t\tbds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (spacingTop + spacingBottom) : 0));\n\t\t\t \t}\n\n\t\t\t\tthis.bounds = new mxRectangle(bds.x + state.absoluteOffset.x, bds.y + state.absoluteOffset.y, bds.width, bds.height);\n\t\t\t}\n\n\t\t\t// Needed for word wrap inside text blocks with oversize lines to match the final result where\n\t \t\t// the width of the longest line is used as the reference for text alignment in the cell\n\t \t\t// TODO: Fix word wrapping preview for edge labels in helloworld.html\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t \t\t// Forces automatic reflow if text is removed from an oversize label and normal word wrap\n\t\t\t\tvar tmp = Math.round(this.bounds.width / ((document.documentMode == 8) ? scale : scale)) + this.wordWrapPadding;\n\n\t\t\t\tif (this.textarea.style.position != 'relative')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = tmp + 'px';\n\t\t\t\t\t\n\t\t\t\t\tif (this.textarea.scrollWidth > tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.textarea.style.width = this.textarea.scrollWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.maxWidth = tmp + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// KNOWN: Trailing cursor in IE9 quirks mode is not visible\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\tthis.textarea.style.width = '';\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\t// Workaround for wrong measuring in IE8 standards\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tthis.textarea.style.zoom = '1';\n\t\t\t\tthis.textarea.style.height = 'auto';\n\t\t\t}\n\t\t\t\n\t\t\tvar ow = this.textarea.scrollWidth;\n\t\t\tvar oh = this.textarea.scrollHeight;\n\t\t\t\n\t\t\t// TODO: Update CSS width and height if smaller than minResize or remove minResize\n\t\t\t//if (this.minResize != null)\n\t\t\t//{\n\t\t\t//\tow = Math.max(ow, this.minResize.width);\n\t\t\t//\toh = Math.max(oh, this.minResize.height);\n\t\t\t//}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\t// LATER: Scaled wrapping and position is wrong in IE8\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil((this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2) / scale)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil((this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1) / scale)) + 'px';\n\t\t\t\t// Workaround for wrong event handling width and height\n\t\t\t\tthis.textarea.style.width = Math.round(ow * scale) + 'px';\n\t\t\t\tthis.textarea.style.height = Math.round(oh * scale) + 'px';\n\t\t\t}\n\t\t\telse if (mxClient.IS_QUIRKS)\n\t\t\t{\t\t\t\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil(this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil(this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1)) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x - m.x * (this.bounds.width - 2)) + 1) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y - m.y * (this.bounds.height - 4) + ((m.y == -1) ? 3 : 0)) + 1) + 'px';\n\t\t\t}\n\t \t}\n\n\t\tif (mxClient.IS_VML)\n\t\t{\n\t\t\tthis.textarea.style.zoom = scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transformOrigin', '0px 0px');\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transform',\n\t\t\t\t'scale(' + scale + ',' + scale + ')' + ((m == null) ? '' :\n\t\t\t\t' translate(' + (m.x * 100) + '%,' + (m.y * 100) + '%)'));\n\t\t}\n\t}\n};\n\n/**\n * Function: focusLost\n *\n * Called if the textarea has lost focus.\n */\nmxCellEditor.prototype.focusLost = function()\n{\n\tthis.stopEditing(!this.graph.isInvokesStopCellEditing());\n};\n\n/**\n * Function: getBackgroundColor\n * \n * Returns the background color for the in-place editor. This implementation\n * always returns null.\n */\nmxCellEditor.prototype.getBackgroundColor = function(state)\n{\n\treturn null;\n};\n\n/**\n * Function: isLegacyEditor\n * \n * Returns true if max-width is not supported or if the SVG root element in\n * in the graph does not have CSS position absolute. In these cases the text\n * editor must use CSS position absolute to avoid an offset but it will have\n * a less accurate line wrapping width during the text editing preview. This\n * implementation returns true for IE8- and quirks mode or if the CSS position\n * of the SVG element is not absolute.\n */\nmxCellEditor.prototype.isLegacyEditor = function()\n{\n\tif (mxClient.IS_VML)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tvar absoluteRoot = false;\n\t\t\n\t\tif (mxClient.IS_SVG)\n\t\t{\n\t\t\tvar root = this.graph.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\tvar css = mxUtils.getCurrentStyle(root);\n\t\t\t\t\n\t\t\t\tif (css != null)\n\t\t\t\t{\t\t\t\t\n\t\t\t\t\tabsoluteRoot = css.position == 'absolute';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn !absoluteRoot;\n\t}\n};\n\n/**\n * Function: startEditing\n *\n * Starts the editor for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to start editing.\n * trigger - Optional mouse event that triggered the editor.\n */\nmxCellEditor.prototype.startEditing = function(cell, trigger)\n{\n\tthis.stopEditing(true);\n\tthis.align = null;\n\t\n\t// Creates new textarea instance\n\tif (this.textarea == null)\n\t{\n\t\tthis.init();\n\t}\n\t\n\tif (this.graph.tooltipHandler != null)\n\t{\n\t\tthis.graph.tooltipHandler.hideTooltip();\n\t}\n\t\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\t// Configures the style of the in-place editor\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar size = mxUtils.getValue(state.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n\t\tvar family = mxUtils.getValue(state.style, mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY);\n\t\tvar color = mxUtils.getValue(state.style, mxConstants.STYLE_FONTCOLOR, 'black');\n\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_LEFT);\n\t\tvar bold = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_BOLD) == mxConstants.FONT_BOLD;\n\t\tvar italic = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC;\n\t\tvar txtDecor = [];\n\t\t\n\t\tif ((mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\ttxtDecor.push('underline');\n\t\t}\n\t\t\n\t\tif ((mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t{\n\t\t\ttxtDecor.push('line-through');\n\t\t}\n\t\t\n\t\tthis.textarea.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? Math.round(size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\tthis.textarea.style.backgroundColor = this.getBackgroundColor(state);\n\t\tthis.textarea.style.textDecoration = txtDecor.join(' ');\n\t\tthis.textarea.style.fontWeight = (bold) ? 'bold' : 'normal';\n\t\tthis.textarea.style.fontStyle = (italic) ? 'italic' : '';\n\t\tthis.textarea.style.fontSize = Math.round(size) + 'px';\n\t\tthis.textarea.style.zIndex = this.zIndex;\n\t\tthis.textarea.style.fontFamily = family;\n\t\tthis.textarea.style.textAlign = align;\n\t\tthis.textarea.style.outline = 'none';\n\t\tthis.textarea.style.color = color;\n\t\t\n\t\tvar dir = this.textDirection = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO)\n\t\t{\n\t\t\tif (state != null && state.text != null && state.text.dialect != mxConstants.DIALECT_STRICTHTML &&\n\t\t\t\t!mxUtils.isNode(state.text.value))\n\t\t\t{\n\t\t\t\tdir = state.text.getAutoDirection();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tthis.textarea.setAttribute('dir', dir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.textarea.removeAttribute('dir');\n\t\t}\n\n\t\t// Sets the initial editing value\n\t\tthis.textarea.innerHTML = this.getInitialValue(state, trigger) || '';\n\t\tthis.initialValue = this.textarea.innerHTML;\n\n\t\t// Uses an optional text value for empty labels which is cleared\n\t\t// when the first keystroke appears. This makes it easier to see\n\t\t// that a label is being edited even if the label is empty.\n\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t{\n\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\tthis.clearOnChange = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.clearOnChange = this.textarea.innerHTML == this.getEmptyLabelText();\n\t\t}\n\n\t\tthis.graph.container.appendChild(this.textarea);\n\t\t\n\t\t// Update this after firing all potential events that could update the cleanOnChange flag\n\t\tthis.editingCell = cell;\n\t\tthis.trigger = trigger;\n\t\tthis.textNode = null;\n\n\t\tif (state.text != null && this.isHideLabel(state))\n\t\t{\n\t\t\tthis.textNode = state.text.node;\n\t\t\tthis.textNode.style.visibility = 'hidden';\n\t\t}\n\n\t\t// Workaround for initial offsetHeight not ready for heading in markup\n\t\tif (this.autoSize && (this.graph.model.isEdge(state.cell) || state.style[mxConstants.STYLE_OVERFLOW] != 'fill'))\n\t\t{\n\t\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t\t\n\t\tthis.resize();\n\t\t\n\t\t// Workaround for NS_ERROR_FAILURE in FF\n\t\ttry\n\t\t{\n\t\t\t// Prefers blinking cursor over no selected text if empty\n\t\t\tthis.textarea.focus();\n\t\t\t\n\t\t\tif (this.isSelectText() && this.textarea.innerHTML.length > 0 &&\n\t\t\t\t(this.textarea.innerHTML != this.getEmptyLabelText() || !this.clearOnChange))\n\t\t\t{\n\t\t\t\tdocument.execCommand('selectAll', false, null);\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t}\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.isSelectText = function()\n{\n\treturn this.selectText;\n};\n\n/**\n * Function: clearSelection\n * \n * Clears the selection.\n */\nmxCellEditor.prototype.clearSelection = function()\n{\n\tvar selection = null;\n\t\n\tif (window.getSelection)\n\t{\n\t\tselection = window.getSelection();\n\t}\n\telse if (document.selection)\n\t{\n\t\tselection = document.selection;\n\t}\n\t\n\tif (selection != null)\n\t{\n\t\tif (selection.empty)\n\t\t{\n\t\t\tselection.empty();\n\t\t}\n\t\telse if (selection.removeAllRanges)\n\t\t{\n\t\t\tselection.removeAllRanges();\n\t\t}\n\t}\n};\n\n/**\n * Function: stopEditing\n *\n * Stops the editor and applies the value if cancel is false.\n */\nmxCellEditor.prototype.stopEditing = function(cancel)\n{\n\tcancel = cancel || false;\n\t\n\tif (this.editingCell != null)\n\t{\n\t\tif (this.textNode != null)\n\t\t{\n\t\t\tthis.textNode.style.visibility = 'visible';\n\t\t\tthis.textNode = null;\n\t\t}\n\n\t\tvar state = (!cancel) ? this.graph.view.getState(this.editingCell) : null;\n\n\t\tvar initial = this.initialValue;\n\t\tthis.initialValue = null;\n\t\tthis.editingCell = null;\n\t\tthis.trigger = null;\n\t\tthis.bounds = null;\n\t\tthis.textarea.blur();\n\t\tthis.clearSelection();\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tif (this.clearOnChange && this.textarea.innerHTML == this.getEmptyLabelText())\n\t\t{\n\t\t\tthis.textarea.innerHTML = '';\n\t\t\tthis.clearOnChange = false;\n\t\t}\n\n\t\tif (state != null && (this.textarea.innerHTML != initial || this.align != null))\n\t\t{\n\t\t\tthis.prepareTextarea();\n\t\t\tvar value = this.getCurrentValue(state);\n\t\t\t\n\t\t\tthis.graph.getModel().beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (value != null)\n\t\t\t\t{\n\t\t\t\t\tthis.applyValue(state, value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.align != null)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ALIGN, this.align, [state.cell]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.graph.getModel().endUpdate();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Forces new instance on next edit for undo history reset\n\t\tmxEvent.release(this.textarea);\n\t\tthis.textarea = null;\n\t\tthis.align = null;\n\t}\n};\n\n/**\n * Function: prepareTextarea\n * \n * Prepares the textarea for getting its value in <stopEditing>.\n * This implementation removes the extra trailing linefeed in Firefox.\n */\nmxCellEditor.prototype.prepareTextarea = function()\n{\n\tif (this.textarea.lastChild != null &&\n\t\tthis.textarea.lastChild.nodeName == 'BR')\n\t{\n\t\tthis.textarea.removeChild(this.textarea.lastChild);\n\t}\n};\n\n/**\n * Function: isHideLabel\n * \n * Returns true if the label should be hidden while the cell is being\n * edited.\n */\nmxCellEditor.prototype.isHideLabel = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns the minimum width and height for editing the given state.\n */\nmxCellEditor.prototype.getMinimumSize = function(state)\n{\n\tvar scale = this.graph.getView().scale;\n\t\n\treturn new mxRectangle(0, 0, (state.text == null) ? 30 : state.text.size * scale + 20,\n\t\t\t(this.textarea.style.textAlign == 'left') ? 120 : 40);\n};\n\n/**\n * Function: getEditorBounds\n * \n * Returns the <mxRectangle> that defines the bounds of the editor.\n */\nmxCellEditor.prototype.getEditorBounds = function(state)\n{\n\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n\tvar scale = this.graph.getView().scale;\n\tvar minSize = this.getMinimumSize(state);\n\tvar minWidth = minSize.width;\n \tvar minHeight = minSize.height;\n \tvar result = null;\n \t\n \tif (!isEdge && state.view.graph.cellRenderer.legacySpacing && state.style[mxConstants.STYLE_OVERFLOW] == 'fill')\n \t{\n \t\tresult = state.shape.getLabelBounds(mxRectangle.fromRectangle(state));\n \t}\n \telse\n \t{\n\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 0) * scale;\n\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\n\t \tresult = new mxRectangle(state.x, state.y,\n\t \t\t Math.max(minWidth, state.width - spacingLeft - spacingRight),\n\t \t\t Math.max(minHeight, state.height - spacingTop - spacingBottom));\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tresult = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(result) : result;\n\t\n\t\tif (isEdge)\n\t\t{\n\t\t\tresult.x = state.absoluteOffset.x;\n\t\t\tresult.y = state.absoluteOffset.y;\n\t\n\t\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\t// Workaround for label containing just spaces in which case\n\t\t\t\t// the bounding box location contains negative numbers \n\t\t\t\tif (state.text.boundingBox.x > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.x = state.text.boundingBox.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.y = state.text.boundingBox.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tresult.x = Math.min(result.x, state.text.boundingBox.x);\n\t\t\tresult.y = Math.min(result.y, state.text.boundingBox.y);\n\t\t}\n\t\n\t\tresult.x += spacingLeft;\n\t\tresult.y += spacingTop;\n\t\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (!isEdge)\n\t\t\t{\n\t\t\t\tresult.width = Math.max(result.width, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(result.height, state.text.boundingBox.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.width = Math.max(minWidth, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(minHeight, state.text.boundingBox.height);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Applies the horizontal and vertical label positions\n\t\tif (this.graph.getModel().isVertex(state.cell))\n\t\t{\n\t\t\tvar horizontal = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\n\t\t\tif (horizontal == mxConstants.ALIGN_LEFT)\n\t\t\t{\n\t\t\t\tresult.x -= state.width;\n\t\t\t}\n\t\t\telse if (horizontal == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tresult.x += state.width;\n\t\t\t}\n\t\n\t\t\tvar vertical = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\t\t\tif (vertical == mxConstants.ALIGN_TOP)\n\t\t\t{\n\t\t\t\tresult.y -= state.height;\n\t\t\t}\n\t\t\telse if (vertical == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tresult.y += state.height;\n\t\t\t}\n\t\t}\n \t}\n \t\n \treturn new mxRectangle(Math.round(result.x), Math.round(result.y), Math.round(result.width), Math.round(result.height));\n};\n\n/**\n * Function: getEmptyLabelText\n *\n * Returns the initial label value to be used of the label of the given\n * cell is empty. This label is displayed and cleared on the first keystroke.\n * This implementation returns <emptyLabelText>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a text for an empty editing box should be\n * returned.\n */\nmxCellEditor.prototype.getEmptyLabelText = function (cell)\n{\n\treturn this.emptyLabelText;\n};\n\n/**\n * Function: getEditingCell\n *\n * Returns the cell that is currently being edited or null if no cell is\n * being edited.\n */\nmxCellEditor.prototype.getEditingCell = function ()\n{\n\treturn this.editingCell;\n};\n\n/**\n * Function: destroy\n *\n * Destroys the editor and removes all associated resources.\n */\nmxCellEditor.prototype.destroy = function ()\n{\n\tif (this.textarea != null)\n\t{\n\t\tmxEvent.release(this.textarea);\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tthis.textarea = null;\n\n\t}\n\t\t\t\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\n\tif (this.zoomHandler)\n\t{\n\t\tthis.graph.view.removeListener(this.zoomHandler);\n\t\tthis.zoomHandler = null;\n\t}\n};\n\n__mxOutput.mxCellEditor = typeof mxCellEditor !== 'undefined' ? mxCellEditor : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxCellRenderer\n * \n * Renders cells into a document object model. The <defaultShapes> is a global\n * map of shapename, constructor pairs that is used in all instances. You can\n * get a list of all available shape names using the following code.\n * \n * In general the cell renderer is in charge of creating, redrawing and\n * destroying the shape and label associated with a cell state, as well as\n * some other graphical objects, namely controls and overlays. The shape\n * hieararchy in the display (ie. the hierarchy in which the DOM nodes\n * appear in the document) does not reflect the cell hierarchy. The shapes\n * are a (flat) sequence of shapes and labels inside the draw pane of the\n * graph view, with some exceptions, namely the HTML labels being placed\n * directly inside the graph container for certain browsers.\n * \n * (code)\n * mxLog.show();\n * for (var i in mxCellRenderer.defaultShapes)\n * {\n *   mxLog.debug(i);\n * }\n * (end)\n *\n * Constructor: mxCellRenderer\n * \n * Constructs a new cell renderer with the following built-in shapes:\n * arrow, rectangle, ellipse, rhombus, image, line, label, cylinder,\n * swimlane, connector, actor and cloud.\n */\nfunction mxCellRenderer() { };\n\n/**\n * Variable: defaultShapes\n * \n * Static array that contains the globally registered shapes which are\n * known to all instances of this class. For adding new shapes you should\n * use the static <mxCellRenderer.registerShape> function.\n */\nmxCellRenderer.defaultShapes = new Object();\n\n/**\n * Variable: defaultEdgeShape\n * \n * Defines the default shape for edges. Default is <mxConnector>.\n */\nmxCellRenderer.prototype.defaultEdgeShape = mxConnector;\n\n/**\n * Variable: defaultVertexShape\n * \n * Defines the default shape for vertices. Default is <mxRectangleShape>.\n */\nmxCellRenderer.prototype.defaultVertexShape = mxRectangleShape;\n\n/**\n * Variable: defaultTextShape\n * \n * Defines the default shape for labels. Default is <mxText>.\n */\nmxCellRenderer.prototype.defaultTextShape = mxText;\n\n/**\n * Variable: legacyControlPosition\n * \n * Specifies if the folding icon should ignore the horizontal\n * orientation of a swimlane. Default is true.\n */\nmxCellRenderer.prototype.legacyControlPosition = true;\n\n/**\n * Variable: legacySpacing\n * \n * Specifies if spacing and label position should be ignored if overflow is\n * fill or width. Default is true for backwards compatiblity.\n */\nmxCellRenderer.prototype.legacySpacing = true;\n\n/**\n * Variable: antiAlias\n * \n * Anti-aliasing option for new shapes. Default is true.\n */\nmxCellRenderer.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxCellRenderer.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: forceControlClickHandler\n * \n * Specifies if the enabled state of the graph should be ignored in the control\n * click handler (to allow folding in disabled graphs). Default is false.\n */\nmxCellRenderer.prototype.forceControlClickHandler = false;\n\n/**\n * Function: registerShape\n * \n * Registers the given constructor under the specified key in this instance\n * of the renderer.\n * \n * Example:\n * \n * (code)\n * mxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\n * (end)\n * \n * Parameters:\n * \n * key - String representing the shape name.\n * shape - Constructor of the <mxShape> subclass.\n */\nmxCellRenderer.registerShape = function(key, shape)\n{\n\tmxCellRenderer.defaultShapes[key] = shape;\n};\n\n// Adds default shapes into the default shapes array\nmxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ELLIPSE, mxEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_RHOMBUS, mxRhombus);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CYLINDER, mxCylinder);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CONNECTOR, mxConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ACTOR, mxActor);\nmxCellRenderer.registerShape(mxConstants.SHAPE_TRIANGLE, mxTriangle);\nmxCellRenderer.registerShape(mxConstants.SHAPE_HEXAGON, mxHexagon);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CLOUD, mxCloud);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LINE, mxLine);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW, mxArrow);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW_CONNECTOR, mxArrowConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_DOUBLE_ELLIPSE, mxDoubleEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_SWIMLANE, mxSwimlane);\nmxCellRenderer.registerShape(mxConstants.SHAPE_IMAGE, mxImageShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LABEL, mxLabel);\n\n/**\n * Function: initializeShape\n * \n * Initializes the shape in the given state by calling its init method with\n * the correct container after configuring it using <configureShape>.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be initialized.\n */\nmxCellRenderer.prototype.initializeShape = function(state)\n{\n\tstate.shape.dialect = state.view.graph.dialect;\n\tthis.configureShape(state);\n\tstate.shape.init(state.view.getDrawPane());\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be created.\n */\nmxCellRenderer.prototype.createShape = function(state)\n{\n\tvar shape = null;\n\t\n\tif (state.style != null)\n\t{\n\t\t// Checks if there is a stencil for the name and creates\n\t\t// a shape instance for the stencil if one exists\n\t\tvar stencil = mxStencilRegistry.getStencil(state.style[mxConstants.STYLE_SHAPE]);\n\t\t\n\t\tif (stencil != null)\n\t\t{\n\t\t\tshape = new mxShape(stencil);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar ctor = this.getShapeConstructor(state);\n\t\t\tshape = new ctor();\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: createIndicatorShape\n * \n * Creates the indicator shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the indicator shape should be created.\n */\nmxCellRenderer.prototype.createIndicatorShape = function(state)\n{\n\tstate.shape.indicatorShape = this.getShape(state.view.graph.getIndicatorShape(state));\n};\n\n/**\n * Function: getShape\n * \n * Returns the shape for the given name from <defaultShapes>.\n */\nmxCellRenderer.prototype.getShape = function(name)\n{\n\treturn (name != null) ? mxCellRenderer.defaultShapes[name] : null;\n};\n\n/**\n * Function: getShapeConstructor\n * \n * Returns the constructor to be used for creating the shape.\n */\nmxCellRenderer.prototype.getShapeConstructor = function(state)\n{\n\tvar ctor = this.getShape(state.style[mxConstants.STYLE_SHAPE]);\n\t\n\tif (ctor == null)\n\t{\n\t\tctor = (state.view.graph.getModel().isEdge(state.cell)) ?\n\t\t\tthis.defaultEdgeShape : this.defaultVertexShape;\n\t}\n\t\n\treturn ctor;\n};\n\n/**\n * Function: configureShape\n * \n * Configures the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be configured.\n */\nmxCellRenderer.prototype.configureShape = function(state)\n{\n\tstate.shape.apply(state);\n\tstate.shape.image = state.view.graph.getImage(state);\n\tstate.shape.indicatorColor = state.view.graph.getIndicatorColor(state);\n\tstate.shape.indicatorStrokeColor = state.style[mxConstants.STYLE_INDICATOR_STROKECOLOR];\n\tstate.shape.indicatorGradientColor = state.view.graph.getIndicatorGradientColor(state);\n\tstate.shape.indicatorDirection = state.style[mxConstants.STYLE_INDICATOR_DIRECTION];\n\tstate.shape.indicatorImage = state.view.graph.getIndicatorImage(state);\n\n\tthis.postConfigureShape(state);\n};\n\n/**\n * Function: postConfigureShape\n * \n * Replaces any reserved words used for attributes, eg. inherit,\n * indicated or swimlane for colors in the shape for the given state.\n * This implementation resolves these keywords on the fill, stroke\n * and gradient color keys.\n */\nmxCellRenderer.prototype.postConfigureShape = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tthis.resolveColor(state, 'indicatorGradientColor', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'indicatorColor', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'gradient', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'stroke', mxConstants.STYLE_STROKECOLOR);\n\t\tthis.resolveColor(state, 'fill', mxConstants.STYLE_FILLCOLOR);\n\t}\n};\n\n/**\n * Function: checkPlaceholderStyles\n * \n * Checks if the style of the given <mxCellState> contains 'inherit',\n * 'indicated' or 'swimlane' for colors that support those keywords.\n */\nmxCellRenderer.prototype.checkPlaceholderStyles = function(state)\n{\n\t// LATER: Check if the color has actually changed\n\tif (state.style != null)\n\t{\n\t\tvar values = ['inherit', 'swimlane', 'indicated'];\n\t\tvar styles = [mxConstants.STYLE_FILLCOLOR, mxConstants.STYLE_STROKECOLOR,\n\t\t\tmxConstants.STYLE_GRADIENTCOLOR, mxConstants.STYLE_FONTCOLOR];\n\t\t\n\t\tfor (var i = 0; i < styles.length; i++)\n\t\t{\n\t\t\tif (mxUtils.indexOf(values, state.style[styles[i]]) >= 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: resolveColor\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.resolveColor = function(state, field, key)\n{\n\tvar shape = (key == mxConstants.STYLE_FONTCOLOR) ?\n\t\tstate.text : state.shape;\n\t\n\tif (shape != null)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar value = shape[field];\n\t\tvar referenced = null;\n\t\t\n\t\tif (value == 'inherit')\n\t\t{\n\t\t\treferenced = graph.model.getParent(state.cell);\n\t\t}\n\t\telse if (value == 'swimlane')\n\t\t{\n\t\t\tshape[field] = (key == mxConstants.STYLE_STROKECOLOR ||\n\t\t\t\tkey == mxConstants.STYLE_FONTCOLOR) ?\n\t\t\t\t'#000000' : '#ffffff';\n\t\t\t\n\t\t\tif (graph.model.getTerminal(state.cell, false) != null)\n\t\t\t{\n\t\t\t\treferenced = graph.model.getTerminal(state.cell, false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treferenced = state.cell;\n\t\t\t}\n\t\t\t\n\t\t\treferenced = graph.getSwimlane(referenced);\n\t\t\tkey = graph.swimlaneIndicatorColorAttribute;\n\t\t}\n\t\telse if (value == 'indicated' && state.shape != null)\n\t\t{\n\t\t\tshape[field] = state.shape.indicatorColor;\n\t\t}\n\t\telse if (key != mxConstants.STYLE_FILLCOLOR &&\n\t\t\tvalue == mxConstants.STYLE_FILLCOLOR &&\n\t\t\tstate.shape != null)\n\t\t{\n\t\t\tshape[field] = state.style[mxConstants.STYLE_FILLCOLOR];\n\t\t}\n\t\telse if (key != mxConstants.STYLE_STROKECOLOR &&\n\t\t\tvalue == mxConstants.STYLE_STROKECOLOR &&\n\t\t\tstate.shape != null)\n\t\t{\n\t\t\tshape[field] = state.style[mxConstants.STYLE_STROKECOLOR];\n\t\t}\n\t\n\t\tif (referenced != null)\n\t\t{\n\t\t\tvar rstate = graph.getView().getState(referenced);\n\t\t\tshape[field] = null;\n\t\t\t\n\t\t\tif (rstate != null)\n\t\t\t{\n\t\t\t\tvar rshape = (key == mxConstants.STYLE_FONTCOLOR) ? rstate.text : rstate.shape;\n\t\t\t\t\n\t\t\t\tif (rshape != null && field != 'indicatorColor')\n\t\t\t\t{\n\t\t\t\t\tshape[field] = rshape[field];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tshape[field] = rstate.style[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelValue\n * \n * Returns the value to be used for the label.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.getLabelValue = function(state)\n{\n\treturn state.view.graph.getLabel(state.cell);\n};\n\n/**\n * Function: createLabel\n * \n * Creates the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.createLabel = function(state, value)\n{\n\tvar graph = state.view.graph;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\t\n\tif (state.style[mxConstants.STYLE_FONTSIZE] > 0 || state.style[mxConstants.STYLE_FONTSIZE] == null)\n\t{\n\t\t// Avoids using DOM node for empty labels\n\t\tvar isForceHtml = (graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\n\t\tstate.text = new this.defaultTextShape(value, new mxRectangle(),\n\t\t\t\t(state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER),\n\t\t\t\tgraph.getVerticalAlign(state),\n\t\t\t\tstate.style[mxConstants.STYLE_FONTCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTFAMILY],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSIZE],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSTYLE],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_TOP],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_RIGHT],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_BOTTOM],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_LEFT],\n\t\t\t\tstate.style[mxConstants.STYLE_HORIZONTAL],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BORDERCOLOR],\n\t\t\t\tgraph.isWrapping(state.cell) && graph.isHtmlLabel(state.cell),\n\t\t\t\tgraph.isLabelClipped(state.cell),\n\t\t\t\tstate.style[mxConstants.STYLE_OVERFLOW],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_PADDING],\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION));\n\t\tstate.text.opacity = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tstate.text.dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\t\tstate.text.style = state.style;\n\t\tstate.text.state = state;\n\t\tthis.initializeLabel(state, state.text);\n\t\t\n\t\t// Workaround for touch devices routing all events for a mouse gesture\n\t\t// (down, move, up) via the initial DOM node. IE additionally redirects\n\t\t// the event via the initial DOM node but the event source is the node\n\t\t// under the mouse, so we need to check if this is the case and force\n\t\t// getCellAt for the subsequent mouseMoves and the final mouseUp.\n\t\tvar forceGetCell = false;\n\t\t\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar result = state;\n\n\t\t\tif (mxClient.IS_TOUCH || forceGetCell)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t};\n\t\t\n\t\t// TODO: Add handling for special touch device gestures\n\t\tmxEvent.addGestureListeners(state.text.node,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\t\tforceGetCell = graph.dialect != mxConstants.DIALECT_SVG &&\n\t\t\t\t\t\tmxEvent.getSource(evt).nodeName == 'IMG';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t\tforceGetCell = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// Uses double click timeout in mxGraph for quirks mode\n\t\tif (graph.nativeDblClickEnabled)\n\t\t{\n\t\t\tmxEvent.addListener(state.text.node, 'dblclick',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Function: initializeLabel\n * \n * Initiailzes the label with a suitable container.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be initialized.\n */\nmxCellRenderer.prototype.initializeLabel = function(state, shape)\n{\n\tif (mxClient.IS_SVG && mxClient.NO_FO && shape.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.init(state.view.graph.container);\n\t}\n\telse\n\t{\n\t\tshape.init(state.view.getDrawPane());\n\t}\n};\n\n/**\n * Function: createCellOverlays\n * \n * Creates the actual shape for showing the overlay for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n */\nmxCellRenderer.prototype.createCellOverlays = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar overlays = graph.getCellOverlays(state.cell);\n\tvar dict = null;\n\t\n\tif (overlays != null)\n\t{\n\t\tdict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tvar shape = (state.overlays != null) ? state.overlays.remove(overlays[i]) : null;\n\t\t\t\n\t\t\tif (shape == null)\n\t\t\t{\n\t\t\t\tvar tmp = new mxImageShape(new mxRectangle(), overlays[i].image.src);\n\t\t\t\ttmp.dialect = state.view.graph.dialect;\n\t\t\t\ttmp.preserveImageAspect = false;\n\t\t\t\ttmp.overlay = overlays[i];\n\t\t\t\tthis.initializeOverlay(state, tmp);\n\t\t\t\tthis.installCellOverlayListeners(state, overlays[i], tmp);\n\t\n\t\t\t\tif (overlays[i].cursor != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.node.style.cursor = overlays[i].cursor;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdict.put(overlays[i], tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdict.put(overlays[i], shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Removes unused\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tshape.destroy();\n\t\t});\n\t}\n\t\n\tstate.overlays = dict;\n};\n\n/**\n * Function: initializeOverlay\n * \n * Initializes the given overlay.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n * overlay - <mxImageShape> that represents the overlay.\n */\nmxCellRenderer.prototype.initializeOverlay = function(state, overlay)\n{\n\toverlay.init(state.view.getOverlayPane());\n};\n\n/**\n * Function: installOverlayListeners\n * \n * Installs the listeners for the given <mxCellState>, <mxCellOverlay> and\n * <mxShape> that represents the overlay.\n */\nmxCellRenderer.prototype.installCellOverlayListeners = function(state, overlay, shape)\n{\n\tvar graph  = state.view.graph;\n\t\n\tmxEvent.addListener(shape.node, 'click', function (evt)\n\t{\n\t\tif (graph.isEditing())\n\t\t{\n\t\t\tgraph.stopEditing(!graph.isInvokesStopCellEditing());\n\t\t}\n\t\t\n\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t'event', evt, 'cell', state.cell));\n\t});\n\t\n\tmxEvent.addGestureListeners(shape.node,\n\t\tfunction (evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE,\n\t\t\t\tnew mxMouseEvent(evt, state));\n\t\t});\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tmxEvent.addListener(shape.node, 'touchend', function (evt)\n\t\t{\n\t\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t\t'event', evt, 'cell', state.cell));\n\t\t});\n\t}\n};\n\n/**\n * Function: createControl\n * \n * Creates the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be created.\n */\nmxCellRenderer.prototype.createControl = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar image = graph.getFoldingImage(state);\n\t\n\tif (graph.foldingEnabled && image != null)\n\t{\n\t\tif (state.control == null)\n\t\t{\n\t\t\tvar b = new mxRectangle(0, 0, image.width, image.height);\n\t\t\tstate.control = new mxImageShape(b, image.src);\n\t\t\tstate.control.preserveImageAspect = false;\n\t\t\tstate.control.dialect = graph.dialect;\n\n\t\t\tthis.initControl(state, state.control, true, this.createControlClickHandler(state));\n\t\t}\n\t}\n\telse if (state.control != null)\n\t{\n\t\tstate.control.destroy();\n\t\tstate.control = null;\n\t}\n};\n\n/**\n * Function: createControlClickHandler\n * \n * Hook for creating the click handler for the folding icon.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control click handler should be returned.\n */\nmxCellRenderer.prototype.createControlClickHandler = function(state)\n{\n\tvar graph = state.view.graph;\n\t\n\treturn mxUtils.bind(this, function (evt)\n\t{\n\t\tif (this.forceControlClickHandler || graph.isEnabled())\n\t\t{\n\t\t\tvar collapse = !graph.isCellCollapsed(state.cell);\n\t\t\tgraph.foldCells(collapse, false, [state.cell], null, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n};\n\n/**\n * Function: initControl\n * \n * Initializes the given control and returns the corresponding DOM node.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be initialized.\n * control - <mxShape> to be initialized.\n * handleEvents - Boolean indicating if mousedown and mousemove should fire events via the graph.\n * clickHandler - Optional function to implement clicks on the control.\n */\nmxCellRenderer.prototype.initControl = function(state, control, handleEvents, clickHandler)\n{\n\tvar graph = state.view.graph;\n\t\n\t// In the special case where the label is in HTML and the display is SVG the image\n\t// should go into the graph container directly in order to be clickable. Otherwise\n\t// it is obscured by the HTML label that overlaps the cell.\n\tvar isForceHtml = graph.isHtmlLabel(state.cell) && mxClient.NO_FO &&\n\t\tgraph.dialect == mxConstants.DIALECT_SVG;\n\n\tif (isForceHtml)\n\t{\n\t\tcontrol.dialect = mxConstants.DIALECT_PREFERHTML;\n\t\tcontrol.init(graph.container);\n\t\tcontrol.node.style.zIndex = 1;\n\t}\n\telse\n\t{\n\t\tcontrol.init(state.view.getOverlayPane());\n\t}\n\n\tvar node = control.innerNode || control.node;\n\t\n\t// Workaround for missing click event on iOS is to check tolerance below\n\tif (clickHandler != null && !mxClient.IS_IOS)\n\t{\n\t\tif (graph.isEnabled())\n\t\t{\n\t\t\tnode.style.cursor = 'pointer';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(node, 'click', clickHandler);\n\t}\n\t\n\tif (handleEvents)\n\t{\n\t\tvar first = null;\n\n\t\tmxEvent.addGestureListeners(node,\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tfirst = new mxPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, state));\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\n\t\t// Uses capture phase for event interception to stop bubble phase\n\t\tif (clickHandler != null && mxClient.IS_IOS)\n\t\t{\n\t\t\tnode.addEventListener('touchend', function(evt)\n\t\t\t{\n\t\t\t\tif (first != null)\n\t\t\t\t{\n\t\t\t\t\tvar tol = graph.tolerance;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(first.x - mxEvent.getClientX(evt)) < tol &&\n\t\t\t\t\t\tMath.abs(first.y - mxEvent.getClientY(evt)) < tol)\n\t\t\t\t\t{\n\t\t\t\t\t\tclickHandler.call(clickHandler, evt);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, true);\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: isShapeEvent\n * \n * Returns true if the event is for the shape of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shape fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isShapeEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: isLabelEvent\n * \n * Returns true if the event is for the label of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isLabelEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: installListeners\n * \n * Installs the event listeners for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the event listeners should be isntalled.\n */\nmxCellRenderer.prototype.installListeners = function(state)\n{\n\tvar graph = state.view.graph;\n\n\t// Workaround for touch devices routing all events for a mouse\n\t// gesture (down, move, up) via the initial DOM node. Same for\n\t// HTML images in all IE versions (VML images are working).\n\tvar getState = function(evt)\n\t{\n\t\tvar result = state;\n\t\t\n\t\tif ((graph.dialect != mxConstants.DIALECT_SVG && mxEvent.getSource(evt).nodeName == 'IMG') || mxClient.IS_TOUCH)\n\t\t{\n\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\n\t\t\t// Dispatches the drop event to the graph which\n\t\t\t// consumes and executes the source function\n\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\tmxEvent.addGestureListeners(state.shape.node,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t})\n\t);\n\t\n\t// Uses double click timeout in mxGraph for quirks mode\n\tif (graph.nativeDblClickEnabled)\n\t{\n\t\tmxEvent.addListener(state.shape.node, 'dblclick',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n};\n\n/**\n * Function: redrawLabel\n * \n * Redraws the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawLabel = function(state, forced)\n{\n\tvar graph = state.view.graph;\n\tvar value = this.getLabelValue(state);\n\tvar wrapping = graph.isWrapping(state.cell);\n\tvar clipping = graph.isLabelClipped(state.cell);\n\tvar isForceHtml = (state.view.graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\tvar dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\tvar overflow = state.style[mxConstants.STYLE_OVERFLOW] || 'visible';\n\n\tif (state.text != null && (state.text.wrap != wrapping || state.text.clipped != clipping ||\n\t\tstate.text.overflow != overflow || state.text.dialect != dialect))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\t\n\tif (state.text == null && value != null && (mxUtils.isNode(value) || value.length > 0))\n\t{\n\t\tthis.createLabel(state, value);\n\t}\n\telse if (state.text != null && (value == null || value.length == 0))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\n\tif (state.text != null)\n\t{\n\t\t// Forced is true if the style has changed, so to get the updated\n\t\t// result in getLabelBounds we apply the new style to the shape\n\t\tif (forced)\n\t\t{\n\t\t\t// Checks if a full repaint is needed\n\t\t\tif (state.text.lastValue != null && this.isTextShapeInvalid(state, state.text))\n\t\t\t{\n\t\t\t\t// Forces a full repaint\n\t\t\t\tstate.text.lastValue = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.resetStyles();\n\t\t\tstate.text.apply(state);\n\t\t\t\n\t\t\t// Special case where value is obtained via hook in graph\n\t\t\tstate.text.valign = graph.getVerticalAlign(state);\n\t\t}\n\t\t\n\t\tvar bounds = this.getLabelBounds(state);\n\t\tvar nextScale = this.getTextScale(state);\n\t\tthis.resolveColor(state, 'color', mxConstants.STYLE_FONTCOLOR);\n\t\t\n\t\tif (forced || state.text.value != value || state.text.isWrapping != wrapping ||\n\t\t\tstate.text.overflow != overflow || state.text.isClipping != clipping ||\n\t\t\tstate.text.scale != nextScale || state.text.dialect != dialect ||\n\t\t\tstate.text.bounds == null || !state.text.bounds.equals(bounds))\n\t\t{\n\t\t\tstate.text.dialect = dialect;\n\t\t\tstate.text.value = value;\n\t\t\tstate.text.bounds = bounds;\n\t\t\tstate.text.scale = nextScale;\n\t\t\tstate.text.wrap = wrapping;\n\t\t\tstate.text.clipped = clipping;\n\t\t\tstate.text.overflow = overflow;\n\t\t\t\n\t\t\t// Preserves visible state\n\t\t\tvar vis = state.text.node.style.visibility;\n\t\t\tthis.redrawLabelShape(state.text);\n\t\t\tstate.text.node.style.visibility = vis;\n\t\t}\n\t}\n};\n\n/**\n * Function: isTextShapeInvalid\n * \n * Returns true if the style for the text shape has changed.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be checked.\n * shape - <mxText> shape to be checked.\n */\nmxCellRenderer.prototype.isTextShapeInvalid = function(state, shape)\n{\n\tfunction check(property, stylename, defaultValue)\n\t{\n\t\tvar result = false;\n\t\t\n\t\t// Workaround for spacing added to directional spacing\n\t\tif (stylename == 'spacingTop' || stylename == 'spacingRight' ||\n\t\t\tstylename == 'spacingBottom' || stylename == 'spacingLeft')\n\t\t{\n\t\t\tresult = parseFloat(shape[property]) - parseFloat(shape.spacing) !=\n\t\t\t\t(state.style[stylename] || defaultValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = shape[property] != (state.style[stylename] || defaultValue);\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\treturn check('fontStyle', mxConstants.STYLE_FONTSTYLE, mxConstants.DEFAULT_FONTSTYLE) ||\n\t\tcheck('family', mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY) ||\n\t\tcheck('size', mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE) ||\n\t\tcheck('color', mxConstants.STYLE_FONTCOLOR, 'black') ||\n\t\tcheck('align', mxConstants.STYLE_ALIGN, '') ||\n\t\tcheck('valign', mxConstants.STYLE_VERTICAL_ALIGN, '') ||\n\t\tcheck('spacing', mxConstants.STYLE_SPACING, 2) ||\n\t\tcheck('spacingTop', mxConstants.STYLE_SPACING_TOP, 0) ||\n\t\tcheck('spacingRight', mxConstants.STYLE_SPACING_RIGHT, 0) ||\n\t\tcheck('spacingBottom', mxConstants.STYLE_SPACING_BOTTOM, 0) ||\n\t\tcheck('spacingLeft', mxConstants.STYLE_SPACING_LEFT, 0) ||\n\t\tcheck('horizontal', mxConstants.STYLE_HORIZONTAL, true) ||\n\t\tcheck('background', mxConstants.STYLE_LABEL_BACKGROUNDCOLOR) ||\n\t\tcheck('border', mxConstants.STYLE_LABEL_BORDERCOLOR) ||\n\t\tcheck('opacity', mxConstants.STYLE_TEXT_OPACITY, 100) ||\n\t\tcheck('textDirection', mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n};\n\n/**\n * Function: redrawLabelShape\n * \n * Called to invoked redraw on the given text shape.\n * \n * Parameters:\n * \n * shape - <mxText> shape to be redrawn.\n */\nmxCellRenderer.prototype.redrawLabelShape = function(shape)\n{\n\tshape.redraw();\n};\n\n/**\n * Function: getTextScale\n * \n * Returns the scaling used for the label of the given state\n * \n * Parameters:\n * \n * state - <mxCellState> whose label scale should be returned.\n */\nmxCellRenderer.prototype.getTextScale = function(state)\n{\n\treturn state.view.scale;\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds to be used to draw the label of the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be returned.\n */\nmxCellRenderer.prototype.getLabelBounds = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar scale = state.view.scale;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\tvar bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y);\n\n\tif (isEdge)\n\t{\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * scale;\n\t\tbounds.y += spacing.y * scale;\n\t\t\n\t\tvar geo = graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tbounds.width = Math.max(0, geo.width * scale);\n\t\t\tbounds.height = Math.max(0, geo.height * scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Inverts label position\n\t\tif (state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = bounds.x;\n\t\t\tbounds.x = bounds.y;\n\t\t\tbounds.y = tmp;\n\t\t}\n\t\t\n\t\tbounds.x += state.x;\n\t\tbounds.y += state.y;\n\t\t\n\t\t// Minimum of 1 fixes alignment bug in HTML labels\n\t\tbounds.width = Math.max(1, state.width);\n\t\tbounds.height = Math.max(1, state.height);\n\t}\n\n\tif (state.text.isPaintBoundsInverted())\n\t{\n\t\t// Rotates around center of state\n\t\tvar t = (state.width - state.height) / 2;\n\t\tbounds.x += t;\n\t\tbounds.y -= t;\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\n\t// Shape can modify its label bounds\n\tif (state.shape != null)\n\t{\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tif (hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tbounds = state.shape.getLabelBounds(bounds);\n\t\t}\n\t}\n\t\n\t// Label width style overrides actual label width\n\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\n\tif (lw != null)\n\t{\n\t\tbounds.width = parseFloat(lw) * scale;\n\t}\n\t\n\tif (!isEdge)\n\t{\n\t\tthis.rotateLabelBounds(state, bounds);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: rotateLabelBounds\n * \n * Adds the shape rotation to the given label bounds and\n * applies the alignment and offsets.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be rotated.\n * bounds - <mxRectangle> the rectangle to be rotated.\n */\nmxCellRenderer.prototype.rotateLabelBounds = function(state, bounds)\n{\n\tbounds.y -= state.text.margin.y * bounds.height;\n\tbounds.x -= state.text.margin.x * bounds.width;\n\t\n\tif (!this.legacySpacing || (state.style[mxConstants.STYLE_OVERFLOW] != 'fill' && state.style[mxConstants.STYLE_OVERFLOW] != 'width'))\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * s;\n\t\tbounds.y += spacing.y * s;\n\t\t\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tbounds.width = Math.max(0, bounds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (state.text.spacingLeft * s + state.text.spacingRight * s) : 0));\n\t\tbounds.height = Math.max(0, bounds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (state.text.spacingTop * s + state.text.spacingBottom * s) : 0));\n\t}\n\n\tvar theta = state.text.getTextRotation();\n\n\t// Only needed if rotated around another center\n\tif (theta != 0 && state != null && state.view.graph.model.isVertex(state.cell))\n\t{\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\t\n\t\tif (bounds.x != cx || bounds.y != cy)\n\t\t{\n\t\t\tvar rad = theta * (Math.PI / 180);\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(bounds.x, bounds.y),\n\t\t\t\t\tMath.cos(rad), Math.sin(rad), new mxPoint(cx, cy));\n\t\t\t\n\t\t\tbounds.x = pt.x;\n\t\t\tbounds.y = pt.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawCellOverlays\n * \n * Redraws the overlays for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose overlays should be redrawn.\n */\nmxCellRenderer.prototype.redrawCellOverlays = function(state, forced)\n{\n\tthis.createCellOverlays(state);\n\n\tif (state.overlays != null)\n\t{\n\t\tvar rot = mxUtils.mod(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0), 90);\n        var rad = mxUtils.toRadians(rot);\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n\t\t\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tvar bounds = shape.overlay.getBounds(state);\n\t\t\n\t\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t\t{\n\t\t\t\tif (state.shape != null && rot != 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = bounds.getCenterX();\n\t\t\t\t\tvar cy = bounds.getCenterY();\n\n\t\t\t\t\tvar point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t        bounds.x = Math.round(cx - bounds.width / 2);\n\t\t\t        bounds.y = Math.round(cy - bounds.height / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (forced || shape.bounds == null || shape.scale != state.view.scale ||\n\t\t\t\t!shape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tshape.bounds = bounds;\n\t\t\t\tshape.scale = state.view.scale;\n\t\t\t\tshape.redraw();\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Function: redrawControl\n * \n * Redraws the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control should be redrawn.\n */\nmxCellRenderer.prototype.redrawControl = function(state, forced)\n{\n\tvar image = state.view.graph.getFoldingImage(state);\n\t\n\tif (state.control != null && image != null)\n\t{\n\t\tvar bounds = this.getControlBounds(state, image.width, image.height);\n\t\tvar r = (this.legacyControlPosition) ?\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0) :\n\t\t\t\tstate.shape.getTextRotation();\n\t\tvar s = state.view.scale;\n\t\t\n\t\tif (forced || state.control.scale != s || !state.control.bounds.equals(bounds) ||\n\t\t\tstate.control.rotation != r)\n\t\t{\n\t\t\tstate.control.rotation = r;\n\t\t\tstate.control.bounds = bounds;\n\t\t\tstate.control.scale = s;\n\t\t\t\n\t\t\tstate.control.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getControlBounds\n * \n * Returns the bounds to be used to draw the control (folding icon) of the\n * given state.\n */\nmxCellRenderer.prototype.getControlBounds = function(state, w, h)\n{\n\tif (state.control != null)\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\n\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t{\n\t\t\tcx = state.x + w * s;\n\t\t\tcy = state.y + h * s;\n\t\t\t\n\t\t\tif (state.shape != null)\n\t\t\t{\n\t\t\t\t// TODO: Factor out common code\n\t\t\t\tvar rot = state.shape.getShapeRotation();\n\t\t\t\t\n\t\t\t\tif (this.legacyControlPosition)\n\t\t\t\t{\n\t\t\t\t\trot = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (state.shape.isPaintBoundsInverted())\n\t\t\t\t\t{\n\t\t\t\t\t\tvar t = (state.width - state.height) / 2;\n\t\t\t\t\t\tcx += t;\n\t\t\t\t\t\tcy -= t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (rot != 0)\n\t\t\t\t{\n\t\t\t        var rad = mxUtils.toRadians(rot);\n\t\t\t        var cos = Math.cos(rad);\n\t\t\t        var sin = Math.sin(rad);\n\t\t\t        \n\t\t\t        var point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (state.view.graph.getModel().isEdge(state.cell)) ? \n\t\t\tnew mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s))\n\t\t\t: new mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: insertStateAfter\n * \n * Inserts the given array of <mxShapes> after the given nodes in the DOM.\n * \n * Parameters:\n * \n * shapes - Array of <mxShapes> to be inserted.\n * node - Node in <drawPane> after which the shapes should be inserted.\n * htmlNode - Node in the graph container after which the shapes should be inserted that\n * will not go into the <drawPane> (eg. HTML labels without foreignObjects).\n */\nmxCellRenderer.prototype.insertStateAfter = function(state, node, htmlNode)\n{\n\tvar shapes = this.getShapesForState(state);\n\t\n\tfor (var i = 0; i < shapes.length; i++)\n\t{\n\t\tif (shapes[i] != null && shapes[i].node != null)\n\t\t{\n\t\t\tvar html = shapes[i].node.parentNode != state.view.getDrawPane() &&\n\t\t\t\tshapes[i].node.parentNode != state.view.getOverlayPane();\n\t\t\tvar temp = (html) ? htmlNode : node;\n\t\t\t\n\t\t\tif (temp != null && temp.nextSibling != shapes[i].node)\n\t\t\t{\n\t\t\t\tif (temp.nextSibling == null)\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.appendChild(shapes[i].node);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.insertBefore(shapes[i].node, temp.nextSibling);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (temp == null)\n\t\t\t{\n\t\t\t\t// Special case: First HTML node should be first sibling after canvas\n\t\t\t\tif (shapes[i].node.parentNode == state.view.graph.container)\n\t\t\t\t{\n\t\t\t\t\tvar canvas = state.view.canvas;\n\t\t\t\t\t\n\t\t\t\t\twhile (canvas != null && canvas.parentNode != state.view.graph.container)\n\t\t\t\t\t{\n\t\t\t\t\t\tcanvas = canvas.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (canvas != null && canvas.nextSibling != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (canvas.nextSibling != shapes[i].node)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, canvas.nextSibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshapes[i].node.parentNode.appendChild(shapes[i].node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (shapes[i].node.parentNode != null &&\n\t\t\t\t\tshapes[i].node.parentNode.firstChild != null &&\n\t\t\t\t\tshapes[i].node.parentNode.firstChild != shapes[i].node)\n\t\t\t\t{\n\t\t\t\t\t// Inserts the node as the first child of the parent to implement the order\n\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, shapes[i].node.parentNode.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (html)\n\t\t\t{\n\t\t\t\thtmlNode = shapes[i].node;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode = shapes[i].node;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [node, htmlNode];\n};\n\n/**\n * Function: getShapesForState\n * \n * Returns the <mxShapes> for the given cell state in the order in which they should\n * appear in the DOM.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shapes should be returned.\n */\nmxCellRenderer.prototype.getShapesForState = function(state)\n{\n\treturn [state.shape, state.text, state.control];\n};\n\n/**\n * Function: redraw\n * \n * Updates the bounds or points and scale of the shapes for the given cell\n * state. This is called in mxGraphView.validatePoints as the last step of\n * updating all cells.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be updated.\n * force - Optional boolean that specifies if the cell should be reconfiured\n * and redrawn without any additional checks.\n * rendering - Optional boolean that specifies if the cell should actually\n * be drawn into the DOM. If this is false then redraw and/or reconfigure\n * will not be called on the shape.\n */\nmxCellRenderer.prototype.redraw = function(state, force, rendering)\n{\n\tvar shapeChanged = this.redrawShape(state, force, rendering);\n\n\tif (state.shape != null && (rendering == null || rendering))\n\t{\n\t\tthis.redrawLabel(state, shapeChanged);\n\t\tthis.redrawCellOverlays(state, shapeChanged);\n\t\tthis.redrawControl(state, shapeChanged);\n\t}\n};\n\n/**\n * Function: redrawShape\n * \n * Redraws the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawShape = function(state, force, rendering)\n{\n\tvar model = state.view.graph.model;\n\tvar shapeChanged = false;\n\n\t// Forces creation of new shape if shape style has changed\n\tif (state.shape != null && state.shape.style != null && state.style != null &&\n\t\tstate.shape.style[mxConstants.STYLE_SHAPE] != state.style[mxConstants.STYLE_SHAPE])\n\t{\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n\t\n\tif (state.shape == null && state.view.graph.container != null &&\n\t\tstate.cell != state.view.currentRoot &&\n\t\t(model.isVertex(state.cell) || model.isEdge(state.cell)))\n\t{\n\t\tstate.shape = this.createShape(state);\n\t\t\n\t\tif (state.shape != null)\n\t\t{\n\t\t\tstate.shape.minSvgStrokeWidth = this.minSvgStrokeWidth;\n\t\t\tstate.shape.antiAlias = this.antiAlias;\n\t\n\t\t\tthis.createIndicatorShape(state);\n\t\t\tthis.initializeShape(state);\n\t\t\tthis.createCellOverlays(state);\n\t\t\tthis.installListeners(state);\n\t\t\t\n\t\t\t// Forces a refresh of the handler if one exists\n\t\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\t}\n\t}\n\telse if (!force && state.shape != null && (!mxUtils.equalEntries(state.shape.style,\n\t\tstate.style) || this.checkPlaceholderStyles(state)))\n\t{\n\t\tstate.shape.resetStyles();\n\t\tthis.configureShape(state);\n\t\t// LATER: Ignore update for realtime to fix reset of current gesture\n\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\tforce = true;\n\t}\n\t\n\t// Updates indicator shape\n\tif (state.shape != null && state.shape.indicatorShape !=\n\t\tthis.getShape(state.view.graph.getIndicatorShape(state)))\n\t{\n\t\tif (state.shape.indicator != null)\n\t\t{\n\t\t\tstate.shape.indicator.destroy();\n\t\t\tstate.shape.indicator = null;\n\t\t}\n\t\t\n\t\tthis.createIndicatorShape(state);\n\t\t\n\t\tif (state.shape.indicatorShape != null)\n\t\t{\n\t\t\tstate.shape.indicator = new state.shape.indicatorShape();\n\t\t\tstate.shape.indicator.dialect = state.shape.dialect;\n\t\t\tstate.shape.indicator.init(state.node);\n\t\t\tforce = true;\n\t\t}\n\t}\n\n\tif (state.shape != null)\n\t{\n\t\t// Handles changes of the collapse icon\n\t\tthis.createControl(state);\n\t\t\n\t\t// Redraws the cell if required, ignores changes to bounds if points are\n\t\t// defined as the bounds are updated for the given points inside the shape\n\t\tif (force || this.isShapeInvalid(state, state.shape))\n\t\t{\n\t\t\tif (state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tstate.shape.points = state.absolutePoints.slice();\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.points = null;\n\t\t\t\tstate.shape.bounds = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\t}\n\n\t\t\tstate.shape.scale = state.view.scale;\n\t\t\t\n\t\t\tif (rendering == null || rendering)\n\t\t\t{\n\t\t\t\tthis.doRedrawShape(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.updateBoundingBox();\n\t\t\t}\n\t\t\t\n\t\t\tshapeChanged = true;\n\t\t}\n\t}\n\n\treturn shapeChanged;\n};\n\n/**\n * Function: doRedrawShape\n * \n * Invokes redraw on the shape of the given state.\n */\nmxCellRenderer.prototype.doRedrawShape = function(state)\n{\n\tstate.shape.redraw();\n};\n\n/**\n * Function: isShapeInvalid\n * \n * Returns true if the given shape must be repainted.\n */\nmxCellRenderer.prototype.isShapeInvalid = function(state, shape)\n{\n\treturn shape.bounds == null || shape.scale != state.view.scale ||\n\t\t(state.absolutePoints == null && !shape.bounds.equals(state)) ||\n\t\t(state.absolutePoints != null && !mxUtils.equalPoints(shape.points, state.absolutePoints))\n};\n\n/**\n * Function: destroy\n * \n * Destroys the shapes associated with the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be destroyed.\n */\nmxCellRenderer.prototype.destroy = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tif (state.text != null)\n\t\t{\t\t\n\t\t\tstate.text.destroy();\n\t\t\tstate.text = null;\n\t\t}\n\t\t\n\t\tif (state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\tshape.destroy();\n\t\t\t});\n\t\t\t\n\t\t\tstate.overlays = null;\n\t\t}\n\n\t\tif (state.control != null)\n\t\t{\n\t\t\tstate.control.destroy();\n\t\t\tstate.control = null;\n\t\t}\n\t\t\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n};\n\n__mxOutput.mxCellRenderer = typeof mxCellRenderer !== 'undefined' ? mxCellRenderer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEdgeStyle =\n{\n\t/**\n\t * Class: mxEdgeStyle\n\t * \n\t * Provides various edge styles to be used as the values for\n\t * <mxConstants.STYLE_EDGE> in a cell style.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * var style = stylesheet.getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;\n\t * (end)\n\t * \n\t * Sets the default edge style to <ElbowConnector>.\n\t * \n\t * Custom edge style:\n\t * \n\t * To write a custom edge style, a function must be added to the mxEdgeStyle\n\t * object as follows:\n\t * \n\t * (code)\n\t * mxEdgeStyle.MyStyle = function(state, source, target, points, result)\n\t * {\n\t *   if (source != null && target != null)\n\t *   {\n\t *     var pt = new mxPoint(target.getCenterX(), source.getCenterY());\n\t * \n\t *     if (mxUtils.contains(source, pt.x, pt.y))\n\t *     {\n\t *       pt.y = source.y + source.height;\n\t *     }\n\t * \n\t *     result.push(pt);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * In the above example, a right angle is created using a point on the\n\t * horizontal center of the target vertex and the vertical center of the source\n\t * vertex. The code checks if that point intersects the source vertex and makes\n\t * the edge straight if it does. The point is then added into the result array,\n\t * which acts as the return value of the function.\n\t *\n\t * The new edge style should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('myEdgeStyle', mxEdgeStyle.MyStyle);\n\t * (end)\n\t * \n\t * The custom edge style above can now be used in a specific edge as follows:\n\t * \n\t * (code)\n\t * model.setStyle(edge, 'edgeStyle=myEdgeStyle');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxEdgeStyle.MyStyle for the value in the\n\t * cell style above.\n\t * \n\t * Or it can be used for all edges in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.MyStyle;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * Function: EntityRelation\n\t * \n\t * Implements an entity relation style for edges (as used in database\n\t * schema diagrams). At the time the function is called, the result\n\t * array contains a placeholder (null) for the first absolute point,\n\t * that is, the point where the edge and source terminal are connected.\n\t * The implementation of the style then adds all intermediate waypoints\n\t * except for the last point, that is, the connection point between the\n\t * edge and the target terminal. The first ant the last point in the\n\t * result array are then replaced with mxPoints that take into account\n\t * the terminal's perimeter and next point on the edge.\n\t *\n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t */\n\t EntityRelation: function(state, source, target, points, result)\n\t {\n\t\tvar view = state.view;\n\t \tvar graph = view.graph;\n\t \tvar segment = mxUtils.getValue(state.style,\n\t \t\t\tmxConstants.STYLE_SEGMENT,\n\t \t\t\tmxConstants.ENTITY_SEGMENT) * view.scale;\n\t \t\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t \tvar isSourceLeft = false;\n\t \t\n\t \tif (source != null)\n\t \t{\n \t\t\tvar sourceGeometry = graph.getCellGeometry(source.cell);\n\t\n\t\t \tif (sourceGeometry.relative)\n\t\t \t{\n\t\t \t\tisSourceLeft = sourceGeometry.x <= 0.5;\n\t\t \t}\n\t\t \telse if (target != null)\n\t\t \t{\n\t\t \t\tisSourceLeft = ((pe != null) ? pe.x : target.x + target.width) < ((p0 != null) ? p0.x : source.x);\n\t\t \t}\n\t \t}\n\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\telse if (source != null)\n\t\t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(source, state, true, mxConstants.DIRECTION_MASK_NONE);\n\t\t\t\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisSourceLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\t \t\n\t \tvar isTargetLeft = true;\n\t \t\n\t \tif (target != null)\n\t \t{\n\t\t \tvar targetGeometry = graph.getCellGeometry(target.cell);\n\t\n\t\t \tif (targetGeometry.relative)\n\t\t \t{\n\t\t \t\tisTargetLeft = targetGeometry.x <= 0.5;\n\t\t \t}\n\t\t \telse if (source != null)\n\t\t \t{\n\t\t \t\tisTargetLeft = ((p0 != null) ? p0.x : source.x + source.width) < ((pe != null) ? pe.x : target.x);\n\t\t \t}\n\t \t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\telse if (target != null)\n\t \t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(target, state, false, mxConstants.DIRECTION_MASK_NONE);\n\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisTargetLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t \t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar x0 = (isSourceLeft) ? source.x : source.x + source.width;\n\t\t\tvar y0 = view.getRoutingCenterY(source);\n\t\t\t\n\t\t\tvar xe = (isTargetLeft) ? target.x : target.x + target.width;\n\t\t\tvar ye = view.getRoutingCenterY(target);\n\t\n\t\t\tvar seg = segment;\n\t\n\t\t\tvar dx = (isSourceLeft) ? -seg : seg;\n\t\t\tvar dep = new mxPoint(x0 + dx, y0);\n\t\t\t\t\t\n\t\t\tdx = (isTargetLeft) ? -seg : seg;\n\t\t\tvar arr = new mxPoint(xe + dx, ye);\n\t\t\t\n\t\t\t// Adds intermediate points if both go out on same side\n\t\t\tif (isSourceLeft == isTargetLeft)\n\t\t\t{\n\t\t\t\tvar x = (isSourceLeft) ?\n\t\t\t\t\tMath.min(x0, xe)-segment :\n\t\t\t\t\tMath.max(x0, xe)+segment;\n\t\n\t\t\t\tresult.push(new mxPoint(x, y0));\n\t\t\t\tresult.push(new mxPoint(x, ye));\n\t\t\t}\n\t\t\telse if ((dep.x < arr.x) == isSourceLeft)\n\t\t\t{\n\t\t\t\tvar midY = y0 + (ye - y0) / 2;\n\t\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(new mxPoint(dep.x, midY));\n\t\t\t\tresult.push(new mxPoint(arr.x, midY));\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t}\n\t },\n\n\t /**\n\t * Function: Loop\n\t * \n\t * Implements a self-reference, aka. loop.\n\t */\n\tLoop: function(state, source, target, points, result)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tif (points != null && points.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = points[i];\n\t\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\tresult.push(new mxPoint(pt.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tvar view = state.view;\n\t\t\tvar graph = view.graph;\n\t\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tif (mxUtils.contains(source, pt.x, pt.y))\n\t\t\t\t{\n\t\t\t\t\tpt = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = 0;\n\t\t\tvar dx = 0;\n\t\t\tvar y = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t \tvar seg = mxUtils.getValue(state.style, mxConstants.STYLE_SEGMENT,\n\t\t \t\tgraph.gridSize) * view.scale;\n\t\t\tvar dir = mxUtils.getValue(state.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_WEST);\n\t\t\t\n\t\t\tif (dir == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdir == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = seg;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ty = view.getRoutingCenterY(source);\n\t\t\t\tdy = seg;\n\t\t\t}\n\t\t\t\n\t\t\tif (pt == null ||\n\t\t\t\tpt.x < source.x ||\n\t\t\t\tpt.x > source.x + source.width)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tx = pt.x;\n\t\t\t\t\tdy = Math.max(Math.abs(y - pt.y), dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y - 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y + source.height + 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_EAST)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x - 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x + source.width + 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (pt != null)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = Math.max(Math.abs(x - pt.x), dy);\n\t\t\t\ty = pt.y;\n\t\t\t\tdy = 0;\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(x - dx, y - dy));\n\t\t\tresult.push(new mxPoint(x + dx, y + dy));\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: ElbowConnector\n\t * \n\t * Uses either <SideToSide> or <TopToBottom> depending on the horizontal\n\t * flag in the cell style. <SideToSide> is used if horizontal is true or\n\t * unspecified. See <EntityRelation> for a description of the\n\t * parameters.\n\t */\n\tElbowConnector: function(state, source, target, points, result)\n\t{\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\tvar vertical = false;\n\t\tvar horizontal = false;\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar left = Math.min(source.x, target.x);\n\t\t\t\tvar right = Math.max(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\n\t\t\t\tvar top = Math.min(source.y, target.y);\n\t\t\t\tvar bottom = Math.max(source.y + source.height,\n\t\t\t\t\ttarget.y + target.height);\n\n\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tvertical = pt.y < top || pt.y > bottom;\n\t\t\t\thorizontal = pt.x < left || pt.x > right;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar left = Math.max(source.x, target.x);\n\t\t\t\tvar right = Math.min(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\t\t\t\t\n\t\t\t\tvertical = left == right;\n\t\t\t\t\n\t\t\t\tif (!vertical)\n\t\t\t\t{\n\t\t\t\t\tvar top = Math.max(source.y, target.y);\n\t\t\t\t\tvar bottom = Math.min(source.y + source.height,\n\t\t\t\t\t\ttarget.y + target.height);\n\t\t\t\t\t\t\n\t\t\t\t\thorizontal = top == bottom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!horizontal && (vertical ||\n\t\t\tstate.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL))\n\t\t{\n\t\t\tmxEdgeStyle.TopToBottom(state, source, target, points, result);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxEdgeStyle.SideToSide(state, source, target, points, result);\n\t\t}\n\t},\n\n\t/**\n\t * Function: SideToSide\n\t * \n\t * Implements a vertical elbow edge. See <EntityRelation> for a description\n\t * of the parameters.\n\t */\n\tSideToSide: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\n\t\t\tvar x = (pt != null) ? pt.x : Math.round(r + (l - r) / 2);\n\t\n\t\t\tvar y1 = view.getRoutingCenterY(source);\n\t\t\tvar y2 = view.getRoutingCenterY(target);\n\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tif (pt.y >= source.y && pt.y <= source.y + source.height)\n\t\t\t\t{\n\t\t\t\t\ty1 = pt.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (pt.y >= target.y && pt.y <= target.y + target.height)\n\t\t\t\t{\n\t\t\t\t\ty2 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y1) &&\n\t\t\t\t!mxUtils.contains(source, x, y1))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x,  y1));\n\t\t\t}\n\t\n\t\t\tif (!mxUtils.contains(target, x, y2) &&\n\t\t\t\t!mxUtils.contains(source, x, y2))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y2));\n\t\t\t}\n\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, x, pt.y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, x, pt.y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(x, pt.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\n\t\t\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(x, t + (b - t) / 2));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: TopToBottom\n\t * \n\t * Implements a horizontal elbow edge. See <EntityRelation> for a\n\t * description of the parameters.\n\t */\n\tTopToBottom: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\n\t\t\tvar x = view.getRoutingCenterX(source);\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= source.x &&\n\t\t\t\tpt.x <= source.x + source.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\t\n\t\t\tvar y = (pt != null) ? pt.y : Math.round(b + (t - b) / 2);\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= target.x &&\n\t\t\t\tpt.x <= target.x + target.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(target);\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null && result.length == 1)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, pt.x, y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, pt.x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(pt.x, y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(l + (r - l) / 2, y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: SegmentConnector\n\t * \n\t * Implements an orthogonal edge style. Use <mxEdgeSegmentHandler>\n\t * as an interactive handler for this style.\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * sourceScaled - <mxCellState> that represents the source terminal.\n\t * targetScaled - <mxCellState> that represents the target terminal.\n\t * controlHints - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t *\n\t */\n\tSegmentConnector: function(state, sourceScaled, targetScaled, controlHints, result)\n\t{\n\t\t// Creates array of all way- and terminalpoints\n\t\tvar pts = mxEdgeStyle.scalePointArray(state.absolutePoints, state.view.scale);\n\t\tvar source = mxEdgeStyle.scaleCellState(sourceScaled, state.view.scale);\n\t\tvar target = mxEdgeStyle.scaleCellState(targetScaled, state.view.scale);\n\t\tvar tol = 1;\n\t\t\n\t\t// Whether the first segment outgoing from the source end is horizontal\n\t\tvar lastPushed = (result.length > 0) ? result[0] : null;\n\t\tvar horizontal = true;\n\t\tvar hint = null;\n\t\t\n\t\t// Adds waypoints only if outside of tolerance\n\t\tfunction pushPoint(pt)\n\t\t{\n\t\t\tpt.x = Math.round(pt.x * state.view.scale * 10) / 10;\n\t\t\tpt.y = Math.round(pt.y * state.view.scale * 10) / 10;\n\n\t\t\tif (lastPushed == null || Math.abs(lastPushed.x - pt.x) >= tol || Math.abs(lastPushed.y - pt.y) >= Math.max(1, state.view.scale))\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t\tlastPushed = pt;\n\t\t\t}\n\t\t\t\n\t\t\treturn lastPushed;\n\t\t};\n\n\t\t// Adds the first point\n\t\tvar pt = pts[0];\n\t\t\n\t\tif (pt == null && source != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));\n\t\t}\n\t\telse if (pt != null)\n\t\t{\n\t\t\tpt = pt.clone();\n\t\t}\n\t\t\n\t\tvar lastInx = pts.length - 1;\n\n\t\t// Adds the waypoints\n\t\tif (controlHints != null && controlHints.length > 0)\n\t\t{\n\t\t\t// Converts all hints and removes nulls\n\t\t\tvar hints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < controlHints.length; i++)\n\t\t\t{\n\t\t\t\tvar tmp = state.view.transformControlPoint(state, controlHints[i], true);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\thints.push(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (hints.length == 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Aligns source and target hint to fixed points\n\t\t\tif (pt != null && hints[0] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[0].x - pt.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].x = pt.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[0].y - pt.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].y = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pe = pts[lastInx];\n\t\t\t\n\t\t\tif (pe != null && hints[hints.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[hints.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[hints.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\thint = hints[0];\n\n\t\t\tvar currentTerm = source;\n\t\t\tvar currentPt = pts[0];\n\t\t\tvar hozChan = false;\n\t\t\tvar vertChan = false;\n\t\t\tvar currentHint = hint;\n\t\t\t\n\t\t\tif (currentPt != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Check for alignment with fixed points and with channels\n\t\t\t// at source and target segments only\n\t\t\tfor (var i = 0; i < 2; i++)\n\t\t\t{\n\t\t\t\tvar fixedVertAlign = currentPt != null && currentPt.x == currentHint.x;\n\t\t\t\tvar fixedHozAlign = currentPt != null && currentPt.y == currentHint.y;\n\t\t\t\t\n\t\t\t\tvar inHozChan = currentTerm != null && (currentHint.y >= currentTerm.y &&\n\t\t\t\t\t\tcurrentHint.y <= currentTerm.y + currentTerm.height);\n\t\t\t\tvar inVertChan = currentTerm != null && (currentHint.x >= currentTerm.x &&\n\t\t\t\t\t\tcurrentHint.x <= currentTerm.x + currentTerm.width);\n\n\t\t\t\thozChan = fixedHozAlign || (currentPt == null && inHozChan);\n\t\t\t\tvertChan = fixedVertAlign || (currentPt == null && inVertChan);\n\t\t\t\t\n\t\t\t\t// If the current hint falls in both the hor and vert channels in the case\n\t\t\t\t// of a floating port, or if the hint is exactly co-incident with a \n\t\t\t\t// fixed point, ignore the source and try to work out the orientation\n\t\t\t\t// from the target end\n\t\t\t\tif (i==0 && ((hozChan && vertChan) || (fixedVertAlign && fixedHozAlign)))\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (currentPt != null && (!fixedHozAlign && !fixedVertAlign) && (inHozChan || inVertChan)) \n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = inHozChan ? false : true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tif (vertChan || hozChan)\n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = hozChan;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (i == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Work back from target end\n\t\t\t\t\t\t\thorizontal = hints.length % 2 == 0 ? hozChan : vertChan;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentTerm = target;\n\t\t\t\tcurrentPt = pts[lastInx];\n\t\t\t\t\n\t\t\t\tif (currentPt != null)\n\t\t\t\t{\n\t\t\t\t\tcurrentTerm = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentHint = hints[hints.length - 1];\n\t\t\t\t\n\t\t\t\tif (fixedVertAlign && fixedHozAlign)\n\t\t\t\t{\n\t\t\t\t\thints = hints.slice(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (horizontal && ((pts[0] != null && pts[0].y != hint.y) ||\n\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t(hint.y < source.y || hint.y > source.y + source.height))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t}\n\t\t\telse if (!horizontal && ((pts[0] != null && pts[0].x != hint.x) ||\n\t\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t\t(hint.x < source.x || hint.x > source.x + source.width))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal)\n\t\t\t{\n\t\t\t\tpt.y = hint.y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpt.x = hint.x;\n\t\t\t}\n\t\t\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\thorizontal = !horizontal;\n\t\t\t\thint = hints[i];\n\t\t\t\t\n//\t\t\t\tmxLog.show();\n//\t\t\t\tmxLog.debug('hint', i, hint.x, hint.y);\n\t\t\t\t\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tpt.y = hint.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpt.x = hint.x;\n\t\t\t\t}\n\t\t\n\t\t\t\tpushPoint(pt.clone());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\thint = pt;\n\t\t\t// FIXME: First click in connect preview toggles orientation\n\t\t\thorizontal = true;\n\t\t}\n\n\t\t// Adds the last point\n\t\tpt = pts[lastInx];\n\n\t\tif (pt == null && target != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));\n\t\t}\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tif (hint != null)\n\t\t\t{\n\t\t\t\tif (horizontal && ((pts[lastInx] != null && pts[lastInx].y != hint.y) ||\n\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t(hint.y < target.y || hint.y > target.y + target.height))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t\t}\n\t\t\t\telse if (!horizontal && ((pts[lastInx] != null && pts[lastInx].x != hint.x) ||\n\t\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t\t(hint.x < target.x || hint.x > target.x + target.width))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the source terminal for floating ports\n\t\tif (pts[0] == null && source != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[1] != null &&\n\t\t\t\tmxUtils.contains(source, result[1].x, result[1].y))\n\t\t\t{\n\t\t\t\tresult.splice(1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the target terminal\n\t\tif (pts[lastInx] == null && target != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[result.length - 1] != null &&\n\t\t\t\tmxUtils.contains(target, result[result.length - 1].x, result[result.length - 1].y))\n\t\t\t{\n\t\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes last point if inside tolerance with end point\n\t\tif (pe != null && result[result.length - 1] != null &&\n\t\t\tMath.abs(pe.x - result[result.length - 1].x) <= tol &&\n\t\t\tMath.abs(pe.y - result[result.length - 1].y) <= tol)\n\t\t{\n\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t\n\t\t\t// Lines up second last point in result with end point\n\t\t\tif (result[result.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(result[result.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(result[result.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\torthBuffer: 10,\n\t\n\torthPointsFallback: true,\n\n\tdirVectors: [ [ -1, 0 ],\n\t\t\t[ 0, -1 ], [ 1, 0 ], [ 0, 1 ], [ -1, 0 ], [ 0, -1 ], [ 1, 0 ] ],\n\n\twayPoints1: [ [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0], [ 0, 0],  [ 0, 0],\n\t              [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0] ],\n\n\troutePatterns: [\n\t\t[ [ 513, 2308, 2081, 2562 ], [ 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 513, 1090, 514, 2564, 2184, 2562 ],\n\t\t\t[ 513, 2308, 2561, 1090, 514, 2568, 2308 ] ],\n\t[ [ 514, 1057, 513, 2308, 2081, 2562 ], [ 514, 2184, 2114, 2561 ],\n\t\t\t[ 514, 2184, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 514, 1057, 513, 2568, 2308, 2561 ] ],\n\t[ [ 1090, 514, 1057, 513, 2308, 2081, 2562 ], [ 2114, 2561 ],\n\t\t\t[ 1090, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 1090, 514, 1057, 513, 2308, 2561, 2568 ] ],\n\t[ [ 2081, 2562 ], [ 1057, 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 1057, 513, 1090, 514, 2184, 2562, 2564 ],\n\t\t\t[ 1057, 2561, 1090, 514, 2568, 2308 ] ] ],\n\t\n\tinlineRoutePatterns: [\n\t\t\t[ null, [ 2114, 2568 ], null, null ],\n\t\t\t[ null, [ 514, 2081, 2114, 2568 ] , null, null ],\n\t\t\t[ null, [ 2114, 2561 ], null, null ],\n\t\t\t[ [ 2081, 2562 ], [ 1057, 2114, 2568 ],\n\t\t\t\t\t[ 2184, 2562 ],\n\t\t\t\t\tnull ] ],\n\tvertexSeperations: [],\n\n\tlimits: [\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ],\n\n\tLEFT_MASK: 32,\n\n\tTOP_MASK: 64,\n\n\tRIGHT_MASK: 128,\n\n\tBOTTOM_MASK: 256,\n\n\tLEFT: 1,\n\n\tTOP: 2,\n\n\tRIGHT: 4,\n\n\tBOTTOM: 8,\n\n\t// TODO remove magic numbers\n\tSIDE_MASK: 480,\n\t//mxEdgeStyle.LEFT_MASK | mxEdgeStyle.TOP_MASK | mxEdgeStyle.RIGHT_MASK\n\t//| mxEdgeStyle.BOTTOM_MASK,\n\n\tCENTER_MASK: 512,\n\n\tSOURCE_MASK: 1024,\n\n\tTARGET_MASK: 2048,\n\n\tVERTEX_MASK: 3072,\n\t// mxEdgeStyle.SOURCE_MASK | mxEdgeStyle.TARGET_MASK,\n\t\n\tgetJettySize: function(state, isSource)\n\t{\n\t\tvar value = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_SOURCE_JETTY_SIZE :\n\t\t\tmxConstants.STYLE_TARGET_JETTY_SIZE, mxUtils.getValue(state.style,\n\t\t\t\t\tmxConstants.STYLE_JETTY_SIZE, mxEdgeStyle.orthBuffer));\n\t\t\n\t\tif (value == 'auto')\n\t\t{\n\t\t\t// Computes the automatic jetty size\n\t\t\tvar type = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW, mxConstants.NONE);\n\t\t\t\n\t\t\tif (type != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tvar size = mxUtils.getNumber(state.style, (isSource) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\t\tvalue = Math.max(2, Math.ceil((size + mxEdgeStyle.orthBuffer) / mxEdgeStyle.orthBuffer)) * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = 2 * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: scalePointArray\n\t * \n\t * Scales an array of <mxPoint>\n\t * \n\t * Parameters:\n\t * \n\t * points - array of <mxPoint> to scale\n\t * scale - the scaling to divide by\n\t * \n\t */\n\tscalePointArray: function(points, scale)\n\t{\n\t\tvar result = [];\n\n\t\tif (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = new mxPoint(Math.round(points[i].x / scale * 10) / 10,\n\t\t\t\t\t\t\t\t\t\tMath.round(points[i].y / scale * 10) / 10);\n\t\t\t\t\tresult[i] = pt;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult[i] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = null;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: scaleCellState\n\t * \n\t * Scales an <mxCellState>\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> to scale\n\t * scale - the scaling to divide by\n\t * \n\t */\n\tscaleCellState: function(state, scale)\n\t{\n\t\tvar result = null;\n\n\t\tif (state != null)\n\t\t{\n\t\t\tresult = state.clone();\n\t\t\tresult.setRect(Math.round(state.x / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.y / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.width / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.height / scale * 10) / 10);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = null;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: OrthConnector\n\t * \n\t * Implements a local orthogonal router between the given\n\t * cells.\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * sourceScaled - <mxCellState> that represents the source terminal.\n\t * targetScaled - <mxCellState> that represents the target terminal.\n\t * controlHints - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t * \n\t */\n\tOrthConnector: function(state, sourceScaled, targetScaled, controlHints, result)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar sourceEdge = source == null ? false : graph.getModel().isEdge(source.cell);\n\t\tvar targetEdge = target == null ? false : graph.getModel().isEdge(target.cell);\n\n\t\tvar pts = mxEdgeStyle.scalePointArray(state.absolutePoints, state.view.scale);\n\t\tvar source = mxEdgeStyle.scaleCellState(sourceScaled, state.view.scale);\n\t\tvar target = mxEdgeStyle.scaleCellState(targetScaled, state.view.scale);\n\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tvar sourceX = source != null ? source.x : p0.x;\n\t\tvar sourceY = source != null ? source.y : p0.y;\n\t\tvar sourceWidth = source != null ? source.width : 0;\n\t\tvar sourceHeight = source != null ? source.height : 0;\n\t\t\n\t\tvar targetX = target != null ? target.x : pe.x;\n\t\tvar targetY = target != null ? target.y : pe.y;\n\t\tvar targetWidth = target != null ? target.width : 0;\n\t\tvar targetHeight = target != null ? target.height : 0;\n\n\t\tvar sourceBuffer = mxEdgeStyle.getJettySize(state, true);\n\t\tvar targetBuffer = mxEdgeStyle.getJettySize(state, false);\n\t\t\n\t\t//console.log('sourceBuffer', sourceBuffer);\n\t\t//console.log('targetBuffer', targetBuffer);\n\t\t// Workaround for loop routing within buffer zone\n\t\tif (source != null && target == source)\n\t\t{\n\t\t\ttargetBuffer = Math.max(sourceBuffer, targetBuffer);\n\t\t\tsourceBuffer = targetBuffer;\n\t\t}\n\t\t\n\t\tvar totalBuffer = targetBuffer + sourceBuffer;\n\t\t// console.log('totalBuffer', totalBuffer);\n\t\tvar tooShort = false;\n\t\t\n\t\t// Checks minimum distance for fixed points and falls back to segment connector\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\n\t\t\ttooShort = dx * dx + dy * dy < totalBuffer * totalBuffer;\n\t\t}\n\n\t\tif (tooShort || (mxEdgeStyle.orthPointsFallback && (controlHints != null &&\n\t\t\t\tcontrolHints.length > 0)) || sourceEdge || targetEdge)\n\t\t{\n\t\t\tmxEdgeStyle.SegmentConnector(state, sourceScaled, targetScaled, controlHints, result);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine the side(s) of the source and target vertices\n\t\t// that the edge may connect to\n\t\t// portConstraint [source, target]\n\t\tvar portConstraint = [mxConstants.DIRECTION_MASK_ALL, mxConstants.DIRECTION_MASK_ALL];\n\t\tvar rotation = 0;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tportConstraint[0] = mxUtils.getPortConstraints(source, state, true, \n\t\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(source.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\t//console.log('source rotation', rotation);\n\t\t\t\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(sourceX, sourceY, sourceWidth, sourceHeight), rotation);\n\t\t\t\tsourceX = newRect.x; \n\t\t\t\tsourceY = newRect.y;\n\t\t\t\tsourceWidth = newRect.width;\n\t\t\t\tsourceHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\tif (target != null)\n\t\t{\n\t\t\tportConstraint[1] = mxUtils.getPortConstraints(target, state, false,\n\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(target.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\t//console.log('target rotation', rotation);\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(targetX, targetY, targetWidth, targetHeight), rotation);\n\t\t\t\ttargetX = newRect.x;\n\t\t\t\ttargetY = newRect.y;\n\t\t\t\ttargetWidth = newRect.width;\n\t\t\t\ttargetHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\t//console.log('source' , sourceX, sourceY, sourceWidth, sourceHeight);\n\t\t//console.log('targetX' , targetX, targetY, targetWidth, targetHeight);\n\n\t\tvar dir = [0, 0];\n\n\t\t// Work out which faces of the vertices present against each other\n\t\t// in a way that would allow a 3-segment connection if port constraints\n\t\t// permitted.\n\t\t// geo -> [source, target] [x, y, width, height]\n\t\tvar geo = [ [sourceX, sourceY, sourceWidth, sourceHeight] ,\n\t\t            [targetX, targetY, targetWidth, targetHeight] ];\n\t\tvar buffer = [sourceBuffer, targetBuffer];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tmxEdgeStyle.limits[i][1] = geo[i][0] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][2] = geo[i][1] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][4] = geo[i][0] + geo[i][2] + buffer[i];\n\t\t\tmxEdgeStyle.limits[i][8] = geo[i][1] + geo[i][3] + buffer[i];\n\t\t}\n\t\t\n\t\t// Work out which quad the target is in\n\t\tvar sourceCenX = geo[0][0] + geo[0][2] / 2.0;\n\t\tvar sourceCenY = geo[0][1] + geo[0][3] / 2.0;\n\t\tvar targetCenX = geo[1][0] + geo[1][2] / 2.0;\n\t\tvar targetCenY = geo[1][1] + geo[1][3] / 2.0;\n\t\t\n\t\tvar dx = sourceCenX - targetCenX;\n\t\tvar dy = sourceCenY - targetCenY;\n\n\t\tvar quad = 0;\n\n\t\t// 0 | 1\n\t\t// -----\n\t\t// 3 | 2\n\t\t\n\t\tif (dx < 0)\n\t\t{\n\t\t\tif (dy < 0)\n\t\t\t{\n\t\t\t\tquad = 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (dy <= 0)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\t// Special case on x = 0 and negative y\n\t\t\t\tif (dx == 0)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//console.log('quad', quad);\n\n\t\t// Check for connection constraints\n\t\tvar currentTerm = null;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tcurrentTerm = p0;\n\t\t}\n\n\t\tvar constraint = [ [0.5, 0.5] , [0.5, 0.5] ];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (currentTerm != null)\n\t\t\t{\n\t\t\t\tconstraint[i][0] = (currentTerm.x - geo[i][0]) / geo[i][2];\n\t\t\t\t\n\t\t\t\tif (Math.abs(currentTerm.x - geo[i][0]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.x - geo[i][0] - geo[i][2]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t}\n\n\t\t\t\tconstraint[i][1] = (currentTerm.y - geo[i][1]) / geo[i][3];\n\n\t\t\t\tif (Math.abs(currentTerm.y - geo[i][1]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.y - geo[i][1] - geo[i][3]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentTerm = null;\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = pe;\n\t\t\t}\n\t\t}\n\n\t\tvar sourceTopDist = geo[0][1] - (geo[1][1] + geo[1][3]);\n\t\tvar sourceLeftDist = geo[0][0] - (geo[1][0] + geo[1][2]);\n\t\tvar sourceBottomDist = geo[1][1] - (geo[0][1] + geo[0][3]);\n\t\tvar sourceRightDist = geo[1][0] - (geo[0][0] + geo[0][2]);\n\n\t\tmxEdgeStyle.vertexSeperations[1] = Math.max(sourceLeftDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[2] = Math.max(sourceTopDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[4] = Math.max(sourceBottomDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[3] = Math.max(sourceRightDist - totalBuffer, 0);\n\t\t\t\t\n\t\t//==============================================================\n\t\t// Start of source and target direction determination\n\n\t\t// Work through the preferred orientations by relative positioning\n\t\t// of the vertices and list them in preferred and available order\n\t\t\n\t\tvar dirPref = [];\n\t\tvar horPref = [];\n\t\tvar vertPref = [];\n\n\t\thorPref[0] = (sourceLeftDist >= sourceRightDist) ? mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t: mxConstants.DIRECTION_MASK_EAST;\n\t\tvertPref[0] = (sourceTopDist >= sourceBottomDist) ? mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t: mxConstants.DIRECTION_MASK_SOUTH;\n\n\t\thorPref[1] = mxUtils.reversePortConstraints(horPref[0]);\n\t\tvertPref[1] = mxUtils.reversePortConstraints(vertPref[0]);\n\t\t\n\t\tvar preferredHorizDist = sourceLeftDist >= sourceRightDist ? sourceLeftDist\n\t\t\t\t: sourceRightDist;\n\t\tvar preferredVertDist = sourceTopDist >= sourceBottomDist ? sourceTopDist\n\t\t\t\t: sourceBottomDist;\n\n\t\tvar prefOrdering = [ [0, 0] , [0, 0] ];\n\t\tvar preferredOrderSet = false;\n\n\t\t// If the preferred port isn't available, switch it\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((horPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\thorPref[i] = mxUtils.reversePortConstraints(horPref[i]);\n\t\t\t}\n\n\t\t\tif ((vertPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tvertPref[i] = mxUtils\n\t\t\t\t\t\t.reversePortConstraints(vertPref[i]);\n\t\t\t}\n\n\t\t\tprefOrdering[i][0] = vertPref[i];\n\t\t\tprefOrdering[i][1] = horPref[i];\n\t\t}\n\n\t\tif (preferredVertDist > 0\n\t\t\t\t&& preferredHorizDist > 0)\n\t\t{\n\t\t\t// Possibility of two segment edge connection\n\t\t\tif (((horPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((vertPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t\telse if (((vertPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((horPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (preferredVertDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\tpreferredOrderSet = true;\n\n\t\t}\n\t\t\n\t\tif (preferredHorizDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\tpreferredOrderSet = true;\n\t\t}\n\n\t\t// The source and target prefs are now an ordered list of\n\t\t// the preferred port selections\n\t\t// If the list contains gaps, compact it\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((prefOrdering[i][0] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tprefOrdering[i][0] = prefOrdering[i][1];\n\t\t\t}\n\n\t\t\tdirPref[i] = prefOrdering[i][0] & portConstraint[i];\n\t\t\tdirPref[i] |= (prefOrdering[i][1] & portConstraint[i]) << 8;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][i] & portConstraint[i]) << 16;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][1 - i] & portConstraint[i]) << 24;\n\n\t\t\tif ((dirPref[i] & 0xF) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = dirPref[i] << 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF00) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xF) | dirPref[i] >> 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF0000) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xFFFF)\n\t\t\t\t\t\t| ((dirPref[i] & 0xF000000) >> 8);\n\t\t\t}\n\n\t\t\tdir[i] = dirPref[i] & 0xF;\n\n\t\t\tif (portConstraint[i] == mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_EAST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_SOUTH)\n\t\t\t{\n\t\t\t\tdir[i] = portConstraint[i];\n\t\t\t}\n\t\t}\n\n\t\t//==============================================================\n\t\t// End of source and target direction determination\n\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\t\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar routePattern = mxEdgeStyle.routePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\n\t\t//console.log('routePattern', routePattern);\n\n\t\tmxEdgeStyle.wayPoints1[0][0] = geo[0][0];\n\t\tmxEdgeStyle.wayPoints1[0][1] = geo[0][1];\n\n\t\tswitch (dir[0])\n\t\t{\n\t\t\tcase mxConstants.DIRECTION_MASK_WEST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] -= sourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_SOUTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += geo[0][3] + sourceBuffer;\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_EAST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += geo[0][2] + sourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_NORTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] -= sourceBuffer;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar currentIndex = 0;\n\n\t\t// Orientation, 0 horizontal, 1 vertical\n\t\tvar lastOrientation = (dir[0] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t: 1;\n\t\tvar initialOrientation = lastOrientation;\n\t\tvar currentOrientation = 0;\n\n\t\tfor (var i = 0; i < routePattern.length; i++)\n\t\t{\n\t\t\tvar nextDirection = routePattern[i] & 0xF;\n\n\t\t\t// Rotate the index of this direction by the quad\n\t\t\t// to get the real direction\n\t\t\tvar directionIndex = nextDirection == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t\t: nextDirection;\n\n\t\t\tdirectionIndex += quad;\n\n\t\t\tif (directionIndex > 4)\n\t\t\t{\n\t\t\t\tdirectionIndex -= 4;\n\t\t\t}\n\n\t\t\tvar direction = mxEdgeStyle.dirVectors[directionIndex - 1];\n\n\t\t\tcurrentOrientation = (directionIndex % 2 > 0) ? 0 : 1;\n\t\t\t// Only update the current index if the point moved\n\t\t\t// in the direction of the current segment move,\n\t\t\t// otherwise the same point is moved until there is \n\t\t\t// a segment direction change\n\t\t\tif (currentOrientation != lastOrientation)\n\t\t\t{\n\t\t\t\tcurrentIndex++;\n\t\t\t\t// Copy the previous way point into the new one\n\t\t\t\t// We can't base the new position on index - 1\n\t\t\t\t// because sometime elbows turn out not to exist,\n\t\t\t\t// then we'd have to rewind.\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] = mxEdgeStyle.wayPoints1[currentIndex - 1][0];\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] = mxEdgeStyle.wayPoints1[currentIndex - 1][1];\n\t\t\t}\n\n\t\t\tvar tar = (routePattern[i] & mxEdgeStyle.TARGET_MASK) > 0;\n\t\t\tvar sou = (routePattern[i] & mxEdgeStyle.SOURCE_MASK) > 0;\n\t\t\tvar side = (routePattern[i] & mxEdgeStyle.SIDE_MASK) >> 5;\n\t\t\tside = side << quad;\n\n\t\t\tif (side > 0xF)\n\t\t\t{\n\t\t\t\tside = side >> 4;\n\t\t\t}\n\n\t\t\tvar center = (routePattern[i] & mxEdgeStyle.CENTER_MASK) > 0;\n\n\t\t\tif ((sou || tar) && side < 9)\n\t\t\t{\n\t\t\t\tvar limit = 0;\n\t\t\t\tvar souTar = sou ? 0 : 1;\n\n\t\t\t\tif (center && currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][0] + constraint[souTar][0] * geo[souTar][2];\n\t\t\t\t}\n\t\t\t\telse if (center)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][1] + constraint[souTar][1] * geo[souTar][3];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlimit = mxEdgeStyle.limits[souTar][side];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tvar lastX = mxEdgeStyle.wayPoints1[currentIndex][0];\n\t\t\t\t\tvar deltaX = (limit - lastX) * direction[0];\n\n\t\t\t\t\tif (deltaX > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t\t\t* deltaX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar lastY = mxEdgeStyle.wayPoints1[currentIndex][1];\n\t\t\t\t\tvar deltaY = (limit - lastY) * direction[1];\n\n\t\t\t\t\tif (deltaY > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t\t\t* deltaY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (center)\n\t\t\t{\n\t\t\t\t// Which center we're travelling to depend on the current direction\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t}\n\n\t\t\tif (currentIndex > 0\n\t\t\t\t\t&& mxEdgeStyle.wayPoints1[currentIndex][currentOrientation] == mxEdgeStyle.wayPoints1[currentIndex - 1][currentOrientation])\n\t\t\t{\n\t\t\t\tcurrentIndex--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlastOrientation = currentOrientation;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i <= currentIndex; i++)\n\t\t{\n\t\t\tif (i == currentIndex)\n\t\t\t{\n\t\t\t\t// Last point can cause last segment to be in\n\t\t\t\t// same direction as jetty/approach. If so,\n\t\t\t\t// check the number of points is consistent\n\t\t\t\t// with the relative orientation of source and target\n\t\t\t\t// jx. Same orientation requires an even\n\t\t\t\t// number of turns (points), different requires\n\t\t\t\t// odd.\n\t\t\t\tvar targetOrientation = (dir[1] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t\t\t: 1;\n\t\t\t\tvar sameOrient = targetOrientation == initialOrientation ? 0 : 1;\n\n\t\t\t\t// (currentIndex + 1) % 2 is 0 for even number of points,\n\t\t\t\t// 1 for odd\n\t\t\t\tif (sameOrient != (currentIndex + 1) % 2)\n\t\t\t\t{\n\t\t\t\t\t// The last point isn't required\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(Math.round(mxEdgeStyle.wayPoints1[i][0] * state.view.scale * 10) / 10,\n\t\t\t\t\t\t\t\t\tMath.round(mxEdgeStyle.wayPoints1[i][1] * state.view.scale * 10) / 10));\n\t\t}\n\t\t\n\t\t//console.log(result);\n\n\t\t// Removes duplicates\n\t\tvar index = 1;\n\t\t\n\t\twhile (index < result.length)\n\t\t{\n\t\t\tif (result[index - 1] == null || result[index] == null ||\n\t\t\t\tresult[index - 1].x != result[index].x ||\n\t\t\t\tresult[index - 1].y != result[index].y)\n\t\t\t{\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.splice(index, 1);\n\t\t\t}\n\t\t}\n\t},\n\t\n\tgetRoutePattern: function(dir, quad, dx, dy)\n\t{\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar result = routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tif (dx == 0 || dy == 0)\n\t\t{\n\t\t\tif (inlineRoutePatterns[sourceIndex - 1][targetIndex - 1] != null)\n\t\t\t{\n\t\t\t\tresult = inlineRoutePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n__mxOutput.mxEdgeStyle = typeof mxEdgeStyle !== 'undefined' ? mxEdgeStyle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxStyleRegistry =\n{\n\t/**\n\t * Class: mxStyleRegistry\n\t *\n\t * Singleton class that acts as a global converter from string to object values\n\t * in a style. This is currently only used to perimeters and edge styles.\n\t * \n\t * Variable: values\n\t *\n\t * Maps from strings to objects.\n\t */\n\tvalues: [],\n\n\t/**\n\t * Function: putValue\n\t *\n\t * Puts the given object into the registry under the given name.\n\t */\n\tputValue: function(name, obj)\n\t{\n\t\tmxStyleRegistry.values[name] = obj;\n\t},\n\n\t/**\n\t * Function: getValue\n\t *\n\t * Returns the value associated with the given name.\n\t */\n\tgetValue: function(name)\n\t{\n\t\treturn mxStyleRegistry.values[name];\n\t},\n\t\n\t/**\n\t * Function: getName\n\t * \n\t * Returns the name for the given value.\n\t */\n\tgetName: function(value)\n\t{\n\t\tfor (var key in mxStyleRegistry.values)\n\t\t{\n\t\t\tif (mxStyleRegistry.values[key] == value)\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n};\n\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ELBOW, mxEdgeStyle.ElbowConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ENTITY_RELATION, mxEdgeStyle.EntityRelation);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_LOOP, mxEdgeStyle.Loop);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SIDETOSIDE, mxEdgeStyle.SideToSide);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_TOPTOBOTTOM, mxEdgeStyle.TopToBottom);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ORTHOGONAL, mxEdgeStyle.OrthConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SEGMENT, mxEdgeStyle.SegmentConnector);\n\nmxStyleRegistry.putValue(mxConstants.PERIMETER_ELLIPSE, mxPerimeter.EllipsePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RECTANGLE, mxPerimeter.RectanglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RHOMBUS, mxPerimeter.RhombusPerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_TRIANGLE, mxPerimeter.TrianglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_HEXAGON, mxPerimeter.HexagonPerimeter);\n\n__mxOutput.mxStyleRegistry = typeof mxStyleRegistry !== 'undefined' ? mxStyleRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphView\n *\n * Extends <mxEventSource> to implement a view for a graph. This class is in\n * charge of computing the absolute coordinates for the relative child\n * geometries, the points for perimeters and edge styles and keeping them\n * cached in <mxCellStates> for faster retrieval. The states are updated\n * whenever the model or the view state (translate, scale) changes. The scale\n * and translate are honoured in the bounds.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the root was changed in <setCurrentRoot>. The <code>edit</code>\n * property contains the <mxUndoableEdit> which contains the\n * <mxCurrentRootChange>.\n * \n * Event: mxEvent.SCALE_AND_TRANSLATE\n * \n * Fires after the scale and translate have been changed in <scaleAndTranslate>.\n * The <code>scale</code>, <code>previousScale</code>, <code>translate</code>\n * and <code>previousTranslate</code> properties contain the new and previous\n * scale and translate, respectively.\n * \n * Event: mxEvent.SCALE\n * \n * Fires after the scale was changed in <setScale>. The <code>scale</code> and\n * <code>previousScale</code> properties contain the new and previous scale.\n * \n * Event: mxEvent.TRANSLATE\n * \n * Fires after the translate was changed in <setTranslate>. The\n * <code>translate</code> and <code>previousTranslate</code> properties contain\n * the new and previous value for translate.\n * \n * Event: mxEvent.DOWN and mxEvent.UP\n * \n * Fire if the current root is changed by executing an <mxCurrentRootChange>.\n * The event name depends on the location of the root in the cell hierarchy\n * with respect to the current root. The <code>root</code> and\n * <code>previous</code> properties contain the new and previous root,\n * respectively.\n * \n * Constructor: mxGraphView\n *\n * Constructs a new view for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphView(graph)\n{\n\tthis.graph = graph;\n\tthis.translate = new mxPoint();\n\tthis.graphBounds = new mxRectangle();\n\tthis.states = new mxDictionary();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphView.prototype = new mxEventSource();\nmxGraphView.prototype.constructor = mxGraphView;\n\n/**\n *\n */\nmxGraphView.prototype.EMPTY_POINT = new mxPoint();\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphView.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Function: updatingDocumentResource\n *\n * Specifies the resource key for the status message while the document is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingDocument'.\n */\nmxGraphView.prototype.updatingDocumentResource = (mxClient.language != 'none') ? 'updatingDocument' : '';\n\n/**\n * Variable: allowEval\n * \n * Specifies if string values in cell styles should be evaluated using\n * <mxUtils.eval>. This will only be used if the string values can't be mapped\n * to objects using <mxStyleRegistry>. Default is false. NOTE: Enabling this\n * switch carries a possible security risk.\n */\nmxGraphView.prototype.allowEval = false;\n\n/**\n * Variable: captureDocumentGesture\n * \n * Specifies if a gesture should be captured when it goes outside of the\n * graph container. Default is true.\n */\nmxGraphView.prototype.captureDocumentGesture = true;\n\n/**\n * Variable: optimizeVmlReflows\n * \n * Specifies if the <canvas> should be hidden while rendering in IE8 standards\n * mode and quirks mode. This will significantly improve rendering performance.\n * Default is true.\n */\nmxGraphView.prototype.optimizeVmlReflows = true;\n\n/**\n * Variable: rendering\n * \n * Specifies if shapes should be created, updated and destroyed using the\n * methods of <mxCellRenderer> in <graph>. Default is true.\n */\nmxGraphView.prototype.rendering = true;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphView.prototype.graph = null;\n\n/**\n * Variable: currentRoot\n *\n * <mxCell> that acts as the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.currentRoot = null;\n\n/**\n * Variable: graphBounds\n *\n * <mxRectangle> that caches the scales, translated bounds of the current view.\n */\nmxGraphView.prototype.graphBounds = null;\n\n/**\n * Variable: scale\n * \n * Specifies the scale. Default is 1 (100%).\n */\nmxGraphView.prototype.scale = 1;\n\t\n/**\n * Variable: translate\n *\n * <mxPoint> that specifies the current translation. Default is a new\n * empty <mxPoint>.\n */\nmxGraphView.prototype.translate = null;\n\n/**\n * Variable: states\n * \n * <mxDictionary> that maps from cell IDs to <mxCellStates>.\n */\nmxGraphView.prototype.states = null;\n\n/**\n * Variable: updateStyle\n * \n * Specifies if the style should be updated in each validation step. If this\n * is false then the style is only updated if the state is created or if the\n * style of the cell was changed. Default is false.\n */\nmxGraphView.prototype.updateStyle = false;\n\n/**\n * Variable: lastNode\n * \n * During validation, this contains the last DOM node that was processed.\n */\nmxGraphView.prototype.lastNode = null;\n\n/**\n * Variable: lastHtmlNode\n * \n * During validation, this contains the last HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastHtmlNode = null;\n\n/**\n * Variable: lastForegroundNode\n * \n * During validation, this contains the last edge's DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundNode = null;\n\n/**\n * Variable: lastForegroundHtmlNode\n * \n * During validation, this contains the last edge HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundHtmlNode = null;\n\n/**\n * Function: getGraphBounds\n *\n * Returns <graphBounds>.\n */\nmxGraphView.prototype.getGraphBounds = function()\n{\n\treturn this.graphBounds;\n};\n\n/**\n * Function: setGraphBounds\n *\n * Sets <graphBounds>.\n */\nmxGraphView.prototype.setGraphBounds = function(value)\n{\n\tthis.graphBounds = value;\n};\n\n/**\n * Function: getBounds\n * \n * Returns the union of all <mxCellStates> for the given array of <mxCells>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be returned.\n */\nmxGraphView.prototype.getBounds = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(state);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: setCurrentRoot\n *\n * Sets and returns the current root and fires an <undo> event before\n * calling <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * root - <mxCell> that specifies the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.setCurrentRoot = function(root)\n{\n\tif (this.currentRoot != root)\n\t{\n\t\tvar change = new mxCurrentRootChange(this, root);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, true);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t\tthis.graph.sizeDidChange();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: scaleAndTranslate\n *\n * Sets the scale and translation and fires a <scale> and <translate> event\n * before calling <revalidate> followed by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * scale - Decimal value that specifies the new scale (1 is 100%).\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.scaleAndTranslate = function(scale, dx, dy)\n{\n\tvar previousScale = this.scale;\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.scale != scale || this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.scale = scale;\n\t\t\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE_AND_TRANSLATE,\n\t\t'scale', scale, 'previousScale', previousScale,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: getScale\n * \n * Returns the <scale>.\n */\nmxGraphView.prototype.getScale = function()\n{\n\treturn this.scale;\n};\n\n/**\n * Function: setScale\n *\n * Sets the scale and fires a <scale> event before calling <revalidate> followed\n * by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * value - Decimal value that specifies the new scale (1 is 100%).\n */\nmxGraphView.prototype.setScale = function(value)\n{\n\tvar previousScale = this.scale;\n\t\n\tif (this.scale != value)\n\t{\n\t\tthis.scale = value;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE,\n\t\t'scale', value, 'previousScale', previousScale));\n};\n\n/**\n * Function: getTranslate\n * \n * Returns the <translate>.\n */\nmxGraphView.prototype.getTranslate = function()\n{\n\treturn this.translate;\n};\n\n/**\n * Function: setTranslate\n *\n * Sets the translation and fires a <translate> event before calling\n * <revalidate> followed by <mxGraph.sizeDidChange>. The translation is the\n * negative of the origin.\n *\n * Parameters:\n *\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.setTranslate = function(dx, dy)\n{\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.TRANSLATE,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: viewStateChanged\n * \n * Invoked after <scale> and/or <translate> has changed.\n */\nmxGraphView.prototype.viewStateChanged = function()\n{\n\tthis.revalidate();\n\tthis.graph.sizeDidChange();\n};\n\n/**\n * Function: refresh\n *\n * Clears the view if <currentRoot> is not null and revalidates.\n */\nmxGraphView.prototype.refresh = function()\n{\n\tif (this.currentRoot != null)\n\t{\n\t\tthis.clear();\n\t}\n\t\n\tthis.revalidate();\n};\n\n/**\n * Function: revalidate\n *\n * Revalidates the complete view with all cell states.\n */\nmxGraphView.prototype.revalidate = function()\n{\n\tthis.invalidate();\n\tthis.validate();\n};\n\n/**\n * Function: clear\n *\n * Removes the state of the given cell and all descendants if the given\n * cell is not the current root.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the state should be removed. Default\n * is the root of the model.\n * force - Boolean indicating if the current root should be ignored for\n * recursion.\n */\nmxGraphView.prototype.clear = function(cell, force, recurse)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\tforce = (force != null) ? force : false;\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tthis.removeState(cell);\n\t\n\tif (recurse && (force || cell != this.currentRoot))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.clear(model.getChildAt(cell, i), force);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.invalidate(cell);\n\t}\n};\n\n/**\n * Function: invalidate\n * \n * Invalidates the state of the given cell, all its descendants and\n * connected edges.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be invalidated. Default is the root of the\n * model.\n */\nmxGraphView.prototype.invalidate = function(cell, recurse, includeEdges)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\trecurse = (recurse != null) ? recurse : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar state = this.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tstate.invalid = true;\n\t}\n\t\n\t// Avoids infinite loops for invalid graphs\n\tif (!cell.invalidating)\n\t{\n\t\tcell.invalidating = true;\n\t\t\n\t\t// Recursively invalidates all descendants\n\t\tif (recurse)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\tthis.invalidate(child, recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Propagates invalidation to all connected edges\n\t\tif (includeEdges)\n\t\t{\n\t\t\tvar edgeCount = model.getEdgeCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t{\n\t\t\t\tthis.invalidate(model.getEdgeAt(cell, i), recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdelete cell.invalidating;\n\t}\n};\n\n/**\n * Function: validate\n * \n * Calls <validateCell> and <validateCellState> and updates the <graphBounds>\n * using <getBoundingBox>. Finally the background is validated using\n * <validateBackground>.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the root of the validation.\n * Default is <currentRoot> or the root of the model.\n */\nmxGraphView.prototype.validate = function(cell)\n{\n\tvar t0 = mxLog.enter('mxGraphView.validate');\n\twindow.status = mxResources.get(this.updatingDocumentResource) ||\n\t\tthis.updatingDocumentResource;\n\t\n\tthis.resetValidationState();\n\t\n\t// Improves IE rendering speed by minimizing reflows\n\tvar prevDisplay = null;\n\t\n\tif (this.optimizeVmlReflows && this.canvas != null && this.textDiv == null &&\n\t\t((document.documentMode == 8 && !mxClient.IS_EM) || mxClient.IS_QUIRKS))\n\t{\n\t\t// Placeholder keeps scrollbar positions when canvas is hidden\n\t\tthis.placeholder = document.createElement('div');\n\t\tthis.placeholder.style.position = 'absolute';\n\t\tthis.placeholder.style.width = this.canvas.clientWidth + 'px';\n\t\tthis.placeholder.style.height = this.canvas.clientHeight + 'px';\n\t\tthis.canvas.parentNode.appendChild(this.placeholder);\n\n\t\tprevDisplay = this.drawPane.style.display;\n\t\tthis.canvas.style.display = 'none';\n\t\t\n\t\t// Creates temporary DIV used for text measuring in mxText.updateBoundingBox\n\t\tthis.textDiv = document.createElement('div');\n\t\tthis.textDiv.style.position = 'absolute';\n\t\tthis.textDiv.style.whiteSpace = 'nowrap';\n\t\tthis.textDiv.style.visibility = 'hidden';\n\t\tthis.textDiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tthis.textDiv.style.zoom = '1';\n\t\t\n\t\tdocument.body.appendChild(this.textDiv);\n\t}\n\t\n\tvar graphBounds = this.getBoundingBox(this.validateCellState(\n\t\tthis.validateCell(cell || ((this.currentRoot != null) ?\n\t\t\tthis.currentRoot : this.graph.getModel().getRoot()))));\n\tthis.setGraphBounds((graphBounds != null) ? graphBounds : this.getEmptyBounds());\n\tthis.validateBackground();\n\t\n\tif (prevDisplay != null)\n\t{\n\t\tthis.canvas.style.display = prevDisplay;\n\t\tthis.textDiv.parentNode.removeChild(this.textDiv);\n\t\t\n\t\tif (this.placeholder != null)\n\t\t{\n\t\t\tthis.placeholder.parentNode.removeChild(this.placeholder);\n\t\t}\n\t\t\t\t\n\t\t// Textdiv cannot be reused\n\t\tthis.textDiv = null;\n\t}\n\t\n\tthis.resetValidationState();\n\t\n\twindow.status = mxResources.get(this.doneResource) ||\n\t\tthis.doneResource;\n\tmxLog.leave('mxGraphView.validate', t0);\n};\n\n/**\n * Function: getEmptyBounds\n * \n * Returns the bounds for an empty graph. This returns a rectangle at\n * <translate> with the size of 0 x 0.\n */\nmxGraphView.prototype.getEmptyBounds = function()\n{\n\treturn new mxRectangle(this.translate.x * this.scale, this.translate.y * this.scale);\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box of the shape and the label for the given\n * <mxCellState> and its children if recurse is true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounding box should be returned.\n * recurse - Optional boolean indicating if the children should be included.\n * Default is true.\n */\nmxGraphView.prototype.getBoundingBox = function(state, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar bbox = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (state.shape != null && state.shape.boundingBox != null)\n\t\t{\n\t\t\tbbox = state.shape.boundingBox.clone();\n\t\t}\n\t\t\n\t\t// Adds label bounding box to graph bounds\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (bbox != null)\n\t\t\t{\n\t\t\t\tbbox.add(state.text.boundingBox);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox = state.text.boundingBox.clone();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (recurse)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(state.cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar bounds = this.getBoundingBox(this.getState(model.getChildAt(state.cell, i)));\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (bbox == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = bounds;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox.add(bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bbox;\n};\n\n/**\n * Function: createBackgroundPageShape\n *\n * Creates and returns the shape used as the background page.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that represents the bounds of the shape.\n */\nmxGraphView.prototype.createBackgroundPageShape = function(bounds)\n{\n\treturn new mxRectangleShape(bounds, 'white', 'black');\n};\n\n/**\n * Function: validateBackground\n *\n * Calls <validateBackgroundImage> and <validateBackgroundPage>.\n */\nmxGraphView.prototype.validateBackground = function()\n{\n\tthis.validateBackgroundImage();\n\tthis.validateBackgroundPage();\n};\n\n/**\n * Function: validateBackgroundImage\n * \n * Validates the background image.\n */\nmxGraphView.prototype.validateBackgroundImage = function()\n{\n\tvar bg = this.graph.getBackgroundImage();\n\t\n\tif (bg != null)\n\t{\n\t\tif (this.backgroundImage == null || this.backgroundImage.image != bg.src)\n\t\t{\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tthis.backgroundImage.destroy();\n\t\t\t}\n\t\t\t\n\t\t\tvar bounds = new mxRectangle(0, 0, 1, 1);\n\t\t\t\n\t\t\tthis.backgroundImage = new mxImageShape(bounds, bg.src);\n\t\t\tthis.backgroundImage.dialect = this.graph.dialect;\n\t\t\tthis.backgroundImage.init(this.backgroundPane);\n\t\t\tthis.backgroundImage.redraw();\n\n\t\t\t// Workaround for ignored event on background in IE8 standards mode\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tmxEvent.addGestureListeners(this.backgroundImage.node,\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.redrawBackgroundImage(this.backgroundImage, bg);\n\t}\n\telse if (this.backgroundImage != null)\n\t{\n\t\tthis.backgroundImage.destroy();\n\t\tthis.backgroundImage = null;\n\t}\n};\n\n/**\n * Function: validateBackgroundPage\n * \n * Validates the background page.\n */\nmxGraphView.prototype.validateBackgroundPage = function()\n{\n\tif (this.graph.pageVisible)\n\t{\n\t\tvar bounds = this.getBackgroundPageBounds();\n\t\t\n\t\tif (this.backgroundPageShape == null)\n\t\t{\n\t\t\tthis.backgroundPageShape = this.createBackgroundPageShape(bounds);\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.isShadow = true;\n\t\t\tthis.backgroundPageShape.dialect = this.graph.dialect;\n\t\t\tthis.backgroundPageShape.init(this.backgroundPane);\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t\t\n\t\t\t// Adds listener for double click handling on background\n\t\t\tif (this.graph.nativeDblClickEnabled)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(this.backgroundPageShape.node, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.dblClick(evt);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t\t// container and finishing the handling of a single gesture\n\t\t\tmxEvent.addGestureListeners(this.backgroundPageShape.node,\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\t\t\tif (this.graph.tooltipHandler != null && this.graph.tooltipHandler.isHideOnHover())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.tooltipHandler.hide();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.graph.isMouseDown && !mxEvent.isConsumed(evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.bounds = bounds;\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t}\n\t}\n\telse if (this.backgroundPageShape != null)\n\t{\n\t\tthis.backgroundPageShape.destroy();\n\t\tthis.backgroundPageShape = null;\n\t}\n};\n\n/**\n * Function: getBackgroundPageBounds\n * \n * Returns the bounds for the background page.\n */\nmxGraphView.prototype.getBackgroundPageBounds = function()\n{\n\tvar fmt = this.graph.pageFormat;\n\tvar ps = this.scale * this.graph.pageScale;\n\tvar bounds = new mxRectangle(this.scale * this.translate.x, this.scale * this.translate.y,\n\t\t\tfmt.width * ps, fmt.height * ps);\n\t\n\treturn bounds;\n};\n\n/**\n * Function: redrawBackgroundImage\n *\n * Updates the bounds and redraws the background image.\n * \n * Example:\n * \n * If the background image should not be scaled, this can be replaced with\n * the following.\n * \n * (code)\n * mxGraphView.prototype.redrawBackground = function(backgroundImage, bg)\n * {\n *   backgroundImage.bounds.x = this.translate.x;\n *   backgroundImage.bounds.y = this.translate.y;\n *   backgroundImage.bounds.width = bg.width;\n *   backgroundImage.bounds.height = bg.height;\n *\n *   backgroundImage.redraw();\n * };\n * (end)\n * \n * Parameters:\n * \n * backgroundImage - <mxImageShape> that represents the background image.\n * bg - <mxImage> that specifies the image and its dimensions.\n */\nmxGraphView.prototype.redrawBackgroundImage = function(backgroundImage, bg)\n{\n\tbackgroundImage.scale = this.scale;\n\tbackgroundImage.bounds.x = this.scale * this.translate.x;\n\tbackgroundImage.bounds.y = this.scale * this.translate.y;\n\tbackgroundImage.bounds.width = this.scale * bg.width;\n\tbackgroundImage.bounds.height = this.scale * bg.height;\n\n\tbackgroundImage.redraw();\n};\n\n/**\n * Function: validateCell\n * \n * Recursively creates the cell state for the given cell if visible is true and\n * the given cell is visible. If the cell is not visible but the state exists\n * then it is removed using <removeState>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be created.\n * visible - Optional boolean indicating if the cell should be visible. Default\n * is true.\n */\nmxGraphView.prototype.validateCell = function(cell, visible)\n{\n\tvisible = (visible != null) ? visible : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvisible = visible && this.graph.isCellVisible(cell);\n\t\tvar state = this.getState(cell, visible);\n\t\t\n\t\tif (state != null && !visible)\n\t\t{\n\t\t\tthis.removeState(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tthis.validateCell(model.getChildAt(cell, i), visible &&\n\t\t\t\t\t(!this.isCellCollapsed(cell) || cell == this.currentRoot));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: validateCellState\n * \n * Validates and repaints the <mxCellState> for the given <mxCell>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be validated.\n * recurse - Optional boolean indicating if the children of the cell should be\n * validated. Default is true.\n */\nmxGraphView.prototype.validateCellState = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\t\n\t\t\tif (state.invalid)\n\t\t\t{\n\t\t\t\tstate.invalid = false;\n\t\t\t\t\n\t\t\t\tif (state.style == null || state.invalidStyle)\n\t\t\t\t{\n\t\t\t\t\tstate.style = this.graph.getCellStyle(state.cell);\n\t\t\t\t\tstate.invalidStyle = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (cell != this.currentRoot)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getParent(cell), false);\n\t\t\t\t}\n\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, true), false), true);\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, false), false), false);\n\t\t\t\t\n\t\t\t\tthis.updateCellState(state);\n\t\t\t\t\n\t\t\t\t// Repaint happens immediately after the cell is validated\n\t\t\t\tif (cell != this.currentRoot && !state.invalid)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.cellRenderer.redraw(state, false, this.isRendering());\n\n\t\t\t\t\t// Handles changes to invertex paintbounds after update of rendering shape\n\t\t\t\t\tstate.updateCachedBounds();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (recurse && !state.invalid)\n\t\t\t{\n\t\t\t\t// Updates order in DOM if recursively traversing\n\t\t\t\tif (state.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.stateValidated(state);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: updateCellState\n * \n * Updates the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to be updated.\n */\nmxGraphView.prototype.updateCellState = function(state)\n{\n\tstate.absoluteOffset.x = 0;\n\tstate.absoluteOffset.y = 0;\n\tstate.origin.x = 0;\n\tstate.origin.y = 0;\n\tstate.length = 0;\n\t\n\tif (state.cell != this.currentRoot)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar pState = this.getState(model.getParent(state.cell)); \n\t\t\n\t\tif (pState != null && pState.cell != this.currentRoot)\n\t\t{\n\t\t\tstate.origin.x += pState.origin.x;\n\t\t\tstate.origin.y += pState.origin.y;\n\t\t}\n\t\t\n\t\tvar offset = this.graph.getChildOffsetForCell(state.cell);\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tstate.origin.x += offset.x;\n\t\t\tstate.origin.y += offset.y;\n\t\t}\n\t\t\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\t\t\t\t\n\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (!model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\toffset = (geo.offset != null) ? geo.offset : this.EMPTY_POINT;\n\t\n\t\t\t\tif (geo.relative && pState != null)\n\t\t\t\t{\n\t\t\t\t\tif (model.isEdge(pState.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar origin = this.getPoint(pState, geo);\n\n\t\t\t\t\t\tif (origin != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.origin.x += (origin.x / this.scale) - pState.origin.x - this.translate.x;\n\t\t\t\t\t\t\tstate.origin.y += (origin.y / this.scale) - pState.origin.y - this.translate.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.origin.x += geo.x * pState.unscaledWidth + offset.x;\n\t\t\t\t\t\tstate.origin.y += geo.y * pState.unscaledHeight + offset.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstate.absoluteOffset.x = this.scale * offset.x;\n\t\t\t\t\tstate.absoluteOffset.y = this.scale * offset.y;\n\t\t\t\t\tstate.origin.x += geo.x;\n\t\t\t\t\tstate.origin.y += geo.y;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tstate.x = this.scale * (this.translate.x + state.origin.x);\n\t\t\tstate.y = this.scale * (this.translate.y + state.origin.y);\n\t\t\tstate.width = this.scale * geo.width;\n\t\t\tstate.unscaledWidth = geo.width;\n\t\t\tstate.height = this.scale * geo.height;\n\t\t\tstate.unscaledHeight = geo.height;\n\t\t\t\n\t\t\tif (model.isVertex(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateVertexState(state, geo);\n\t\t\t}\n\t\t\t\n\t\t\tif (model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(state, geo);\n\t\t\t}\n\t\t}\n\t}\n\n\tstate.updateCachedBounds();\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the children of the given cell should not be visible in the\n * view. This implementation uses <mxGraph.isCellVisible> but it can be\n * overidden to use a separate condition.\n */\nmxGraphView.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.graph.isCellCollapsed(cell);\n};\n\n/**\n * Function: updateVertexState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateVertexState = function(state, geo)\n{\n\tvar model = this.graph.getModel();\n\tvar pState = this.getState(model.getParent(state.cell));\n\t\n\tif (geo.relative && pState != null && !model.isEdge(pState.cell))\n\t{\n\t\tvar alpha = mxUtils.toRadians(pState.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\tstate.x = pt.x - state.width / 2;\n\t\t\tstate.y = pt.y - state.height / 2;\n\t\t}\n\t}\n\t\n\tthis.updateVertexLabelOffset(state);\n};\n\n/**\n * Function: updateEdgeState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateEdgeState = function(state, geo)\n{\n\tvar source = state.getVisibleTerminalState(true);\n\tvar target = state.getVisibleTerminalState(false);\n\t\n\t// This will remove edges with no terminals and no terminal points\n\t// as such edges are invalid and produce NPEs in the edge styles.\n\t// Also removes connected edges that have no visible terminals.\n\tif ((this.graph.model.getTerminal(state.cell, true) != null && source == null) ||\n\t\t(source == null && geo.getTerminalPoint(true) == null) ||\n\t\t(this.graph.model.getTerminal(state.cell, false) != null && target == null) ||\n\t\t(target == null && geo.getTerminalPoint(false) == null))\n\t{\n\t\tthis.clear(state.cell, true);\n\t}\n\telse\n\t{\n\t\tthis.updateFixedTerminalPoints(state, source, target);\n\t\tthis.updatePoints(state, geo.points, source, target);\n\t\tthis.updateFloatingTerminalPoints(state, source, target);\n\t\t\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (state.cell != this.currentRoot && (pts == null || pts.length < 2 ||\n\t\t\tpts[0] == null || pts[pts.length - 1] == null))\n\t\t{\n\t\t\t// This will remove edges with invalid points from the list of states in the view.\n\t\t\t// Happens if the one of the terminals and the corresponding terminal point is null.\n\t\t\tthis.clear(state.cell, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateEdgeBounds(state);\n\t\t\tthis.updateEdgeLabelOffset(state);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateVertexLabelOffset\n * \n * Updates the absoluteOffset of the given vertex cell state. This takes\n * into account the label position styles.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateVertexLabelOffset = function(state)\n{\n\tvar h = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\n\tif (h == mxConstants.ALIGN_LEFT)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\tlw *= this.scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlw = state.width;\n\t\t}\n\t\t\n\t\tstate.absoluteOffset.x -= lw;\n\t}\n\telse if (h == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstate.absoluteOffset.x += state.width;\n\t}\n\telse if (h == mxConstants.ALIGN_CENTER)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\t// Aligns text block with given width inside the vertex width\n\t\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER);\n\t\t\tvar dx = 0;\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx = 0.5;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx = 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (dx != 0)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset.x -= (lw * this.scale - state.width) * dx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar v = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\tif (v == mxConstants.ALIGN_TOP)\n\t{\n\t\tstate.absoluteOffset.y -= state.height;\n\t}\n\telse if (v == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tstate.absoluteOffset.y += state.height;\n\t}\n};\n\n/**\n * Function: resetValidationState\n *\n * Resets the current validation state.\n */\nmxGraphView.prototype.resetValidationState = function()\n{\n\tthis.lastNode = null;\n\tthis.lastHtmlNode = null;\n\tthis.lastForegroundNode = null;\n\tthis.lastForegroundHtmlNode = null;\n};\n\n/**\n * Function: stateValidated\n * \n * Invoked when a state has been processed in <validatePoints>. This is used\n * to update the order of the DOM nodes of the shape.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n */\nmxGraphView.prototype.stateValidated = function(state)\n{\n\tvar fg = (this.graph.getModel().isEdge(state.cell) && this.graph.keepEdgesInForeground) ||\n\t\t(this.graph.getModel().isVertex(state.cell) && this.graph.keepEdgesInBackground);\n\tvar htmlNode = (fg) ? this.lastForegroundHtmlNode || this.lastHtmlNode : this.lastHtmlNode;\n\tvar node = (fg) ? this.lastForegroundNode || this.lastNode : this.lastNode;\n\tvar result = this.graph.cellRenderer.insertStateAfter(state, node, htmlNode);\n\n\tif (fg)\n\t{\n\t\tthis.lastForegroundHtmlNode = result[1];\n\t\tthis.lastForegroundNode = result[0];\n\t}\n\telse\n\t{\n\t\tthis.lastHtmlNode = result[1];\n\t\tthis.lastNode = result[0];\n\t}\n};\n\n/**\n * Function: updateFixedTerminalPoints\n *\n * Sets the initial absolute terminal points in the given state before the edge\n * style is computed.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose initial terminal points should be updated.\n * source - <mxCellState> which represents the source terminal.\n * target - <mxCellState> which represents the target terminal.\n */\nmxGraphView.prototype.updateFixedTerminalPoints = function(edge, source, target)\n{\n\tthis.updateFixedTerminalPoint(edge, source, true,\n\t\tthis.graph.getConnectionConstraint(edge, source, true));\n\tthis.updateFixedTerminalPoint(edge, target, false,\n\t\tthis.graph.getConnectionConstraint(edge, target, false));\n};\n\n/**\n * Function: updateFixedTerminalPoint\n *\n * Sets the fixed source or target terminal point on the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.updateFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFixedTerminalPoint(edge, terminal, source, constraint), source);\n};\n\n/**\n * Function: getFixedTerminalPoint\n *\n * Returns the fixed source or target terminal point for the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.getFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tvar pt = null;\n\t\n\tif (constraint != null)\n\t{\n\t\tpt = this.graph.getConnectionPoint(terminal, constraint, false); // FIXME Rounding introduced bugs when calculating label positions -> , this.graph.isOrthogonal(edge));\n\t}\n\t\n\tif (pt == null && terminal == null)\n\t{\n\t\tvar s = this.scale;\n\t\tvar tr = this.translate;\n\t\tvar orig = edge.origin;\n\t\tvar geo = this.graph.getCellGeometry(edge.cell);\n\t\tpt = geo.getTerminalPoint(source);\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = new mxPoint(s * (tr.x + pt.x + orig.x),\n\t\t\t\t\t\t\t s * (tr.y + pt.y + orig.y));\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: updateBoundsFromStencil\n * \n * Updates the bounds of the given cell state to reflect the bounds of the stencil\n * if it has a fixed aspect and returns the previous bounds as an <mxRectangle> if\n * the bounds have been modified or null otherwise.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateBoundsFromStencil = function(state)\n{\n\tvar previous = null;\n\t\n\tif (state != null && state.shape != null && state.shape.stencil != null && state.shape.stencil.aspect == 'fixed')\n\t{\n\t\tprevious = mxRectangle.fromRectangle(state);\n\t\tvar asp = state.shape.stencil.computeAspect(state.style, state.x, state.y, state.width, state.height);\n\t\tstate.setRect(asp.x, asp.y, state.shape.stencil.w0 * asp.width, state.shape.stencil.h0 * asp.height);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: updatePoints\n *\n * Updates the absolute points in the given state using the specified array\n * of <mxPoints> as the relative points.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose absolute points should be updated.\n * points - Array of <mxPoints> that constitute the relative points.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updatePoints = function(edge, points, source, target)\n{\n\tif (edge != null)\n\t{\n\t\tvar pts = [];\n\t\tpts.push(edge.absolutePoints[0]);\n\t\tvar edgeStyle = this.getEdgeStyle(edge, points, source, target);\n\t\t\n\t\tif (edgeStyle != null)\n\t\t{\n\t\t\tvar src = this.getTerminalPort(edge, source, true);\n\t\t\tvar trg = this.getTerminalPort(edge, target, false);\n\t\t\t\n\t\t\t// Uses the stencil bounds for routing and restores after routing\n\t\t\tvar srcBounds = this.updateBoundsFromStencil(src);\n\t\t\tvar trgBounds = this.updateBoundsFromStencil(trg);\n\n\t\t\tedgeStyle(edge, src, trg, points, pts);\n\t\t\t\n\t\t\t// Restores previous bounds\n\t\t\tif (srcBounds != null)\n\t\t\t{\n\t\t\t\tsrc.setRect(srcBounds.x, srcBounds.y, srcBounds.width, srcBounds.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (trgBounds != null)\n\t\t\t{\n\t\t\t\ttrg.setRect(trgBounds.x, trgBounds.y, trgBounds.width, trgBounds.height);\n\t\t\t}\n\t\t}\n\t\telse if (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = mxUtils.clone(points[i]);\n\t\t\t\t\tpts.push(this.transformControlPoint(edge, pt));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tmp = edge.absolutePoints;\n\t\tpts.push(tmp[tmp.length-1]);\n\n\t\tedge.absolutePoints = pts;\n\t}\n};\n\n/**\n * Function: transformControlPoint\n *\n * Transforms the given control point to an absolute point.\n */\nmxGraphView.prototype.transformControlPoint = function(state, pt, ignoreScale)\n{\n\tif (state != null && pt != null)\n\t{\n\t\tvar orig = state.origin;\n\t\tvar scale = ignoreScale ? 1 : this.scale\n\t\t\n\t    return new mxPoint(scale * (pt.x + this.translate.x + orig.x),\n\t    \t\tscale * (pt.y + this.translate.y + orig.y));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isLoopStyleEnabled\n * \n * Returns true if the given edge should be routed with <mxGraph.defaultLoopStyle>\n * or the <mxConstants.STYLE_LOOP> defined for the given edge. This implementation\n * returns true if the given edge is a loop and does not have connections constraints\n * associated.\n */\nmxGraphView.prototype.isLoopStyleEnabled = function(edge, points, source, target)\n{\n\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\n\tif ((points == null || points.length < 2) &&\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_ORTHOGONAL_LOOP, false) ||\n\t\t((sc == null || sc.point == null) && (tc == null || tc.point == null))))\n\t{\n\t\treturn source != null && source == target;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns the edge style function to be used to render the given edge state.\n */\nmxGraphView.prototype.getEdgeStyle = function(edge, points, source, target)\n{\n\tvar edgeStyle = this.isLoopStyleEnabled(edge, points, source, target) ?\n\t\tmxUtils.getValue(edge.style, mxConstants.STYLE_LOOP, this.graph.defaultLoopStyle) :\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_NOEDGESTYLE, false) ?\n\t\tedge.style[mxConstants.STYLE_EDGE] : null);\n\n\t// Converts string values to objects\n\tif (typeof(edgeStyle) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(edgeStyle);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(edgeStyle);\n\t\t}\n\t\t\n\t\tedgeStyle = tmp;\n\t}\n\t\n\tif (typeof(edgeStyle) == \"function\")\n\t{\n\t\treturn edgeStyle;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: updateFloatingTerminalPoints\n *\n * Updates the terminal points in the given state after the edge style was\n * computed for the edge.\n * \n * Parameters:\n * \n * state - <mxCellState> whose terminal points should be updated.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updateFloatingTerminalPoints = function(state, source, target)\n{\n\tvar pts = state.absolutePoints;\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\n\tif (pe == null && target != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, target, source, false);\n\t}\n\t\n\tif (p0 == null && source != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, source, target, true);\n\t}\n};\n\n/**\n * Function: updateFloatingTerminalPoint\n *\n * Updates the absolute terminal point in the given state for the given\n * start and end state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.updateFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFloatingTerminalPoint(edge, start, end, source), source);\n};\n\n/**\n * Function: getFloatingTerminalPoint\n * \n * Returns the floating terminal point for the given edge, start and end\n * state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.getFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tstart = this.getTerminalPort(edge, start, source);\n\tvar next = this.getNextPoint(edge, end, source);\n\t\n\tvar orth = this.graph.isOrthogonal(edge);\n\tvar alpha = mxUtils.toRadians(Number(start.style[mxConstants.STYLE_ROTATION] || '0'));\n\tvar center = new mxPoint(start.getCenterX(), start.getCenterY());\n\t\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(-alpha);\n\t\tvar sin = Math.sin(-alpha);\n\t\tnext = mxUtils.getRotatedPoint(next, cos, sin, center);\n\t}\n\t\n\tvar border = parseFloat(edge.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\tborder += parseFloat(edge.style[(source) ?\n\t\tmxConstants.STYLE_SOURCE_PERIMETER_SPACING :\n\t\tmxConstants.STYLE_TARGET_PERIMETER_SPACING] || 0);\n\tvar pt = this.getPerimeterPoint(start, next, alpha == 0 && orth, border);\n\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, center);\n\t}\n\n\treturn pt;\n};\n\n/**\n * Function: getTerminalPort\n * \n * Returns an <mxCellState> that represents the source or target terminal or\n * port for the given edge.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the given terminal is the source terminal.\n */\nmxGraphView.prototype.getTerminalPort = function(state, terminal, source)\n{\n\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\tmxConstants.STYLE_TARGET_PORT;\n\tvar id = mxUtils.getValue(state.style, key);\n\t\n\tif (id != null)\n\t{\n\t\tvar tmp = this.getState(this.graph.getModel().getCell(id));\n\t\t\n\t\t// Only uses ports where a cell state exists\n\t\tif (tmp != null)\n\t\t{\n\t\t\tterminal = tmp;\n\t\t}\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getPerimeterPoint\n *\n * Returns an <mxPoint> that defines the location of the intersection point between\n * the perimeter and the line between the center of the shape and the given point.\n * \n * Parameters:\n * \n * terminal - <mxCellState> for the source or target terminal.\n * next - <mxPoint> that lies outside of the given terminal.\n * orthogonal - Boolean that specifies if the orthogonal projection onto\n * the perimeter should be returned. If this is false then the intersection\n * of the perimeter and the line between the next and the center point is\n * returned.\n * border - Optional border between the perimeter and the shape.\n */\nmxGraphView.prototype.getPerimeterPoint = function(terminal, next, orthogonal, border)\n{\n\tvar point = null;\n\t\n\tif (terminal != null)\n\t{\n\t\tvar perimeter = this.getPerimeterFunction(terminal);\n\t\t\n\t\tif (perimeter != null && next != null)\n\t\t{\n\t\t\tvar bounds = this.getPerimeterBounds(terminal, border);\n\n\t\t\tif (bounds.width > 0 || bounds.height > 0)\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(next.x, next.y);\n\t\t\t\tvar flipH = false;\n\t\t\t\tvar flipV = false;\t\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isVertex(terminal.cell))\n\t\t\t\t{\n\t\t\t\t\tflipH = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tflipV = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\t\tif (terminal.shape != null && terminal.shape.stencil != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tflipH = (mxUtils.getValue(terminal.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\t\tflipV = (mxUtils.getValue(terminal.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpoint = perimeter(bounds, terminal, point, orthogonal);\n\n\t\t\t\tif (point != null)\n\t\t\t\t{\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (point == null)\n\t\t{\n\t\t\tpoint = this.getPoint(terminal);\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getRoutingCenterX\n * \n * Returns the x-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterX = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_X]) || 0 : 0;\n\n\treturn state.getCenterX() + f * state.width;\n};\n\n/**\n * Function: getRoutingCenterY\n * \n * Returns the y-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterY = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_Y]) || 0 : 0;\n\n\treturn state.getCenterY() + f * state.height;\n};\n\n/**\n * Function: getPerimeterBounds\n *\n * Returns the perimeter bounds for the given terminal, edge pair as an\n * <mxRectangle>.\n * \n * If you have a model where each terminal has a relative child that should\n * act as the graphical endpoint for a connection from/to the terminal, then\n * this method can be replaced as follows:\n * \n * (code)\n * var oldGetPerimeterBounds = mxGraphView.prototype.getPerimeterBounds;\n * mxGraphView.prototype.getPerimeterBounds = function(terminal, edge, isSource)\n * {\n *   var model = this.graph.getModel();\n *   var childCount = model.getChildCount(terminal.cell);\n * \n *   if (childCount > 0)\n *   {\n *     var child = model.getChildAt(terminal.cell, 0);\n *     var geo = model.getGeometry(child);\n *\n *     if (geo != null &&\n *         geo.relative)\n *     {\n *       var state = this.getState(child);\n *       \n *       if (state != null)\n *       {\n *         terminal = state;\n *       }\n *     }\n *   }\n *   \n *   return oldGetPerimeterBounds.apply(this, arguments);\n * };\n * (end)\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * border - Number that adds a border between the shape and the perimeter.\n */\nmxGraphView.prototype.getPerimeterBounds = function(terminal, border)\n{\n\tborder = (border != null) ? border : 0;\n\n\tif (terminal != null)\n\t{\n\t\tborder += parseFloat(terminal.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\t}\n\n\treturn terminal.getPerimeterBounds(border * this.scale);\n};\n\n/**\n * Function: getPerimeterFunction\n *\n * Returns the perimeter function for the given state.\n */\nmxGraphView.prototype.getPerimeterFunction = function(state)\n{\n\tvar perimeter = state.style[mxConstants.STYLE_PERIMETER];\n\n\t// Converts string values to objects\n\tif (typeof(perimeter) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(perimeter);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(perimeter);\n\t\t}\n\n\t\tperimeter = tmp;\n\t}\n\t\n\tif (typeof(perimeter) == \"function\")\n\t{\n\t\treturn perimeter;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getNextPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * opposite - <mxCellState> that represents the opposite terminal.\n * source - Boolean indicating if the next point for the source or target\n * should be returned.\n */\nmxGraphView.prototype.getNextPoint = function(edge, opposite, source)\n{\n\tvar pts = edge.absolutePoints;\n\tvar point = null;\n\t\n\tif (pts != null && pts.length >= 2)\n\t{\n\t\tvar count = pts.length;\n\t\tpoint = pts[(source) ? Math.min(1, count - 1) : Math.max(0, count - 2)];\n\t}\n\t\n\tif (point == null && opposite != null)\n\t{\n\t\tpoint = new mxPoint(opposite.getCenterX(), opposite.getCenterY());\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Returns the nearest ancestor terminal that is visible. The edge appears\n * to be connected to this terminal on the display. The result of this method\n * is cached in <mxCellState.getVisibleTerminalState>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose visible terminal should be returned.\n * source - Boolean that specifies if the source or target terminal\n * should be returned.\n */\nmxGraphView.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar model = this.graph.getModel();\n\tvar result = model.getTerminal(edge, source);\n\tvar best = result;\n\t\n\twhile (result != null && result != this.currentRoot)\n\t{\n\t\tif (!this.graph.isCellVisible(best) || this.isCellCollapsed(result))\n\t\t{\n\t\t\tbest = result;\n\t\t}\n\t\t\n\t\tresult = model.getParent(result);\n\t}\n\n\t// Checks if the result is valid for the current view state\n\tif (best != null && (!model.contains(best) ||\n\t\tmodel.getParent(best) == model.getRoot() ||\n\t\tbest == this.currentRoot))\n\t{\n\t\tbest = null;\n\t}\n\t\n\treturn best;\n};\n\n/**\n * Function: updateEdgeBounds\n *\n * Updates the given state using the bounding box of t\n * he absolute points.\n * Also updates <mxCellState.terminalDistance>, <mxCellState.length> and\n * <mxCellState.segments>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateEdgeBounds = function(state)\n{\n\tvar points = state.absolutePoints;\n\tvar p0 = points[0];\n\tvar pe = points[points.length - 1];\n\t\n\tif (p0.x != pe.x || p0.y != pe.y)\n\t{\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\tstate.terminalDistance = Math.sqrt(dx * dx + dy * dy);\n\t}\n\telse\n\t{\n\t\tstate.terminalDistance = 0;\n\t}\n\t\n\tvar length = 0;\n\tvar segments = [];\n\tvar pt = p0;\n\t\n\tif (pt != null)\n\t{\n\t\tvar minX = pt.x;\n\t\tvar minY = pt.y;\n\t\tvar maxX = minX;\n\t\tvar maxY = minY;\n\t\t\n\t\tfor (var i = 1; i < points.length; i++)\n\t\t{\n\t\t\tvar tmp = points[i];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar dx = pt.x - tmp.x;\n\t\t\t\tvar dy = pt.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar segment = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tsegments.push(segment);\n\t\t\t\tlength += segment;\n\t\t\t\t\n\t\t\t\tpt = tmp;\n\t\t\t\t\n\t\t\t\tminX = Math.min(pt.x, minX);\n\t\t\t\tminY = Math.min(pt.y, minY);\n\t\t\t\tmaxX = Math.max(pt.x, maxX);\n\t\t\t\tmaxY = Math.max(pt.y, maxY);\n\t\t\t}\n\t\t}\n\t\t\n\t\tstate.length = length;\n\t\tstate.segments = segments;\n\t\t\n\t\tvar markerSize = 1; // TODO: include marker size\n\t\t\n\t\tstate.x = minX;\n\t\tstate.y = minY;\n\t\tstate.width = Math.max(markerSize, maxX - minX);\n\t\tstate.height = Math.max(markerSize, maxY - minY);\n\t}\n};\n\n/**\n * Function: getPoint\n *\n * Returns the absolute point on the edge for the given relative\n * <mxGeometry> as an <mxPoint>. The edge is represented by the given\n * <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * geometry - <mxGeometry> that represents the relative location.\n */\nmxGraphView.prototype.getPoint = function(state, geometry)\n{\n\tvar x = state.getCenterX();\n\tvar y = state.getCenterY();\n\t\n\tif (state.segments != null && (geometry == null || geometry.relative))\n\t{\n\t\tvar gx = (geometry != null) ? geometry.x / 2 : 0;\n\t\tvar pointCount = state.absolutePoints.length;\n\t\tvar dist = Math.round((gx + 0.5) * state.length);\n\t\tvar segment = state.segments[0];\n\t\tvar length = 0;\t\t\t\t\n\t\tvar index = 1;\n\n\t\twhile (dist >= Math.round(length + segment) && index < pointCount - 1)\n\t\t{\n\t\t\tlength += segment;\n\t\t\tsegment = state.segments[index++];\n\t\t}\n\n\t\tvar factor = (segment == 0) ? 0 : (dist - length) / segment;\n\t\tvar p0 = state.absolutePoints[index-1];\n\t\tvar pe = state.absolutePoints[index];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar gy = 0;\n\t\t\tvar offsetX = 0;\n\t\t\tvar offsetY = 0;\n\n\t\t\tif (geometry != null)\n\t\t\t{\n\t\t\t\tgy = geometry.y;\n\t\t\t\tvar offset = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (offset != null)\n\t\t\t\t{\n\t\t\t\t\toffsetX = offset.x;\n\t\t\t\t\toffsetY = offset.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\tvar nx = (segment == 0) ? 0 : dy / segment;\n\t\t\tvar ny = (segment == 0) ? 0 : dx / segment;\n\t\t\t\n\t\t\tx = p0.x + dx * factor + (nx * gy + offsetX) * this.scale;\n\t\t\ty = p0.y + dy * factor - (ny * gy - offsetY) * this.scale;\n\t\t}\n\t}\n\telse if (geometry != null)\n\t{\n\t\tvar offset = geometry.offset;\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tx += offset.x;\n\t\t\ty += offset.y;\n\t\t}\n\t}\n\t\n\treturn new mxPoint(x, y);\t\t\n};\n\n/**\n * Function: getRelativePoint\n *\n * Gets the relative point that describes the given, absolute label\n * position for the given edge state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * x - Specifies the x-coordinate of the absolute label location.\n * y - Specifies the y-coordinate of the absolute label location.\n */\nmxGraphView.prototype.getRelativePoint = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar pointCount = edgeState.absolutePoints.length;\n\t\t\n\t\tif (geometry.relative && pointCount > 1)\n\t\t{\n\t\t\tvar totalLength = edgeState.length;\n\t\t\tvar segments = edgeState.segments;\n\n\t\t\t// Works which line segment the point of the label is closest to\n\t\t\tvar p0 = edgeState.absolutePoints[0];\n\t\t\tvar pe = edgeState.absolutePoints[1];\n\t\t\tvar minDist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tvar index = 0;\n\t\t\tvar tmp = 0;\n\t\t\tvar length = 0;\n\t\t\t\n\t\t\tfor (var i = 2; i < pointCount; i++)\n\t\t\t{\n\t\t\t\ttmp += segments[i - 2];\n\t\t\t\tpe = edgeState.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\t\tif (dist <= minDist)\n\t\t\t\t{\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t\tlength = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp0 = pe;\n\t\t\t}\n\t\t\t\n\t\t\tvar seg = segments[index];\n\t\t\tp0 = edgeState.absolutePoints[index];\n\t\t\tpe = edgeState.absolutePoints[index + 1];\n\t\t\t\n\t\t\tvar x2 = p0.x;\n\t\t\tvar y2 = p0.y;\n\t\t\t\n\t\t\tvar x1 = pe.x;\n\t\t\tvar y1 = pe.y;\n\t\t\t\n\t\t\tvar px = x;\n\t\t\tvar py = y;\n\t\t\t\n\t\t\tvar xSegment = x2 - x1;\n\t\t\tvar ySegment = y2 - y1;\n\t\t\t\n\t\t\tpx -= x1;\n\t\t\tpy -= y1;\n\t\t\tvar projlenSq = 0;\n\t\t\t\n\t\t\tpx = xSegment - px;\n\t\t\tpy = ySegment - py;\n\t\t\tvar dotprod = px * xSegment + py * ySegment;\n\n\t\t\tif (dotprod <= 0.0)\n\t\t\t{\n\t\t\t\tprojlenSq = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprojlenSq = dotprod * dotprod\n\t\t\t\t\t\t/ (xSegment * xSegment + ySegment * ySegment);\n\t\t\t}\n\n\t\t\tvar projlen = Math.sqrt(projlenSq);\n\n\t\t\tif (projlen > seg)\n\t\t\t{\n\t\t\t\tprojlen = seg;\n\t\t\t}\n\n\t\t\tvar yDistance = Math.sqrt(mxUtils.ptSegDistSq(p0.x, p0.y, pe\n\t\t\t\t\t.x, pe.y, x, y));\n\t\t\tvar direction = mxUtils.relativeCcw(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tif (direction == -1)\n\t\t\t{\n\t\t\t\tyDistance = -yDistance;\n\t\t\t}\n\n\t\t\t// Constructs the relative point for the label\n\t\t\treturn new mxPoint(((totalLength / 2 - length - projlen) / totalLength) * -2,\n\t\t\t\t\t\tyDistance / this.scale);\n\t\t}\n\t}\n\t\n\treturn new mxPoint();\n};\n\n/**\n * Function: updateEdgeLabelOffset\n *\n * Updates <mxCellState.absoluteOffset> for the given state. The absolute\n * offset is normally used for the position of the edge label. Is is\n * calculated from the geometry as an absolute offset from the center\n * between the two endpoints if the geometry is absolute, or as the\n * relative distance between the center along the line and the absolute\n * orthogonal distance if the geometry is relative.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateEdgeLabelOffset = function(state)\n{\n\tvar points = state.absolutePoints;\n\t\n\tstate.absoluteOffset.x = state.getCenterX();\n\tstate.absoluteOffset.y = state.getCenterY();\n\n\tif (points != null && points.length > 0 && state.segments != null)\n\t{\n\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\tvar offset = this.getPoint(state, geometry);\n\t\t\t\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset = offset;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar dx = pe.x - p0.x;\n\t\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\tvar x0 = 0;\n\t\t\t\tvar y0 = 0;\n\n\t\t\t\tvar off = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tx0 = off.x;\n\t\t\t\t\ty0 = off.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar x = p0.x + dx / 2 + x0 * this.scale;\n\t\t\t\tvar y = p0.y + dy / 2 + y0 * this.scale;\n\t\t\t\t\n\t\t\t\tstate.absoluteOffset.x = x;\n\t\t\t\tstate.absoluteOffset.y = y;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getState\n *\n * Returns the <mxCellState> for the given cell. If create is true, then\n * the state is created if it does not yet exist.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be returned.\n * create - Optional boolean indicating if a new state should be created\n * if it does not yet exist. Default is false.\n */\nmxGraphView.prototype.getState = function(cell, create)\n{\n\tcreate = create || false;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.get(cell);\n\t\t\n\t\tif (create && (state == null || this.updateStyle) && this.graph.isCellVisible(cell))\n\t\t{\n\t\t\tif (state == null)\n\t\t\t{\n\t\t\t\tstate = this.createState(cell);\n\t\t\t\tthis.states.put(cell, state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.style = this.graph.getCellStyle(cell);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: isRendering\n *\n * Returns <rendering>.\n */\nmxGraphView.prototype.isRendering = function()\n{\n\treturn this.rendering;\n};\n\n/**\n * Function: setRendering\n *\n * Sets <rendering>.\n */\nmxGraphView.prototype.setRendering = function(value)\n{\n\tthis.rendering = value;\n};\n\n/**\n * Function: isAllowEval\n *\n * Returns <allowEval>.\n */\nmxGraphView.prototype.isAllowEval = function()\n{\n\treturn this.allowEval;\n};\n\n/**\n * Function: setAllowEval\n *\n * Sets <allowEval>.\n */\nmxGraphView.prototype.setAllowEval = function(value)\n{\n\tthis.allowEval = value;\n};\n\n/**\n * Function: getStates\n *\n * Returns <states>.\n */\nmxGraphView.prototype.getStates = function()\n{\n\treturn this.states;\n};\n\n/**\n * Function: setStates\n *\n * Sets <states>.\n */\nmxGraphView.prototype.setStates = function(value)\n{\n\tthis.states = value;\n};\n\n/**\n * Function: getCellStates\n *\n * Returns the <mxCellStates> for the given array of <mxCells>. The array\n * contains all states that are not null, that is, the returned array may\n * have less elements than the given array. If no argument is given, then\n * this returns <states>.\n */\nmxGraphView.prototype.getCellStates = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\treturn this.states;\n\t}\n\telse\n\t{\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tresult.push(state);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: removeState\n *\n * Removes and returns the <mxCellState> for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be removed.\n */\nmxGraphView.prototype.removeState = function(cell)\n{\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.remove(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.graph.cellRenderer.destroy(state);\n\t\t\tstate.invalid = true;\n\t\t\tstate.destroy();\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: createState\n *\n * Creates and returns an <mxCellState> for the given cell and initializes\n * it using <mxCellRenderer.initialize>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a new <mxCellState> should be created.\n */\nmxGraphView.prototype.createState = function(cell)\n{\n\treturn new mxCellState(this, cell, this.graph.getCellStyle(cell));\n};\n\n/**\n * Function: getCanvas\n *\n * Returns the DOM node that contains the background-, draw- and\n * overlay- and decoratorpanes.\n */\nmxGraphView.prototype.getCanvas = function()\n{\n\treturn this.canvas;\n};\n\n/**\n * Function: getBackgroundPane\n *\n * Returns the DOM node that represents the background layer.\n */\nmxGraphView.prototype.getBackgroundPane = function()\n{\n\treturn this.backgroundPane;\n};\n\n/**\n * Function: getDrawPane\n *\n * Returns the DOM node that represents the main drawing layer.\n */\nmxGraphView.prototype.getDrawPane = function()\n{\n\treturn this.drawPane;\n};\n\n/**\n * Function: getOverlayPane\n *\n * Returns the DOM node that represents the layer above the drawing layer.\n */\nmxGraphView.prototype.getOverlayPane = function()\n{\n\treturn this.overlayPane;\n};\n\n/**\n * Function: getDecoratorPane\n *\n * Returns the DOM node that represents the topmost drawing layer.\n */\nmxGraphView.prototype.getDecoratorPane = function()\n{\n\treturn this.decoratorPane;\n};\n\n/**\n * Function: isContainerEvent\n * \n * Returns true if the event origin is one of the drawing panes or\n * containers of the view.\n */\nmxGraphView.prototype.isContainerEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\n\treturn (source == this.graph.container ||\n\t\tsource.parentNode == this.backgroundPane ||\n\t\t(source.parentNode != null &&\n\t\tsource.parentNode.parentNode == this.backgroundPane) ||\n\t\tsource == this.canvas.parentNode ||\n\t\tsource == this.canvas ||\n\t\tsource == this.backgroundPane ||\n\t\tsource == this.drawPane ||\n\t\tsource == this.overlayPane ||\n\t\tsource == this.decoratorPane);\n};\n\n/**\n * Function: isScrollEvent\n * \n * Returns true if the event origin is one of the scrollbars of the\n * container in IE. Such events are ignored.\n */\n mxGraphView.prototype.isScrollEvent = function(evt)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar pt = new mxPoint(evt.clientX - offset.x, evt.clientY - offset.y);\n\n\tvar outWidth = this.graph.container.offsetWidth;\n\tvar inWidth = this.graph.container.clientWidth;\n\n\tif (outWidth > inWidth && pt.x > inWidth + 2 && pt.x <= outWidth)\n\t{\n\t\treturn true;\n\t}\n\n\tvar outHeight = this.graph.container.offsetHeight;\n\tvar inHeight = this.graph.container.clientHeight;\n\t\n\tif (outHeight > inHeight && pt.y > inHeight + 2 && pt.y <= outHeight)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: init\n *\n * Initializes the graph event dispatch loop for the specified container\n * and invokes <create> to create the required DOM nodes for the display.\n */\nmxGraphView.prototype.init = function()\n{\n\tthis.installListeners();\n\t\n\t// Creates the DOM nodes for the respective display dialect\n\tvar graph = this.graph;\n\t\n\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tthis.createSvg();\n\t}\n\telse if (graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tthis.createVml();\n\t}\n\telse\n\t{\n\t\tthis.createHtml();\n\t}\n};\n\n/**\n * Function: installListeners\n *\n * Installs the required listeners in the container.\n */\nmxGraphView.prototype.installListeners = function()\n{\n\tvar graph = this.graph;\n\tvar container = graph.container;\n\t\n\tif (container != null)\n\t{\n\t\t// Support for touch device gestures (eg. pinch to zoom)\n\t\t// Double-tap handling is implemented in mxGraph.fireMouseEvent\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(container, 'gesturestart', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t\t\n\t\t\tmxEvent.addListener(container, 'gesturechange', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\n\t\t\tmxEvent.addListener(container, 'gestureend', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Fires event only for one pointer per gesture\n\t\tvar pointerId = null;\n\t\t\n\t\t// Adds basic listeners for graph event dispatching\n\t\tmxEvent.addGestureListeners(container, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Condition to avoid scrollbar events starting a rubberband selection\n\t\t\tif (this.isContainerEvent(evt) && ((!mxClient.IS_IE && !mxClient.IS_IE11 && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_OP && !mxClient.IS_SF) || !this.isScrollEvent(evt)))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\tpointerId = evt.pointerId;\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt) && (pointerId == null || evt.pointerId == pointerId))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t\t\n\t\t\tpointerId = null;\n\t\t}));\n\t\t\n\t\t// Adds listener for double click handling on background, this does always\n\t\t// use native event handler, we assume that the DOM of the background\n\t\t// does not change during the double click\n\t\tmxEvent.addListener(container, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.dblClick(evt);\n\t\t\t}\n\t\t}));\n\n\t\t// Workaround for touch events which started on some DOM node\n\t\t// on top of the container, in which case the cells under the\n\t\t// mouse for the move and up events are not detected.\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar state = null;\n\t\t\t\n\t\t\t// Workaround for touch events which started on some DOM node\n\t\t\t// on top of the container, in which case the cells under the\n\t\t\t// mouse for the move and up events are not detected.\n\t\t\tif (mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(container, x, y);\n\t\t\t\tstate = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn state;\n\t\t};\n\t\t\n\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t// container and finishing the handling of a single gesture\n\t\t// Implemented via graph event dispatch loop to avoid duplicate events\n\t\t// in Firefox and Chrome\n\t\tgraph.addMouseListener(\n\t\t{\n\t\t\tmouseDown: function(sender, me)\n\t\t\t{\n\t\t\t\tgraph.popupMenuHandler.hideMenu();\n\t\t\t},\n\t\t\tmouseMove: function() { },\n\t\t\tmouseUp: function() { }\n\t\t});\n\t\t\n\t\tthis.moveHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\tif (graph.tooltipHandler != null && graph.tooltipHandler.isHideOnHover())\n\t\t\t{\n\t\t\t\tgraph.tooltipHandler.hide();\n\t\t\t}\n\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden' && !mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.endHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden')\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t}\n};\n\n/**\n * Function: createHtml\n *\n * Creates the DOM nodes for the HTML display.\n */\nmxGraphView.prototype.createHtml = function()\n{\n\tvar container = this.graph.container;\n\t\n\tif (container != null)\n\t{\n\t\tthis.canvas = this.createHtmlPane('100%', '100%');\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\n\t\t// Uses minimal size for inner DIVs on Canvas. This is required\n\t\t// for correct event processing in IE. If we have an overlapping\n\t\t// DIV then the events on the cells are only fired for labels.\n\t\tthis.backgroundPane = this.createHtmlPane('1px', '1px');\n\t\tthis.drawPane = this.createHtmlPane('1px', '1px');\n\t\tthis.overlayPane = this.createHtmlPane('1px', '1px');\n\t\tthis.decoratorPane = this.createHtmlPane('1px', '1px');\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\n\t\tcontainer.appendChild(this.canvas);\n\t\tthis.updateContainerStyle(container);\n\t\t\n\t\t// Implements minWidth/minHeight in quirks mode\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tvar onResize = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar bounds = this.getGraphBounds();\n\t\t\t\tvar width = bounds.x + bounds.width + this.graph.border;\n\t\t\t\tvar height = bounds.y + bounds.height + this.graph.border;\n\t\t\t\t\n\t\t\t\tthis.updateHtmlCanvasSize(width, height);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addListener(window, 'resize', onResize);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHtmlCanvasSize\n * \n * Updates the size of the HTML canvas.\n */\nmxGraphView.prototype.updateHtmlCanvasSize = function(width, height)\n{\n\tif (this.graph.container != null)\n\t{\n\t\tvar ow = this.graph.container.offsetWidth;\n\t\tvar oh = this.graph.container.offsetHeight;\n\n\t\tif (ow < width)\n\t\t{\n\t\t\tthis.canvas.style.width = width + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.width = '100%';\n\t\t}\n\n\t\tif (oh < height)\n\t\t{\n\t\t\tthis.canvas.style.height = height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.height = '100%';\n\t\t}\n\t}\n};\n\n/**\n * Function: createHtmlPane\n * \n * Creates and returns a drawing pane in HTML (DIV).\n */\nmxGraphView.prototype.createHtmlPane = function(width, height)\n{\n\tvar pane = document.createElement('DIV');\n\t\n\tif (width != null && height != null)\n\t{\n\t\tpane.style.position = 'absolute';\n\t\tpane.style.left = '0px';\n\t\tpane.style.top = '0px';\n\n\t\tpane.style.width = width;\n\t\tpane.style.height = height;\n\t}\n\telse\n\t{\n\t\tpane.style.position = 'relative';\n\t}\n\t\n\treturn pane;\n};\n\n/**\n * Function: createVml\n *\n * Creates the DOM nodes for the VML display.\n */\nmxGraphView.prototype.createVml = function()\n{\n\tvar container = this.graph.container;\n\n\tif (container != null)\n\t{\n\t\tvar width = container.offsetWidth;\n\t\tvar height = container.offsetHeight;\n\t\tthis.canvas = this.createVmlPane(width, height);\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\t\n\t\tthis.backgroundPane = this.createVmlPane(width, height);\n\t\tthis.drawPane = this.createVmlPane(width, height);\n\t\tthis.overlayPane = this.createVmlPane(width, height);\n\t\tthis.decoratorPane = this.createVmlPane(width, height);\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\t\t\n\t\tcontainer.appendChild(this.canvas);\n\t}\n};\n\n/**\n * Function: createVmlPane\n * \n * Creates a drawing pane in VML (group).\n */\nmxGraphView.prototype.createVmlPane = function(width, height)\n{\n\tvar pane = document.createElement(mxClient.VML_PREFIX + ':group');\n\t\n\t// At this point the width and height are potentially\n\t// uninitialized. That's OK.\n\tpane.style.position = 'absolute';\n\tpane.style.left = '0px';\n\tpane.style.top = '0px';\n\n\tpane.style.width = width + 'px';\n\tpane.style.height = height + 'px';\n\n\tpane.setAttribute('coordsize', width + ',' + height);\n\tpane.setAttribute('coordorigin', '0,0');\n\t\n\treturn pane;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the DOM nodes for the SVG display.\n */\nmxGraphView.prototype.createSvg = function()\n{\n\tvar container = this.graph.container;\n\tthis.canvas = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\n\t// For background image\n\tthis.backgroundPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.backgroundPane);\n\n\t// Adds two layers (background is early feature)\n\tthis.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.drawPane);\n\n\tthis.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.overlayPane);\n\t\n\tthis.decoratorPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.decoratorPane);\n\t\n\tvar root = document.createElementNS(mxConstants.NS_SVG, 'svg');\n\troot.style.left = '0px';\n\troot.style.top = '0px';\n\troot.style.width = '100%';\n\troot.style.height = '100%';\n\t\n\t// NOTE: In standards mode, the SVG must have block layout\n\t// in order for the container DIV to not show scrollbars.\n\troot.style.display = 'block';\n\troot.appendChild(this.canvas);\n\t\n\t// Workaround for scrollbars in IE11 and below\n\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t{\n\t\troot.style.overflow = 'hidden';\n\t}\n\n\tif (container != null)\n\t{\n\t\tcontainer.appendChild(root);\n\t\tthis.updateContainerStyle(container);\n\t}\n};\n\n/**\n * Function: updateContainerStyle\n * \n * Updates the style of the container after installing the SVG DOM elements.\n */\nmxGraphView.prototype.updateContainerStyle = function(container)\n{\n\t// Workaround for offset of container\n\tvar style = mxUtils.getCurrentStyle(container);\n\t\n\tif (style != null && style.position == 'static')\n\t{\n\t\tcontainer.style.position = 'relative';\n\t}\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tcontainer.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the view and all its resources.\n */\nmxGraphView.prototype.destroy = function()\n{\n\tvar root = (this.canvas != null) ? this.canvas.ownerSVGElement : null;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.canvas;\n\t}\n\t\n\tif (root != null && root.parentNode != null)\n\t{\n\t\tthis.clear(this.currentRoot, true);\n\t\tmxEvent.removeGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t\tmxEvent.release(this.graph.container);\n\t\troot.parentNode.removeChild(root);\n\t\t\n\t\tthis.moveHandler = null;\n\t\tthis.endHandler = null;\n\t\tthis.canvas = null;\n\t\tthis.backgroundPane = null;\n\t\tthis.drawPane = null;\n\t\tthis.overlayPane = null;\n\t\tthis.decoratorPane = null;\n\t}\n};\n\n/**\n * Class: mxCurrentRootChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxCurrentRootChange(view, root)\n{\n\tthis.view = view;\n\tthis.root = root;\n\tthis.previous = root;\n\tthis.isUp = root == null;\n\t\n\tif (!this.isUp)\n\t{\n\t\tvar tmp = this.view.currentRoot;\n\t\tvar model = this.view.graph.getModel();\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp == root)\n\t\t\t{\n\t\t\t\tthis.isUp = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = model.getParent(tmp);\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxCurrentRootChange.prototype.execute = function()\n{\n\tvar tmp = this.view.currentRoot;\n\tthis.view.currentRoot = this.previous;\n\tthis.previous = tmp;\n\n\tvar translate = this.view.graph.getTranslateForRoot(this.view.currentRoot);\n\t\n\tif (translate != null)\n\t{\n\t\tthis.view.translate = new mxPoint(-translate.x, -translate.y);\n\t}\n\n\tif (this.isUp)\n\t{\n\t\tthis.view.clear(this.view.currentRoot, true);\n\t\tthis.view.validate();\n\t}\n\telse\n\t{\n\t\tthis.view.refresh();\n\t}\n\t\n\tvar name = (this.isUp) ? mxEvent.UP : mxEvent.DOWN;\n\tthis.view.fireEvent(new mxEventObject(name,\n\t\t'root', this.view.currentRoot, 'previous', this.previous));\n\tthis.isUp = !this.isUp;\n};\n\n__mxOutput.mxGraphView = typeof mxGraphView !== 'undefined' ? mxGraphView : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraph\n *\n * Extends <mxEventSource> to implement a graph component for\n * the browser. This is the main class of the package. To activate\n * panning and connections use <setPanning> and <setConnectable>.\n * For rubberband selection you must create a new instance of\n * <mxRubberband>. The following listeners are added to\n * <mouseListeners> by default:\n * \n * - <tooltipHandler>: <mxTooltipHandler> that displays tooltips\n * - <panningHandler>: <mxPanningHandler> for panning and popup menus\n * - <connectionHandler>: <mxConnectionHandler> for creating connections\n * - <graphHandler>: <mxGraphHandler> for moving and cloning cells\n * \n * These listeners will be called in the above order if they are enabled.\n *\n * Background Images:\n * \n * To display a background image, set the image, image width and\n * image height using <setBackgroundImage>. If one of the\n * above values has changed then the <view>'s <mxGraphView.validate>\n * should be invoked.\n * \n * Cell Images:\n * \n * To use images in cells, a shape must be specified in the default\n * vertex style (or any named style). Possible shapes are\n * <mxConstants.SHAPE_IMAGE> and <mxConstants.SHAPE_LABEL>.\n * The code to change the shape used in the default vertex style,\n * the following code is used:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;\n * (end)\n * \n * For the default vertex style, the image to be displayed can be\n * specified in a cell's style using the <mxConstants.STYLE_IMAGE>\n * key and the image URL as a value, for example:\n * \n * (code)\n * image=http://www.example.com/image.gif\n * (end)\n * \n * For a named style, the the stylename must be the first element\n * of the cell style:\n * \n * (code)\n * stylename;image=http://www.example.com/image.gif\n * (end)\n * \n * A cell style can have any number of key=value pairs added, divided\n * by a semicolon as follows:\n * \n * (code)\n * [stylename;|key=value;]\n * (end)\n *\n * Labels:\n * \n * The cell labels are defined by <getLabel> which uses <convertValueToString>\n * if <labelsVisible> is true. If a label must be rendered as HTML markup, then\n * <isHtmlLabel> should return true for the respective cell. If all labels\n * contain HTML markup, <htmlLabels> can be set to true. NOTE: Enabling HTML\n * labels carries a possible security risk (see the section on security in\n * the manual).\n * \n * If wrapping is needed for a label, then <isHtmlLabel> and <isWrapping> must\n * return true for the cell whose label should be wrapped. See <isWrapping> for\n * an example.\n * \n * If clipping is needed to keep the rendering of a HTML label inside the\n * bounds of its vertex, then <isClipping> should return true for the\n * respective cell.\n * \n * By default, edge labels are movable and vertex labels are fixed. This can be\n * changed by setting <edgeLabelsMovable> and <vertexLabelsMovable>, or by\n * overriding <isLabelMovable>.\n *\n * In-place Editing:\n * \n * In-place editing is started with a doubleclick or by typing F2.\n * Programmatically, <edit> is used to check if the cell is editable\n * (<isCellEditable>) and call <startEditingAtCell>, which invokes\n * <mxCellEditor.startEditing>. The editor uses the value returned\n * by <getEditingValue> as the editing value.\n * \n * After in-place editing, <labelChanged> is called, which invokes\n * <mxGraphModel.setValue>, which in turn calls\n * <mxGraphModel.valueForCellChanged> via <mxValueChange>.\n * \n * The event that triggers in-place editing is passed through to the\n * <cellEditor>, which may take special actions depending on the type of the\n * event or mouse location, and is also passed to <getEditingValue>. The event\n * is then passed back to the event processing functions which can perform\n * specific actions based on the trigger event.\n * \n * Tooltips:\n * \n * Tooltips are implemented by <getTooltip>, which calls <getTooltipForCell>\n * if a cell is under the mousepointer. The default implementation checks if\n * the cell has a getTooltip function and calls it if it exists. Hence, in order\n * to provide custom tooltips, the cell must provide a getTooltip function, or \n * one of the two above functions must be overridden.\n * \n * Typically, for custom cell tooltips, the latter function is overridden as\n * follows:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * When using a config file, the function is overridden in the mxGraph section\n * using the following entry:\n * \n * (code)\n * <add as=\"getTooltipForCell\"><![CDATA[\n *   function(cell)\n *   {\n *     var label = this.convertValueToString(cell);\n *     return 'Tooltip for '+label;\n *   }\n * ]]></add>\n * (end)\n * \n * \"this\" refers to the graph in the implementation, so for example to check if \n * a cell is an edge, you use this.getModel().isEdge(cell)\n *\n * For replacing the default implementation of <getTooltipForCell> (rather than \n * replacing the function on a specific instance), the following code should be \n * used after loading the JavaScript files, but before creating a new mxGraph \n * instance using <mxGraph>:\n * \n * (code)\n * mxGraph.prototype.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * Shapes & Styles:\n * \n * The implementation of new shapes is demonstrated in the examples. We'll assume\n * that we have implemented a custom shape with the name BoxShape which we want\n * to use for drawing vertices. To use this shape, it must first be registered in\n * the cell renderer as follows:\n * \n * (code)\n * mxCellRenderer.registerShape('box', BoxShape);\n * (end)\n * \n * The code registers the BoxShape constructor under the name box in the cell\n * renderer of the graph. The shape can now be referenced using the shape-key in\n * a style definition. (The cell renderer contains a set of additional shapes,\n * namely one for each constant with a SHAPE-prefix in <mxConstants>.)\n *\n * Styles are a collection of key, value pairs and a stylesheet is a collection\n * of named styles. The names are referenced by the cellstyle, which is stored\n * in <mxCell.style> with the following format: [stylename;|key=value;]. The\n * string is resolved to a collection of key, value pairs, where the keys are\n * overridden with the values in the string.\n *\n * When introducing a new shape, the name under which the shape is registered\n * must be used in the stylesheet. There are three ways of doing this:\n * \n *   - By changing the default style, so that all vertices will use the new\n * \t\tshape\n *   - By defining a new style, so that only vertices with the respective\n * \t\tcellstyle will use the new shape\n *   - By using shape=box in the cellstyle's optional list of key, value pairs\n * \t\tto be overridden\n *\n * In the first case, the code to fetch and modify the default style for\n * vertices is as follows:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * (end)\n * \n * The code takes the default vertex style, which is used for all vertices that\n * do not have a specific cellstyle, and modifies the value for the shape-key\n * in-place to use the new BoxShape for drawing vertices. This is done by\n * assigning the box value in the second line, which refers to the name of the\n * BoxShape in the cell renderer.\n * \n * In the second case, a collection of key, value pairs is created and then\n * added to the stylesheet under a new name. In order to distinguish the\n * shapename and the stylename we'll use boxstyle for the stylename:\n * \n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * style[mxConstants.STYLE_STROKECOLOR] = '#000000';\n * style[mxConstants.STYLE_FONTCOLOR] = '#000000';\n * graph.getStylesheet().putCellStyle('boxstyle', style);\n * (end)\n * \n * The code adds a new style with the name boxstyle to the stylesheet. To use\n * this style with a cell, it must be referenced from the cellstyle as follows:\n * \n * (code)\n * var vertex = graph.insertVertex(parent, null, 'Hello, World!', 20, 20, 80, 20,\n * \t\t\t\t'boxstyle');\n * (end)\n * \n * To summarize, each new shape must be registered in the <mxCellRenderer> with\n * a unique name. That name is then used as the value of the shape-key in a\n * default or custom style. If there are multiple custom shapes, then there\n * should be a separate style for each shape.\n * \n * Inheriting Styles:\n * \n * For fill-, stroke-, gradient-, font- and indicatorColors special keywords\n * can be used. The inherit keyword for one of these colors will inherit the\n * color for the same key from the parent cell. The swimlane keyword does the\n * same, but inherits from the nearest swimlane in the ancestor hierarchy.\n * Finally, the indicated keyword will use the color of the indicator as the\n * color for the given key.\n * \n * Scrollbars:\n * \n * The <containers> overflow CSS property defines if scrollbars are used to\n * display the graph. For values of 'auto' or 'scroll', the scrollbars will\n * be shown. Note that the <resizeContainer> flag is normally not used\n * together with scrollbars, as it will resize the container to match the\n * size of the graph after each change.\n * \n * Multiplicities and Validation:\n * \n * To control the possible connections in mxGraph, <getEdgeValidationError> is\n * used. The default implementation of the function uses <multiplicities>,\n * which is an array of <mxMultiplicity>. Using this class allows to establish\n * simple multiplicities, which are enforced by the graph.\n * \n * The <mxMultiplicity> uses <mxCell.is> to determine for which terminals it\n * applies. The default implementation of <mxCell.is> works with DOM nodes (XML\n * nodes) and checks if the given type parameter matches the nodeName of the\n * node (case insensitive). Optionally, an attributename and value can be\n * specified which are also checked.\n * \n * <getEdgeValidationError> is called whenever the connectivity of an edge\n * changes. It returns an empty string or an error message if the edge is\n * invalid or null if the edge is valid. If the returned string is not empty\n * then it is displayed as an error message.\n * \n * <mxMultiplicity> allows to specify the multiplicity between a terminal and\n * its possible neighbors. For example, if any rectangle may only be connected\n * to, say, a maximum of two circles you can add the following rule to\n * <multiplicities>:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only shape targets allowed'));\n * (end)\n * \n * This will display the first error message whenever a rectangle is connected\n * to more than two circles and the second error message if a rectangle is\n * connected to anything but a circle.\n * \n * For certain multiplicities, such as a minimum of 1 connection, which cannot\n * be enforced at cell creation time (unless the cell is created together with\n * the connection), mxGraph offers <validate> which checks all multiplicities\n * for all cells and displays the respective error messages in an overlay icon\n * on the cells.\n * \n * If a cell is collapsed and contains validation errors, a respective warning\n * icon is attached to the collapsed cell.\n * \n * Auto-Layout:\n * \n * For automatic layout, the <getLayout> hook is provided in <mxLayoutManager>.\n * It can be overridden to return a layout algorithm for the children of a\n * given cell.\n * \n * Unconnected edges:\n * \n * The default values for all switches are designed to meet the requirements of\n * general diagram drawing applications. A very typical set of settings to\n * avoid edges that are not connected is the following:\n * \n * (code)\n * graph.setAllowDanglingEdges(false);\n * graph.setDisconnectOnMove(false);\n * (end)\n * \n * Setting the <cloneInvalidEdges> switch to true is optional. This switch\n * controls if edges are inserted after a copy, paste or clone-drag if they are\n * invalid. For example, edges are invalid if copied or control-dragged without \n * having selected the corresponding terminals and allowDanglingEdges is\n * false, in which case the edges will not be cloned if the switch is false.\n * \n * Output:\n * \n * To produce an XML representation for a diagram, the following code can be\n * used.\n * \n * (code)\n * var enc = new mxCodec(mxUtils.createXmlDocument());\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will produce an XML node than can be handled using the DOM API or\n * turned into a string representation using the following code:\n * \n * (code)\n * var xml = mxUtils.getXml(node);\n * (end)\n * \n * To obtain a formatted string, mxUtils.getPrettyXml can be used instead.\n * \n * This string can now be stored in a local persistent storage (for example\n * using Google Gears) or it can be passed to a backend using mxUtils.post as\n * follows. The url variable is the URL of the Java servlet, PHP page or HTTP\n * handler, depending on the server.\n * \n * (code)\n * var xmlString = encodeURIComponent(mxUtils.getXml(node));\n * mxUtils.post(url, 'xml='+xmlString, function(req)\n * {\n *   // Process server response using req of type mxXmlRequest\n * });\n * (end)\n * \n * Input:\n * \n * To load an XML representation of a diagram into an existing graph object\n * mxUtils.load can be used as follows. The url variable is the URL of the Java\n * servlet, PHP page or HTTP handler that produces the XML string.\n * \n * (code)\n * var xmlDoc = mxUtils.load(url).getXml();\n * var node = xmlDoc.documentElement;\n * var dec = new mxCodec(node.ownerDocument);\n * dec.decode(node, graph.getModel());\n * (end)\n * \n * For creating a page that loads the client and a diagram using a single\n * request please refer to the deployment examples in the backends.\n * \n * Functional dependencies:\n * \n * (see images/callgraph.png)\n * \n * Resources:\n *\n * resources/graph - Language resources for mxGraph\n *\n * Group: Events\n * \n * Event: mxEvent.ROOT\n * \n * Fires if the root in the model has changed. This event has no properties.\n * \n * Event: mxEvent.ALIGN_CELLS\n * \n * Fires between begin- and endUpdate in <alignCells>. The <code>cells</code>\n * and <code>align</code> properties contain the respective arguments that were\n * passed to <alignCells>.\n *\n * Event: mxEvent.FLIP_EDGE\n *\n * Fires between begin- and endUpdate in <flipEdge>. The <code>edge</code>\n * property contains the edge passed to <flipEdge>.\n * \n * Event: mxEvent.ORDER_CELLS\n * \n * Fires between begin- and endUpdate in <orderCells>. The <code>cells</code>\n * and <code>back</code> properties contain the respective arguments that were\n * passed to <orderCells>.\n *\n * Event: mxEvent.CELLS_ORDERED\n *\n * Fires between begin- and endUpdate in <cellsOrdered>. The <code>cells</code>\n * and <code>back</code> arguments contain the respective arguments that were\n * passed to <cellsOrdered>.\n * \n * Event: mxEvent.GROUP_CELLS\n * \n * Fires between begin- and endUpdate in <groupCells>. The <code>group</code>,\n * <code>cells</code> and <code>border</code> arguments contain the respective\n * arguments that were passed to <groupCells>.\n * \n * Event: mxEvent.UNGROUP_CELLS\n * \n * Fires between begin- and endUpdate in <ungroupCells>. The <code>cells</code>\n * property contains the array of cells that was passed to <ungroupCells>.\n * \n * Event: mxEvent.REMOVE_CELLS_FROM_PARENT\n * \n * Fires between begin- and endUpdate in <removeCellsFromParent>. The\n * <code>cells</code> property contains the array of cells that was passed to\n * <removeCellsFromParent>.\n * \n * Event: mxEvent.ADD_CELLS\n * \n * Fires between begin- and endUpdate in <addCells>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code> and\n * <code>target</code> properties contain the respective arguments that were\n * passed to <addCells>.\n * \n * Event: mxEvent.CELLS_ADDED\n * \n * Fires between begin- and endUpdate in <cellsAdded>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code>,\n * <code>target</code> and <code>absolute</code> properties contain the\n * respective arguments that were passed to <cellsAdded>.\n * \n * Event: mxEvent.REMOVE_CELLS\n * \n * Fires between begin- and endUpdate in <removeCells>. The <code>cells</code>\n * and <code>includeEdges</code> arguments contain the respective arguments\n * that were passed to <removeCells>.\n * \n * Event: mxEvent.CELLS_REMOVED\n * \n * Fires between begin- and endUpdate in <cellsRemoved>. The <code>cells</code>\n * argument contains the array of cells that was removed.\n * \n * Event: mxEvent.SPLIT_EDGE\n * \n * Fires between begin- and endUpdate in <splitEdge>. The <code>edge</code>\n * property contains the edge to be splitted, the <code>cells</code>,\n * <code>newEdge</code>, <code>dx</code> and <code>dy</code> properties contain\n * the respective arguments that were passed to <splitEdge>.\n * \n * Event: mxEvent.TOGGLE_CELLS\n * \n * Fires between begin- and endUpdate in <toggleCells>. The <code>show</code>,\n * <code>cells</code> and <code>includeEdges</code> properties contain the\n * respective arguments that were passed to <toggleCells>.\n * \n * Event: mxEvent.FOLD_CELLS\n * \n * Fires between begin- and endUpdate in <foldCells>. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to <foldCells>.\n * \n * Event: mxEvent.CELLS_FOLDED\n * \n * Fires between begin- and endUpdate in cellsFolded. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to\n * <cellsFolded>.\n * \n * Event: mxEvent.UPDATE_CELL_SIZE\n * \n * Fires between begin- and endUpdate in <updateCellSize>. The\n * <code>cell</code> and <code>ignoreChildren</code> properties contain the\n * respective arguments that were passed to <updateCellSize>.\n * \n * Event: mxEvent.RESIZE_CELLS\n * \n * Fires between begin- and endUpdate in <resizeCells>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <resizeCells>.\n * \n * Event: mxEvent.CELLS_RESIZED\n * \n * Fires between begin- and endUpdate in <cellsResized>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <cellsResized>.\n * \n * Event: mxEvent.MOVE_CELLS\n * \n * Fires between begin- and endUpdate in <moveCells>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code>, <code>clone</code>, <code>target</code>\n * and <code>event</code> properties contain the respective arguments that\n * were passed to <moveCells>.\n * \n * Event: mxEvent.CELLS_MOVED\n * \n * Fires between begin- and endUpdate in <cellsMoved>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code> and <code>disconnect</code> properties\n * contain the respective arguments that were passed to <cellsMoved>.\n * \n * Event: mxEvent.CONNECT_CELL\n * \n * Fires between begin- and endUpdate in <connectCell>. The <code>edge</code>,\n * <code>terminal</code> and <code>source</code> properties contain the\n * respective arguments that were passed to <connectCell>.\n * \n * Event: mxEvent.CELL_CONNECTED\n * \n * Fires between begin- and endUpdate in <cellConnected>. The\n * <code>edge</code>, <code>terminal</code> and <code>source</code> properties\n * contain the respective arguments that were passed to <cellConnected>.\n * \n * Event: mxEvent.REFRESH\n * \n * Fires after <refresh> was executed. This event has no properties.\n *\n * Event: mxEvent.CLICK\n * \n * Fires in <click> after a click event. The <code>event</code> property\n * contains the original mouse event and <code>cell</code> property contains\n * the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.DOUBLE_CLICK\n *\n * Fires in <dblClick> after a double click. The <code>event</code> property\n * contains the original mouse event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.GESTURE\n *\n * Fires in <fireGestureEvent> after a touch gesture. The <code>event</code>\n * property contains the original gesture end event and the <code>cell</code>\n * property contains the optional cell associated with the gesture.\n *\n * Event: mxEvent.TAP_AND_HOLD\n *\n * Fires in <tapAndHold> if a tap and hold event was detected. The <code>event</code>\n * property contains the initial touch event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n *\n * Event: mxEvent.FIRE_MOUSE_EVENT\n *\n * Fires in <fireMouseEvent> before the mouse listeners are invoked. The\n * <code>eventName</code> property contains the event name and the\n * <code>event</code> property contains the <mxMouseEvent>.\n *\n * Event: mxEvent.SIZE\n *\n * Fires after <sizeDidChange> was executed. The <code>bounds</code> property\n * contains the new graph bounds.\n *\n * Event: mxEvent.START_EDITING\n *\n * Fires before the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STARTED\n *\n * Fires after the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STOPPED\n *\n * Fires after the in-place editor stops in <stopEditing>.\n *\n * Event: mxEvent.LABEL_CHANGED\n *\n * Fires between begin- and endUpdate in <cellLabelChanged>. The\n * <code>cell</code> property contains the cell, the <code>value</code>\n * property contains the new value for the cell, the <code>old</code> property\n * contains the old value and the optional <code>event</code> property contains\n * the mouse event that started the edit.\n * \n * Event: mxEvent.ADD_OVERLAY\n *\n * Fires after an overlay is added in <addCellOverlay>. The <code>cell</code>\n * property contains the cell and the <code>overlay</code> property contains\n * the <mxCellOverlay> that was added.\n *\n * Event: mxEvent.REMOVE_OVERLAY\n *\n * Fires after an overlay is removed in <removeCellOverlay> and\n * <removeCellOverlays>. The <code>cell</code> property contains the cell and\n * the <code>overlay</code> property contains the <mxCellOverlay> that was\n * removed.\n * \n * Constructor: mxGraph\n * \n * Constructs a new mxGraph in the specified container. Model is an optional\n * mxGraphModel. If no model is provided, a new mxGraphModel instance is \n * used as the model. The container must have a valid owner document prior \n * to calling this function in Internet Explorer. RenderHint is a string to\n * affect the display performance and rendering in IE, but not in SVG-based \n * browsers. The parameter is mapped to <dialect>, which may \n * be one of <mxConstants.DIALECT_SVG> for SVG-based browsers, \n * <mxConstants.DIALECT_STRICTHTML> for fastest display mode,\n * <mxConstants.DIALECT_PREFERHTML> for faster display mode,\n * <mxConstants.DIALECT_MIXEDHTML> for fast and <mxConstants.DIALECT_VML> \n * for exact display mode (slowest). The dialects are defined in mxConstants.\n * The default values are DIALECT_SVG for SVG-based browsers and\n * DIALECT_MIXED for IE.\n *\n * The possible values for the renderingHint parameter are explained below:\n * \n * fast - The parameter is based on the fact that the display performance is \n * highly improved in IE if the VML is not contained within a VML group \n * element. The lack of a group element only slightly affects the display while \n * panning, but improves the performance by almost a factor of 2, while keeping \n * the display sufficiently accurate. This also allows to render certain shapes as HTML \n * if the display accuracy is not affected, which is implemented by \n * <mxShape.isMixedModeHtml>. This is the default setting and is mapped to\n * DIALECT_MIXEDHTML.\n * faster - Same as fast, but more expensive shapes are avoided. This is \n * controlled by <mxShape.preferModeHtml>. The default implementation will \n * avoid gradients and rounded rectangles, but more significant shapes, such \n * as rhombus, ellipse, actor and cylinder will be rendered accurately. This \n * setting is mapped to DIALECT_PREFERHTML.\n * fastest - Almost anything will be rendered in Html. This allows for \n * rectangles, labels and images. This setting is mapped to\n * DIALECT_STRICTHTML.\n * exact - If accurate panning is required and if the diagram is small (up\n * to 100 cells), then this value should be used. In this mode, a group is \n * created that contains the VML. This allows for accurate panning and is \n * mapped to DIALECT_VML.\n *\n * Example:\n * \n * To create a graph inside a DOM node with an id of graph:\n * (code)\n * var container = document.getElementById('graph');\n * var graph = new mxGraph(container);\n * (end)\n * \n * Parameters:\n * \n * container - Optional DOM node that acts as a container for the graph.\n * If this is null then the container can be initialized later using\n * <init>.\n * model - Optional <mxGraphModel> that constitutes the graph data.\n * renderHint - Optional string that specifies the display accuracy and\n * performance. Default is mxConstants.DIALECT_MIXEDHTML (for IE).\n * stylesheet - Optional <mxStylesheet> to be used in the graph.\n */\nfunction mxGraph(container, model, renderHint, stylesheet)\n{\n\t// Initializes the variable in case the prototype has been\n\t// modified to hold some listeners (which is possible because\n\t// the createHandlers call is executed regardless of the\n\t// arguments passed into the ctor).\n\tthis.mouseListeners = null;\n\t\n\t// Converts the renderHint into a dialect\n\tthis.renderHint = renderHint;\n\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_SVG;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_EXACT && mxClient.IS_VML)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_VML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTEST)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_STRICTHTML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTER)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_PREFERHTML;\n\t}\n\telse // default for VML\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_MIXEDHTML;\n\t}\n\t\n\t// Initializes the main members that do not require a container\n\tthis.model = (model != null) ? model : new mxGraphModel();\n\tthis.multiplicities = [];\n\tthis.imageBundles = [];\n\tthis.cellRenderer = this.createCellRenderer();\n\tthis.setSelectionModel(this.createSelectionModel());\n\tthis.setStylesheet((stylesheet != null) ? stylesheet : this.createStylesheet());\n\tthis.view = this.createGraphView();\n\t\n\t// Adds a graph model listener to update the view\n\tthis.graphModelChangeListener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t});\n\t\n\tthis.model.addListener(mxEvent.CHANGE, this.graphModelChangeListener);\n\n\t// Installs basic event handlers with disabled default settings.\n\tthis.createHandlers();\n\t\n\t// Initializes the display if a container was specified\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n\t\n\tthis.view.revalidate();\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/graph');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/graph');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxGraph.prototype = new mxEventSource();\nmxGraph.prototype.constructor = mxGraph;\n\n/**\n * Group: Variables\n */\n\n/**\n * Variable: mouseListeners\n * \n * Holds the mouse event listeners. See <fireMouseEvent>.\n */\nmxGraph.prototype.mouseListeners = null;\n\n/**\n * Variable: isMouseDown\n * \n * Holds the state of the mouse button.\n */\nmxGraph.prototype.isMouseDown = false;\n\n/**\n * Variable: model\n * \n * Holds the <mxGraphModel> that contains the cells to be displayed.\n */\nmxGraph.prototype.model = null;\n\n/**\n * Variable: view\n * \n * Holds the <mxGraphView> that caches the <mxCellStates> for the cells.\n */\nmxGraph.prototype.view = null;\n\n/**\n * Variable: stylesheet\n * \n * Holds the <mxStylesheet> that defines the appearance of the cells.\n * \n * \n * Example:\n * \n * Use the following code to read a stylesheet into an existing graph.\n * \n * (code)\n * var req = mxUtils.load('stylesheet.xml');\n * var root = req.getDocumentElement();\n * var dec = new mxCodec(root.ownerDocument);\n * dec.decode(root, graph.stylesheet);\n * (end)\n */\nmxGraph.prototype.stylesheet = null;\n\t\n/**\n * Variable: selectionModel\n * \n * Holds the <mxGraphSelectionModel> that models the current selection.\n */\nmxGraph.prototype.selectionModel = null;\n\n/**\n * Variable: cellEditor\n * \n * Holds the <mxCellEditor> that is used as the in-place editing.\n */\nmxGraph.prototype.cellEditor = null;\n\n/**\n * Variable: cellRenderer\n * \n * Holds the <mxCellRenderer> for rendering the cells in the graph.\n */\nmxGraph.prototype.cellRenderer = null;\n\n/**\n * Variable: multiplicities\n * \n * An array of <mxMultiplicities> describing the allowed\n * connections in a graph.\n */\nmxGraph.prototype.multiplicities = null;\n\n/**\n * Variable: renderHint\n * \n * RenderHint as it was passed to the constructor.\n */\nmxGraph.prototype.renderHint = null;\n\n/**\n * Variable: dialect\n * \n * Dialect to be used for drawing the graph. Possible values are all\n * constants in <mxConstants> with a DIALECT-prefix.\n */\nmxGraph.prototype.dialect = null;\n\n/**\n * Variable: gridSize\n * \n * Specifies the grid size. Default is 10.\n */\nmxGraph.prototype.gridSize = 10;\n\t\n/**\n * Variable: gridEnabled\n * \n * Specifies if the grid is enabled. This is used in <snap>. Default is\n * true.\n */\nmxGraph.prototype.gridEnabled = true;\n\n/**\n * Variable: portsEnabled\n * \n * Specifies if ports are enabled. This is used in <cellConnected> to update\n * the respective style. Default is true.\n */\nmxGraph.prototype.portsEnabled = true;\n\n/**\n * Variable: nativeDoubleClickEnabled\n * \n * Specifies if native double click events should be detected. Default is true.\n */\nmxGraph.prototype.nativeDblClickEnabled = true;\n\n/**\n * Variable: doubleTapEnabled\n * \n * Specifies if double taps on touch-based devices should be handled as a\n * double click. Default is true.\n */\nmxGraph.prototype.doubleTapEnabled = true;\n\n/**\n * Variable: doubleTapTimeout\n * \n * Specifies the timeout for double taps and non-native double clicks. Default\n * is 500 ms.\n */\nmxGraph.prototype.doubleTapTimeout = 500;\n\n/**\n * Variable: doubleTapTolerance\n * \n * Specifies the tolerance for double taps and double clicks in quirks mode.\n * Default is 25 pixels.\n */\nmxGraph.prototype.doubleTapTolerance = 25;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the x-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the y-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchTime\n * \n * Holds the time of the last touch event for double click detection.\n */\nmxGraph.prototype.lastTouchTime = 0;\n\n/**\n * Variable: tapAndHoldEnabled\n * \n * Specifies if tap and hold should be used for starting connections on touch-based\n * devices. Default is true.\n */\nmxGraph.prototype.tapAndHoldEnabled = true;\n\n/**\n * Variable: tapAndHoldDelay\n * \n * Specifies the time for a tap and hold. Default is 500 ms.\n */\nmxGraph.prototype.tapAndHoldDelay = 500;\n\n/**\n * Variable: tapAndHoldInProgress\n * \n * True if the timer for tap and hold events is running.\n */\nmxGraph.prototype.tapAndHoldInProgress = false;\n\n/**\n * Variable: tapAndHoldValid\n * \n * True as long as the timer is running and the touch events\n * stay within the given <tapAndHoldTolerance>.\n */\nmxGraph.prototype.tapAndHoldValid = false;\n\n/**\n * Variable: initialTouchX\n * \n * Holds the x-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchX = 0;\n\n/**\n * Variable: initialTouchY\n * \n * Holds the y-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchY = 0;\n\n/**\n * Variable: tolerance\n * \n * Tolerance for a move to be handled as a single click.\n * Default is 4 pixels.\n */\nmxGraph.prototype.tolerance = 4;\n\n/**\n * Variable: defaultOverlap\n * \n * Value returned by <getOverlap> if <isAllowOverlapParent> returns\n * true for the given cell. <getOverlap> is used in <constrainChild> if\n * <isConstrainChild> returns true. The value specifies the\n * portion of the child which is allowed to overlap the parent.\n */\nmxGraph.prototype.defaultOverlap = 0.5;\n\n/**\n * Variable: defaultParent\n * \n * Specifies the default parent to be used to insert new cells.\n * This is used in <getDefaultParent>. Default is null.\n */\nmxGraph.prototype.defaultParent = null;\n\n/**\n * Variable: alternateEdgeStyle\n * \n * Specifies the alternate edge style to be used if the main control point\n * on an edge is being doubleclicked. Default is null.\n */\nmxGraph.prototype.alternateEdgeStyle = null;\n\n/**\n * Variable: backgroundImage\n *\n * Specifies the <mxImage> to be returned by <getBackgroundImage>. Default\n * is null.\n * \n * Example:\n *\n * (code)\n * var img = new mxImage('http://www.example.com/maps/examplemap.jpg', 1024, 768);\n * graph.setBackgroundImage(img);\n * graph.view.validate();\n * (end)\n */\nmxGraph.prototype.backgroundImage = null;\n\n/**\n * Variable: pageVisible\n *\n * Specifies if the background page should be visible. Default is false.\n * Not yet implemented.\n */\nmxGraph.prototype.pageVisible = false;\n\n/**\n * Variable: pageBreaksVisible\n * \n * Specifies if a dashed line should be drawn between multiple pages. Default\n * is false. If you change this value while a graph is being displayed then you\n * should call <sizeDidChange> to force an update of the display.\n */\nmxGraph.prototype.pageBreaksVisible = false;\n\n/**\n * Variable: pageBreakColor\n * \n * Specifies the color for page breaks. Default is 'gray'.\n */\nmxGraph.prototype.pageBreakColor = 'gray';\n\n/**\n * Variable: pageBreakDashed\n * \n * Specifies the page breaks should be dashed. Default is true.\n */\nmxGraph.prototype.pageBreakDashed = true;\n\n/**\n * Variable: minPageBreakDist\n * \n * Specifies the minimum distance for page breaks to be visible. Default is\n * 20 (in pixels).\n */\nmxGraph.prototype.minPageBreakDist = 20;\n\n/**\n * Variable: preferPageSize\n * \n * Specifies if the graph size should be rounded to the next page number in\n * <sizeDidChange>. This is only used if the graph container has scrollbars.\n * Default is false.\n */\nmxGraph.prototype.preferPageSize = false;\n\n/**\n * Variable: pageFormat\n *\n * Specifies the page format for the background page. Default is\n * <mxConstants.PAGE_FORMAT_A4_PORTRAIT>. This is used as the default in\n * <mxPrintPreview> and for painting the background page if <pageVisible> is\n * true and the pagebreaks if <pageBreaksVisible> is true.\n */\nmxGraph.prototype.pageFormat = mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\n/**\n * Variable: pageScale\n *\n * Specifies the scale of the background page. Default is 1.5.\n * Not yet implemented.\n */\nmxGraph.prototype.pageScale = 1.5;\n\n/**\n * Variable: enabled\n * \n * Specifies the return value for <isEnabled>. Default is true.\n */\nmxGraph.prototype.enabled = true;\n\n/**\n * Variable: escapeEnabled\n * \n * Specifies if <mxKeyHandler> should invoke <escape> when the escape key\n * is pressed. Default is true.\n */\nmxGraph.prototype.escapeEnabled = true;\n\n/**\n * Variable: invokesStopCellEditing\n * \n * If true, when editing is to be stopped by way of selection changing,\n * data in diagram changing or other means stopCellEditing is invoked, and\n * changes are saved. This is implemented in a focus handler in\n * <mxCellEditor>. Default is true.\n */\nmxGraph.prototype.invokesStopCellEditing = true;\n\n/**\n * Variable: enterStopsCellEditing\n * \n * If true, pressing the enter key without pressing control or shift will stop\n * editing and accept the new value. This is used in <mxCellEditor> to stop\n * cell editing. Note: You can always use F2 and escape to stop editing.\n * Default is false.\n */\nmxGraph.prototype.enterStopsCellEditing = false;\n\n/**\n * Variable: useScrollbarsForPanning\n * \n * Specifies if scrollbars should be used for panning in <panGraph> if\n * any scrollbars are available. If scrollbars are enabled in CSS, but no\n * scrollbars appear because the graph is smaller than the container size,\n * then no panning occurs if this is true. Default is true.\n */\nmxGraph.prototype.useScrollbarsForPanning = true;\n\n/**\n * Variable: exportEnabled\n * \n * Specifies the return value for <canExportCell>. Default is true.\n */\nmxGraph.prototype.exportEnabled = true;\n\n/**\n * Variable: importEnabled\n * \n * Specifies the return value for <canImportCell>. Default is true.\n */\nmxGraph.prototype.importEnabled = true;\n\n/**\n * Variable: cellsLocked\n * \n * Specifies the return value for <isCellLocked>. Default is false.\n */\nmxGraph.prototype.cellsLocked = false;\n\n/**\n * Variable: cellsCloneable\n * \n * Specifies the return value for <isCellCloneable>. Default is true.\n */\nmxGraph.prototype.cellsCloneable = true;\n\n/**\n * Variable: foldingEnabled\n * \n * Specifies if folding (collapse and expand via an image icon in the graph\n * should be enabled). Default is true.\n */\nmxGraph.prototype.foldingEnabled = true;\n\n/**\n * Variable: cellsEditable\n * \n * Specifies the return value for <isCellEditable>. Default is true.\n */\nmxGraph.prototype.cellsEditable = true;\n\t\t\n/**\n * Variable: cellsDeletable\n * \n * Specifies the return value for <isCellDeletable>. Default is true.\n */\nmxGraph.prototype.cellsDeletable = true;\n\n/**\n * Variable: cellsMovable\n * \n * Specifies the return value for <isCellMovable>. Default is true.\n */\nmxGraph.prototype.cellsMovable = true;\n\t\n/**\n * Variable: edgeLabelsMovable\n * \n * Specifies the return value for edges in <isLabelMovable>. Default is true.\n */\nmxGraph.prototype.edgeLabelsMovable = true;\n\t\n/**\n * Variable: vertexLabelsMovable\n * \n * Specifies the return value for vertices in <isLabelMovable>. Default is false.\n */\nmxGraph.prototype.vertexLabelsMovable = false;\n\n/**\n * Variable: dropEnabled\n * \n * Specifies the return value for <isDropEnabled>. Default is false.\n */\nmxGraph.prototype.dropEnabled = false;\n\n/**\n * Variable: splitEnabled\n * \n * Specifies if dropping onto edges should be enabled. This is ignored if\n * <dropEnabled> is false. If enabled, it will call <splitEdge> to carry\n * out the drop operation. Default is true.\n */\nmxGraph.prototype.splitEnabled = true;\n\n/**\n * Variable: cellsResizable\n * \n * Specifies the return value for <isCellResizable>. Default is true.\n */\nmxGraph.prototype.cellsResizable = true;\n\n/**\n * Variable: cellsBendable\n * \n * Specifies the return value for <isCellsBendable>. Default is true.\n */\nmxGraph.prototype.cellsBendable = true;\n\n/**\n * Variable: cellsSelectable\n * \n * Specifies the return value for <isCellSelectable>. Default is true.\n */\nmxGraph.prototype.cellsSelectable = true;\n\n/**\n * Variable: cellsDisconnectable\n * \n * Specifies the return value for <isCellDisconntable>. Default is true.\n */\nmxGraph.prototype.cellsDisconnectable = true;\n\n/**\n * Variable: autoSizeCells\n * \n * Specifies if the graph should automatically update the cell size after an\n * edit. This is used in <isAutoSizeCell>. Default is false.\n */\nmxGraph.prototype.autoSizeCells = false;\n\n/**\n * Variable: autoSizeCellsOnAdd\n * \n * Specifies if autoSize style should be applied when cells are added. Default is false.\n */\nmxGraph.prototype.autoSizeCellsOnAdd = false;\n\n/**\n * Variable: autoScroll\n * \n * Specifies if the graph should automatically scroll if the mouse goes near\n * the container edge while dragging. This is only taken into account if the\n * container has scrollbars. Default is true.\n * \n * If you need this to work without scrollbars then set <ignoreScrollbars> to\n * true. Please consult the <ignoreScrollbars> for details. In general, with\n * no scrollbars, the use of <allowAutoPanning> is recommended.\n */\nmxGraph.prototype.autoScroll = true;\n\n/**\n * Variable: ignoreScrollbars\n * \n * Specifies if the graph should automatically scroll regardless of the\n * scrollbars. This will scroll the container using positive values for\n * scroll positions (ie usually only rightwards and downwards). To avoid\n * possible conflicts with panning, set <translateToScrollPosition> to true.\n */\nmxGraph.prototype.ignoreScrollbars = false;\n\n/**\n * Variable: translateToScrollPosition\n * \n * Specifies if the graph should automatically convert the current scroll\n * position to a translate in the graph view when a mouseUp event is received.\n * This can be used to avoid conflicts when using <autoScroll> and\n * <ignoreScrollbars> with no scrollbars in the container.\n */\nmxGraph.prototype.translateToScrollPosition = false;\n\n/**\n * Variable: timerAutoScroll\n * \n * Specifies if autoscrolling should be carried out via mxPanningManager even\n * if the container has scrollbars. This disables <scrollPointToVisible> and\n * uses <mxPanningManager> instead. If this is true then <autoExtend> is\n * disabled. It should only be used with a scroll buffer or when scollbars\n * are visible and scrollable in all directions. Default is false.\n */\nmxGraph.prototype.timerAutoScroll = false;\n\n/**\n * Variable: allowAutoPanning\n * \n * Specifies if panning via <panGraph> should be allowed to implement autoscroll\n * if no scrollbars are available in <scrollPointToVisible>. To enable panning\n * inside the container, near the edge, set <mxPanningManager.border> to a\n * positive value. Default is false.\n */\nmxGraph.prototype.allowAutoPanning = false;\n\n/**\n * Variable: autoExtend\n * \n * Specifies if the size of the graph should be automatically extended if the\n * mouse goes near the container edge while dragging. This is only taken into\n * account if the container has scrollbars. Default is true. See <autoScroll>.\n */\nmxGraph.prototype.autoExtend = true;\n\n/**\n * Variable: maximumGraphBounds\n * \n * <mxRectangle> that specifies the area in which all cells in the diagram\n * should be placed. Uses in <getMaximumGraphBounds>. Use a width or height of\n * 0 if you only want to give a upper, left corner.\n */\nmxGraph.prototype.maximumGraphBounds = null;\n\n/**\n * Variable: minimumGraphSize\n * \n * <mxRectangle> that specifies the minimum size of the graph. This is ignored\n * if the graph container has no scrollbars. Default is null.\n */\nmxGraph.prototype.minimumGraphSize = null;\n\n/**\n * Variable: minimumContainerSize\n * \n * <mxRectangle> that specifies the minimum size of the <container> if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.minimumContainerSize = null;\n\t\t\n/**\n * Variable: maximumContainerSize\n * \n * <mxRectangle> that specifies the maximum size of the container if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.maximumContainerSize = null;\n\n/**\n * Variable: resizeContainer\n * \n * Specifies if the container should be resized to the graph size when\n * the graph size has changed. Default is false.\n */\nmxGraph.prototype.resizeContainer = false;\n\n/**\n * Variable: border\n * \n * Border to be added to the bottom and right side when the container is\n * being resized after the graph has been changed. Default is 0.\n */\nmxGraph.prototype.border = 0;\n\t\t\n/**\n * Variable: keepEdgesInForeground\n * \n * Specifies if edges should appear in the foreground regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInForeground = false;\n\n/**\n * Variable: keepEdgesInBackground\n * \n * Specifies if edges should appear in the background regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInBackground = false;\n\n/**\n * Variable: allowNegativeCoordinates\n * \n * Specifies if negative coordinates for vertices are allowed. Default is true.\n */\nmxGraph.prototype.allowNegativeCoordinates = true;\n\n/**\n * Variable: constrainChildren\n * \n * Specifies if a child should be constrained inside the parent bounds after a\n * move or resize of the child. Default is true.\n */\nmxGraph.prototype.constrainChildren = true;\n\n/**\n * Variable: constrainRelativeChildren\n * \n * Specifies if child cells with relative geometries should be constrained\n * inside the parent bounds, if <constrainChildren> is true, and/or the\n * <maximumGraphBounds>. Default is false.\n */\nmxGraph.prototype.constrainRelativeChildren = false;\n\n/**\n * Variable: extendParents\n * \n * Specifies if a parent should contain the child bounds after a resize of\n * the child. Default is true. This has precedence over <constrainChildren>.\n */\nmxGraph.prototype.extendParents = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is true.\n */\nmxGraph.prototype.extendParentsOnAdd = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is false for backwards compatiblity.\n */\nmxGraph.prototype.extendParentsOnMove = false;\n\n/**\n * Variable: recursiveResize\n * \n * Specifies the return value for <isRecursiveResize>. Default is\n * false for backwards compatiblity.\n */\nmxGraph.prototype.recursiveResize = false;\n\n/**\n * Variable: collapseToPreferredSize\n * \n * Specifies if the cell size should be changed to the preferred size when\n * a cell is first collapsed. Default is true.\n */\nmxGraph.prototype.collapseToPreferredSize = true;\n\n/**\n * Variable: zoomFactor\n * \n * Specifies the factor used for <zoomIn> and <zoomOut>. Default is 1.2\n * (120%).\n */\nmxGraph.prototype.zoomFactor = 1.2;\n\n/**\n * Variable: keepSelectionVisibleOnZoom\n * \n * Specifies if the viewport should automatically contain the selection cells\n * after a zoom operation. Default is false.\n */\nmxGraph.prototype.keepSelectionVisibleOnZoom = false;\n\n/**\n * Variable: centerZoom\n * \n * Specifies if the zoom operations should go into the center of the actual\n * diagram rather than going from top, left. Default is true.\n */\nmxGraph.prototype.centerZoom = true;\n\n/**\n * Variable: resetViewOnRootChange\n * \n * Specifies if the scale and translate should be reset if the root changes in\n * the model. Default is true.\n */\nmxGraph.prototype.resetViewOnRootChange = true;\n\n/**\n * Variable: resetEdgesOnResize\n * \n * Specifies if edge control points should be reset after the resize of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnResize = false;\n\n/**\n * Variable: resetEdgesOnMove\n * \n * Specifies if edge control points should be reset after the move of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnMove = false;\n\n/**\n * Variable: resetEdgesOnConnect\n * \n * Specifies if edge control points should be reset after the the edge has been\n * reconnected. Default is true.\n */\nmxGraph.prototype.resetEdgesOnConnect = true;\n\n/**\n * Variable: allowLoops\n * \n * Specifies if loops (aka self-references) are allowed. Default is false.\n */\nmxGraph.prototype.allowLoops = false;\n\t\n/**\n * Variable: defaultLoopStyle\n * \n * <mxEdgeStyle> to be used for loops. This is a fallback for loops if the\n * <mxConstants.STYLE_LOOP> is undefined. Default is <mxEdgeStyle.Loop>.\n */\nmxGraph.prototype.defaultLoopStyle = mxEdgeStyle.Loop;\n\n/**\n * Variable: multigraph\n * \n * Specifies if multiple edges in the same direction between the same pair of\n * vertices are allowed. Default is true.\n */\nmxGraph.prototype.multigraph = true;\n\n/**\n * Variable: connectableEdges\n * \n * Specifies if edges are connectable. Default is false. This overrides the\n * connectable field in edges.\n */\nmxGraph.prototype.connectableEdges = false;\n\n/**\n * Variable: allowDanglingEdges\n * \n * Specifies if edges with disconnected terminals are allowed in the graph.\n * Default is true.\n */\nmxGraph.prototype.allowDanglingEdges = true;\n\n/**\n * Variable: cloneInvalidEdges\n * \n * Specifies if edges that are cloned should be validated and only inserted\n * if they are valid. Default is true.\n */\nmxGraph.prototype.cloneInvalidEdges = false;\n\n/**\n * Variable: disconnectOnMove\n * \n * Specifies if edges should be disconnected from their terminals when they\n * are moved. Default is true.\n */\nmxGraph.prototype.disconnectOnMove = true;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible. This is used in <getLabel>. Default\n * is true.\n */\nmxGraph.prototype.labelsVisible = true;\n\t\n/**\n * Variable: htmlLabels\n * \n * Specifies the return value for <isHtmlLabel>. Default is false.\n */\nmxGraph.prototype.htmlLabels = false;\n\n/**\n * Variable: swimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selectable via the content if the\n * mouse is released. Default is true.\n */\nmxGraph.prototype.swimlaneSelectionEnabled = true;\n\n/**\n * Variable: swimlaneNesting\n * \n * Specifies if nesting of swimlanes is allowed. Default is true.\n */\nmxGraph.prototype.swimlaneNesting = true;\n\t\n/**\n * Variable: swimlaneIndicatorColorAttribute\n * \n * The attribute used to find the color for the indicator if the indicator\n * color is set to 'swimlane'. Default is <mxConstants.STYLE_FILLCOLOR>.\n */\nmxGraph.prototype.swimlaneIndicatorColorAttribute = mxConstants.STYLE_FILLCOLOR;\n\n/**\n * Variable: imageBundles\n * \n * Holds the list of image bundles.\n */\nmxGraph.prototype.imageBundles = null;\n\n/**\n * Variable: minFitScale\n * \n * Specifies the minimum scale to be applied in <fit>. Default is 0.1. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.minFitScale = 0.1;\n\n/**\n * Variable: maxFitScale\n * \n * Specifies the maximum scale to be applied in <fit>. Default is 8. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.maxFitScale = 8;\n\n/**\n * Variable: panDx\n * \n * Current horizontal panning value. Default is 0.\n */\nmxGraph.prototype.panDx = 0;\n\n/**\n * Variable: panDy\n * \n * Current vertical panning value. Default is 0.\n */\nmxGraph.prototype.panDy = 0;\n\n/**\n * Variable: collapsedImage\n * \n * Specifies the <mxImage> to indicate a collapsed state.\n * Default value is mxClient.imageBasePath + '/collapsed.gif'\n */\nmxGraph.prototype.collapsedImage = new mxImage(mxClient.imageBasePath + '/collapsed.gif', 9, 9);\n\n/**\n * Variable: expandedImage\n * \n * Specifies the <mxImage> to indicate a expanded state.\n * Default value is mxClient.imageBasePath + '/expanded.gif'\n */\nmxGraph.prototype.expandedImage = new mxImage(mxClient.imageBasePath + '/expanded.gif', 9, 9);\n\n/**\n * Variable: warningImage\n * \n * Specifies the <mxImage> for the image to be used to display a warning\n * overlay. See <setCellWarning>. Default value is mxClient.imageBasePath +\n * '/warning'.  The extension for the image depends on the platform. It is\n * '.png' on the Mac and '.gif' on all other platforms.\n */\nmxGraph.prototype.warningImage = new mxImage(mxClient.imageBasePath + '/warning'+\n\t((mxClient.IS_MAC) ? '.png' : '.gif'), 16, 16);\n\n/**\n * Variable: alreadyConnectedResource\n * \n * Specifies the resource key for the error message to be displayed in\n * non-multigraphs when two vertices are already connected. If the resource\n * for this key does not exist then the value is used as the error message.\n * Default is 'alreadyConnected'.\n */\nmxGraph.prototype.alreadyConnectedResource = (mxClient.language != 'none') ? 'alreadyConnected' : '';\n\n/**\n * Variable: containsValidationErrorsResource\n * \n * Specifies the resource key for the warning message to be displayed when\n * a collapsed cell contains validation errors. If the resource for this\n * key does not exist then the value is used as the warning message.\n * Default is 'containsValidationErrors'.\n */\nmxGraph.prototype.containsValidationErrorsResource = (mxClient.language != 'none') ? 'containsValidationErrors' : '';\n\n/**\n * Variable: collapseExpandResource\n * \n * Specifies the resource key for the tooltip on the collapse/expand icon.\n * If the resource for this key does not exist then the value is used as\n * the tooltip. Default is 'collapse-expand'.\n */\nmxGraph.prototype.collapseExpandResource = (mxClient.language != 'none') ? 'collapse-expand' : '';\n\n/**\n * Function: init\n * \n * Initializes the <container> and creates the respective datastructures.\n * \n * Parameters:\n * \n * container - DOM node that will contain the graph display.\n */\nmxGraph.prototype.init = function(container)\n{\n\tthis.container = container;\n\t\n\t// Initializes the in-place editor\n\tthis.cellEditor = this.createCellEditor();\t\n\n\t// Initializes the container using the view\n\tthis.view.init();\n\t\n\t// Updates the size of the container for the current graph\n\tthis.sizeDidChange();\n\t\n\t// Hides tooltips and resets tooltip timer if mouse leaves container\n\tmxEvent.addListener(container, 'mouseleave', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.tooltipHandler != null && this.tooltipHandler.div != null &&\n\t\t\tthis.tooltipHandler.div != evt.relatedTarget)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t}));\n\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t\t\n\t\t// Disable shift-click for text\n\t\tmxEvent.addListener(container, 'selectstart',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\treturn this.isEditing() || (!this.isMouseDown && !mxEvent.isShiftDown(evt));\n\t\t\t})\n\t\t);\n\t}\n\t\n\t// Workaround for missing last shape and connect preview in IE8 standards\n\t// mode if no initial graph displayed or no label for shape defined\n\tif (document.documentMode == 8)\n\t{\n\t\tcontainer.insertAdjacentHTML('beforeend', '<' + mxClient.VML_PREFIX + ':group' +\n\t\t\t' style=\"DISPLAY: none;\"></' + mxClient.VML_PREFIX + ':group>');\n\t}\n};\n\n/**\n * Function: createHandlers\n * \n * Creates the tooltip-, panning-, connection- and graph-handler (in this\n * order). This is called in the constructor before <init> is called.\n */\nmxGraph.prototype.createHandlers = function()\n{\n\tthis.tooltipHandler = this.createTooltipHandler();\n\tthis.tooltipHandler.setEnabled(false);\n\tthis.selectionCellsHandler = this.createSelectionCellsHandler();\n\tthis.connectionHandler = this.createConnectionHandler();\n\tthis.connectionHandler.setEnabled(false);\n\tthis.graphHandler = this.createGraphHandler();\n\tthis.panningHandler = this.createPanningHandler();\n\tthis.panningHandler.panningEnabled = false;\n\tthis.popupMenuHandler = this.createPopupMenuHandler();\n};\n\n/**\n * Function: createTooltipHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createTooltipHandler = function()\n{\n\treturn new mxTooltipHandler(this);\n};\n\n/**\n * Function: createSelectionCellsHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createSelectionCellsHandler = function()\n{\n\treturn new mxSelectionCellsHandler(this);\n};\n\n/**\n * Function: createConnectionHandler\n * \n * Creates and returns a new <mxConnectionHandler> to be used in this graph.\n */\nmxGraph.prototype.createConnectionHandler = function()\n{\n\treturn new mxConnectionHandler(this);\n};\n\n/**\n * Function: createGraphHandler\n * \n * Creates and returns a new <mxGraphHandler> to be used in this graph.\n */\nmxGraph.prototype.createGraphHandler = function()\n{\n\treturn new mxGraphHandler(this);\n};\n\n/**\n * Function: createPanningHandler\n * \n * Creates and returns a new <mxPanningHandler> to be used in this graph.\n */\nmxGraph.prototype.createPanningHandler = function()\n{\n\treturn new mxPanningHandler(this);\n};\n\n/**\n * Function: createPopupMenuHandler\n * \n * Creates and returns a new <mxPopupMenuHandler> to be used in this graph.\n */\nmxGraph.prototype.createPopupMenuHandler = function()\n{\n\treturn new mxPopupMenuHandler(this);\n};\n\n/**\n * Function: createSelectionModel\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createSelectionModel = function()\n{\n\treturn new mxGraphSelectionModel(this);\n};\n\n/**\n * Function: createStylesheet\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createStylesheet = function()\n{\n\treturn new mxStylesheet();\n};\n\n/**\n * Function: createGraphView\n * \n * Creates a new <mxGraphView> to be used in this graph.\n */\nmxGraph.prototype.createGraphView = function()\n{\n\treturn new mxGraphView(this);\n};\n \n/**\n * Function: createCellRenderer\n * \n * Creates a new <mxCellRenderer> to be used in this graph.\n */\nmxGraph.prototype.createCellRenderer = function()\n{\n\treturn new mxCellRenderer();\n};\n\n/**\n * Function: createCellEditor\n * \n * Creates a new <mxCellEditor> to be used in this graph.\n */\nmxGraph.prototype.createCellEditor = function()\n{\n\treturn new mxCellEditor(this);\n};\n\n/**\n * Function: getModel\n * \n * Returns the <mxGraphModel> that contains the cells.\n */\nmxGraph.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: getView\n * \n * Returns the <mxGraphView> that contains the <mxCellStates>.\n */\nmxGraph.prototype.getView = function()\n{\n\treturn this.view;\n};\n\n/**\n * Function: getStylesheet\n * \n * Returns the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.getStylesheet = function()\n{\n\treturn this.stylesheet;\n};\n\n/**\n * Function: setStylesheet\n * \n * Sets the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.setStylesheet = function(stylesheet)\n{\n\tthis.stylesheet = stylesheet;\n};\n\n/**\n * Function: getSelectionModel\n * \n * Returns the <mxGraphSelectionModel> that contains the selection.\n */\nmxGraph.prototype.getSelectionModel = function()\n{\n\treturn this.selectionModel;\n};\n\n/**\n * Function: setSelectionModel\n * \n * Sets the <mxSelectionModel> that contains the selection.\n */\nmxGraph.prototype.setSelectionModel = function(selectionModel)\n{\n\tthis.selectionModel = selectionModel;\n};\n\n/**\n * Function: getSelectionCellsForChanges\n * \n * Returns the cells to be selected for the given array of changes.\n * \n * Parameters:\n * \n * ignoreFn - Optional function that takes a change and returns true if the\n * change should be ignored.\n * \n */\nmxGraph.prototype.getSelectionCellsForChanges = function(changes, ignoreFn)\n{\n\tvar dict = new mxDictionary();\n\tvar cells = [];\n\t\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!dict.get(cell) && this.model.contains(cell))\n\t\t{\n\t\t\tif (this.model.isEdge(cell) || this.model.isVertex(cell))\n\t\t\t{\n\t\t\t\tdict.put(cell, true);\n\t\t\t\tcells.push(cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\taddCell(this.model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change.constructor != mxRootChange &&\n\t\t\t(ignoreFn == null || !ignoreFn(change)))\n\t\t{\n\t\t\tvar cell = null;\n\n\t\t\tif (change instanceof mxChildChange)\n\t\t\t{\n\t\t\t\tcell = change.child;\n\t\t\t}\n\t\t\telse if (change.cell != null &&\n\t\t\t\tchange.cell instanceof mxCell)\n\t\t\t{\n\t\t\t\tcell = change.cell;\n\t\t\t}\n\t\t\t\n\t\t\tif (cell != null)\n\t\t\t{\n\t\t\t\taddCell(cell);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: graphModelChanged\n * \n * Called when the graph model changes. Invokes <processChange> on each\n * item of the given array to update the view accordingly.\n * \n * Parameters:\n * \n * changes - Array that contains the individual changes.\n */\nmxGraph.prototype.graphModelChanged = function(changes)\n{\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tthis.processChange(changes[i]);\n\t}\n\n\tthis.updateSelection();\n\tthis.view.validate();\n\tthis.sizeDidChange();\n};\n\n/**\n * Function: updateSelection\n * \n * Removes selection cells that are not in the model from the selection.\n */\nmxGraph.prototype.updateSelection = function()\n{\n\tvar cells = this.getSelectionCells();\n\tvar removed = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.model.contains(cells[i]) || !this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tremoved.push(cells[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar par = this.model.getParent(cells[i]);\n\t\t\t\n\t\t\twhile (par != null && par != this.view.currentRoot)\n\t\t\t{\n\t\t\t\tif (this.isCellCollapsed(par) || !this.isCellVisible(par))\n\t\t\t\t{\n\t\t\t\t\tremoved.push(cells[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpar = this.model.getParent(par);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.removeSelectionCells(removed);\n};\n\n/**\n * Function: processChange\n * \n * Processes the given change and invalidates the respective cached data\n * in <view>. This fires a <root> event if the root has changed in the\n * model.\n * \n * Parameters:\n * \n * change - Object that represents the change on the model.\n */\nmxGraph.prototype.processChange = function(change)\n{\n\t// Resets the view settings, removes all cells and clears\n\t// the selection if the root changes.\n\tif (change instanceof mxRootChange)\n\t{\n\t\tthis.clearSelection();\n\t\tthis.setDefaultParent(null);\n\t\tthis.removeStateForCell(change.previous);\n\t\t\n\t\tif (this.resetViewOnRootChange)\n\t\t{\n\t\t\tthis.view.scale = 1;\n\t\t\tthis.view.translate.x = 0;\n\t\t\tthis.view.translate.y = 0;\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t}\n\t\n\t// Adds or removes a child to the view by online invaliding\n\t// the minimal required portions of the cache, namely, the\n\t// old and new parent and the child.\n\telse if (change instanceof mxChildChange)\n\t{\n\t\tvar newParent = this.model.getParent(change.child);\n\t\tthis.view.invalidate(change.child, true, true);\n\t\t\n\t\tif (!this.model.contains(newParent) || this.isCellCollapsed(newParent))\n\t\t{\n\t\t\tthis.view.invalidate(change.child, true, true);\n\t\t\tthis.removeStateForCell(change.child);\n\t\t\t\n\t\t\t// Handles special case of current root of view being removed\n\t\t\tif (this.view.currentRoot == change.child)\n\t\t\t{\n\t\t\t\tthis.home();\n\t\t\t}\n\t\t}\n \n\t\tif (newParent != change.previous)\n\t\t{\n\t\t\t// Refreshes the collapse/expand icons on the parents\n\t\t\tif (newParent != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(newParent, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (change.previous != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(change.previous, false, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handles two special cases where the shape does not need to be\n\t// recreated from scratch, it only needs to be invalidated.\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\t// Checks if the geometry has changed to avoid unnessecary revalidation\n\t\tif (change instanceof mxTerminalChange || ((change.previous == null && change.geometry != null) ||\n\t\t\t(change.previous != null && !change.previous.equals(change.geometry))))\n\t\t{\n\t\t\tthis.view.invalidate(change.cell);\n\t\t}\n\t}\n\n\t// Handles two special cases where only the shape, but no\n\t// descendants need to be recreated\n\telse if (change instanceof mxValueChange)\n\t{\n\t\tthis.view.invalidate(change.cell, false, false);\n\t}\n\t\n\t// Requires a new mxShape in JavaScript\n\telse if (change instanceof mxStyleChange)\n\t{\n\t\tthis.view.invalidate(change.cell, true, true);\n\t\tvar state = this.view.getState(change.cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tstate.invalidStyle = true;\n\t\t}\n\t}\n\t\n\t// Removes the state from the cache by default\n\telse if (change.cell != null && change.cell instanceof mxCell)\n\t{\n\t\tthis.removeStateForCell(change.cell);\n\t}\n};\n\n/**\n * Function: removeStateForCell\n * \n * Removes all cached information for the given cell and its descendants.\n * This is called when a cell was removed from the model.\n * \n * Paramters:\n * \n * cell - <mxCell> that was removed from the model.\n */\nmxGraph.prototype.removeStateForCell = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.removeStateForCell(this.model.getChildAt(cell, i));\n\t}\n\n\tthis.view.invalidate(cell, false, true);\n\tthis.view.removeState(cell);\n};\n\n/**\n * Group: Overlays\n */\n\n/**\n * Function: addCellOverlay\n * \n * Adds an <mxCellOverlay> for the specified cell. This method fires an\n * <addoverlay> event and returns the new <mxCellOverlay>.\n * \n * Parameters:\n * \n * cell - <mxCell> to add the overlay for.\n * overlay - <mxCellOverlay> to be added for the cell.\n */\nmxGraph.prototype.addCellOverlay = function(cell, overlay)\n{\n\tif (cell.overlays == null)\n\t{\n\t\tcell.overlays = [];\n\t}\n\t\n\tcell.overlays.push(overlay);\n\n\tvar state = this.view.getState(cell);\n\n\t// Immediately updates the cell display if the state exists\n\tif (state != null)\n\t{\n\t\tthis.cellRenderer.redraw(state);\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD_OVERLAY,\n\t\t\t'cell', cell, 'overlay', overlay));\n\t\n\treturn overlay;\n};\n\n/**\n * Function: getCellOverlays\n * \n * Returns the array of <mxCellOverlays> for the given cell or null, if\n * no overlays are defined.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be returned.\n */\nmxGraph.prototype.getCellOverlays = function(cell)\n{\n\treturn cell.overlays;\n};\n\n/**\n * Function: removeCellOverlay\n * \n * Removes and returns the given <mxCellOverlay> from the given cell. This\n * method fires a <removeoverlay> event. If no overlay is given, then all\n * overlays are removed using <removeOverlays>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlay should be removed.\n * overlay - Optional <mxCellOverlay> to be removed.\n */\nmxGraph.prototype.removeCellOverlay = function(cell, overlay)\n{\n\tif (overlay == null)\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\telse\n\t{\n\t\tvar index = mxUtils.indexOf(cell.overlays, overlay);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tcell.overlays.splice(index, 1);\n\t\t\t\n\t\t\tif (cell.overlays.length == 0)\n\t\t\t{\n\t\t\t\tcell.overlays = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Immediately updates the cell display if the state exists\n\t\t\tvar state = this.view.getState(cell);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tthis.cellRenderer.redraw(state);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlay));\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\toverlay = null;\n\t\t}\n\t}\n\t\n\treturn overlay;\n};\n\n/**\n * Function: removeCellOverlays\n * \n * Removes all <mxCellOverlays> from the given cell. This method\n * fires a <removeoverlay> event for each <mxCellOverlay> and returns\n * the array of <mxCellOverlays> that was removed from the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be removed\n */\nmxGraph.prototype.removeCellOverlays = function(cell)\n{\n\tvar overlays = cell.overlays;\n\t\n\tif (overlays != null)\n\t{\n\t\tcell.overlays = null;\n\t\t\n\t\t// Immediately updates the cell display if the state exists\n\t\tvar state = this.view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.cellRenderer.redraw(state);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlays[i]));\n\t\t}\n\t}\n\t\n\treturn overlays;\n};\n\n/**\n * Function: clearCellOverlays\n * \n * Removes all <mxCellOverlays> in the graph for the given cell and all its\n * descendants. If no cell is specified then all overlays are removed from\n * the graph. This implementation uses <removeCellOverlays> to remove the\n * overlays from the individual cells.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> that represents the root of the subtree to\n * remove the overlays from. Default is the root in the model.\n */\nmxGraph.prototype.clearCellOverlays = function(cell)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tthis.removeCellOverlays(cell);\n\t\n\t// Recursively removes all overlays from the children\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\t\tthis.clearCellOverlays(child); // recurse\n\t}\n};\n\n/**\n * Function: setCellWarning\n * \n * Creates an overlay for the given cell using the warning and image or\n * <warningImage> and returns the new <mxCellOverlay>. The warning is\n * displayed as a tooltip in a red font and may contain HTML markup. If\n * the warning is null or a zero length string, then all overlays are\n * removed from the cell.\n * \n * Example:\n * \n * (code)\n * graph.setCellWarning(cell, '<b>Warning:</b>: Hello, World!');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose warning should be set.\n * warning - String that represents the warning to be displayed.\n * img - Optional <mxImage> to be used for the overlay. Default is\n * <warningImage>.\n * isSelect - Optional boolean indicating if a click on the overlay\n * should select the corresponding cell. Default is false.\n */\nmxGraph.prototype.setCellWarning = function(cell, warning, img, isSelect)\n{\n\tif (warning != null && warning.length > 0)\n\t{\n\t\timg = (img != null) ? img : this.warningImage;\n\t\t\n\t\t// Creates the overlay with the image and warning\n\t\tvar overlay = new mxCellOverlay(img,\n\t\t\t'<font color=red>'+warning+'</font>');\n\t\t\n\t\t// Adds a handler for single mouseclicks to select the cell\n\t\tif (isSelect)\n\t\t{\n\t\t\toverlay.addListener(mxEvent.CLICK,\n\t\t\t\tmxUtils.bind(this, function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isEnabled())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setSelectionCell(cell);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\t\n\t\t// Sets and returns the overlay in the graph\n\t\treturn this.addCellOverlay(cell, overlay);\n\t}\n\telse\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: In-place editing\n */\n\n/**\n * Function: startEditing\n * \n * Calls <startEditingAtCell> using the given cell or the first selection\n * cell.\n * \n * Parameters:\n * \n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditing = function(evt)\n{\n\tthis.startEditingAtCell(null, evt);\n};\n\n/**\n * Function: startEditingAtCell\n * \n * Fires a <startEditing> event and invokes <mxCellEditor.startEditing>\n * on <editor>. After editing was started, a <editingStarted> event is\n * fired.\n * \n * Parameters:\n * \n * cell - <mxCell> to start the in-place editor for.\n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditingAtCell = function(cell, evt)\n{\n\tif (evt == null || !mxEvent.isMultiTouchEvent(evt))\n\t{\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.getSelectionCell();\n\t\t\t\n\t\t\tif (cell != null && !this.isCellEditable(cell))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDITING,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t\tthis.cellEditor.startEditing(cell, evt);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STARTED,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t}\n\t}\n};\n\n/**\n * Function: getEditingValue\n * \n * Returns the initial value for in-place editing. This implementation\n * returns <convertValueToString> for the given cell. If this function is\n * overridden, then <mxGraphModel.valueForCellChanged> should take care\n * of correctly storing the actual new value inside the user object.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the initial editing value should be returned.\n * evt - Optional mouse event that triggered the editor.\n */\nmxGraph.prototype.getEditingValue = function(cell, evt)\n{\n\treturn this.convertValueToString(cell);\n};\n\n/**\n * Function: stopEditing\n * \n * Stops the current editing  and fires a <editingStopped> event.\n * \n * Parameters:\n * \n * cancel - Boolean that specifies if the current editing value\n * should be stored.\n */\nmxGraph.prototype.stopEditing = function(cancel)\n{\n\tthis.cellEditor.stopEditing(cancel);\n\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STOPPED, 'cancel', cancel));\n};\n\n/**\n * Function: labelChanged\n * \n * Sets the label of the specified cell to the given value using\n * <cellLabelChanged> and fires <mxEvent.LABEL_CHANGED> while the\n * transaction is in progress. Returns the cell whose label was changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * evt - Optional event that triggered the change.\n */\nmxGraph.prototype.labelChanged = function(cell, value, evt)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar old = cell.value;\n\t\tthis.cellLabelChanged(cell, value, this.isAutoSizeCell(cell));\n\t\tthis.fireEvent(new mxEventObject(mxEvent.LABEL_CHANGED,\n\t\t\t'cell', cell, 'value', value, 'old', old, 'event', evt));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellLabelChanged\n * \n * Sets the new label for a cell. If autoSize is true then\n * <cellSizeUpdated> will be called.\n * \n * In the following example, the function is extended to map changes to\n * attributes in an XML node, as shown in <convertValueToString>.\n * Alternatively, the handling of this can be implemented as shown in\n * <mxGraphModel.valueForCellChanged> without the need to clone the\n * user object.\n * \n * (code)\n * var graphCellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n * \t// Cloned for correct undo/redo\n * \tvar elt = cell.value.cloneNode(true);\n *  elt.setAttribute('label', newValue);\n *  \n *  newValue = elt;\n *  graphCellLabelChanged.apply(this, arguments);\n * };\n * (end) \n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * autoSize - Boolean that specifies if <cellSizeUpdated> should be called.\n */\nmxGraph.prototype.cellLabelChanged = function(cell, value, autoSize)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.model.setValue(cell, value);\n\t\t\n\t\tif (autoSize)\n\t\t{\n\t\t\tthis.cellSizeUpdated(cell, false);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n};\n\n/**\n * Group: Event processing\n */\n\n/**\n * Function: escape\n * \n * Processes an escape keystroke.\n * \n * Parameters:\n * \n * evt - Mouseevent that represents the keystroke.\n */\nmxGraph.prototype.escape = function(evt)\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n};\n\n/**\n * Function: click\n * \n * Processes a singleclick on an optional cell and fires a <click> event.\n * The click event is fired initially. If the graph is enabled and the\n * event has not been consumed, then the cell is selected using\n * <selectCellForEvent> or the selection is cleared using\n * <clearSelection>. The events consumed state is set to true if the\n * corresponding <mxMouseEvent> has been consumed.\n *\n * To handle a click event, use the following code.\n * \n * (code)\n * graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event'); // mouse event\n *   var cell = evt.getProperty('cell'); // cell may be null\n *   \n *   if (cell != null)\n *   {\n *     // Do something useful with cell and consume the event\n *     evt.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the single click.\n */\nmxGraph.prototype.click = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar cell = me.getCell();\n\tvar mxe = new mxEventObject(mxEvent.CLICK, 'event', evt, 'cell', cell);\n\t\n\tif (me.isConsumed())\n\t{\n\t\tmxe.consume();\n\t}\n\t\n\tthis.fireEvent(mxe);\n\t\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n\t{\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isTransparentClickEvent(evt))\n\t\t\t{\n\t\t\t\tvar active = false;\n\t\t\t\t\n\t\t\t\tvar tmp = this.getCellAt(me.graphX, me.graphY, null, null, null,\n\t\t\t\t\tmxUtils.bind(this, function(state)\n\t\t\t\t{\n\t\t\t\t\tvar selected = this.isCellSelected(state.cell);\n\t\t\t\t\tactive = active || selected;\n\t\t\t\t\t\n\t\t\t\t\treturn !active || selected || (state.cell != cell &&\n\t\t\t\t\t\tthis.model.isAncestor(state.cell, cell));\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tcell = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSwimlaneSelectionEnabled())\n\t\t{\n\t\t\tcell = this.getSwimlaneAt(me.getGraphX(), me.getGraphY());\n\t\t\t\t\n\t\t\tif (cell != null && (!this.isToggleEvent(evt) ||\n\t\t\t\t!mxEvent.isAltDown(evt)))\n\t\t\t{\n\t\t\t\tvar temp = cell;\n\t\t\t\tvar swimlanes = [];\n\t\t\t\t\n\t\t\t\twhile (temp != null)\n\t\t\t\t{\n\t\t\t\t\ttemp = this.model.getParent(temp);\n\t\t\t\t\tvar state = this.view.getState(temp);\n\t\t\t\t\t\n\t\t\t\t\tif (this.isSwimlane(temp) && state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tswimlanes.push(temp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Selects ancestors for selected swimlanes\n\t\t\t\tif (swimlanes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tswimlanes = swimlanes.reverse();\n\t\t\t\t\tswimlanes.splice(0, 0, cell);\n\t\t\t\t\tswimlanes.push(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < swimlanes.length - 1; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellSelected(swimlanes[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcell = swimlanes[(this.isToggleEvent(evt)) ?\n\t\t\t\t\t\t\t\ti : i + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.selectCellForEvent(cell, evt);\n\t\t}\n\t\telse if (!this.isToggleEvent(evt))\n\t\t{\n\t\t\tthis.clearSelection();\n\t\t}\n\t}\n};\n\n/**\n * Function: isSiblingSelected\n * \n * Returns true if any sibling of the given cell is selected.\n */\nmxGraph.prototype.isSiblingSelected = function(cell)\n{\n\tvar model = this.model;\n\tvar parent = model.getParent(cell);\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (cell != child && this.isCellSelected(child))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n\n/**\n * Function: dblClick\n * \n * Processes a doubleclick on an optional cell and fires a <dblclick>\n * event. The event is fired initially. If the graph is enabled and the\n * event has not been consumed, then <edit> is called with the given\n * cell. The event is ignored if no cell was specified.\n *\n * Example for overriding this method.\n *\n * (code)\n * graph.dblClick = function(evt, cell)\n * {\n *   var mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n *   this.fireEvent(mxe);\n *   \n *   if (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n *   {\n * \t   mxUtils.alert('Hello, World!');\n *     mxe.consume();\n *   }\n * }\n * (end)\n * \n * Example listener for this event.\n * \n * (code)\n * graph.addListener(mxEvent.DOUBLE_CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   // do something with the cell and consume the\n *   // event to prevent in-place editing from start\n * });\n * (end) \n * \n * Parameters:\n * \n * evt - Mouseevent that represents the doubleclick.\n * cell - Optional <mxCell> under the mousepointer.\n */\nmxGraph.prototype.dblClick = function(evt, cell)\n{\n\tvar mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() &&\n\t\tcell != null && this.isCellEditable(cell) && !this.isEditing(cell))\n\t{\n\t\tthis.startEditingAtCell(cell, evt);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: tapAndHold\n * \n * Handles the <mxMouseEvent> by highlighting the <mxCellState>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the touch event.\n * state - Optional <mxCellState> that is associated with the event.\n */\nmxGraph.prototype.tapAndHold = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar mxe = new mxEventObject(mxEvent.TAP_AND_HOLD, 'event', evt, 'cell', me.getCell());\n\n\t// LATER: Check if event should be consumed if me is consumed\n\tthis.fireEvent(mxe);\n\n\tif (mxe.isConsumed())\n\t{\n\t\t// Resets the state of the panning handler\n\t\tthis.panningHandler.panningTrigger = false;\n\t}\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() && this.connectionHandler.isEnabled())\n\t{\n\t\tvar state = this.view.getState(this.connectionHandler.marker.getCell(me));\n\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.connectionHandler.marker.currentColor = this.connectionHandler.marker.validColor;\n\t\t\tthis.connectionHandler.marker.markedState = state;\n\t\t\tthis.connectionHandler.marker.mark();\n\t\t\t\n\t\t\tthis.connectionHandler.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\tthis.connectionHandler.edgeState = this.connectionHandler.createEdgeState(me);\n\t\t\tthis.connectionHandler.previous = state;\n\t\t\tthis.connectionHandler.fireEvent(new mxEventObject(mxEvent.START, 'state', this.connectionHandler.previous));\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollPointToVisible\n * \n * Scrolls the graph to the given point, extending the graph container if\n * specified.\n */\nmxGraph.prototype.scrollPointToVisible = function(x, y, extend, border)\n{\n\tif (!this.timerAutoScroll && (this.ignoreScrollbars || mxUtils.hasScrollbars(this.container)))\n\t{\n\t\tvar c = this.container;\n\t\tborder = (border != null) ? border : 20;\n\t\t\n\t\tif (x >= c.scrollLeft && y >= c.scrollTop && x <= c.scrollLeft + c.clientWidth &&\n\t\t\ty <= c.scrollTop + c.clientHeight)\n\t\t{\n\t\t\tvar dx = c.scrollLeft + c.clientWidth - x;\n\t\t\t\n\t\t\tif (dx < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollLeft;\n\t\t\t\tc.scrollLeft += border - dx;\n\n\t\t\t\t// Automatically extends the canvas size to the bottom, right\n\t\t\t\t// if the event is outside of the canvas and the edge of the\n\t\t\t\t// canvas has been reached. Notes: Needs fix for IE.\n\t\t\t\tif (extend && old == c.scrollLeft)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar width = this.container.scrollWidth + border - dx;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar width = Math.max(c.clientWidth, c.scrollWidth) + border - dx;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollLeft += border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = x - c.scrollLeft;\n\t\t\t\t\n\t\t\t\tif (dx < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft -= border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar dy = c.scrollTop + c.clientHeight - y;\n\t\t\t\n\t\t\tif (dy < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollTop;\n\t\t\t\tc.scrollTop += border - dy;\n\n\t\t\t\tif (old == c.scrollTop && extend)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar height = this.container.scrollHeight + border - dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar height = Math.max(c.clientHeight, c.scrollHeight) + border - dy;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollTop += border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = y - c.scrollTop;\n\t\t\t\t\n\t\t\t\tif (dy < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop -= border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.allowAutoPanning && !this.panningHandler.isActive())\n\t{\n\t\tif (this.panningManager == null)\n\t\t{\n\t\t\tthis.panningManager = this.createPanningManager();\n\t\t}\n\n\t\tthis.panningManager.panTo(x + this.panDx, y + this.panDy);\n\t}\n};\n\n\n/**\n * Function: createPanningManager\n * \n * Creates and returns an <mxPanningManager>.\n */\nmxGraph.prototype.createPanningManager = function()\n{\n\treturn new mxPanningManager(this);\n};\n\n/**\n * Function: getBorderSizes\n * \n * Returns the size of the border and padding on all four sides of the\n * container. The left, top, right and bottom borders are stored in the x, y,\n * width and height of the returned <mxRectangle>, respectively.\n */\nmxGraph.prototype.getBorderSizes = function()\n{\n\tvar css = mxUtils.getCurrentStyle(this.container);\n\t\n\treturn new mxRectangle(mxUtils.parseCssNumber(css.paddingLeft) +\n\t\t\t((css.borderLeftStyle != 'none') ? mxUtils.parseCssNumber(css.borderLeftWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingTop) +\n\t\t\t((css.borderTopStyle != 'none') ? mxUtils.parseCssNumber(css.borderTopWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingRight) +\n\t\t\t((css.borderRightStyle != 'none') ? mxUtils.parseCssNumber(css.borderRightWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingBottom) +\n\t\t\t((css.borderBottomStyle != 'none') ? mxUtils.parseCssNumber(css.borderBottomWidth) : 0));\n};\n\n/**\n * Function: getPreferredPageSize\n * \n * Returns the preferred size of the background page if <preferPageSize> is true.\n */\nmxGraph.prototype.getPreferredPageSize = function(bounds, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = this.pageScale;\n\tvar page = new mxRectangle(0, 0, Math.ceil(fmt.width * ps), Math.ceil(fmt.height * ps));\n\t\n\tvar hCount = (this.pageBreaksVisible) ? Math.ceil(width / page.width) : 1;\n\tvar vCount = (this.pageBreaksVisible) ? Math.ceil(height / page.height) : 1;\n\t\n\treturn new mxRectangle(0, 0, hCount * page.width + 2 + tr.x, vCount * page.height + 2 + tr.y);\n};\n\n/**\n * Function: fit\n *\n * Scales the graph such that the complete diagram fits into <container> and\n * returns the current scale in the view. To fit an initial graph prior to\n * rendering, set <mxGraphView.rendering> to false prior to changing the model\n * and execute the following after changing the model.\n * \n * (code)\n * graph.fit();\n * graph.view.rendering = true;\n * graph.refresh();\n * (end)\n * \n * To fit and center the graph, the following code can be used.\n * \n * (code)\n * var margin = 2;\n * var max = 3;\n * \n * var bounds = graph.getGraphBounds();\n * var cw = graph.container.clientWidth - margin;\n * var ch = graph.container.clientHeight - margin;\n * var w = bounds.width / graph.view.scale;\n * var h = bounds.height / graph.view.scale;\n * var s = Math.min(max, Math.min(cw / w, ch / h));\n * \n * graph.view.scaleAndTranslate(s,\n *   (margin + cw - w * s) / (2 * s) - bounds.x / graph.view.scale,\n *   (margin + ch - h * s) / (2 * s) - bounds.y / graph.view.scale);\n * (end)\n * \n * Parameters:\n * \n * border - Optional number that specifies the border. Default is <border>.\n * keepOrigin - Optional boolean that specifies if the translate should be\n * changed. Default is false.\n * margin - Optional margin in pixels. Default is 0.\n * enabled - Optional boolean that specifies if the scale should be set or\n * just returned. Default is true.\n * ignoreWidth - Optional boolean that specifies if the width should be\n * ignored. Default is false.\n * ignoreHeight - Optional boolean that specifies if the height should be\n * ignored. Default is false.\n * maxHeight - Optional maximum height.\n */\nmxGraph.prototype.fit = function(border, keepOrigin, margin, enabled, ignoreWidth, ignoreHeight, maxHeight)\n{\n\tif (this.container != null)\n\t{\n\t\tborder = (border != null) ? border : this.getBorder();\n\t\tkeepOrigin = (keepOrigin != null) ? keepOrigin : false;\n\t\tmargin = (margin != null) ? margin : 0;\n\t\tenabled = (enabled != null) ? enabled : true;\n\t\tignoreWidth = (ignoreWidth != null) ? ignoreWidth : false;\n\t\tignoreHeight = (ignoreHeight != null) ? ignoreHeight : false;\n\t\t\n\t\t// Adds spacing and border from css\n\t\tvar cssBorder = this.getBorderSizes();\n\t\tvar w1 = this.container.offsetWidth - cssBorder.x - cssBorder.width - 1;\n\t\tvar h1 = (maxHeight != null) ? maxHeight : this.container.offsetHeight - cssBorder.y - cssBorder.height - 1;\n\t\tvar bounds = this.view.getGraphBounds();\n\t\t\n\t\tif (bounds.width > 0 && bounds.height > 0)\n\t\t{\n\t\t\tif (keepOrigin && bounds.x != null && bounds.y != null)\n\t\t\t{\n\t\t\t\tbounds = bounds.clone();\n\t\t\t\tbounds.width += bounds.x;\n\t\t\t\tbounds.height += bounds.y;\n\t\t\t\tbounds.x = 0;\n\t\t\t\tbounds.y = 0;\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Use unscaled bounding boxes to fix rounding errors\n\t\t\tvar s = this.view.scale;\n\t\t\tvar w2 = bounds.width / s;\n\t\t\tvar h2 = bounds.height / s;\n\t\t\t\n\t\t\t// Fits to the size of the background image if required\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tw2 = Math.max(w2, this.backgroundImage.width - bounds.x / s);\n\t\t\t\th2 = Math.max(h2, this.backgroundImage.height - bounds.y / s);\n\t\t\t}\n\t\t\t\n\t\t\tvar b = ((keepOrigin) ? border : 2 * border) + margin + 1;\n\n\t\t\tw1 -= b;\n\t\t\th1 -= b;\n\t\t\t\n\t\t\tvar s2 = (((ignoreWidth) ? h1 / h2 : (ignoreHeight) ? w1 / w2 :\n\t\t\t\tMath.min(w1 / w2, h1 / h2)));\n\t\t\t\n\t\t\tif (this.minFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.max(s2, this.minFitScale);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.maxFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.min(s2, this.maxFitScale);\n\t\t\t}\n\t\n\t\t\tif (enabled)\n\t\t\t{\n\t\t\t\tif (!keepOrigin)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.hasScrollbars(this.container))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar x0 = (bounds.x != null) ? Math.floor(this.view.translate.x - bounds.x / s + border / s2 + margin / 2) : border;\n\t\t\t\t\t\tvar y0 = (bounds.y != null) ? Math.floor(this.view.translate.y - bounds.y / s + border / s2 + margin / 2) : border;\n\n\t\t\t\t\t\tthis.view.scaleAndTranslate(s2, x0, y0);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t\t\tvar b2 = this.getGraphBounds();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.x != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollLeft = b2.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.y != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollTop = b2.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.view.scale != s2)\n\t\t\t\t{\n\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn s2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.view.scale;\n};\n\n/**\n * Function: sizeDidChange\n * \n * Called when the size of the graph has changed. This implementation fires\n * a <size> event after updating the clipping region of the SVG element in\n * SVG-bases browsers.\n */\nmxGraph.prototype.sizeDidChange = function()\n{\n\tvar bounds = this.getGraphBounds();\n\t\n\tif (this.container != null)\n\t{\n\t\tvar border = this.getBorder();\n\t\t\n\t\tvar width = Math.max(0, bounds.x) + bounds.width + 2 * border;\n\t\tvar height = Math.max(0, bounds.y) + bounds.height + 2 * border;\n\t\t\n\t\tif (this.minimumContainerSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumContainerSize.width);\n\t\t\theight = Math.max(height, this.minimumContainerSize.height);\n\t\t}\n\n\t\tif (this.resizeContainer)\n\t\t{\n\t\t\tthis.doResizeContainer(width, height);\n\t\t}\n\n\t\tif (this.preferPageSize || (!mxClient.IS_IE && this.pageVisible))\n\t\t{\n\t\t\tvar size = this.getPreferredPageSize(bounds, Math.max(1, width), Math.max(1, height));\n\t\t\t\n\t\t\tif (size != null)\n\t\t\t{\n\t\t\t\twidth = size.width * this.view.scale;\n\t\t\t\theight = size.height * this.view.scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.minimumGraphSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumGraphSize.width * this.view.scale);\n\t\t\theight = Math.max(height, this.minimumGraphSize.height * this.view.scale);\n\t\t}\n\n\t\twidth = Math.ceil(width);\n\t\theight = Math.ceil(height);\n\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\troot.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\troot.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t\troot.style.width = '100%';\n\t\t\t\troot.style.height = '100%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\t// Quirks mode does not support minWidth/-Height\n\t\t\t\tthis.view.updateHtmlCanvasSize(Math.max(1, width), Math.max(1, height));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.view.canvas.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\tthis.view.canvas.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.updatePageBreaks(this.pageBreaksVisible, width, height);\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SIZE, 'bounds', bounds));\n};\n\n/**\n * Function: doResizeContainer\n * \n * Resizes the container for the given graph width and height.\n */\nmxGraph.prototype.doResizeContainer = function(width, height)\n{\n\tif (this.maximumContainerSize != null)\n\t{\n\t\twidth = Math.min(this.maximumContainerSize.width, width);\n\t\theight = Math.min(this.maximumContainerSize.height, height);\n\t}\n\n\tthis.container.style.width = Math.ceil(width) + 'px';\n\tthis.container.style.height = Math.ceil(height) + 'px';\n};\n\n/**\n * Function: updatePageBreaks\n * \n * Invokes from <sizeDidChange> to redraw the page breaks.\n * \n * Parameters:\n * \n * visible - Boolean that specifies if page breaks should be shown.\n * width - Specifies the width of the container in pixels.\n * height - Specifies the height of the container in pixels.\n */\nmxGraph.prototype.updatePageBreaks = function(visible, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = scale * this.pageScale;\n\tvar bounds = new mxRectangle(0, 0, fmt.width * ps, fmt.height * ps);\n\n\tvar gb = mxRectangle.fromRectangle(this.getGraphBounds());\n\tgb.width = Math.max(1, gb.width);\n\tgb.height = Math.max(1, gb.height);\n\t\n\tbounds.x = Math.floor((gb.x - tr.x * scale) / bounds.width) * bounds.width + tr.x * scale;\n\tbounds.y = Math.floor((gb.y - tr.y * scale) / bounds.height) * bounds.height + tr.y * scale;\n\t\n\tgb.width = Math.ceil((gb.width + (gb.x - bounds.x)) / bounds.width) * bounds.width;\n\tgb.height = Math.ceil((gb.height + (gb.y - bounds.y)) / bounds.height) * bounds.height;\n\t\n\t// Does not show page breaks if the scale is too small\n\tvisible = visible && Math.min(bounds.width, bounds.height) > this.minPageBreakDist;\n\n\tvar horizontalCount = (visible) ? Math.ceil(gb.height / bounds.height) + 1 : 0;\n\tvar verticalCount = (visible) ? Math.ceil(gb.width / bounds.width) + 1 : 0;\n\tvar right = (verticalCount - 1) * bounds.width;\n\tvar bottom = (horizontalCount - 1) * bounds.height;\n\t\n\tif (this.horizontalPageBreaks == null && horizontalCount > 0)\n\t{\n\t\tthis.horizontalPageBreaks = [];\n\t}\n\n\tif (this.verticalPageBreaks == null && verticalCount > 0)\n\t{\n\t\tthis.verticalPageBreaks = [];\n\t}\n\t\n\tvar drawPageBreaks = mxUtils.bind(this, function(breaks)\n\t{\n\t\tif (breaks != null)\n\t\t{\n\t\t\tvar count = (breaks == this.horizontalPageBreaks) ? horizontalCount : verticalCount; \n\t\t\t\n\t\t\tfor (var i = 0; i <= count; i++)\n\t\t\t{\n\t\t\t\tvar pts = (breaks == this.horizontalPageBreaks) ?\n\t\t\t\t\t[new mxPoint(Math.round(bounds.x), Math.round(bounds.y + i * bounds.height)),\n\t\t\t         new mxPoint(Math.round(bounds.x + right), Math.round(bounds.y + i * bounds.height))] :\n\t\t\t        [new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y)),\n\t\t\t         new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y + bottom))];\n\n\t\t\t\tif (breaks[i] != null)\n\t\t\t\t{\n\t\t\t\t\tbreaks[i].points = pts;\n\t\t\t\t\tbreaks[i].redraw();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pageBreak = new mxPolyline(pts, this.pageBreakColor);\n\t\t\t\t\tpageBreak.dialect = this.dialect;\n\t\t\t\t\tpageBreak.pointerEvents = false;\n\t\t\t\t\tpageBreak.isDashed = this.pageBreakDashed;\n\t\t\t\t\tpageBreak.init(this.view.backgroundPane);\n\t\t\t\t\tpageBreak.redraw();\n\t\t\t\t\t\n\t\t\t\t\tbreaks[i] = pageBreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = count; i < breaks.length; i++)\n\t\t\t{\n\t\t\t\tbreaks[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tbreaks.splice(count, breaks.length - count);\n\t\t}\n\t});\n\t\n\tdrawPageBreaks(this.horizontalPageBreaks);\n\tdrawPageBreaks(this.verticalPageBreaks);\n};\n\n/**\n * Group: Cell styles\n */\n\n/**\n * Function: getCurrentCellStyle\n * \n * Returns the style for the given cell from the cell state, if one exists,\n * or using <getCellStyle>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n * ignoreState - Optional boolean that specifies if the cell state should be ignored.\n */\nmxGraph.prototype.getCurrentCellStyle = function(cell, ignoreState)\n{\n\tvar state = (ignoreState) ? null : this.view.getState(cell);\n\t\n\treturn (state != null) ? state.style : this.getCellStyle(cell);\n};\n\n/**\n * Function: getCellStyle\n * \n * Returns an array of key, value pairs representing the cell style for the\n * given cell. If no string is defined in the model that specifies the\n * style, then the default style for the cell is returned or an empty object,\n * if no style can be found. Note: You should try and get the cell state\n * for the given cell and use the cached style in the state before using\n * this method.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n */\nmxGraph.prototype.getCellStyle = function(cell)\n{\n\tvar stylename = this.model.getStyle(cell);\n\tvar style = null;\n\t\n\t// Gets the default style for the cell\n\tif (this.model.isEdge(cell))\n\t{\n\t\tstyle = this.stylesheet.getDefaultEdgeStyle();\n\t}\n\telse\n\t{\n\t\tstyle = this.stylesheet.getDefaultVertexStyle();\n\t}\n\t\n\t// Resolves the stylename using the above as the default\n\tif (stylename != null)\n\t{\n\t\tstyle = this.postProcessCellStyle(this.stylesheet.getCellStyle(stylename, style));\n\t}\n\t\n\t// Returns a non-null value if no style can be found\n\tif (style == null)\n\t{\n\t\tstyle = new Object();\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: postProcessCellStyle\n * \n * Tries to resolve the value for the image style in the image bundles and\n * turns short data URIs as defined in mxImageBundle to data URIs as\n * defined in RFC 2397 of the IETF.\n */\nmxGraph.prototype.postProcessCellStyle = function(style)\n{\n\tif (style != null)\n\t{\n\t\tvar key = style[mxConstants.STYLE_IMAGE];\n\t\tvar image = this.getImageFromBundles(key);\n\n\t\tif (image != null)\n\t\t{\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t\telse\n\t\t{\n\t\t\timage = key;\n\t\t}\n\t\t\n\t\t// Converts short data uris to normal data uris\n\t\tif (image != null && image.substring(0, 11) == 'data:image/')\n\t\t{\n\t\t\tif (image.substring(0, 20) == 'data:image/svg+xml,<')\n\t\t\t{\n\t\t\t\t// Required for FF and IE11\n\t\t\t\timage = image.substring(0, 19) + encodeURIComponent(image.substring(19));\n\t\t\t}\n\t\t\telse if (image.substring(0, 22) != 'data:image/svg+xml,%3C')\n\t\t\t{\n\t\t\t\tvar comma = image.indexOf(',');\n\t\t\t\t\n\t\t\t\t// Adds base64 encoding prefix if needed\n\t\t\t\tif (comma > 0 && image.substring(comma - 7, comma + 1) != ';base64,')\n\t\t\t\t{\n\t\t\t\t\timage = image.substring(0, comma) + ';base64,'\n\t\t\t\t\t\t+ image.substring(comma + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t}\n\n\treturn style;\n};\n\n/**\n * Function: setCellStyle\n * \n * Sets the style of the specified cells. If no cells are given, then the\n * selection cells are changed.\n * \n * Parameters:\n * \n * style - String representing the new style of the cells.\n * cells - Optional array of <mxCells> to set the style for. Default is the\n * selection cells.\n */\nmxGraph.prototype.setCellStyle = function(style, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(cells[i], style);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: toggleCellStyle\n * \n * Toggles the boolean value for the given key in the style of the given cell\n * and returns the new value as 0 or 1. If no cell is specified then the\n * selection cell is used.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cell - Optional <mxCell> whose style should be modified. Default is\n * the selection cell.\n */\nmxGraph.prototype.toggleCellStyle = function(key, defaultValue, cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\treturn this.toggleCellStyles(key, defaultValue, [cell]);\n};\n\n/**\n * Function: toggleCellStyles\n * \n * Toggles the boolean value for the given key in the style of the given cells\n * and returns the new value as 0 or 1. If no cells are specified, then the\n * selection cells are used. For example, this can be used to toggle\n * <mxConstants.STYLE_ROUNDED> or any other style with a boolean value.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cells - Optional array of <mxCells> whose styles should be modified.\n * Default is the selection cells.\n */\nmxGraph.prototype.toggleCellStyles = function(key, defaultValue, cells)\n{\n\tdefaultValue = (defaultValue != null) ? defaultValue : false;\n\tcells = cells || this.getSelectionCells();\n\tvar value = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cells[0]);\n\t\tvalue = (mxUtils.getValue(style, key, defaultValue)) ? 0 : 1;\n\t\tthis.setCellStyles(key, value, cells);\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: setCellStyles\n * \n * Sets the key to value in the styles of the given cells. This will modify\n * the existing cell styles in-place and override any existing assignment\n * for the given key. If no cells are specified, then the selection cells\n * are changed. If no value is specified, then the respective key is\n * removed from the styles.\n * \n * Parameters:\n * \n * key - String representing the key to be assigned.\n * value - String representing the new value for the key.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyles = function(key, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\tmxUtils.setCellStyles(this.model, cells, key, value);\n};\n\n/**\n * Function: toggleCellStyleFlags\n * \n * Toggles the given bit for the given key in the styles of the specified\n * cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.toggleCellStyleFlags = function(key, flag, cells)\n{\n\tthis.setCellStyleFlags(key, flag, null, cells);\n};\n\n/**\n * Function: setCellStyleFlags\n * \n * Sets or toggles the given bit for the given key in the styles of the\n * specified cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * value - Boolean value to be used or null if the value should be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyleFlags = function(key, flag, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvar style = this.getCurrentCellStyle(cells[0]);\n\t\t\tvar current = parseInt(style[key] || 0);\n\t\t\tvalue = !((current & flag) == flag);\n\t\t}\n\n\t\tmxUtils.setCellStyleFlags(this.model, cells, key, flag, value);\n\t}\n};\n\n/**\n * Group: Cell alignment and orientation\n */\n\n/**\n * Function: alignCells\n * \n * Aligns the given cells vertically or horizontally according to the given\n * alignment using the optional parameter as the coordinate.\n * \n * Parameters:\n * \n * align - Specifies the alignment. Possible values are all constants in\n * mxConstants with an ALIGN prefix.\n * cells - Array of <mxCells> to be aligned.\n * param - Optional coordinate for the alignment.\n */\nmxGraph.prototype.alignCells = function(align, cells, param)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tif (cells != null && cells.length > 1)\n\t{\n\t\t// Finds the required coordinate for the alignment\n\t\tif (param == null)\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\n\t\t\t\tif (state != null && !this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tif (param == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.x + state.width);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.y + state.height);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.x);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Aligns the cells to the coordinate\n\t\tif (param != null)\n\t\t{\n\t\t\tvar s = this.view.scale;\n\n\t\t\tthis.model.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null && !this.model.isEdge(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.resizeCell(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ALIGN_CELLS,\n\t\t\t\t\t\t'align', align, 'cells', cells));\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.model.endUpdate();\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: flipEdge\n * \n * Toggles the style of the given edge between null (or empty) and\n * <alternateEdgeStyle>. This method fires <mxEvent.FLIP_EDGE> while the\n * transaction is in progress. Returns the edge that was flipped.\n * \n * Here is an example that overrides this implementation to invert the\n * value of <mxConstants.STYLE_ELBOW> without removing any existing styles.\n * \n * (code)\n * graph.flipEdge = function(edge)\n * {\n *   if (edge != null)\n *   {\n *     var style = this.getCurrentCellStyle(edge);\n *     var elbow = mxUtils.getValue(style, mxConstants.STYLE_ELBOW,\n *         mxConstants.ELBOW_HORIZONTAL);\n *     var value = (elbow == mxConstants.ELBOW_HORIZONTAL) ?\n *         mxConstants.ELBOW_VERTICAL : mxConstants.ELBOW_HORIZONTAL;\n *     this.setCellStyles(mxConstants.STYLE_ELBOW, value, [edge]);\n *   }\n * };\n * (end)\n * \n * Parameters:\n * \n * edge - <mxCell> whose style should be changed.\n */\nmxGraph.prototype.flipEdge = function(edge)\n{\n\tif (edge != null &&\n\t\tthis.alternateEdgeStyle != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar style = this.model.getStyle(edge);\n\n\t\t\tif (style == null || style.length == 0)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, this.alternateEdgeStyle);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, null);\n\t\t\t}\n\n\t\t\t// Removes all existing control points\n\t\t\tthis.resetEdge(edge);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.FLIP_EDGE, 'edge', edge));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: addImageBundle\n *\n * Adds the specified <mxImageBundle>.\n */\nmxGraph.prototype.addImageBundle = function(bundle)\n{\n\tthis.imageBundles.push(bundle);\n};\n\n/**\n * Function: removeImageBundle\n * \n * Removes the specified <mxImageBundle>.\n */\nmxGraph.prototype.removeImageBundle = function(bundle)\n{\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t{\n\t\tif (this.imageBundles[i] != bundle)\n\t\t{\n\t\t\ttmp.push(this.imageBundles[i]);\n\t\t}\n\t}\n\t\n\tthis.imageBundles = tmp;\n};\n\n/**\n * Function: getImageFromBundles\n *\n * Searches all <imageBundles> for the specified key and returns the value\n * for the first match or null if the key is not found.\n */\nmxGraph.prototype.getImageFromBundles = function(key)\n{\n\tif (key != null)\n\t{\n\t\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t\t{\n\t\t\tvar image = this.imageBundles[i].getImage(key);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\treturn image;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: Order\n */\n\n/**\n * Function: orderCells\n * \n * Moves the given cells to the front or back. The change is carried out\n * using <cellsOrdered>. This method fires <mxEvent.ORDER_CELLS> while the\n * transaction is in progress.\n * \n * Parameters:\n * \n * back - Boolean that specifies if the cells should be moved to back.\n * cells - Array of <mxCells> to move to the background. If null is\n * specified then the selection cells are used.\n */\nmxGraph.prototype.orderCells = function(back, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsOrdered(cells, back);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ORDER_CELLS,\n\t\t\t\t'back', back, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsOrdered\n * \n * Moves the given cells to the front or back. This method fires\n * <mxEvent.CELLS_ORDERED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose order should be changed.\n * back - Boolean that specifies if the cells should be moved to back.\n */\nmxGraph.prototype.cellsOrdered = function(cells, back)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\n\t\t\t\tif (back)\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i], i);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i],\n\t\t\t\t\t\t\tthis.model.getChildCount(parent) - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ORDERED,\n\t\t\t\t\t'back', back, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Grouping\n */\n\n/**\n * Function: groupCells\n * \n * Adds the cells into the given group. The change is carried out using\n * <cellsAdded>, <cellsMoved> and <cellsResized>. This method fires\n * <mxEvent.GROUP_CELLS> while the transaction is in progress. Returns the\n * new group. A group is only created if there is at least one entry in the\n * given array of cells.\n * \n * Parameters:\n * \n * group - <mxCell> that represents the target group. If null is specified\n * then a new group is created using <createGroupCell>.\n * border - Optional integer that specifies the border between the child\n * area and the group bounds. Default is 0.\n * cells - Optional array of <mxCells> to be grouped. If null is specified\n * then the selection cells are used.\n */\nmxGraph.prototype.groupCells = function(group, border, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tcells = this.getCellsForGroup(cells);\n\n\tif (group == null)\n\t{\n\t\tgroup = this.createGroupCell(cells);\n\t}\n\n\tvar bounds = this.getBoundsForGroup(group, cells, border);\n\n\tif (cells.length > 1 && bounds != null)\n\t{\n\t\t// Uses parent of group or previous parent of first child\n\t\tvar parent = this.model.getParent(group);\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getParent(cells[0]);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Checks if the group has a geometry and\n\t\t\t// creates one if one does not exist\n\t\t\tif (this.getCellGeometry(group) == null)\n\t\t\t{\n\t\t\t\tthis.model.setGeometry(group, new mxGeometry());\n\t\t\t}\n\n\t\t\t// Adds the group into the parent\n\t\t\tvar index = this.model.getChildCount(parent);\n\t\t\tthis.cellsAdded([group], parent, index, null, null, false, false, false);\n\n\t\t\t// Adds the children into the group and moves\n\t\t\tindex = this.model.getChildCount(group);\n\t\t\tthis.cellsAdded(cells, group, index, null, null, false, false, false);\n\t\t\tthis.cellsMoved(cells, -bounds.x, -bounds.y, false, false, false);\n\n\t\t\t// Resizes the group\n\t\t\tthis.cellsResized([group], [bounds], false);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.GROUP_CELLS,\n\t\t\t\t\t'group', group, 'border', border, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn group;\n};\n\n/**\n * Function: getCellsForGroup\n * \n * Returns the cells with the same parent as the first cell\n * in the given array.\n */\nmxGraph.prototype.getCellsForGroup = function(cells)\n{\n\tvar result = [];\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar parent = this.model.getParent(cells[0]);\n\t\tresult.push(cells[0]);\n\n\t\t// Filters selection cells with the same parent\n\t\tfor (var i = 1; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getParent(cells[i]) == parent)\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getBoundsForGroup\n * \n * Returns the bounds to be used for the given group and children.\n */\nmxGraph.prototype.getBoundsForGroup = function(group, children, border)\n{\n\tvar result = this.getBoundingBoxFromGeometry(children, true);\n\t\n\tif (result != null)\n\t{\n\t\tif (this.isSwimlane(group))\n\t\t{\n\t\t\tvar size = this.getStartSize(group);\n\t\t\t\n\t\t\tresult.x -= size.width;\n\t\t\tresult.y -= size.height;\n\t\t\tresult.width += size.width;\n\t\t\tresult.height += size.height;\n\t\t}\n\t\t\n\t\t// Adds the border\n\t\tif (border != null)\n\t\t{\n\t\t\tresult.x -= border;\n\t\t\tresult.y -= border;\n\t\t\tresult.width += 2 * border;\n\t\t\tresult.height += 2 * border;\n\t\t}\n\t}\t\t\t\n\t\n\treturn result;\n};\n\n/**\n * Function: createGroupCell\n * \n * Hook for creating the group cell to hold the given array of <mxCells> if\n * no group cell was given to the <group> function.\n * \n * The following code can be used to set the style of new group cells.\n * \n * (code)\n * var graphCreateGroupCell = graph.createGroupCell;\n * graph.createGroupCell = function(cells)\n * {\n *   var group = graphCreateGroupCell.apply(this, arguments);\n *   group.setStyle('group');\n *   \n *   return group;\n * };\n */\nmxGraph.prototype.createGroupCell = function(cells)\n{\n\tvar group = new mxCell('');\n\tgroup.setVertex(true);\n\tgroup.setConnectable(false);\n\t\n\treturn group;\n};\n\n/**\n * Function: ungroupCells\n * \n * Ungroups the given cells by moving the children the children to their\n * parents parent and removing the empty groups. Returns the children that\n * have been removed from the groups.\n * \n * Parameters:\n * \n * cells - Array of cells to be ungrouped. If null is specified then the\n * selection cells are used.\n */\nmxGraph.prototype.ungroupCells = function(cells)\n{\n\tvar result = [];\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getCellsForUngroup();\n\t}\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tchildren = children.slice();\n\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\tvar index = this.model.getChildCount(parent);\n\n\t\t\t\t\tthis.cellsAdded(children, parent, index, null, null, true);\n\t\t\t\t\tresult = result.concat(children);\n\t\t\t\t\t\n\t\t\t\t\t// Fix relative child cells\n\t\t\t\t\tfor (var j = 0; j < children.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(children[j]);\n\t\t\t\t\t\tvar geo = this.getCellGeometry(children[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null && geo != null && geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = state.origin.x;\n\t\t\t\t\t\t\tgeo.y = state.origin.y;\n\t\t\t\t\t\t\tgeo.relative = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.model.setGeometry(children[j], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.removeCellsAfterUngroup(cells);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNGROUP_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForUngroup\n * \n * Returns the selection cells that can be ungrouped.\n */\nmxGraph.prototype.getCellsForUngroup = function()\n{\n\tvar cells = this.getSelectionCells();\n\n\t// Finds the cells with children\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.model.isVertex(cells[i]) &&\n\t\t\tthis.model.getChildCount(cells[i]) > 0)\n\t\t{\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\t}\n\n\treturn tmp;\n};\n\n/**\n * Function: removeCellsAfterUngroup\n * \n * Hook to remove the groups after <ungroupCells>.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> that were ungrouped.\n */\nmxGraph.prototype.removeCellsAfterUngroup = function(cells)\n{\n\tthis.cellsRemoved(this.addAllEdges(cells));\n};\n\n/**\n * Function: removeCellsFromParent\n * \n * Removes the specified cells from their parents and adds them to the\n * default parent. Returns the cells that were removed from their parents.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from their parents.\n */\nmxGraph.prototype.removeCellsFromParent = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar parent = this.getDefaultParent();\n\t\tvar index = this.model.getChildCount(parent);\n\n\t\tthis.cellsAdded(cells, parent, index, null, null, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS_FROM_PARENT, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given groups to include all children and returns\n * the passed-in cells. Call this with the groups in parent to child order,\n * top-most group first, the cells are processed in reverse order and cells\n * with no children are ignored.\n * \n * Parameters:\n * \n * cells - The groups whose bounds should be updated. If this is null, then\n * the selection cells are used.\n * border - Optional border to be added in the group. Default is 0.\n * moveGroup - Optional boolean that allows the group to be moved. Default\n * is false.\n * topBorder - Optional top border to be added in the group. Default is 0.\n * rightBorder - Optional top border to be added in the group. Default is 0.\n * bottomBorder - Optional top border to be added in the group. Default is 0.\n * leftBorder - Optional top border to be added in the group. Default is 0.\n */\nmxGraph.prototype.updateGroupBounds = function(cells, border, moveGroup, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tborder = (border != null) ? border : 0;\n\tmoveGroup = (moveGroup != null) ? moveGroup : false;\n\ttopBorder = (topBorder != null) ? topBorder : 0;\n\trightBorder = (rightBorder != null) ? rightBorder : 0;\n\tbottomBorder = (bottomBorder != null) ? bottomBorder : 0;\n\tleftBorder = (leftBorder != null) ? leftBorder : 0;\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = cells.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar children = this.getChildCells(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.getBoundingBoxFromGeometry(children, true);\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null && bounds.width > 0 && bounds.height > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Adds the size of the title area for swimlanes\n\t\t\t\t\t\tvar size = (this.isSwimlane(cells[i])) ?\n\t\t\t\t\t\t\tthis.getActualStartSize(cells[i], true) : new mxRectangle();\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (moveGroup)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = Math.round(geo.x + bounds.x - border - size.x - leftBorder);\n\t\t\t\t\t\t\tgeo.y = Math.round(geo.y + bounds.y - border - size.y - topBorder);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo.width = Math.round(bounds.width + 2 * border + size.x + leftBorder + rightBorder + size.width);\n\t\t\t\t\t\tgeo.height = Math.round(bounds.height + 2 * border + size.y + topBorder + bottomBorder + size.height);\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\tthis.moveCells(children, border + size.x - bounds.x + leftBorder,\n\t\t\t\t\t\t\t\tborder + size.y - bounds.y + topBorder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box for the given array of <mxCells>. The bounding box for\n * each cell and its descendants is computed using <mxGraphView.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraph.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.isVertex(cells[i]) || this.model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar bbox = this.view.getBoundingBox(this.view.getState(cells[i]), true);\n\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Group: Cell cloning, insertion and removal\n */\n\n/**\n * Function: cloneCell\n * \n * Returns the clone for the given cell. Uses <cloneCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCell = function(cell, allowInvalidEdges, mapping, keepPosition)\n{\n\treturn this.cloneCells([cell], allowInvalidEdges, mapping, keepPosition)[0];\n};\n\n/**\n * Function: cloneCells\n * \n * Returns the clones for the given cells. The clones are created recursively\n * using <mxGraphModel.cloneCells>. If the terminal of an edge is not in the\n * given array, then the respective end is assigned a terminal point and the\n * terminal is removed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCells = function(cells, allowInvalidEdges, mapping, keepPosition)\n{\n\tallowInvalidEdges = (allowInvalidEdges != null) ? allowInvalidEdges : true;\n\tvar clones = null;\n\t\n\tif (cells != null)\n\t{\n\t\t// Creates a dictionary for fast lookups\n\t\tvar dict = new mxDictionary();\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar trans = this.view.translate;\n\t\t\tclones = this.model.cloneCells(cells, true, mapping);\n\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!allowInvalidEdges && this.model.isEdge(clones[i]) &&\n\t\t\t\t\tthis.getEdgeValidationError(clones[i],\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], true),\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], false)) != null)\n\t\t\t\t{\n\t\t\t\t\tclones[i] = null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar g = this.model.getGeometry(clones[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(this.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null && pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = (keepPosition) ? 0 : pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = (keepPosition) ? 0 : pstate.origin.y;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isEdge(clones[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (pts != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Checks if the source is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (src == null && pts[0] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - trans.y), true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Checks if the target is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (trg == null && pts[n] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - trans.y), false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Translates the control points\n\t\t\t\t\t\t\t\t\tvar points = g.points;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (points != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfor (var j = 0; j < points.length; j++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].x += dx;\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].y += dy;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tg.translate(dx, dy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones = [];\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\n/**\n * Function: insertVertex\n * \n * Adds a new vertex into the given parent <mxCell> using value as the user\n * object and the given coordinates as the <mxGeometry> of the new vertex.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * When adding new vertices from a mouse event, one should take into\n * account the offset of the graph container and the scale and translation\n * of the view in order to find the correct unscaled, untranslated\n * coordinates using <mxGraph.getPointForEvent> as follows:\n * \n * (code)\n * var pt = graph.getPointForEvent(evt);\n * var parent = graph.getDefaultParent();\n * graph.insertVertex(parent, null,\n * \t\t\t'Hello, World!', x, y, 220, 30);\n * (end)\n * \n * For adding image cells, the style parameter can be assigned as\n * \n * (code)\n * stylename;image=imageUrl\n * (end)\n * \n * See <mxGraph> for more information on using images.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new vertex.\n * id - Optional string that defines the Id of the new vertex.\n * value - Object to be used as the user object.\n * x - Integer that defines the x coordinate of the vertex.\n * y - Integer that defines the y coordinate of the vertex.\n * width - Integer that defines the width of the vertex.\n * height - Integer that defines the height of the vertex.\n * style - Optional string that defines the cell style.\n * relative - Optional boolean that specifies if the geometry is relative.\n * Default is false.\n */\nmxGraph.prototype.insertVertex = function(parent, id, value,\n\tx, y, width, height, style, relative)\n{\n\tvar vertex = this.createVertex(parent, id, value, x, y, width, height, style, relative);\n\n\treturn this.addCell(vertex, parent);\n};\n\n/**\n * Function: createVertex\n * \n * Hook method that creates the new vertex for <insertVertex>.\n */\nmxGraph.prototype.createVertex = function(parent, id, value,\n\t\tx, y, width, height, style, relative)\n{\n\t// Creates the geometry for the vertex\n\tvar geometry = new mxGeometry(x, y, width, height);\n\tgeometry.relative = (relative != null) ? relative : false;\n\t\n\t// Creates the vertex\n\tvar vertex = new mxCell(value, geometry, style);\n\tvertex.setId(id);\n\tvertex.setVertex(true);\n\tvertex.setConnectable(true);\n\t\n\treturn vertex;\n};\n\t\n/**\n * Function: insertEdge\n * \n * Adds a new edge into the given parent <mxCell> using value as the user\n * object and the given source and target as the terminals of the new edge.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new edge.\n * id - Optional string that defines the Id of the new edge.\n * value - JavaScript object to be used as the user object.\n * source - <mxCell> that defines the source of the edge.\n * target - <mxCell> that defines the target of the edge.\n * style - Optional string that defines the cell style.\n */\nmxGraph.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tvar edge = this.createEdge(parent, id, value, source, target, style);\n\t\n\treturn this.addEdge(edge, parent, source, target);\n};\n\n/**\n * Function: createEdge\n * \n * Hook method that creates the new edge for <insertEdge>. This\n * implementation does not set the source and target of the edge, these\n * are set when the edge is added to the model.\n * \n */\nmxGraph.prototype.createEdge = function(parent, id, value, source, target, style)\n{\n\t// Creates the edge\n\tvar edge = new mxCell(value, new mxGeometry(), style);\n\tedge.setId(id);\n\tedge.setEdge(true);\n\tedge.geometry.relative = true;\n\t\n\treturn edge;\n};\n\n/**\n * Function: addEdge\n * \n * Adds the edge to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the edge that was\n * added.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n * index - Optional index to insert the cells at. Default is to append.\n */\nmxGraph.prototype.addEdge = function(edge, parent, source, target, index)\n{\n\treturn this.addCell(edge, parent, index, source, target);\n};\n\n/**\n * Function: addCell\n * \n * Adds the cell to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the cell that was\n * added.\n * \n * Parameters:\n * \n * cell - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.addCell = function(cell, parent, index, source, target)\n{\n\treturn this.addCells([cell], parent, index, source, target)[0];\n};\n\n/**\n * Function: addCells\n * \n * Adds the cells to the parent at the given index, connecting each cell to\n * the optional source and target terminal. The change is carried out using\n * <cellsAdded>. This method fires <mxEvent.ADD_CELLS> while the\n * transaction is in progress. Returns the cells that were added.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be inserted.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional source <mxCell> for all inserted cells.\n * target - Optional target <mxCell> for all inserted cells.\n * absolute - Optional boolean indicating of cells should be kept at\n * their absolute position. Default is false.\n */\nmxGraph.prototype.addCells = function(cells, parent, index, source, target, absolute)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getDefaultParent();\n\t}\n\t\n\tif (index == null)\n\t{\n\t\tindex = this.model.getChildCount(parent);\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsAdded(cells, parent, index, source, target, (absolute != null) ? absolute : false, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_CELLS, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsAdded\n * \n * Adds the specified cells to the given parent. This method fires\n * <mxEvent.CELLS_ADDED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsAdded = function(cells, parent, index, source, target, absolute, constrain, extend)\n{\n\tif (cells != null && parent != null && index != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar parentState = (absolute) ? this.view.getState(parent) : null;\n\t\t\tvar o1 = (parentState != null) ? parentState.origin : null;\n\t\t\tvar zero = new mxPoint(0, 0);\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] == null)\n\t\t\t\t{\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar previous = this.model.getParent(cells[i]);\n\t\n\t\t\t\t\t// Keeps the cell at its absolute location\n\t\t\t\t\tif (o1 != null && cells[i] != parent && parent != previous)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar oldState = this.view.getState(previous);\n\t\t\t\t\t\tvar o2 = (oldState != null) ? oldState.origin : zero;\n\t\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = o2.x - o1.x;\n\t\t\t\t\t\t\tvar dy = o2.y - o1.y;\n\t\n\t\t\t\t\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t\t\t\t\t// to avoid forward references in sessions.\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.translate(dx, dy);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!geo.relative && this.model.isVertex(cells[i]) &&\n\t\t\t\t\t\t\t\t!this.isAllowNegativeCoordinates())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\t\t\t\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Decrements all following indices\n\t\t\t\t\t// if cell is already in parent\n\t\t\t\t\tif (parent == previous && index + i > this.model.getChildCount(parent))\n\t\t\t\t\t{\n\t\t\t\t\t\tindex--;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.add(parent, cells[i], index + i);\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoSizeCellsOnAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.autoSizeCell(cells[i], true);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Extends the parent or constrains the child\n\t\t\t\t\tif ((extend == null || extend) &&\n\t\t\t\t\t\tthis.isExtendParentsOnAdd(cells[i]) && this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Additionally constrains the child after extending the parent\n\t\t\t\t\tif (constrain == null || constrain)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the source terminal\n\t\t\t\t\tif (source != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], source, true);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the target terminal\n\t\t\t\t\tif (target != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], target, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ADDED, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target,\n\t\t\t\t'absolute', absolute));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: autoSizeCell\n * \n * Resizes the specified cell to just fit around the its label and/or children\n * \n * Parameters:\n * \n * cell - <mxCells> to be resized.\n * recurse - Optional boolean which specifies if all descendants should be\n * autosized. Default is true.\n */\nmxGraph.prototype.autoSizeCell = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tif (recurse)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.autoSizeCell(this.model.getChildAt(cell, i));\n\t\t}\n\t}\n\n\tif (this.getModel().isVertex(cell) && this.isAutoSizeCell(cell))\n\t{\n\t\tthis.updateCellSize(cell);\n\t}\n};\n\n/**\n * Function: removeCells\n * \n * Removes the given cells from the graph including all connected edges if\n * includeEdges is true. The change is carried out using <cellsRemoved>.\n * This method fires <mxEvent.REMOVE_CELLS> while the transaction is in\n * progress. The removed cells are returned as an array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove. If null is specified then the\n * selection cells which are deletable are used.\n * includeEdges - Optional boolean which specifies if all connected edges\n * should be removed as well. Default is true.\n */\nmxGraph.prototype.removeCells = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getDeletableCells(this.getSelectionCells());\n\t}\n\n\t// Adds all edges to the cells\n\tif (includeEdges)\n\t{\n\t\t// FIXME: Remove duplicate cells in result or do not add if\n\t\t// in cells or descendant of cells\n\t\tcells = this.getDeletableCells(this.addAllEdges(cells));\n\t}\n\telse\n\t{\n\t\tcells = cells.slice();\n\t\t\n\t\t// Removes edges that are currently not\n\t\t// visible as those cannot be updated\n\t\tvar edges = this.getDeletableCells(this.getAllEdges(cells));\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.view.getState(edges[i]) == null &&\n\t\t\t\t!dict.get(edges[i]))\n\t\t\t{\n\t\t\t\tdict.put(edges[i], true);\n\t\t\t\tcells.push(edges[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsRemoved(cells);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS, \n\t\t\t\t'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: cellsRemoved\n * \n * Removes the given cells from the model. This method fires\n * <mxEvent.CELLS_REMOVED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove.\n */\nmxGraph.prototype.cellsRemoved = function(cells)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar scale = this.view.scale;\n\t\tvar tr = this.view.translate;\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Creates hashtable for faster lookup\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\t// Disconnects edges which are not being removed\n\t\t\t\tvar edges = this.getAllEdges([cells[i]]);\n\t\t\t\t\n\t\t\t\tvar disconnectTerminal = mxUtils.bind(this, function(edge, source)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(edge);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Checks if terminal is being removed\n\t\t\t\t\t\tvar terminal = this.model.getTerminal(edge, source);\n\t\t\t\t\t\tvar connected = false;\n\t\t\t\t\t\tvar tmp = terminal;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (cells[i] == tmp)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnected = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = this.model.getParent(tmp);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (connected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tvar state = this.view.getState(edge);\n\n\t\t\t\t\t\t\tif (state != null && state.absolutePoints != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\tvar n = (source) ? 0 : pts.length - 1;\n\n\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\tpts[n].x / scale - tr.x - state.origin.x,\n\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y - state.origin.y), source);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Fallback to center of terminal if routing\n\t\t\t\t\t\t\t\t// points are not available to add new point\n\t\t\t\t\t\t\t\t// KNOWN: Should recurse to find parent offset\n\t\t\t\t\t\t\t\t// of edge for nested groups but invisible edges\n\t\t\t\t\t\t\t\t// should be removed in removeCells step\n\t\t\t\t\t\t\t\tvar tstate = this.view.getState(terminal);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tstate != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterX() / scale - tr.x,\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterY() / scale - tr.y), source);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t\t\t\tthis.model.setTerminal(edge, null, source);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (!dict.get(edges[j]))\n\t\t\t\t\t{\n\t\t\t\t\t\tdict.put(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.model.remove(cells[i]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_REMOVED, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: splitEdge\n * \n * Splits the given edge by adding the newEdge between the previous source\n * and the given cell and reconnecting the source of the given edge to the\n * given cell. This method fires <mxEvent.SPLIT_EDGE> while the transaction\n * is in progress. Returns the new edge that was inserted.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that represents the cells to insert into the edge.\n * newEdge - <mxCell> that represents the edge to be inserted.\n * dx - Optional integer that specifies the vector to move the cells.\n * dy - Optional integer that specifies the vector to move the cells.\n * x - Integer that specifies the x-coordinate of the drop location.\n * y - Integer that specifies the y-coordinate of the drop location.\n * parent - Optional parent to insert the cell. If null the parent of\n * the edge is used.\n */\nmxGraph.prototype.splitEdge = function(edge, cells, newEdge, dx, dy, x, y, parent)\n{\n\tdx = dx || 0;\n\tdy = dy || 0;\n\n\tparent = (parent != null) ? parent : this.model.getParent(edge);\n\tvar source = this.model.getTerminal(edge, true);\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tif (newEdge == null)\n\t\t{\n\t\t\tnewEdge = this.cloneCell(edge);\n\t\t\t\n\t\t\t// Removes waypoints before/after new cell\n\t\t\tvar state = this.view.getState(edge);\n\t\t\tvar geo = this.getCellGeometry(newEdge);\n\t\t\t\n\t\t\tif (geo != null && geo.points != null && state != null)\n\t\t\t{\n\t\t\t\tvar t = this.view.translate;\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar idx = mxUtils.findNearestSegment(state, (dx + t.x) * s, (dy + t.y) * s);\n\t\t\t\tgeo.points = geo.points.slice(0, idx);\n\t\t\t\t\t\t\t\t\n\t\t\t\tgeo = this.getCellGeometry(edge);\n\t\t\t\t\n\t\t\t\tif (geo != null && geo.points != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.points = geo.points.slice(idx);\n\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.cellsMoved(cells, dx, dy, false, false);\n\t\tthis.cellsAdded(cells, parent, this.model.getChildCount(parent), null, null,\n\t\t\t\ttrue);\n\t\tthis.cellsAdded([newEdge], parent, this.model.getChildCount(parent),\n\t\t\t\tsource, cells[0], false);\n\t\tthis.cellConnected(edge, cells[0], true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SPLIT_EDGE, 'edge', edge,\n\t\t\t\t'cells', cells, 'newEdge', newEdge, 'dx', dx, 'dy', dy));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn newEdge;\n};\n\n/**\n * Group: Cell visibility\n */\n\n/**\n * Function: toggleCells\n * \n * Sets the visible state of the specified cells and all connected edges\n * if includeEdges is true. The change is carried out using <cellsToggled>.\n * This method fires <mxEvent.TOGGLE_CELLS> while the transaction is in\n * progress. Returns the cells whose visible state was changed.\n * \n * Parameters:\n * \n * show - Boolean that specifies the visible state to be assigned.\n * cells - Array of <mxCells> whose visible state should be changed. If\n * null is specified then the selection cells are used.\n * includeEdges - Optional boolean indicating if the visible state of all\n * connected edges should be changed as well. Default is true.\n */\nmxGraph.prototype.toggleCells = function(show, cells, includeEdges)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\n\t// Adds all connected edges recursively\n\tif (includeEdges)\n\t{\n\t\tcells = this.addAllEdges(cells);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsToggled(cells, show);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.TOGGLE_CELLS,\n\t\t\t'show', show, 'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsToggled\n * \n * Sets the visible state of the specified cells.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose visible state should be changed.\n * show - Boolean that specifies the visible state to be assigned.\n */\nmxGraph.prototype.cellsToggled = function(cells, show)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setVisible(cells[i], show);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Folding\n */\n\n/**\n * Function: foldCells\n * \n * Sets the collapsed state of the specified cells and all descendants\n * if recurse is true. The change is carried out using <cellsFolded>.\n * This method fires <mxEvent.FOLD_CELLS> while the transaction is in\n * progress. Returns the cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Optional boolean indicating if the collapsed state of all\n * descendants should be set. Default is false.\n * cells - Array of <mxCells> whose collapsed state should be set. If\n * null is specified then the foldable selection cells are used.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n * evt - Optional native event that triggered the invocation.\n */\nmxGraph.prototype.foldCells = function(collapse, recurse, cells, checkFoldable, evt)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getFoldableCells(this.getSelectionCells(), collapse);\n\t}\n\n\tthis.stopEditing(false);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsFolded(cells, collapse, recurse, checkFoldable);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FOLD_CELLS,\n\t\t\t'collapse', collapse, 'recurse', recurse, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsFolded\n * \n * Sets the collapsed state of the specified cells. This method fires\n * <mxEvent.CELLS_FOLDED> while the transaction is in progress. Returns the\n * cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose collapsed state should be set.\n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Boolean indicating if the collapsed state of all descendants\n * should be set.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n */\nmxGraph.prototype.cellsFolded = function(cells, collapse, recurse, checkFoldable)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif ((!checkFoldable || this.isCellFoldable(cells[i], collapse)) &&\n\t\t\t\t\tcollapse != this.isCellCollapsed(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.model.setCollapsed(cells[i], collapse);\n\t\t\t\t\tthis.swapBounds(cells[i], collapse);\n\n\t\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recurse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\t\tthis.cellsFolded(children, collapse, recurse);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_FOLDED,\n\t\t\t\t'cells', cells, 'collapse', collapse, 'recurse', recurse));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swapBounds\n * \n * Swaps the alternate and the actual bounds in the geometry of the given\n * cell invoking <updateAlternateBounds> before carrying out the swap.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the bounds should be swapped.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.swapBounds = function(cell, willCollapse)\n{\n\tif (cell != null)\n\t{\n\t\tvar geo = this.model.getGeometry(cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tthis.updateAlternateBounds(cell, geo, willCollapse);\n\t\t\tgeo.swap();\n\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateAlternateBounds\n * \n * Updates or sets the alternate bounds in the given geometry for the given\n * cell depending on whether the cell is going to be collapsed. If no\n * alternate bounds are defined in the geometry and\n * <collapseToPreferredSize> is true, then the preferred size is used for\n * the alternate bounds. The top, left corner is always kept at the same\n * location.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the geometry is being udpated.\n * g - <mxGeometry> for which the alternate bounds should be updated.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.updateAlternateBounds = function(cell, geo, willCollapse)\n{\n\tif (cell != null && geo != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\n\t\tif (geo.alternateBounds == null)\n\t\t{\n\t\t\tvar bounds = geo;\n\t\t\t\n\t\t\tif (this.collapseToPreferredSize)\n\t\t\t{\n\t\t\t\tvar tmp = this.getPreferredSizeForCell(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tbounds = tmp;\n\n\t\t\t\t\tvar startSize = mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE);\n\n\t\t\t\t\tif (startSize > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbounds.height = Math.max(bounds.height, startSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tgeo.alternateBounds = new mxRectangle(0, 0, bounds.width, bounds.height);\n\t\t}\n\t\t\n\t\tif (geo.alternateBounds != null)\n\t\t{\n\t\t\tgeo.alternateBounds.x = geo.x;\n\t\t\tgeo.alternateBounds.y = geo.y;\n\t\t\t\n\t\t\tvar alpha = mxUtils.toRadians(style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar dx = geo.alternateBounds.getCenterX() - geo.getCenterX();\n\t\t\t\tvar dy = geo.alternateBounds.getCenterY() - geo.getCenterY();\n\t\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\n\t\t\t\tvar dx2 = cos * dx - sin * dy;\n\t\t\t\tvar dy2 = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tgeo.alternateBounds.x += dx2 - dx;\n\t\t\t\tgeo.alternateBounds.y += dy2 - dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: addAllEdges\n * \n * Returns an array with the given cells and all edges that are connected\n * to a cell or one of its descendants.\n */\nmxGraph.prototype.addAllEdges = function(cells)\n{\n\tvar allCells = cells.slice();\n\t\n\treturn mxUtils.removeDuplicates(allCells.concat(this.getAllEdges(cells)));\n};\n\n/**\n * Function: getAllEdges\n * \n * Returns all edges connected to the given cells or its descendants.\n */\nmxGraph.prototype.getAllEdges = function(cells)\n{\n\tvar edges = [];\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar edgeCount = this.model.getEdgeCount(cells[i]);\n\t\t\t\n\t\t\tfor (var j = 0; j < edgeCount; j++)\n\t\t\t{\n\t\t\t\tedges.push(this.model.getEdgeAt(cells[i], j));\n\t\t\t}\n\n\t\t\t// Recurses\n\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\tedges = edges.concat(this.getAllEdges(children));\n\t\t}\n\t}\n\t\n\treturn edges;\n};\n\n/**\n * Group: Cell sizing\n */\n\n/**\n * Function: updateCellSize\n * \n * Updates the size of the given cell in the model using <cellSizeUpdated>.\n * This method fires <mxEvent.UPDATE_CELL_SIZE> while the transaction is in\n * progress. Returns the cell whose size was updated.\n * \n * Parameters:\n * \n * cell - <mxCell> whose size should be updated.\n */\nmxGraph.prototype.updateCellSize = function(cell, ignoreChildren)\n{\n\tignoreChildren = (ignoreChildren != null) ? ignoreChildren : false;\n\t\n\tthis.model.beginUpdate();\t\t\t\t\n\ttry\n\t{\n\t\tthis.cellSizeUpdated(cell, ignoreChildren);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UPDATE_CELL_SIZE,\n\t\t\t\t'cell', cell, 'ignoreChildren', ignoreChildren));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellSizeUpdated\n * \n * Updates the size of the given cell in the model using\n * <getPreferredSizeForCell> to get the new size.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the size should be changed.\n */\nmxGraph.prototype.cellSizeUpdated = function(cell, ignoreChildren)\n{\n\tif (cell != null)\n\t{\n\t\tthis.model.beginUpdate();\t\t\t\t\n\t\ttry\n\t\t{\n\t\t\tvar size = this.getPreferredSizeForCell(cell);\n\t\t\tvar geo = this.model.getGeometry(cell);\n\t\t\t\n\t\t\tif (size != null && geo != null)\n\t\t\t{\n\t\t\t\tvar collapsed = this.isCellCollapsed(cell);\n\t\t\t\tgeo = geo.clone();\n\n\t\t\t\tif (this.isSwimlane(cell))\n\t\t\t\t{\n\t\t\t\t\tvar style = this.getCellStyle(cell);\n\t\t\t\t\tvar cellStyle = this.model.getStyle(cell);\n\n\t\t\t\t\tif (cellStyle == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.height + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = size.height + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.width + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = size.width + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.setStyle(cell, cellStyle);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.createState(cell);\n\t\t\t\t\tvar align = (state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER);\n\t\t\t\t\t\n\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += geo.width - size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse if (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += Math.round((geo.width - size.width) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar valign = this.getVerticalAlign(state);\n\t\t\t\t\t\n\t\t\t\t\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += geo.height - size.height;\n\t\t\t\t\t}\n\t\t\t\t\telse if (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += Math.round((geo.height - size.height) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t}\n\n\t\t\t\tif (!ignoreChildren && !collapsed)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.view.getBounds(this.model.getChildren(cell));\n\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tr = this.view.translate;\n\t\t\t\t\t\tvar scale = this.view.scale;\n\n\t\t\t\t\t\tvar width = (bounds.x + bounds.width) / scale - geo.x - tr.x;\n\t\t\t\t\t\tvar height = (bounds.y + bounds.height) / scale - geo.y - tr.y;\n\n\t\t\t\t\t\tgeo.width = Math.max(geo.width, width);\n\t\t\t\t\t\tgeo.height = Math.max(geo.height, height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.cellsResized([cell], [geo], false);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getPreferredSizeForCell\n * \n * Returns the preferred width and height of the given <mxCell> as an\n * <mxRectangle>. To implement a minimum width, add a new style eg.\n * minWidth in the vertex and override this method as follows.\n * \n * (code)\n * var graphGetPreferredSizeForCell = graph.getPreferredSizeForCell;\n * graph.getPreferredSizeForCell = function(cell)\n * {\n *   var result = graphGetPreferredSizeForCell.apply(this, arguments);\n *   var style = this.getCellStyle(cell);\n *   \n *   if (style['minWidth'] > 0)\n *   {\n *     result.width = Math.max(style['minWidth'], result.width);\n *   }\n * \n *   return result;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> for which the preferred size should be returned.\n * textWidth - Optional maximum text width for word wrapping.\n */\nmxGraph.prototype.getPreferredSizeForCell = function(cell, textWidth)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar state = this.view.createState(cell);\n\t\tvar style = state.style;\n\n\t\tif (!this.model.isEdge(cell))\n\t\t{\n\t\t\tvar fontSize = style[mxConstants.STYLE_FONTSIZE] || mxConstants.DEFAULT_FONTSIZE;\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t\t// Adds dimension of image if shape is a label\n\t\t\tif (this.getImage(state) != null || style[mxConstants.STYLE_IMAGE] != null)\n\t\t\t{\n\t\t\t\tif (style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_LABEL)\n\t\t\t\t{\n\t\t\t\t\tif (style[mxConstants.STYLE_VERTICAL_ALIGN] == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx += parseFloat(style[mxConstants.STYLE_IMAGE_WIDTH]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (style[mxConstants.STYLE_ALIGN] != mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy += parseFloat(style[mxConstants.STYLE_IMAGE_HEIGHT]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adds spacings\n\t\t\tdx += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdx += style[mxConstants.STYLE_SPACING_LEFT] || 0;\n\t\t\tdx += style[mxConstants.STYLE_SPACING_RIGHT] || 0;\n\n\t\t\tdy += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdy += style[mxConstants.STYLE_SPACING_TOP] || 0;\n\t\t\tdy += style[mxConstants.STYLE_SPACING_BOTTOM] || 0;\n\t\t\t\n\t\t\t// Add spacing for collapse/expand icon\n\t\t\t// LATER: Check alignment and use constants\n\t\t\t// for image spacing\n\t\t\tvar image = this.getFoldingImage(state);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\tdx += image.width + 8;\n\t\t\t}\n\n\t\t\t// Adds space for label\n\t\t\tvar value = this.cellRenderer.getLabelValue(state);\n\n\t\t\tif (value != null && value.length > 0)\n\t\t\t{\n\t\t\t\tif (!this.isHtmlLabel(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvalue = mxUtils.htmlEntities(value, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = value.replace(/\\n/g, '<br>');\n\t\t\t\t\n\t\t\t\tvar size = mxUtils.getSizeForString(value, fontSize,\n\t\t\t\t\tstyle[mxConstants.STYLE_FONTFAMILY], textWidth,\n\t\t\t\t\tstyle[mxConstants.STYLE_FONTSTYLE]);\n\t\t\t\tvar width = size.width + dx;\n\t\t\t\tvar height = size.height + dy;\n\t\t\t\t\n\t\t\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tvar tmp = height;\n\t\t\t\t\t\n\t\t\t\t\theight = width;\n\t\t\t\t\twidth = tmp;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (this.gridEnabled)\n\t\t\t\t{\n\t\t\t\t\twidth = this.snap(width + this.gridSize / 2);\n\t\t\t\t\theight = this.snap(height + this.gridSize / 2);\n\t\t\t\t}\n\n\t\t\t\tresult = new mxRectangle(0, 0, width, height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gs2 = 4 * this.gridSize;\n\t\t\t\tresult = new mxRectangle(0, 0, gs2, gs2);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: resizeCell\n * \n * Sets the bounds of the given cell using <resizeCells>. Returns the\n * cell which was passed to the function.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangle> that represents the new bounds.\n */\nmxGraph.prototype.resizeCell = function(cell, bounds, recurse)\n{\n\treturn this.resizeCells([cell], [bounds], recurse)[0];\n};\n\n/**\n * Function: resizeCells\n * \n * Sets the bounds of the given cells and fires a <mxEvent.RESIZE_CELLS>\n * event while the transaction is in progress. Returns the cells which\n * have been passed to the function.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n */\nmxGraph.prototype.resizeCells = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : this.isRecursiveResize();\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar prev = this.cellsResized(cells, bounds, recurse);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_CELLS,\n\t\t\t'cells', cells, 'bounds', bounds, 'previous', prev));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsResized\n * \n * Sets the bounds of the given cells and fires a <mxEvent.CELLS_RESIZED>\n * event. If <extendParents> is true, then the parent is extended if a\n * child size is changed so that it overlaps with the parent.\n * \n * The following example shows how to control group resizes to make sure\n * that all child cells stay within the group.\n * \n * (code)\n * graph.addListener(mxEvent.CELLS_RESIZED, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n *   \n *   if (cells != null)\n *   {\n *     for (var i = 0; i < cells.length; i++)\n *     {\n *       if (graph.getModel().getChildCount(cells[i]) > 0)\n *       {\n *         var geo = graph.getCellGeometry(cells[i]);\n *         \n *         if (geo != null)\n *         {\n *           var children = graph.getChildCells(cells[i], true, true);\n *           var bounds = graph.getBoundingBoxFromGeometry(children, true);\n *           \n *           geo = geo.clone();\n *           geo.width = Math.max(geo.width, bounds.width);\n *           geo.height = Math.max(geo.height, bounds.height);\n *           \n *           graph.getModel().setGeometry(cells[i], geo);\n *         }\n *       }\n *     }\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellsResized = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\tvar prev = [];\n\n\tif (cells != null && bounds != null && cells.length == bounds.length)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tprev.push(this.cellResized(cells[i], bounds[i], false, recurse));\n\n\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnResize)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_RESIZED,\n\t\t\t\t'cells', cells, 'bounds', bounds, 'previous', prev));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn prev;\n};\n\n/**\n * Function: cellResized\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangles> that represent the new bounds.\n * ignoreRelative - Boolean that indicates if relative cells should be ignored.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellResized = function(cell, bounds, ignoreRelative, recurse)\n{\n\tvar prev = this.model.getGeometry(cell);\n\n\tif (prev != null && (prev.x != bounds.x || prev.y != bounds.y ||\n\t\tprev.width != bounds.width || prev.height != bounds.height))\n\t{\n\t\tvar geo = prev.clone();\n\n\t\tif (!ignoreRelative && geo.relative)\n\t\t{\n\t\t\tvar offset = geo.offset;\n\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\toffset.x += bounds.x - geo.x;\n\t\t\t\toffset.y += bounds.y - geo.y;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.x = bounds.x;\n\t\t\tgeo.y = bounds.y;\n\t\t}\n\n\t\tgeo.width = bounds.width;\n\t\tgeo.height = bounds.height;\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (recurse)\n\t\t\t{\n\t\t\t\tthis.resizeChildCells(cell, geo);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\tthis.constrainChildCells(cell);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn prev;\n};\n\n/**\n * Function: resizeChildCells\n * \n * Resizes the child cells of the given cell for the given new geometry with\n * respect to the current geometry of the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n * newGeo - <mxGeometry> that represents the new bounds.\n */\nmxGraph.prototype.resizeChildCells = function(cell, newGeo)\n{\n\tvar geo = this.model.getGeometry(cell);\n\tvar dx = (geo.width != 0) ? newGeo.width / geo.width : 1;\n\tvar dy = (geo.height != 0) ? newGeo.height / geo.height : 1;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.scaleCell(this.model.getChildAt(cell, i), dx, dy, true);\n\t}\n};\n\n/**\n * Function: constrainChildCells\n * \n * Constrains the children of the given cell using <constrainChild>.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.constrainChildCells = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.constrainChild(this.model.getChildAt(cell, i));\n\t}\n};\n\n/**\n * Function: scaleCell\n * \n * Scales the points, position and size of the given cell according to the\n * given vertical and horizontal scaling factors.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be scaled.\n * dx - Horizontal scaling factor.\n * dy - Vertical scaling factor.\n * recurse - Boolean indicating if the child cells should be scaled.\n */\nmxGraph.prototype.scaleCell = function(cell, dx, dy, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\t\tgeo = geo.clone();\n\t\t\n\t\t// Stores values for restoring based on style\n\t\tvar x = geo.x;\n\t\tvar y = geo.y\n\t\tvar w = geo.width;\n\t\tvar h = geo.height;\n\t\t\n\t\tgeo.scale(dx, dy, style[mxConstants.STYLE_ASPECT] == 'fixed');\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_WIDTH] == '1')\n\t\t{\n\t\t\tgeo.width = w * dx;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_WIDTH] == '0')\n\t\t{\n\t\t\tgeo.width = w;\n\t\t}\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_HEIGHT] == '1')\n\t\t{\n\t\t\tgeo.height = h * dy;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_HEIGHT] == '0')\n\t\t{\n\t\t\tgeo.height = h;\n\t\t}\n\t\t\n\t\tif (!this.isCellMovable(cell))\n\t\t{\n\t\t\tgeo.x = x;\n\t\t\tgeo.y = y;\n\t\t}\n\t\t\n\t\tif (!this.isCellResizable(cell))\n\t\t{\n\t\t\tgeo.width = w;\n\t\t\tgeo.height = h;\n\t\t}\n\n\t\tif (this.model.isVertex(cell))\n\t\t{\n\t\t\tthis.cellResized(cell, geo, true, recurse);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendParent\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.extendParent = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\tvar p = this.getCellGeometry(parent);\n\t\t\n\t\tif (parent != null && p != null && !this.isCellCollapsed(parent))\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative &&\n\t\t\t\t(p.width < geo.x + geo.width ||\n\t\t\t\tp.height < geo.y + geo.height))\n\t\t\t{\n\t\t\t\tp = p.clone();\n\t\t\t\t\n\t\t\t\tp.width = Math.max(p.width, geo.x + geo.width);\n\t\t\t\tp.height = Math.max(p.height, geo.y + geo.height);\n\t\t\t\t\n\t\t\t\tthis.cellsResized([parent], [p], false);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Cell moving\n */\n\n/**\n * Function: importCells\n * \n * Clones and inserts the given cells into the graph using the move\n * method and returns the inserted cells. This shortcut is used if\n * cells are inserted via datatransfer.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be imported.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.importCells = function(cells, dx, dy, target, evt, mapping)\n{\t\n\treturn this.moveCells(cells, dx, dy, true, target, evt, mapping);\n};\n\n/**\n * Function: moveCells\n * \n * Moves or clones the specified cells and moves the cells or clones by the\n * given amount, adding them to the optional target cell. The evt is the\n * mouse event as the mouse was released. The change is carried out using\n * <cellsMoved>. This method fires <mxEvent.MOVE_CELLS> while the\n * transaction is in progress. Returns the cells that were moved.\n * \n * Use the following code to move all cells in the graph.\n * \n * (code)\n * graph.moveCells(graph.getChildCells(null, true, true), 10, 10);\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be moved, cloned or added to the target.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * clone - Boolean indicating if the cells should be cloned. Default is false.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.moveCells = function(cells, dx, dy, clone, target, evt, mapping)\n{\n\tdx = (dx != null) ? dx : 0;\n\tdy = (dy != null) ? dy : 0;\n\tclone = (clone != null) ? clone : false;\n\t\n\tif (cells != null && (dx != 0 || dy != 0 || clone || target != null))\n\t{\n\t\t// Removes descendants with ancestors in cells to avoid multiple moving\n\t\tcells = this.model.getTopmostCells(cells);\n\t\tvar origCells = cells;\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Faster cell lookups to remove relative edge labels with selected\n\t\t\t// terminals to avoid explicit and implicit move at same time\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tvar isSelected = mxUtils.bind(this, function(cell)\n\t\t\t{\n\t\t\t\twhile (cell != null)\n\t\t\t\t{\n\t\t\t\t\tif (dict.get(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcell = this.model.getParent(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\t\n\t\t\t// Removes relative edge labels with selected terminals\n\t\t\tvar checked = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\n\t\t\t\tif ((geo == null || !geo.relative) || !this.model.isEdge(parent) ||\n\t\t\t\t\t(!isSelected(this.model.getTerminal(parent, true)) &&\n\t\t\t\t\t!isSelected(this.model.getTerminal(parent, false))))\n\t\t\t\t{\n\t\t\t\t\tchecked.push(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcells = checked;\n\t\t\t\n\t\t\tif (clone)\n\t\t\t{\n\t\t\t\tcells = this.cloneCells(cells, this.isCloneInvalidEdges(), mapping);\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\ttarget = this.getDefaultParent();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t// to avoid forward references in sessions.\n\t\t\t// Need to disable allowNegativeCoordinates if target not null to\n\t\t\t// allow for temporary negative numbers until cellsAdded is called.\n\t\t\tvar previous = this.isAllowNegativeCoordinates();\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tthis.setAllowNegativeCoordinates(true);\n\t\t\t}\n\t\t\t\n\t\t\tthis.cellsMoved(cells, dx, dy, !clone && this.isDisconnectOnMove()\n\t\t\t\t\t&& this.isAllowDanglingEdges(), target == null,\n\t\t\t\t\tthis.isExtendParentsOnMove() && target == null);\n\t\t\t\n\t\t\tthis.setAllowNegativeCoordinates(previous);\n\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tvar index = this.model.getChildCount(target);\n\t\t\t\tthis.cellsAdded(cells, target, index, null, null, true);\n\t\t\t\t\n\t\t\t\t// Restores parent edge on cloned edge labels\n\t\t\t\tif (clone)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\t\tvar parent = this.model.getParent(origCells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null && geo.relative &&\n\t\t\t\t\t\t\tthis.model.isEdge(parent) &&\n\t\t\t\t\t\t\tthis.model.contains(parent))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.model.add(parent, cells[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Dispatches a move event\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_CELLS, 'cells', cells,\n\t\t\t\t'dx', dx, 'dy', dy, 'clone', clone, 'target', target, 'event', evt));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsMoved\n * \n * Moves the specified cells by the given vector, disconnecting the cells\n * using disconnectGraph is disconnect is true. This method fires\n * <mxEvent.CELLS_MOVED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsMoved = function(cells, dx, dy, disconnect, constrain, extend)\n{\n\tif (cells != null && (dx != 0 || dy != 0))\n\t{\n\t\textend = (extend != null) ? extend : false;\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (disconnect)\n\t\t\t{\n\t\t\t\tthis.disconnectGraph(cells);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.translateCell(cells[i], dx, dy);\n\t\t\t\t\n\t\t\t\tif (extend && this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\telse if (constrain)\n\t\t\t\t{\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnMove)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_MOVED,\n\t\t\t\t'cells', cells, 'dx', dx, 'dy', dy, 'disconnect', disconnect));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: translateCell\n * \n * Translates the geometry of the given cell and stores the new,\n * translated geometry in the model as an atomic change.\n */\nmxGraph.prototype.translateCell = function(cell, dx, dy)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null)\n\t{\n\t\tdx = parseFloat(dx);\n\t\tdy = parseFloat(dy);\n\t\tgeo = geo.clone();\n\t\tgeo.translate(dx, dy);\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, parseFloat(geo.x));\n\t\t\tgeo.y = Math.max(0, parseFloat(geo.y));\n\t\t}\n\t\t\n\t\tif (geo.relative && !this.model.isEdge(cell))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar angle = 0;\n\t\t\t\n\t\t\tif (this.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar style = this.getCurrentCellStyle(parent);\n\t\t\t\tangle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (angle != 0)\n\t\t\t{\n\t\t\t\tvar rad = mxUtils.toRadians(-angle);\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(dx, dy), cos, sin, new mxPoint(0, 0));\n\t\t\t\tdx = pt.x;\n\t\t\t\tdy = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x = parseFloat(geo.offset.x) + dx;\n\t\t\t\tgeo.offset.y = parseFloat(geo.offset.y) + dy;\n\t\t\t}\n\t\t}\n\n\t\tthis.model.setGeometry(cell, geo);\n\t}\n};\n\n/**\n * Function: getCellContainmentArea\n * \n * Returns the <mxRectangle> inside which a cell is to be kept.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the area should be returned.\n */\nmxGraph.prototype.getCellContainmentArea = function(cell)\n{\n\tif (cell != null && !this.model.isEdge(cell))\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\t\n\t\tif (parent != null && parent != this.getDefaultParent())\n\t\t{\n\t\t\tvar g = this.model.getGeometry(parent);\n\t\t\t\n\t\t\tif (g != null)\n\t\t\t{\n\t\t\t\tvar x = 0;\n\t\t\t\tvar y = 0;\n\t\t\t\tvar w = g.width;\n\t\t\t\tvar h = g.height;\n\t\t\t\t\n\t\t\t\tif (this.isSwimlane(parent))\n\t\t\t\t{\n\t\t\t\t\tvar size = this.getStartSize(parent);\n\t\t\t\t\tvar style = this.getCurrentCellStyle(parent);\n\t\t\t\t\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\t\t\t\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_SOUTH || dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = size.width;\n\t\t\t\t\t\tsize.width = size.height;\n\t\t\t\t\t\tsize.height = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((dir == mxConstants.DIRECTION_EAST && !flipV) || (dir == mxConstants.DIRECTION_NORTH && !flipH) ||\n\t\t\t\t\t\t(dir == mxConstants.DIRECTION_WEST && flipV) || (dir == mxConstants.DIRECTION_SOUTH && flipH))\n\t\t\t\t\t{\n\t\t\t\t\t\tx = size.width;\n\t\t\t\t\t\ty = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tw -= size.width;\n\t\t\t\t\th -= size.height;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxRectangle(x, y, w, h);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getMaximumGraphBounds\n * \n * Returns the bounds inside which the diagram should be kept as an\n * <mxRectangle>.\n */\nmxGraph.prototype.getMaximumGraphBounds = function()\n{\n\treturn this.maximumGraphBounds;\n};\n\n/**\n * Function: constrainChild\n * \n * Keeps the given cell inside the bounds returned by\n * <getCellContainmentArea> for its parent, according to the rules defined by\n * <getOverlap> and <isConstrainChild>. This modifies the cell's geometry\n * in-place and does not clone it.\n * \n * Parameters:\n * \n * cells - <mxCell> which should be constrained.\n * sizeFirst - Specifies if the size should be changed first. Default is true.\n */\nmxGraph.prototype.constrainChild = function(cell, sizeFirst)\n{\n\tsizeFirst = (sizeFirst != null) ? sizeFirst : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvar geo = this.getCellGeometry(cell);\n\t\t\n\t\tif (geo != null && (this.isConstrainRelativeChildren() || !geo.relative))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar pgeo = this.getCellGeometry(parent);\n\t\t\tvar max = this.getMaximumGraphBounds();\n\t\t\t\n\t\t\t// Finds parent offset\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar off = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\n\t\t\t\t\tmax.x -= off.x;\n\t\t\t\t\tmax.y -= off.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isConstrainChild(cell))\n\t\t\t{\n\t\t\t\tvar tmp = this.getCellContainmentArea(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tvar overlap = this.getOverlap(cell);\n\t\n\t\t\t\t\tif (overlap > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\t\n\t\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Find the intersection between max and tmp\n\t\t\t\t\tif (max == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar cells = [cell];\n\t\t\t\t\n\t\t\t\tif (!this.isCellCollapsed(cell))\n\t\t\t\t{\n\t\t\t\t\tvar desc = this.model.getDescendants(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < desc.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellVisible(desc[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcells.push(desc[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bbox = this.getBoundingBoxFromGeometry(cells, false);\n\t\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative horizontal movement\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.width > max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = geo.width - max.width;\n\t\t\t\t\t\tgeo.width -= dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x + bbox.width > max.x + max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x + bbox.width - max.x - max.width - dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative vertical movement\n\t\t\t\t\tvar dy = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.height > max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = geo.height - max.height;\n\t\t\t\t\t\tgeo.height -= dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y + bbox.height > max.y + max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y + bbox.height - max.y - max.height - dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x < max.x)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x - max.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y < max.y)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y - max.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Relative geometries are moved via absolute offset\n\t\t\t\t\t\t\tif (geo.offset == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.offset = new mxPoint();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tgeo.offset.x += dx;\n\t\t\t\t\t\t\tgeo.offset.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x += dx;\n\t\t\t\t\t\t\tgeo.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdges\n * \n * Resets the control points of the edges that are connected to the given\n * cells if not both ends of the edge are in the given cells array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> for which the connected edges should be\n * reset.\n */\nmxGraph.prototype.resetEdges = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\t// Prepares faster cells lookup\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar edges = this.model.getEdges(cells[i]);\n\t\t\t\t\n\t\t\t\tif (edges != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(edges[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[j], true);\n\t\t\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[j], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if one of the terminals is not in the given array\n\t\t\t\t\t\tif (!dict.get(source) || !dict.get(target))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.resetEdge(edges[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.resetEdges(this.model.getChildren(cells[i]));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdge\n * \n * Resets the control points of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose points should be reset.\n */\nmxGraph.prototype.resetEdge = function(edge)\n{\n\tvar geo = this.model.getGeometry(edge);\n\t\n\t// Resets the control points\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tgeo = geo.clone();\n\t\tgeo.points = [];\n\t\tthis.model.setGeometry(edge, geo);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Group: Cell connecting and connection constraints\n */\n\n/**\n * Function: getOutlineConstraint\n * \n * Returns the constraint used to connect to the outline of the given state.\n */\nmxGraph.prototype.getOutlineConstraint = function(point, terminalState, me)\n{\n\tif (terminalState.shape != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(terminalState);\n\t\tvar direction = terminalState.style[mxConstants.STYLE_DIRECTION];\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tbounds.x += bounds.width / 2 - bounds.height / 2;\n\t\t\tbounds.y += bounds.height / 2 - bounds.width / 2;\n\t\t\tvar tmp = bounds.width;\n\t\t\tbounds.width = bounds.height;\n\t\t\tbounds.height = tmp;\n\t\t}\n\t\n\t\tvar alpha = mxUtils.toRadians(terminalState.shape.getShapeRotation());\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(-alpha);\n\t\t\tvar sin = Math.sin(-alpha);\n\t\n\t\t\tvar ct = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\t\tpoint = mxUtils.getRotatedPoint(point, cos, sin, ct);\n\t\t}\n\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\t// LATER: Add flipping support for image shapes\n\t\tif (this.getModel().isVertex(terminalState.cell))\n\t\t{\n\t\t\tvar flipH = terminalState.style[mxConstants.STYLE_FLIPH];\n\t\t\tvar flipV = terminalState.style[mxConstants.STYLE_FLIPV];\n\t\t\t\n\t\t\t// Legacy support for stencilFlipH/V\n\t\t\tif (terminalState.shape != null && terminalState.shape.stencil != null)\n\t\t\t{\n\t\t\t\tflipH = mxUtils.getValue(terminalState.style, 'stencilFlipH', 0) == 1 || flipH;\n\t\t\t\tflipV = mxUtils.getValue(terminalState.style, 'stencilFlipV', 0) == 1 || flipV;\n\t\t\t}\n\t\t\t\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tvar tmp = flipH;\n\t\t\t\tflipH = flipV;\n\t\t\t\tflipV = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipH)\n\t\t\t{\n\t\t\t\tsx = -1;\n\t\t\t\tdx = -bounds.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipV)\n\t\t\t{\n\t\t\t\tsy = -1;\n\t\t\t\tdy = -bounds.height ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpoint = new mxPoint((point.x - bounds.x) * sx - dx + bounds.x, (point.y - bounds.y) * sy - dy + bounds.y);\n\t\t\n\t\tvar x = (bounds.width == 0) ? 0 : Math.round((point.x - bounds.x) * 1000 / bounds.width) / 1000;\n\t\tvar y = (bounds.height == 0) ? 0 : Math.round((point.y - bounds.y) * 1000 / bounds.height) / 1000;\n\t\t\n\t\treturn new mxConnectionConstraint(new mxPoint(x, y), false);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getAllConnectionConstraints\n * \n * Returns an array of all <mxConnectionConstraints> for the given terminal. If\n * the shape of the given terminal is a <mxStencilShape> then the constraints\n * of the corresponding <mxStencil> are returned.\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the terminal is the source or target.\n */\nmxGraph.prototype.getAllConnectionConstraints = function(terminal, source)\n{\n\tif (terminal != null && terminal.shape != null && terminal.shape.stencil != null)\n\t{\n\t\treturn terminal.shape.stencil.constraints;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getConnectionConstraint\n * \n * Returns an <mxConnectionConstraint> that describes the given connection\n * point. This result can then be passed to <getConnectionPoint>.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n */\nmxGraph.prototype.getConnectionConstraint = function(edge, terminal, source)\n{\n\tvar point = null;\n\tvar x = edge.style[(source) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\n\tif (x != null)\n\t{\n\t\tvar y = edge.style[(source) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t\n\t\tif (y != null)\n\t\t{\n\t\t\tpoint = new mxPoint(parseFloat(x), parseFloat(y));\n\t\t}\n\t}\n\t\n\tvar perimeter = false;\n\tvar dx = 0, dy = 0;\n\t\n\tif (point != null)\n\t{\n\t\tperimeter = mxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, true);\n\n\t\t//Add entry/exit offset\n\t\tdx = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DX : mxConstants.STYLE_ENTRY_DX]);\n\t\tdy = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DY : mxConstants.STYLE_ENTRY_DY]);\n\t\t\n\t\tdx = isFinite(dx)? dx : 0;\n\t\tdy = isFinite(dy)? dy : 0;\n\t}\n\n\treturn new mxConnectionConstraint(point, perimeter, null, dx, dy);\n};\n\n/**\n * Function: setConnectionConstraint\n * \n * Sets the <mxConnectionConstraint> that describes the given connection point.\n * If no constraint is given then nothing is changed. To remove an existing\n * constraint from the given edge, use an empty constraint instead.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * terminal - <mxCell> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.setConnectionConstraint = function(edge, terminal, source, constraint)\n{\n\tif (constraint != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tif (constraint == null || constraint.point == null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t}\n\t\t\telse if (constraint.point != null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, constraint.point.x, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, constraint.point.y, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, constraint.dx, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, constraint.dy, [edge]);\n\t\t\t\t\n\t\t\t\t// Only writes 0 since 1 is default\n\t\t\t\tif (!constraint.perimeter)\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, '0', [edge]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getConnectionPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * vertex - <mxCellState> that represents the vertex.\n * constraint - <mxConnectionConstraint> that represents the connection point\n * constraint as returned by <getConnectionConstraint>.\n */\nmxGraph.prototype.getConnectionPoint = function(vertex, constraint, round)\n{\n\tround = (round != null) ? round : true;\n\tvar point = null;\n\t\n\tif (vertex != null && constraint.point != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(vertex);\n        var cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\tvar direction = vertex.style[mxConstants.STYLE_DIRECTION];\n\t\tvar r1 = 0;\n\t\t\n\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\tif (direction != null && mxUtils.getValue(vertex.style,\n\t\t\tmxConstants.STYLE_ANCHOR_POINT_DIRECTION, 1) == 1)\n\t\t{\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t{\n\t\t\t\tr1 += 270;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t{\n\t\t\t\tr1 += 180;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tr1 += 90;\n\t\t\t}\n\n\t\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tbounds.rotate90();\n\t\t\t}\n\t\t}\n\n\t\tvar scale = this.view.scale;\n\t\tpoint = new mxPoint(bounds.x + constraint.point.x * bounds.width + constraint.dx * scale,\n\t\t\t\tbounds.y + constraint.point.y * bounds.height + constraint.dy * scale);\n\t\t\n\t\t// Rotation for direction before projection on perimeter\n\t\tvar r2 = vertex.style[mxConstants.STYLE_ROTATION] || 0;\n\t\t\n\t\tif (constraint.perimeter)\n\t\t{\n\t\t\tif (r1 != 0)\n\t\t\t{\n\t\t\t\t// Only 90 degrees steps possible here so no trig needed\n\t\t\t\tvar cos = 0;\n\t\t\t\tvar sin = 0;\n\t\t\t\t\n\t\t\t\tif (r1 == 90)\n\t\t\t\t{\n\t\t\t\t\tsin = 1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 180)\n\t\t\t\t{\n\t\t\t\t\tcos = -1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 270)\n\t\t\t\t{\n\t\t\t\t\tsin = -1;\n\t\t\t\t}\n\t\t\t\t\n\t\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t\t}\n\t\n\t\t\tpoint = this.view.getPerimeterPoint(vertex, point, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr2 += r1;\n\t\t\t\n\t\t\tif (this.getModel().isVertex(vertex.cell))\n\t\t\t{\n\t\t\t\tvar flipH = vertex.style[mxConstants.STYLE_FLIPH] == 1;\n\t\t\t\tvar flipV = vertex.style[mxConstants.STYLE_FLIPV] == 1;\n\t\t\t\t\n\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\tif (vertex.shape != null && vertex.shape.stencil != null)\n\t\t\t\t{\n\t\t\t\t\tflipH = (mxUtils.getValue(vertex.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\tflipV = (mxUtils.getValue(vertex.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tvar temp = flipH;\n\t\t\t\t\tflipH = flipV\n\t\t\t\t\tflipV = temp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipH)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipV)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Generic rotation after projection on perimeter\n\t\tif (r2 != 0 && point != null)\n\t\t{\n\t        var rad = mxUtils.toRadians(r2);\n\t        var cos = Math.cos(rad);\n\t        var sin = Math.sin(rad);\n\t        \n\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t}\n\t}\n\t\n\tif (round && point != null)\n\t{\n\t\tpoint.x = Math.round(point.x);\n\t\tpoint.y = Math.round(point.y);\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: connectCell\n * \n * Connects the specified end of the given edge to the given terminal\n * using <cellConnected> and fires <mxEvent.CONNECT_CELL> while the\n * transaction is in progress. Returns the updated edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.connectCell = function(edge, terminal, source, constraint)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar previous = this.model.getTerminal(edge, source);\n\t\tthis.cellConnected(edge, terminal, source, constraint);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT_CELL,\n\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t'previous', previous));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: cellConnected\n * \n * Sets the new terminal for the given edge and resets the edge points if\n * <resetEdgesOnConnect> is true. This method fires\n * <mxEvent.CELL_CONNECTED> while the transaction is in progress.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - <mxConnectionConstraint> to be used for this connection.\n */\nmxGraph.prototype.cellConnected = function(edge, terminal, source, constraint)\n{\n\tif (edge != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar previous = this.model.getTerminal(edge, source);\n\n\t\t\t// Updates the constraint\n\t\t\tthis.setConnectionConstraint(edge, terminal, source, constraint);\n\t\t\t\n\t\t\t// Checks if the new terminal is a port, uses the ID of the port in the\n\t\t\t// style and the parent of the port as the actual terminal of the edge.\n\t\t\tif (this.isPortsEnabled())\n\t\t\t{\n\t\t\t\tvar id = null;\n\t\n\t\t\t\tif (this.isPort(terminal))\n\t\t\t\t{\n\t\t\t\t\tid = terminal.getId();\n\t\t\t\t\tterminal = this.getTerminalForPort(terminal, source);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Sets or resets all previous information for connecting to a child port\n\t\t\t\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\t\t\t\tmxConstants.STYLE_TARGET_PORT;\n\t\t\t\tthis.setCellStyles(key, id, [edge]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.model.setTerminal(edge, terminal, source);\n\t\t\t\n\t\t\tif (this.resetEdgesOnConnect)\n\t\t\t{\n\t\t\t\tthis.resetEdge(edge);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELL_CONNECTED,\n\t\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t\t'previous', previous));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: disconnectGraph\n * \n * Disconnects the given edges from the terminals which are not in the\n * given array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be disconnected.\n */\nmxGraph.prototype.disconnectGraph = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\t\t\t\t\t\t\t\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar tr = this.view.translate;\n\t\t\t\n\t\t\t// Fast lookup for finding cells in array\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(\n\t\t\t\t\t\t\tthis.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null &&\n\t\t\t\t\t\t\tpstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar dx = -pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = -pstate.origin.y;\n\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\n\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (src != null && this.isCellDisconnectable(cells[i], src, true))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (src == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - tr.y + dy), true);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (trg != null && this.isCellDisconnectable(cells[i], trg, false))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (trg == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y + dy), false);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Drilldown\n */\n\n/**\n * Function: getCurrentRoot\n * \n * Returns the current root of the displayed cell hierarchy. This is a\n * shortcut to <mxGraphView.currentRoot> in <view>.\n */\nmxGraph.prototype.getCurrentRoot = function()\n{\n\treturn this.view.currentRoot;\n};\n \n/**\n * Function: getTranslateForRoot\n * \n * Returns the translation to be used if the given cell is the root cell as\n * an <mxPoint>. This implementation returns null.\n * \n * Example:\n * \n * To keep the children at their absolute position while stepping into groups,\n * this function can be overridden as follows.\n * \n * (code)\n * var offset = new mxPoint(0, 0);\n * \n * while (cell != null)\n * {\n *   var geo = this.model.getGeometry(cell);\n * \n *   if (geo != null)\n *   {\n *     offset.x -= geo.x;\n *     offset.y -= geo.y;\n *   }\n * \n *   cell = this.model.getParent(cell);\n * }\n * \n * return offset;\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the root.\n */\nmxGraph.prototype.getTranslateForRoot = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, the cell returned by getTerminalForPort should be used as the\n * terminal and the port should be referenced by the ID in either the\n * mxConstants.STYLE_SOURCE_PORT or the or the\n * mxConstants.STYLE_TARGET_PORT. Note that a port should not be movable.\n * This implementation always returns false.\n * \n * A typical implementation is the following:\n * \n * (code)\n * graph.isPort = function(cell)\n * {\n *   var geo = this.getCellGeometry(cell);\n *   \n *   return (geo != null) ? geo.relative : false;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxGraph.prototype.isPort = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getTerminalForPort\n * \n * Returns the terminal to be used for a given port. This implementation\n * always returns the parent cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n * source - If the cell is the source or target port.\n */\nmxGraph.prototype.getTerminalForPort = function(cell, source)\n{\n\treturn this.model.getParent(cell);\n};\n\n/**\n * Function: getChildOffsetForCell\n * \n * Returns the offset to be used for the cells inside the given cell. The\n * root and layer cells may be identified using <mxGraphModel.isRoot> and\n * <mxGraphModel.isLayer>. For all other current roots, the\n * <mxGraphView.currentRoot> field points to the respective cell, so that\n * the following holds: cell == this.view.currentRoot. This implementation\n * returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose offset should be returned.\n */\nmxGraph.prototype.getChildOffsetForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: enterGroup\n * \n * Uses the given cell as the root of the displayed cell hierarchy. If no\n * cell is specified then the selection cell is used. The cell is only used\n * if <isValidRoot> returns true.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the new root. Default is the\n * selection cell.\n */\nmxGraph.prototype.enterGroup = function(cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\tif (cell != null && this.isValidRoot(cell))\n\t{\n\t\tthis.view.setCurrentRoot(cell);\n\t\tthis.clearSelection();\n\t}\n};\n\n/**\n * Function: exitGroup\n * \n * Changes the current root to the next valid root in the displayed cell\n * hierarchy.\n */\nmxGraph.prototype.exitGroup = function()\n{\n\tvar root = this.model.getRoot();\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tvar next = this.model.getParent(current);\n\t\t\n\t\t// Finds the next valid root in the hierarchy\n\t\twhile (next != root && !this.isValidRoot(next) &&\n\t\t\t\tthis.model.getParent(next) != root)\n\t\t{\n\t\t\tnext = this.model.getParent(next);\n\t\t}\n\t\t\n\t\t// Clears the current root if the new root is\n\t\t// the model's root or one of the layers.\n\t\tif (next == root || this.model.getParent(next) == root)\n\t\t{\n\t\t\tthis.view.setCurrentRoot(null);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.view.setCurrentRoot(next);\n\t\t}\n\t\t\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\t// Selects the previous root in the graph\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: home\n * \n * Uses the root of the model as the root of the displayed cell hierarchy\n * and selects the previous root.\n */\nmxGraph.prototype.home = function()\n{\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tthis.view.setCurrentRoot(null);\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: isValidRoot\n * \n * Returns true if the given cell is a valid root for the cell display\n * hierarchy. This implementation returns true for all non-null values.\n * \n * Parameters:\n * \n * cell - <mxCell> which should be checked as a possible root.\n */\nmxGraph.prototype.isValidRoot = function(cell)\n{\n\treturn (cell != null);\n};\n\n/**\n * Group: Graph display\n */\n \n/**\n * Function: getGraphBounds\n * \n * Returns the bounds of the visible graph. Shortcut to\n * <mxGraphView.getGraphBounds>. See also: <getBoundingBoxFromGeometry>.\n */\n mxGraph.prototype.getGraphBounds = function()\n {\n \treturn this.view.getGraphBounds();\n };\n\n/**\n * Function: getCellBounds\n * \n * Returns the scaled, translated bounds for the given cell. See\n * <mxGraphView.getBounds> for arrays.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be returned.\n * includeEdge - Optional boolean that specifies if the bounds of\n * the connected edges should be included. Default is false.\n * includeDescendants - Optional boolean that specifies if the bounds\n * of all descendants should be included. Default is false.\n */\nmxGraph.prototype.getCellBounds = function(cell, includeEdges, includeDescendants)\n{\n\tvar cells = [cell];\n\t\n\t// Includes all connected edges\n\tif (includeEdges)\n\t{\n\t\tcells = cells.concat(this.model.getEdges(cell));\n\t}\n\t\n\tvar result = this.view.getBounds(cells);\n\t\n\t// Recursively includes the bounds of the children\n\tif (includeDescendants)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar tmp = this.getCellBounds(this.model.getChildAt(cell, i),\n\t\t\t\tincludeEdges, true);\n\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\tresult.add(tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getBoundingBoxFromGeometry\n * \n * Returns the bounding box for the geometries of the vertices in the\n * given array of cells. This can be used to find the graph bounds during\n * a layout operation (ie. before the last endUpdate) as follows:\n * \n * (code)\n * var cells = graph.getChildCells(graph.getDefaultParent(), true, true);\n * var bounds = graph.getBoundingBoxFromGeometry(cells, true);\n * (end)\n * \n * This can then be used to move cells to the origin:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.moveCells(cells, -Math.min(bounds.x, 0), -Math.min(bounds.y, 0))\n * }\n * (end)\n * \n * Or to translate the graph view:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.view.setTranslate(-Math.min(bounds.x, 0), -Math.min(bounds.y, 0));\n * }\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be returned.\n * includeEdges - Specifies if edge bounds should be included by computing\n * the bounding box for all points in geometry. Default is false.\n */\nmxGraph.prototype.getBoundingBoxFromGeometry = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : false;\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (includeEdges || this.model.isVertex(cells[i]))\n\t\t\t{\n\t\t\t\t// Computes the bounding box for the points in the geometry\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = null;\n\t\t\t\t\t\n\t\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar addPoint = function(pt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (pt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (tmp == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp = new mxRectangle(pt.x, pt.y, 0, 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.add(new mxRectangle(pt.x, pt.y, 0, 0));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], true) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(true));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], false) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(false));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tvar pts = geo.points;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pts != null && pts.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = new mxRectangle(pts[0].x, pts[0].y, 0, 0);\n\n\t\t\t\t\t\t\tfor (var j = 1; j < pts.length; j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taddPoint(pts[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbbox = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && parent != this.view.currentRoot)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox = new mxRectangle(geo.x * tmp.width, geo.y * tmp.height, geo.width, geo.height);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox = mxRectangle.fromRectangle(geo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null && geo.offset != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox.x += geo.offset.x;\n\t\t\t\t\t\t\tbbox.y += geo.offset.y;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar style = this.getCurrentCellStyle(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar angle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (angle != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, angle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: refresh\n * \n * Clears all cell states or the states for the hierarchy starting at the\n * given cell and validates the graph. This fires a refresh event as the\n * last step.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the cell states should be cleared.\n */\nmxGraph.prototype.refresh = function(cell)\n{\n\tthis.view.clear(cell, cell == null);\n\tthis.view.validate();\n\tthis.sizeDidChange();\n\tthis.fireEvent(new mxEventObject(mxEvent.REFRESH));\n};\n\n/**\n * Function: snap\n * \n * Snaps the given numeric value to the grid if <gridEnabled> is true.\n * \n * Parameters:\n * \n * value - Numeric value to be snapped to the grid.\n */\nmxGraph.prototype.snap = function(value)\n{\n\tif (this.gridEnabled)\n\t{\n\t\tvalue = Math.round(value / this.gridSize ) * this.gridSize;\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: snapDelta\n * \n * Snaps the given delta with the given scaled bounds.\n */\nmxGraph.prototype.snapDelta = function(delta, bounds, ignoreGrid, ignoreHorizontal, ignoreVertical)\n{\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\t\n\tif (!ignoreGrid && this.gridEnabled)\n\t{\n\t\tvar tol = this.gridSize * s * 0.5;\n\t\t\n\t\tif (!ignoreHorizontal)\n\t\t{\n\t\t\tvar tx = bounds.x - (this.snap(bounds.x / s - t.x) + t.x) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.x- tx) < tol)\n\t\t\t{\n\t\t\t\tdelta.x = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.x = this.snap(delta.x / s) * s - tx;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ignoreVertical)\n\t\t{\n\t\t\tvar ty = bounds.y - (this.snap(bounds.y / s - t.y) + t.y) * s;\n\t\t\t\t\n\t\t\tif (Math.abs(delta.y - ty) < tol)\n\t\t\t{\n\t\t\t\tdelta.y = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.y = this.snap(delta.y / s) * s - ty;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tol = 0.5 * s;\n\t\t\n\t\tif (!ignoreHorizontal)\n\t\t{\n\t\t\tvar tx = bounds.x - (Math.round(bounds.x / s - t.x) + t.x) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.x - tx) < tol)\n\t\t\t{\n\t\t\t\tdelta.x = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.x = Math.round(delta.x / s) * s - tx;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ignoreVertical)\n\t\t{\t\t\n\t\t\tvar ty = bounds.y - (Math.round(bounds.y / s - t.y) + t.y) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.y - ty) < tol)\n\t\t\t{\n\t\t\t\tdelta.y = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.y = Math.round(delta.y / s) * s - ty;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: panGraph\n * \n * Shifts the graph display by the given amount. This is used to preview\n * panning operations, use <mxGraphView.setTranslate> to set a persistent\n * translation of the view. Fires <mxEvent.PAN>.\n * \n * Parameters:\n * \n * dx - Amount to shift the graph along the x-axis.\n * dy - Amount to shift the graph along the y-axis.\n */\nmxGraph.prototype.panGraph = function(dx, dy)\n{\n\tif (this.useScrollbarsForPanning && mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.container.scrollLeft = -dx;\n\t\tthis.container.scrollTop = -dy;\n\t}\n\telse\n\t{\n\t\tvar canvas = this.view.getCanvas();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\t// Puts everything inside the container in a DIV so that it\n\t\t\t// can be moved without changing the state of the container\n\t\t\tif (dx == 0 && dy == 0)\n\t\t\t{\n\t\t\t\t// Workaround for ignored removeAttribute on SVG element in IE9 standards\n\t\t\t\tif (mxClient.IS_IE)\n\t\t\t\t{\n\t\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.removeAttribute('transform');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 != null)\n\t\t\t\t{\n\t\t\t\t\tvar child = this.shiftPreview1.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview1.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview1.parentNode.removeChild(this.shiftPreview1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview1 = null;\n\t\t\t\t\t\n\t\t\t\t\tthis.container.appendChild(canvas.parentNode);\n\t\t\t\t\t\n\t\t\t\t\tchild = this.shiftPreview2.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview2.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview2.parentNode.removeChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 == null)\n\t\t\t\t{\n\t\t\t\t\t// Needs two divs for stuff before and after the SVG element\n\t\t\t\t\tthis.shiftPreview1 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview1.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview1.style.overflow = 'visible';\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview2.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview2.style.overflow = 'visible';\n\n\t\t\t\t\tvar current = this.shiftPreview1;\n\t\t\t\t\tvar child = this.container.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// SVG element is moved via transform attribute\n\t\t\t\t\t\tif (child != canvas.parentNode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent.appendChild(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = this.shiftPreview2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Inserts elements only if not empty\n\t\t\t\t\tif (this.shiftPreview1.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.insertBefore(this.shiftPreview1, canvas.parentNode);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.shiftPreview2.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.appendChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.shiftPreview1.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview1.style.top = dy + 'px';\n\t\t\t\tthis.shiftPreview2.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview2.style.top = dy + 'px';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcanvas.style.left = dx + 'px';\n\t\t\tcanvas.style.top = dy + 'px';\n\t\t}\n\t\t\n\t\tthis.panDx = dx;\n\t\tthis.panDy = dy;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN));\n\t}\n};\n\n/**\n * Function: zoomIn\n * \n * Zooms into the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomIn = function()\n{\n\tthis.zoom(this.zoomFactor);\n};\n\n/**\n * Function: zoomOut\n * \n * Zooms out of the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomOut = function()\n{\n\tthis.zoom(1 / this.zoomFactor);\n};\n\n/**\n * Function: zoomActual\n * \n * Resets the zoom and panning in the view.\n */\nmxGraph.prototype.zoomActual = function()\n{\n\tif (this.view.scale == 1)\n\t{\n\t\tthis.view.setTranslate(0, 0);\n\t}\n\telse\n\t{\n\t\tthis.view.translate.x = 0;\n\t\tthis.view.translate.y = 0;\n\n\t\tthis.view.setScale(1);\n\t}\n};\n\n/**\n * Function: zoomTo\n * \n * Zooms the graph to the given scale with an optional boolean center\n * argument, which is passd to <zoom>.\n */\nmxGraph.prototype.zoomTo = function(scale, center)\n{\n\tthis.zoom(scale / this.view.scale, center);\n};\n\n/**\n * Function: center\n * \n * Centers the graph in the container.\n * \n * Parameters:\n * \n * horizontal - Optional boolean that specifies if the graph should be centered\n * horizontally. Default is true.\n * vertical - Optional boolean that specifies if the graph should be centered\n * vertically. Default is true.\n * cx - Optional float that specifies the horizontal center. Default is 0.5.\n * cy - Optional float that specifies the vertical center. Default is 0.5.\n */\nmxGraph.prototype.center = function(horizontal, vertical, cx, cy)\n{\n\thorizontal = (horizontal != null) ? horizontal : true;\n\tvertical = (vertical != null) ? vertical : true;\n\tcx = (cx != null) ? cx : 0.5;\n\tcy = (cy != null) ? cy : 0.5;\n\t\n\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\tvar padding = 2 * this.getBorder();\n\tvar cw = this.container.clientWidth - padding;\n\tvar ch = this.container.clientHeight - padding;\n\tvar bounds = this.getGraphBounds();\n\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\n\tvar dx = (horizontal) ? cw - bounds.width : 0;\n\tvar dy = (vertical) ? ch - bounds.height : 0;\n\t\n\tif (!hasScrollbars)\n\t{\n\t\tthis.view.setTranslate((horizontal) ? Math.floor(t.x - bounds.x * s + dx * cx / s) : t.x,\n\t\t\t(vertical) ? Math.floor(t.y - bounds.y * s + dy * cy / s) : t.y);\n\t}\n\telse\n\t{\n\t\tbounds.x -= t.x;\n\t\tbounds.y -= t.y;\n\t\n\t\tvar sw = this.container.scrollWidth;\n\t\tvar sh = this.container.scrollHeight;\n\t\t\n\t\tif (sw > cw)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\t\n\t\tif (sh > ch)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\n\t\tthis.view.setTranslate(Math.floor(dx / 2 - bounds.x), Math.floor(dy / 2 - bounds.y));\n\t\tthis.container.scrollLeft = (sw - cw) / 2;\n\t\tthis.container.scrollTop = (sh - ch) / 2;\n\t}\n};\n\n/**\n * Function: zoom\n * \n * Zooms the graph using the given factor. Center is an optional boolean\n * argument that keeps the graph scrolled to the center. If the center argument\n * is omitted, then <centerZoom> will be used as its value.\n */\nmxGraph.prototype.zoom = function(factor, center)\n{\n\tcenter = (center != null) ? center : this.centerZoom;\n\tvar scale = Math.round(this.view.scale * factor * 100) / 100;\n\tvar state = this.view.getState(this.getSelectionCell());\n\tfactor = scale / this.view.scale;\n\t\n\tif (this.keepSelectionVisibleOnZoom && state != null)\n\t{\n\t\tvar rect = new mxRectangle(state.x * factor, state.y * factor,\n\t\t\tstate.width * factor, state.height * factor);\n\t\t\n\t\t// Refreshes the display only once if a scroll is carried out\n\t\tthis.view.scale = scale;\n\t\t\n\t\tif (!this.scrollRectToVisible(rect))\n\t\t{\n\t\t\tthis.view.revalidate();\n\t\t\t\n\t\t\t// Forces an event to be fired but does not revalidate again\n\t\t\tthis.view.setScale(scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\t\t\n\t\tif (center && !hasScrollbars)\n\t\t{\n\t\t\tvar dx = this.container.offsetWidth;\n\t\t\tvar dy = this.container.offsetHeight;\n\t\t\t\n\t\t\tif (factor > 1)\n\t\t\t{\n\t\t\t\tvar f = (factor - 1) / (scale * 2);\n\t\t\t\tdx *= -f;\n\t\t\t\tdy *= -f;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = (1 / factor - 1) / (this.view.scale * 2);\n\t\t\t\tdx *= f;\n\t\t\t\tdy *= f;\n\t\t\t}\n\n\t\t\tthis.view.scaleAndTranslate(scale,\n\t\t\t\tthis.view.translate.x + dx,\n\t\t\t\tthis.view.translate.y + dy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Allows for changes of translate and scrollbars during setscale\n\t\t\tvar tx = this.view.translate.x;\n\t\t\tvar ty = this.view.translate.y;\n\t\t\tvar sl = this.container.scrollLeft;\n\t\t\tvar st = this.container.scrollTop;\n\t\t\t\n\t\t\tthis.view.setScale(scale);\n\t\t\t\n\t\t\tif (hasScrollbars)\n\t\t\t{\n\t\t\t\tvar dx = 0;\n\t\t\t\tvar dy = 0;\n\t\t\t\t\n\t\t\t\tif (center)\n\t\t\t\t{\n\t\t\t\t\tdx = this.container.offsetWidth * (factor - 1) / 2;\n\t\t\t\t\tdy = this.container.offsetHeight * (factor - 1) / 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.container.scrollLeft = (this.view.translate.x - tx) * this.view.scale + Math.round(sl * factor + dx);\n\t\t\t\tthis.container.scrollTop = (this.view.translate.y - ty) * this.view.scale + Math.round(st * factor + dy);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: zoomToRect\n * \n * Zooms the graph to the specified rectangle. If the rectangle does not have same aspect\n * ratio as the display container, it is increased in the smaller relative dimension only\n * until the aspect match. The original rectangle is centralised within this expanded one.\n * \n * Note that the input rectangular must be un-scaled and un-translated.\n * \n * Parameters:\n * \n * rect - The un-scaled and un-translated rectangluar region that should be just visible \n * after the operation\n */\nmxGraph.prototype.zoomToRect = function(rect)\n{\n\tvar scaleX = this.container.clientWidth / rect.width;\n\tvar scaleY = this.container.clientHeight / rect.height;\n\tvar aspectFactor = scaleX / scaleY;\n\n\t// Remove any overlap of the rect outside the client area\n\trect.x = Math.max(0, rect.x);\n\trect.y = Math.max(0, rect.y);\n\tvar rectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\tvar rectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\trect.width = rectRight - rect.x;\n\trect.height = rectBottom - rect.y;\n\n\t// The selection area has to be increased to the same aspect\n\t// ratio as the container, centred around the centre point of the \n\t// original rect passed in.\n\tif (aspectFactor < 1.0)\n\t{\n\t\t// Height needs increasing\n\t\tvar newHeight = rect.height / aspectFactor;\n\t\tvar deltaHeightBuffer = (newHeight - rect.height) / 2.0;\n\t\trect.height = newHeight;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar upperBuffer = Math.min(rect.y , deltaHeightBuffer);\n\t\trect.y = rect.y - upperBuffer;\n\t\t\n\t\t// Check if the bottom has extended too far\n\t\trectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\t\trect.height = rectBottom - rect.y;\n\t}\n\telse\n\t{\n\t\t// Width needs increasing\n\t\tvar newWidth = rect.width * aspectFactor;\n\t\tvar deltaWidthBuffer = (newWidth - rect.width) / 2.0;\n\t\trect.width = newWidth;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar leftBuffer = Math.min(rect.x , deltaWidthBuffer);\n\t\trect.x = rect.x - leftBuffer;\n\t\t\n\t\t// Check if the right hand side has extended too far\n\t\trectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\t\trect.width = rectRight - rect.x;\n\t}\n\n\tvar scale = this.container.clientWidth / rect.width;\n\tvar newScale = this.view.scale * scale;\n\n\tif (!mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.view.scaleAndTranslate(newScale, (this.view.translate.x - rect.x / this.view.scale), (this.view.translate.y - rect.y / this.view.scale));\n\t}\n\telse\n\t{\n\t\tthis.view.setScale(newScale);\n\t\tthis.container.scrollLeft = Math.round(rect.x * scale);\n\t\tthis.container.scrollTop = Math.round(rect.y * scale);\n\t}\n};\n\n/**\n * Function: scrollCellToVisible\n * \n * Pans the graph so that it shows the given cell. Optionally the cell may\n * be centered in the container.\n * \n * To center a given graph if the <container> has no scrollbars, use the following code.\n * \n * [code]\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x - (bounds.width - container.clientWidth) / 2,\n * \t\t\t\t\t\t   -bounds.y - (bounds.height - container.clientHeight) / 2);\n * [/code]\n * \n * Parameters:\n * \n * cell - <mxCell> to be made visible.\n * center - Optional boolean flag. Default is false.\n */\nmxGraph.prototype.scrollCellToVisible = function(cell, center)\n{\n\tvar x = -this.view.translate.x;\n\tvar y = -this.view.translate.y;\n\n\tvar state = this.view.getState(cell);\n\n\tif (state != null)\n\t{\n\t\tvar bounds = new mxRectangle(x + state.x, y + state.y, state.width,\n\t\t\tstate.height);\n\n\t\tif (center && this.container != null)\n\t\t{\n\t\t\tvar w = this.container.clientWidth;\n\t\t\tvar h = this.container.clientHeight;\n\n\t\t\tbounds.x = bounds.getCenterX() - w / 2;\n\t\t\tbounds.width = w;\n\t\t\tbounds.y = bounds.getCenterY() - h / 2;\n\t\t\tbounds.height = h;\n\t\t}\n\t\t\n\t\tvar tr = new mxPoint(this.view.translate.x, this.view.translate.y);\n\n\t\tif (this.scrollRectToVisible(bounds))\n\t\t{\n\t\t\t// Triggers an update via the view's event source\n\t\t\tvar tr2 = new mxPoint(this.view.translate.x, this.view.translate.y);\n\t\t\tthis.view.translate.x = tr.x;\n\t\t\tthis.view.translate.y = tr.y;\n\t\t\tthis.view.setTranslate(tr2.x, tr2.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollRectToVisible\n * \n * Pans the graph so that it shows the given rectangle.\n * \n * Parameters:\n * \n * rect - <mxRectangle> to be made visible.\n */\nmxGraph.prototype.scrollRectToVisible = function(rect)\n{\n\tvar isChanged = false;\n\t\n\tif (rect != null)\n\t{\n\t\tvar w = this.container.offsetWidth;\n\t\tvar h = this.container.offsetHeight;\n\n        var widthLimit = Math.min(w, rect.width);\n        var heightLimit = Math.min(h, rect.height);\n\n\t\tif (mxUtils.hasScrollbars(this.container))\n\t\t{\n\t\t\tvar c = this.container;\n\t\t\trect.x += this.view.translate.x;\n\t\t\trect.y += this.view.translate.y;\n\t\t\tvar dx = c.scrollLeft - rect.x;\n\t\t\tvar ddx = Math.max(dx - c.scrollLeft, 0);\n\n\t\t\tif (dx > 0)\n\t\t\t{\n\t\t\t\tc.scrollLeft -= dx + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = rect.x + widthLimit - c.scrollLeft - c.clientWidth;\n\n\t\t\t\tif (dx > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft += dx + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dy = c.scrollTop - rect.y;\n\t\t\tvar ddy = Math.max(0, dy - c.scrollTop);\n\n\t\t\tif (dy > 0)\n\t\t\t{\n\t\t\t\tc.scrollTop -= dy + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = rect.y + heightLimit - c.scrollTop - c.clientHeight;\n\n\t\t\t\tif (dy > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop += dy + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.useScrollbarsForPanning && (ddx != 0 || ddy != 0))\n\t\t\t{\n\t\t\t\tthis.view.setTranslate(ddx, ddy);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar x = -this.view.translate.x;\n\t\t\tvar y = -this.view.translate.y;\n\n\t\t\tvar s = this.view.scale;\n\n\t\t\tif (rect.x + widthLimit > x + w)\n\t\t\t{\n\t\t\t\tthis.view.translate.x -= (rect.x + widthLimit - w - x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y + heightLimit > y + h)\n\t\t\t{\n\t\t\t\tthis.view.translate.y -= (rect.y + heightLimit - h - y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.x < x)\n\t\t\t{\n\t\t\t\tthis.view.translate.x += (x - rect.x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y  < y)\n\t\t\t{\n\t\t\t\tthis.view.translate.y += (y - rect.y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (isChanged)\n\t\t\t{\n\t\t\t\tthis.view.refresh();\n\t\t\t\t\n\t\t\t\t// Repaints selection marker (ticket 18)\n\t\t\t\tif (this.selectionCellsHandler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.selectionCellsHandler.refresh();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn isChanged;\n};\n\n/**\n * Function: getCellGeometry\n * \n * Returns the <mxGeometry> for the given cell. This implementation uses\n * <mxGraphModel.getGeometry>. Subclasses can override this to implement\n * specific geometries for cells in only one graph, that is, it can return\n * geometries that depend on the current state of the view.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraph.prototype.getCellGeometry = function(cell)\n{\n\treturn this.model.getGeometry(cell);\n};\n\n/**\n * Function: isCellVisible\n * \n * Returns true if the given cell is visible in this graph. This\n * implementation uses <mxGraphModel.isVisible>. Subclassers can override\n * this to implement specific visibility for cells in only one graph, that\n * is, without affecting the visible state of the cell.\n * \n * When using dynamic filter expressions for cell visibility, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraph.prototype.isCellVisible = function(cell)\n{\n\treturn this.model.isVisible(cell);\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the given cell is collapsed in this graph. This\n * implementation uses <mxGraphModel.isCollapsed>. Subclassers can override\n * this to implement specific collapsed states for cells in only one graph,\n * that is, without affecting the collapsed state of the cell.\n * \n * When using dynamic filter expressions for the collapsed state, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraph.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.model.isCollapsed(cell);\n};\n\n/**\n * Function: isCellConnectable\n * \n * Returns true if the given cell is connectable in this graph. This\n * implementation uses <mxGraphModel.isConnectable>. Subclassers can override\n * this to implement specific connectable states for cells in only one graph,\n * that is, without affecting the connectable state of the cell in the model.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraph.prototype.isCellConnectable = function(cell)\n{\n\treturn this.model.isConnectable(cell);\n};\n\n/**\n * Function: isOrthogonal\n * \n * Returns true if perimeter points should be computed such that the\n * resulting edge has only horizontal or vertical segments.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n */\nmxGraph.prototype.isOrthogonal = function(edge)\n{\n\tvar orthogonal = edge.style[mxConstants.STYLE_ORTHOGONAL];\n\t\n\tif (orthogonal != null)\n\t{\n\t\treturn orthogonal;\n\t}\n\t\n\tvar tmp = this.view.getEdgeStyle(edge);\n\t\n\treturn tmp == mxEdgeStyle.SegmentConnector ||\n\t\ttmp == mxEdgeStyle.ElbowConnector ||\n\t\ttmp == mxEdgeStyle.SideToSide ||\n\t\ttmp == mxEdgeStyle.TopToBottom ||\n\t\ttmp == mxEdgeStyle.EntityRelation ||\n\t\ttmp == mxEdgeStyle.OrthConnector;\n};\n\n/**\n * Function: isLoop\n * \n * Returns true if the given cell state is a loop.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents a potential loop.\n */\nmxGraph.prototype.isLoop = function(state)\n{\n\tvar src = state.getVisibleTerminalState(true);\n\tvar trg = state.getVisibleTerminalState(false);\n\t\n\treturn (src != null && src == trg);\n};\n\n/**\n * Function: isCloneEvent\n * \n * Returns true if the given event is a clone event. This implementation\n * returns true if control is pressed.\n */\nmxGraph.prototype.isCloneEvent = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isTransparentClickEvent\n * \n * Hook for implementing click-through behaviour on selected cells. If this\n * returns true the cell behind the selected cell will be selected. This\n * implementation returns false;\n */\nmxGraph.prototype.isTransparentClickEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Function: isToggleEvent\n * \n * Returns true if the given event is a toggle event. This implementation\n * returns true if the meta key (Cmd) is pressed on Macs or if control is\n * pressed on any other platform.\n */\nmxGraph.prototype.isToggleEvent = function(evt)\n{\n\treturn (mxClient.IS_MAC) ? mxEvent.isMetaDown(evt) : mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isGridEnabledEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isGridEnabledEvent = function(evt)\n{\n\treturn evt != null && !mxEvent.isAltDown(evt);\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isConstrainedEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isIgnoreTerminalEvent\n * \n * Returns true if the given mouse event should not allow any connections to be\n * made. This implementation returns false.\n */\nmxGraph.prototype.isIgnoreTerminalEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Group: Validation\n */\n\n/**\n * Function: validationAlert\n * \n * Displays the given validation error in a dialog. This implementation uses\n * mxUtils.alert.\n */\nmxGraph.prototype.validationAlert = function(message)\n{\n\tmxUtils.alert(message);\n};\n\n/**\n * Function: isEdgeValid\n * \n * Checks if the return value of <getEdgeValidationError> for the given\n * arguments is null.\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.isEdgeValid = function(edge, source, target)\n{\n\treturn this.getEdgeValidationError(edge, source, target) == null;\n};\n\n/**\n * Function: getEdgeValidationError\n * \n * Returns the validation error message to be displayed when inserting or\n * changing an edges' connectivity. A return value of null means the edge\n * is valid, a return value of '' means it's not valid, but do not display\n * an error message. Any other (non-empty) string returned from this method\n * is displayed as an error message when trying to connect an edge to a\n * source and target. This implementation uses the <multiplicities>, and\n * checks <multigraph>, <allowDanglingEdges> and <allowLoops> to generate\n * validation errors.\n * \n * For extending this method with specific checks for source/target cells,\n * the method can be extended as follows. Returning an empty string means\n * the edge is invalid with no error message, a non-null string specifies\n * the error message, and null means the edge is valid.\n * \n * (code)\n * graph.getEdgeValidationError = function(edge, source, target)\n * {\n *   if (source != null && target != null &&\n *     this.model.getValue(source) != null &&\n *     this.model.getValue(target) != null)\n *   {\n *     if (target is not valid for source)\n *     {\n *       return 'Invalid Target';\n *     }\n *   }\n *   \n *   // \"Supercall\"\n *   return mxGraph.prototype.getEdgeValidationError.apply(this, arguments);\n * }\n * (end)\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.getEdgeValidationError = function(edge, source, target)\n{\n\tif (edge != null && !this.isAllowDanglingEdges() && (source == null || target == null))\n\t{\n\t\treturn '';\n\t}\n\t\n\tif (edge != null && this.model.getTerminal(edge, true) == null &&\n\t\tthis.model.getTerminal(edge, false) == null)\t\n\t{\n\t\treturn null;\n\t}\n\t\n\t// Checks if we're dealing with a loop\n\tif (!this.allowLoops && source == target && source != null)\n\t{\n\t\treturn '';\n\t}\n\t\n\t// Checks if the connection is generally allowed\n\tif (!this.isValidConnection(source, target))\n\t{\n\t\treturn '';\n\t}\n\n\tif (source != null && target != null)\n\t{\n\t\tvar error = '';\n\n\t\t// Checks if the cells are already connected\n\t\t// and adds an error message if required\t\t\t\n\t\tif (!this.multigraph)\n\t\t{\n\t\t\tvar tmp = this.model.getEdgesBetween(source, target, true);\n\t\t\t\n\t\t\t// Checks if the source and target are not connected by another edge\n\t\t\tif (tmp.length > 1 || (tmp.length == 1 && tmp[0] != edge))\n\t\t\t{\n\t\t\t\terror += (mxResources.get(this.alreadyConnectedResource) ||\n\t\t\t\t\tthis.alreadyConnectedResource)+'\\n';\n\t\t\t}\n\t\t}\n\n\t\t// Gets the number of outgoing edges from the source\n\t\t// and the number of incoming edges from the target\n\t\t// without counting the edge being currently changed.\n\t\tvar sourceOut = this.model.getDirectedEdgeCount(source, true, edge);\n\t\tvar targetIn = this.model.getDirectedEdgeCount(target, false, edge);\n\n\t\t// Checks the change against each multiplicity rule\n\t\tif (this.multiplicities != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t\t{\n\t\t\t\tvar err = this.multiplicities[i].check(this, edge, source,\n\t\t\t\t\ttarget, sourceOut, targetIn);\n\t\t\t\t\n\t\t\t\tif (err != null)\n\t\t\t\t{\n\t\t\t\t\terror += err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validates the source and target terminals independently\n\t\tvar err = this.validateEdge(edge, source, target);\n\t\t\n\t\tif (err != null)\n\t\t{\n\t\t\terror += err;\n\t\t}\n\t\t\n\t\treturn (error.length > 0) ? error : null;\n\t}\n\t\n\treturn (this.allowDanglingEdges) ? null : '';\n};\n\n/**\n * Function: validateEdge\n * \n * Hook method for subclassers to return an error message for the given\n * edge and terminals. This implementation returns null.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.validateEdge = function(edge, source, target)\n{\n\treturn null;\n};\n\n/**\n * Function: validateGraph\n * \n * Validates the graph by validating each descendant of the given cell or\n * the root of the model. Context is an object that contains the validation\n * state for the complete validation run. The validation errors are\n * attached to their cells using <setCellWarning>. Returns null in the case of\n * successful validation or an array of strings (warnings) in the case of\n * failed validations.\n * \n * Paramters:\n * \n * cell - Optional <mxCell> to start the validation recursion. Default is\n * the graph root.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateGraph = function(cell, context)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tcontext = (context != null) ? context : new Object();\n\t\n\tvar isValid = true;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar tmp = this.model.getChildAt(cell, i);\n\t\tvar ctx = context;\n\t\t\n\t\tif (this.isValidRoot(tmp))\n\t\t{\n\t\t\tctx = new Object();\n\t\t}\n\t\t\n\t\tvar warn = this.validateGraph(tmp, ctx);\n\t\t\n\t\tif (warn != null)\n\t\t{\n\t\t\tthis.setCellWarning(tmp, warn.replace(/\\n/g, '<br>'));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setCellWarning(tmp, null);\n\t\t}\n\t\t\n\t\tisValid = isValid && warn == null;\n\t}\n\t\n\tvar warning = '';\n\t\n\t// Adds error for invalid children if collapsed (children invisible)\n\tif (this.isCellCollapsed(cell) && !isValid)\n\t{\n\t\twarning += (mxResources.get(this.containsValidationErrorsResource) ||\n\t\t\tthis.containsValidationErrorsResource) + '\\n';\n\t}\n\t\n\t// Checks edges and cells using the defined multiplicities\n\tif (this.model.isEdge(cell))\n\t{\n\t\twarning += this.getEdgeValidationError(cell,\n\t\tthis.model.getTerminal(cell, true),\n\t\tthis.model.getTerminal(cell, false)) || '';\n\t}\n\telse\n\t{\n\t\twarning += this.getCellValidationError(cell) || '';\n\t}\n\t\n\t// Checks custom validation rules\n\tvar err = this.validateCell(cell, context);\n\t\n\tif (err != null)\n\t{\n\t\twarning += err;\n\t}\n\t\n\t// Updates the display with the warning icons\n\t// before any potential alerts are displayed.\n\t// LATER: Move this into addCellOverlay. Redraw\n\t// should check if overlay was added or removed.\n\tif (this.model.getParent(cell) == null)\n\t{\n\t\tthis.view.validate();\n\t}\n\n\treturn (warning.length > 0 || !isValid) ? warning : null;\n};\n\n/**\n * Function: getCellValidationError\n * \n * Checks all <multiplicities> that cannot be enforced while the graph is\n * being modified, namely, all multiplicities that require a minimum of\n * 1 edge.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the multiplicities should be checked.\n */\nmxGraph.prototype.getCellValidationError = function(cell)\n{\n\tvar outCount = this.model.getDirectedEdgeCount(cell, true);\n\tvar inCount = this.model.getDirectedEdgeCount(cell, false);\n\tvar value = this.model.getValue(cell);\n\tvar error = '';\n\n\tif (this.multiplicities != null)\n\t{\n\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t{\n\t\t\tvar rule = this.multiplicities[i];\n\t\t\t\n\t\t\tif (rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\trule.attr, rule.value) && (outCount > rule.max ||\n\t\t\t\toutCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t\telse if (!rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\t\trule.attr, rule.value) && (inCount > rule.max ||\n\t\t\t\t\tinCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: validateCell\n * \n * Hook method for subclassers to return an error message for the given\n * cell and validation context. This implementation returns null. Any HTML\n * breaks will be converted to linefeeds in the calling method.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to validate.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateCell = function(cell, context)\n{\n\treturn null;\n};\n\n/**\n * Group: Graph appearance\n */\n\n/**\n * Function: getBackgroundImage\n * \n * Returns the <backgroundImage> as an <mxImage>.\n */\nmxGraph.prototype.getBackgroundImage = function()\n{\n\treturn this.backgroundImage;\n};\n\n/**\n * Function: setBackgroundImage\n * \n * Sets the new <backgroundImage>.\n * \n * Parameters:\n * \n * image - New <mxImage> to be used for the background.\n */\nmxGraph.prototype.setBackgroundImage = function(image)\n{\n\tthis.backgroundImage = image;\n};\n\n/**\n * Function: getFoldingImage\n * \n * Returns the <mxImage> used to display the collapsed state of\n * the specified cell state. This returns null for all edges.\n */\nmxGraph.prototype.getFoldingImage = function(state)\n{\n\tif (state != null && this.foldingEnabled && !this.getModel().isEdge(state.cell))\n\t{\n\t\tvar tmp = this.isCellCollapsed(state.cell);\n\t\t\n\t\tif (this.isCellFoldable(state.cell, !tmp))\n\t\t{\n\t\t\treturn (tmp) ? this.collapsedImage : this.expandedImage;\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: convertValueToString\n * \n * Returns the textual representation for the given cell. This\n * implementation returns the nodename or string-representation of the user\n * object.\n *\n * Example:\n * \n * The following returns the label attribute from the cells user\n * object if it is an XML node.\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n * \treturn cell.getAttribute('label');\n * }\n * (end)\n * \n * See also: <cellLabelChanged>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose textual representation should be returned.\n */\nmxGraph.prototype.convertValueToString = function(cell)\n{\n\tvar value = this.model.getValue(cell);\n\t\n\tif (value != null)\n\t{\n\t\tif (mxUtils.isNode(value))\n\t\t{\n\t\t\treturn value.nodeName;\n\t\t}\n\t\telse if (typeof(value.toString) == 'function')\n\t\t{\n\t\t\treturn value.toString();\n\t\t}\n\t}\n\t\n\treturn '';\n};\n\n/**\n * Function: getLabel\n * \n * Returns a string or DOM node that represents the label for the given\n * cell. This implementation uses <convertValueToString> if <labelsVisible>\n * is true. Otherwise it returns an empty string.\n * \n * To truncate a label to match the size of the cell, the following code\n * can be used.\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var label = mxGraph.prototype.getLabel.apply(this, arguments);\n * \n *   if (label != null && this.model.isVertex(cell))\n *   {\n *     var geo = this.getCellGeometry(cell);\n * \n *     if (geo != null)\n *     {\n *       var max = parseInt(geo.width / 8);\n * \n *       if (label.length > max)\n *       {\n *         label = label.substring(0, max)+'...';\n *       }\n *     }\n *   } \n *   return mxUtils.htmlEntities(label);\n * }\n * (end)\n * \n * A resize listener is needed in the graph to force a repaint of the label\n * after a resize.\n * \n * (code)\n * graph.addListener(mxEvent.RESIZE_CELLS, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n * \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     this.view.removeState(cells[i]);\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be returned.\n */\nmxGraph.prototype.getLabel = function(cell)\n{\n\tvar result = '';\n\t\n\tif (this.labelsVisible && cell != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\t\t\n\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_NOLABEL, false))\n\t\t{\n\t\t\tresult = this.convertValueToString(cell);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isHtmlLabel\n * \n * Returns true if the label must be rendered as HTML markup. The default\n * implementation returns <htmlLabels>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be displayed as HTML markup.\n */\nmxGraph.prototype.isHtmlLabel = function(cell)\n{\n\treturn this.isHtmlLabels();\n};\n \n/**\n * Function: isHtmlLabels\n * \n * Returns <htmlLabels>.\n */\nmxGraph.prototype.isHtmlLabels = function()\n{\n\treturn this.htmlLabels;\n};\n \n/**\n * Function: setHtmlLabels\n * \n * Sets <htmlLabels>.\n */\nmxGraph.prototype.setHtmlLabels = function(value)\n{\n\tthis.htmlLabels = value;\n};\n\n/**\n * Function: isWrapping\n * \n * This enables wrapping for HTML labels.\n * \n * Returns true if no white-space CSS style directive should be used for\n * displaying the given cells label. This implementation returns true if\n * <mxConstants.STYLE_WHITE_SPACE> in the style of the given cell is 'wrap'.\n * \n * This is used as a workaround for IE ignoring the white-space directive\n * of child elements if the directive appears in a parent element. It\n * should be overridden to return true if a white-space directive is used\n * in the HTML markup that represents the given cells label. In order for\n * HTML markup to work in labels, <isHtmlLabel> must also return true\n * for the given cell.\n * \n * Example:\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var tmp = mxGraph.prototype.getLabel.apply(this, arguments); // \"supercall\"\n *   \n *   if (this.model.isEdge(cell))\n *   {\n *     tmp = '<div style=\"width: 150px; white-space:normal;\">'+tmp+'</div>';\n *   }\n *   \n *   return tmp;\n * }\n * \n * graph.isWrapping = function(state)\n * {\n * \t return this.model.isEdge(state.cell);\n * }\n * (end)\n * \n * Makes sure no edge label is wider than 150 pixels, otherwise the content\n * is wrapped. Note: No width must be specified for wrapped vertex labels as\n * the vertex defines the width in its geometry.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be wrapped.\n */\nmxGraph.prototype.isWrapping = function(cell)\n{\n\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_WHITE_SPACE] == 'wrap';\n};\n\n/**\n * Function: isLabelClipped\n * \n * Returns true if the overflow portion of labels should be hidden. If this\n * returns true then vertex labels will be clipped to the size of the vertices.\n * This implementation returns true if <mxConstants.STYLE_OVERFLOW> in the\n * style of the given cell is 'hidden'.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be clipped.\n */\nmxGraph.prototype.isLabelClipped = function(cell)\n{\n\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_OVERFLOW] == 'hidden';\n};\n\n/**\n * Function: getTooltip\n * \n * Returns the string or DOM node that represents the tooltip for the given\n * state, node and coordinate pair. This implementation checks if the given\n * node is a folding icon or overlay and returns the respective tooltip. If\n * this does not result in a tooltip, the handler for the cell is retrieved\n * from <selectionCellsHandler> and the optional getTooltipForNode method is\n * called. If no special tooltip exists here then <getTooltipForCell> is used\n * with the cell in the given state as the argument to return a tooltip for the\n * given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose tooltip should be returned.\n * node - DOM node that is currently under the mouse.\n * x - X-coordinate of the mouse.\n * y - Y-coordinate of the mouse.\n */\nmxGraph.prototype.getTooltip = function(state, node, x, y)\n{\n\tvar tip = null;\n\t\n\tif (state != null)\n\t{\n\t\t// Checks if the mouse is over the folding icon\n\t\tif (state.control != null && (node == state.control.node ||\n\t\t\tnode.parentNode == state.control.node))\n\t\t{\n\t\t\ttip = this.collapseExpandResource;\n\t\t\ttip = mxUtils.htmlEntities(mxResources.get(tip) || tip).replace(/\\\\n/g, '<br>');\n\t\t}\n\n\t\tif (tip == null && state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\t// LATER: Exit loop if tip is not null\n\t\t\t\tif (tip == null && (node == shape.node || node.parentNode == shape.node))\n\t\t\t\t{\n\t\t\t\t\ttip = shape.overlay.toString();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\tvar handler = this.selectionCellsHandler.getHandler(state.cell);\n\t\t\t\n\t\t\tif (handler != null && typeof(handler.getTooltipForNode) == 'function')\n\t\t\t{\n\t\t\t\ttip = handler.getTooltipForNode(node);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\ttip = this.getTooltipForCell(state.cell);\n\t\t}\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getTooltipForCell\n * \n * Returns the string or DOM node to be used as the tooltip for the given\n * cell. This implementation uses the cells getTooltip function if it\n * exists, or else it returns <convertValueToString> for the cell.\n * \n * Example:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   return 'Hello, World!';\n * }\n * (end)\n * \n * Replaces all tooltips with the string Hello, World!\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getTooltipForCell = function(cell)\n{\n\tvar tip = null;\n\t\n\tif (cell != null && cell.getTooltip != null)\n\t{\n\t\ttip = cell.getTooltip();\n\t}\n\telse\n\t{\n\t\ttip = this.convertValueToString(cell);\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getLinkForCell\n * \n * Returns the string to be used as the link for the given cell. This\n * implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getLinkForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getCursorForMouseEvent\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given event. This implementation calls <getCursorForCell>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForMouseEvent = function(me)\n{\n\treturn this.getCursorForCell(me.getCell());\n};\n\n/**\n * Function: getCursorForCell\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given cell. This implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getStartSize\n * \n * Returns the start size of the given swimlane, that is, the width or\n * height of the part that contains the title, depending on the\n * horizontal style. The return value is an <mxRectangle> with either\n * width or height set as appropriate.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose start size should be returned.\n * ignoreState - Optional boolean that specifies if cell state should be ignored.\n */\nmxGraph.prototype.getStartSize = function(swimlane, ignoreState)\n{\n\tvar result = new mxRectangle();\n\tvar style = this.getCurrentCellStyle(swimlane, ignoreState);\n\tvar size = parseInt(mxUtils.getValue(style,\n\t\tmxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n\t\n\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t{\n\t\tresult.height = size;\n\t}\n\telse\n\t{\n\t\tresult.width = size;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSwimlaneDirection\n * \n * Returns the direction for the given swimlane style.\n */\nmxGraph.prototype.getSwimlaneDirection = function(style)\n{\n\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\tvar h = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true);\n\tvar n = (h) ? 0 : 3;\n\t\n\tif (dir == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tn--;\n\t}\n\telse if (dir == mxConstants.DIRECTION_WEST)\n\t{\n\t\tn += 2;\n\t}\n\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tn += 1;\n\t}\n\t\n\tvar mod = mxUtils.mod(n, 2);\n\t\n\tif (flipH && mod == 1)\n\t{\n\t\tn += 2;\n\t}\n\t\n\tif (flipV && mod == 0)\n\t{\n\t\tn += 2;\n\t}\n\t\n\treturn [mxConstants.DIRECTION_NORTH, mxConstants.DIRECTION_EAST,\n\t\tmxConstants.DIRECTION_SOUTH, mxConstants.DIRECTION_WEST]\n\t\t[mxUtils.mod(n, 4)];\n};\n\n/**\n * Function: getActualStartSize\n * \n * Returns the actual start size of the given swimlane taking into account\n * direction and horizontal and vertial flip styles. The start size is\n * returned as an <mxRectangle> where top, left, bottom, right start sizes\n * are returned as x, y, height and width, respectively.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose start size should be returned.\n * ignoreState - Optional boolean that specifies if cell state should be ignored.\n */\nmxGraph.prototype.getActualStartSize = function(swimlane, ignoreState)\n{\n\tvar result = new mxRectangle();\n\t\n\tif (this.isSwimlane(swimlane, ignoreState))\n\t{\n\t\tvar style = this.getCurrentCellStyle(swimlane, ignoreState);\n\t\tvar size = parseInt(mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE,\n\t\t\tmxConstants.DEFAULT_STARTSIZE));\n\t\tvar dir = this.getSwimlaneDirection(style);\n\t\t\n\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tresult.y = size;\n\t\t}\n\t\telse if (dir == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tresult.x = size;\n\t\t}\n\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tresult.height = size;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.width = size;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getImage\n * \n * Returns the image URL for the given cell state. This implementation\n * returns the value stored under <mxConstants.STYLE_IMAGE> in the cell\n * style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose image URL should be returned.\n */\nmxGraph.prototype.getImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_IMAGE] : null;\n};\n\n/**\n * Function: isTransparentState\n * \n * Returns true if the given state has no stroke- or fillcolor and no image.\n * \n * Parameters:\n * \n * state - <mxCellState> to check.\n */\nmxGraph.prototype.isTransparentState = function(state)\n{\n\tvar result = false;\n\t\n\tif (state != null)\n\t{\n\t\tvar stroke = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\t\tvar fill = mxUtils.getValue(state.style, mxConstants.STYLE_FILLCOLOR, mxConstants.NONE);\n\t\t\n\t\tresult = stroke == mxConstants.NONE && fill == mxConstants.NONE && this.getImage(state) == null;\n\t\t\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVerticalAlign\n * \n * Returns the vertical alignment for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_VERTICAL_ALIGN> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose vertical alignment should be\n * returned.\n */\nmxGraph.prototype.getVerticalAlign = function(state)\n{\n\treturn (state != null && state.style != null) ?\n\t\t(state.style[mxConstants.STYLE_VERTICAL_ALIGN] ||\n\t\tmxConstants.ALIGN_MIDDLE) : null;\n};\n\n/**\n * Function: getIndicatorColor\n * \n * Returns the indicator color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_COLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_COLOR] : null;\n};\n\n/**\n * Function: getIndicatorGradientColor\n * \n * Returns the indicator gradient color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_GRADIENTCOLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator gradient color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorGradientColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_GRADIENTCOLOR] : null;\n};\n\n/**\n * Function: getIndicatorShape\n * \n * Returns the indicator shape for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_SHAPE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator shape should be returned.\n */\nmxGraph.prototype.getIndicatorShape = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_SHAPE] : null;\n};\n\n/**\n * Function: getIndicatorImage\n * \n * Returns the indicator image for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_IMAGE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator image should be returned.\n */\nmxGraph.prototype.getIndicatorImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_IMAGE] : null;\n};\n\n/**\n * Function: getBorder\n * \n * Returns the value of <border>.\n */\nmxGraph.prototype.getBorder = function()\n{\n\treturn this.border;\n};\n\n/**\n * Function: setBorder\n * \n * Sets the value of <border>.\n * \n * Parameters:\n * \n * value - Positive integer that represents the border to be used.\n */\nmxGraph.prototype.setBorder = function(value)\n{\n\tthis.border = value;\n};\n\n/**\n * Function: isSwimlane\n * \n * Returns true if the given cell is a swimlane in the graph. A swimlane is\n * a container cell with some specific behaviour. This implementation\n * checks if the shape associated with the given cell is a <mxSwimlane>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be checked.\n * ignoreState - Optional boolean that specifies if the cell state should be ignored.\n */\nmxGraph.prototype.isSwimlane = function(cell, ignoreState)\n{\n\tif (cell != null && this.model.getParent(cell) != this.model.getRoot() &&\n\t\t!this.model.isEdge(cell))\n\t{\n\t\treturn this.getCurrentCellStyle(cell, ignoreState)\n\t\t\t[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_SWIMLANE;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Group: Graph behaviour\n */\n\n/**\n * Function: isResizeContainer\n * \n * Returns <resizeContainer>.\n */\nmxGraph.prototype.isResizeContainer = function()\n{\n\treturn this.resizeContainer;\n};\n\n/**\n * Function: setResizeContainer\n * \n * Sets <resizeContainer>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the container should be resized.\n */\nmxGraph.prototype.setResizeContainer = function(value)\n{\n\tthis.resizeContainer = value;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if the graph is <enabled>.\n */\nmxGraph.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Specifies if the graph should allow any interactions. This\n * implementation updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be enabled.\n */\nmxGraph.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isEscapeEnabled\n * \n * Returns <escapeEnabled>.\n */\nmxGraph.prototype.isEscapeEnabled = function()\n{\n\treturn this.escapeEnabled;\n};\n\n/**\n * Function: setEscapeEnabled\n * \n * Sets <escapeEnabled>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if escape should be enabled.\n */\nmxGraph.prototype.setEscapeEnabled = function(value)\n{\n\tthis.escapeEnabled = value;\n};\n\n/**\n * Function: isInvokesStopCellEditing\n * \n * Returns <invokesStopCellEditing>.\n */\nmxGraph.prototype.isInvokesStopCellEditing = function()\n{\n\treturn this.invokesStopCellEditing;\n};\n\n/**\n * Function: setInvokesStopCellEditing\n * \n * Sets <invokesStopCellEditing>.\n */\nmxGraph.prototype.setInvokesStopCellEditing = function(value)\n{\n\tthis.invokesStopCellEditing = value;\n};\n\n/**\n * Function: isEnterStopsCellEditing\n * \n * Returns <enterStopsCellEditing>.\n */\nmxGraph.prototype.isEnterStopsCellEditing = function()\n{\n\treturn this.enterStopsCellEditing;\n};\n\n/**\n * Function: setEnterStopsCellEditing\n * \n * Sets <enterStopsCellEditing>.\n */\nmxGraph.prototype.setEnterStopsCellEditing = function(value)\n{\n\tthis.enterStopsCellEditing = value;\n};\n\n/**\n * Function: isCellLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellLocked = function(cell)\n{\n\tvar geometry = this.model.getGeometry(cell);\n\t\n\treturn this.isCellsLocked() || (geometry != null && this.model.isVertex(cell) && geometry.relative);\n};\n\n/**\n * Function: isCellsLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellsLocked = function()\n{\n\treturn this.cellsLocked;\n};\n\n/**\n * Function: setCellsLocked\n * \n * Sets if any cell may be moved, sized, bended, disconnected, edited or\n * selected.\n * \n * Parameters:\n * \n * value - Boolean that defines the new value for <cellsLocked>.\n */\nmxGraph.prototype.setCellsLocked = function(value)\n{\n\tthis.cellsLocked = value;\n};\n\n/**\n * Function: getCloneableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getCloneableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellCloneable(cell);\n\t}));\n};\n\n/**\n * Function: isCellCloneable\n * \n * Returns true if the given cell is cloneable. This implementation returns\n * <isCellsCloneable> for all cells unless a cell style specifies\n * <mxConstants.STYLE_CLONEABLE> to be 0. \n * \n * Parameters:\n * \n * cell - Optional <mxCell> whose cloneable state should be returned.\n */\nmxGraph.prototype.isCellCloneable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\n\treturn this.isCellsCloneable() && style[mxConstants.STYLE_CLONEABLE] != 0;\n};\n\n/**\n * Function: isCellsCloneable\n * \n * Returns <cellsCloneable>, that is, if the graph allows cloning of cells\n * by using control-drag.\n */\nmxGraph.prototype.isCellsCloneable = function()\n{\n\treturn this.cellsCloneable;\n};\n\n/**\n * Function: setCellsCloneable\n * \n * Specifies if the graph should allow cloning of cells by holding down the\n * control key while cells are being moved. This implementation updates\n * <cellsCloneable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be cloneable.\n */\nmxGraph.prototype.setCellsCloneable = function(value)\n{\n\tthis.cellsCloneable = value;\n};\n\n/**\n * Function: getExportableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getExportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canExportCell(cell);\n\t}));\n};\n\n/**\n * Function: canExportCell\n * \n * Returns true if the given cell may be exported to the clipboard. This\n * implementation returns <exportEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be exported.\n */\nmxGraph.prototype.canExportCell = function(cell)\n{\n\treturn this.exportEnabled;\n};\n\n/**\n * Function: getImportableCells\n * \n * Returns the cells which may be imported in the given array of cells.\n */\nmxGraph.prototype.getImportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canImportCell(cell);\n\t}));\n};\n\n/**\n * Function: canImportCell\n * \n * Returns true if the given cell may be imported from the clipboard.\n * This implementation returns <importEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be imported.\n */\nmxGraph.prototype.canImportCell = function(cell)\n{\n\treturn this.importEnabled;\n};\n\n/**\n * Function: isCellSelectable\n *\n * Returns true if the given cell is selectable. This implementation\n * returns <cellsSelectable>.\n * \n * To add a new style for making cells (un)selectable, use the following code.\n * \n * (code)\n * mxGraph.prototype.isCellSelectable = function(cell)\n * {\n *   var style = this.getCurrentCellStyle(cell);\n *   \n *   return this.isCellsSelectable() && !this.isCellLocked(cell) && style['selectable'] != 0;\n * };\n * (end)\n * \n * You can then use the new style as shown in this example.\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'selectable=0');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose selectable state should be returned.\n */\nmxGraph.prototype.isCellSelectable = function(cell)\n{\n\treturn this.isCellsSelectable();\n};\n\n/**\n * Function: isCellsSelectable\n *\n * Returns <cellsSelectable>.\n */\nmxGraph.prototype.isCellsSelectable = function()\n{\n\treturn this.cellsSelectable;\n};\n\n/**\n * Function: setCellsSelectable\n *\n * Sets <cellsSelectable>.\n */\nmxGraph.prototype.setCellsSelectable = function(value)\n{\n\tthis.cellsSelectable = value;\n};\n\n/**\n * Function: getDeletableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getDeletableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellDeletable(cell);\n\t}));\n};\n\n/**\n * Function: isCellDeletable\n *\n * Returns true if the given cell is moveable. This returns\n * <cellsDeletable> for all given cells if a cells style does not specify\n * <mxConstants.STYLE_DELETABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose deletable state should be returned.\n */\nmxGraph.prototype.isCellDeletable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsDeletable() && style[mxConstants.STYLE_DELETABLE] != 0;\n};\n\n/**\n * Function: isCellsDeletable\n *\n * Returns <cellsDeletable>.\n */\nmxGraph.prototype.isCellsDeletable = function()\n{\n\treturn this.cellsDeletable;\n};\n\n/**\n * Function: setCellsDeletable\n * \n * Sets <cellsDeletable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow deletion of cells.\n */\nmxGraph.prototype.setCellsDeletable = function(value)\n{\n\tthis.cellsDeletable = value;\n};\n\n/**\n * Function: isLabelMovable\n *\n * Returns true if the given edges's label is moveable. This returns\n * <movable> for all given cells if <isLocked> does not return true\n * for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be moved.\n */\nmxGraph.prototype.isLabelMovable = function(cell)\n{\n\treturn !this.isCellLocked(cell) &&\n\t\t((this.model.isEdge(cell) && this.edgeLabelsMovable) ||\n\t\t(this.model.isVertex(cell) && this.vertexLabelsMovable));\n};\n\n/**\n * Function: isCellRotatable\n *\n * Returns true if the given cell is rotatable. This returns true for the given\n * cell if its style does not specify <mxConstants.STYLE_ROTATABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose rotatable state should be returned.\n */\nmxGraph.prototype.isCellRotatable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn style[mxConstants.STYLE_ROTATABLE] != 0;\n};\n\n/**\n * Function: getMovableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getMovableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellMovable(cell);\n\t}));\n};\n\n/**\n * Function: isCellMovable\n *\n * Returns true if the given cell is moveable. This returns <cellsMovable>\n * for all given cells if <isCellLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_MOVABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraph.prototype.isCellMovable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsMovable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_MOVABLE] != 0;\n};\n\n/**\n * Function: isCellsMovable\n *\n * Returns <cellsMovable>.\n */\nmxGraph.prototype.isCellsMovable = function()\n{\n\treturn this.cellsMovable;\n};\n\n/**\n * Function: setCellsMovable\n * \n * Specifies if the graph should allow moving of cells. This implementation\n * updates <cellsMsovable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow moving of cells.\n */\nmxGraph.prototype.setCellsMovable = function(value)\n{\n\tthis.cellsMovable = value;\n};\n\n/**\n * Function: isGridEnabled\n *\n * Returns <gridEnabled> as a boolean.\n */\nmxGraph.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Specifies if the grid should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the grid should be enabled.\n */\nmxGraph.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: isPortsEnabled\n *\n * Returns <portsEnabled> as a boolean.\n */\nmxGraph.prototype.isPortsEnabled = function()\n{\n\treturn this.portsEnabled;\n};\n\n/**\n * Function: setPortsEnabled\n * \n * Specifies if the ports should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the ports should be enabled.\n */\nmxGraph.prototype.setPortsEnabled = function(value)\n{\n\tthis.portsEnabled = value;\n};\n\n/**\n * Function: getGridSize\n *\n * Returns <gridSize>.\n */\nmxGraph.prototype.getGridSize = function()\n{\n\treturn this.gridSize;\n};\n\n/**\n * Function: setGridSize\n * \n * Sets <gridSize>.\n */\nmxGraph.prototype.setGridSize = function(value)\n{\n\tthis.gridSize = value;\n};\n\n/**\n * Function: getTolerance\n *\n * Returns <tolerance>.\n */\nmxGraph.prototype.getTolerance = function()\n{\n\treturn this.tolerance;\n};\n\n/**\n * Function: setTolerance\n * \n * Sets <tolerance>.\n */\nmxGraph.prototype.setTolerance = function(value)\n{\n\tthis.tolerance = value;\n};\n\n/**\n * Function: isVertexLabelsMovable\n *\n * Returns <vertexLabelsMovable>.\n */\nmxGraph.prototype.isVertexLabelsMovable = function()\n{\n\treturn this.vertexLabelsMovable;\n};\n\n/**\n * Function: setVertexLabelsMovable\n * \n * Sets <vertexLabelsMovable>.\n */\nmxGraph.prototype.setVertexLabelsMovable = function(value)\n{\n\tthis.vertexLabelsMovable = value;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n *\n * Returns <edgeLabelsMovable>.\n */\nmxGraph.prototype.isEdgeLabelsMovable = function()\n{\n\treturn this.edgeLabelsMovable;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n * \n * Sets <edgeLabelsMovable>.\n */\nmxGraph.prototype.setEdgeLabelsMovable = function(value)\n{\n\tthis.edgeLabelsMovable = value;\n};\n\n/**\n * Function: isSwimlaneNesting\n *\n * Returns <swimlaneNesting> as a boolean.\n */\nmxGraph.prototype.isSwimlaneNesting = function()\n{\n\treturn this.swimlaneNesting;\n};\n\n/**\n * Function: setSwimlaneNesting\n * \n * Specifies if swimlanes can be nested by drag and drop. This is only\n * taken into account if dropEnabled is true.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes can be nested.\n */\nmxGraph.prototype.setSwimlaneNesting = function(value)\n{\n\tthis.swimlaneNesting = value;\n};\n\n/**\n * Function: isSwimlaneSelectionEnabled\n *\n * Returns <swimlaneSelectionEnabled> as a boolean.\n */\nmxGraph.prototype.isSwimlaneSelectionEnabled = function()\n{\n\treturn this.swimlaneSelectionEnabled;\n};\n\n/**\n * Function: setSwimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selected if the mouse is released\n * over their content area.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes content areas\n * should be selected when the mouse is released over them.\n */\nmxGraph.prototype.setSwimlaneSelectionEnabled = function(value)\n{\n\tthis.swimlaneSelectionEnabled = value;\n};\n\n/**\n * Function: isMultigraph\n *\n * Returns <multigraph> as a boolean.\n */\nmxGraph.prototype.isMultigraph = function()\n{\n\treturn this.multigraph;\n};\n\n/**\n * Function: setMultigraph\n * \n * Specifies if the graph should allow multiple connections between the\n * same pair of vertices.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph allows multiple connections\n * between the same pair of vertices.\n */\nmxGraph.prototype.setMultigraph = function(value)\n{\n\tthis.multigraph = value;\n};\n\n/**\n * Function: isAllowLoops\n *\n * Returns <allowLoops> as a boolean.\n */\nmxGraph.prototype.isAllowLoops = function()\n{\n\treturn this.allowLoops;\n};\n\n/**\n * Function: setAllowDanglingEdges\n * \n * Specifies if dangling edges are allowed, that is, if edges are allowed\n * that do not have a source and/or target terminal defined.\n * \n * Parameters:\n * \n * value - Boolean indicating if dangling edges are allowed.\n */\nmxGraph.prototype.setAllowDanglingEdges = function(value)\n{\n\tthis.allowDanglingEdges = value;\n};\n\n/**\n * Function: isAllowDanglingEdges\n *\n * Returns <allowDanglingEdges> as a boolean.\n */\nmxGraph.prototype.isAllowDanglingEdges = function()\n{\n\treturn this.allowDanglingEdges;\n};\n\n/**\n * Function: setConnectableEdges\n * \n * Specifies if edges should be connectable.\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be connectable.\n */\nmxGraph.prototype.setConnectableEdges = function(value)\n{\n\tthis.connectableEdges = value;\n};\n\n/**\n * Function: isConnectableEdges\n *\n * Returns <connectableEdges> as a boolean.\n */\nmxGraph.prototype.isConnectableEdges = function()\n{\n\treturn this.connectableEdges;\n};\n\n/**\n * Function: setCloneInvalidEdges\n * \n * Specifies if edges should be inserted when cloned but not valid wrt.\n * <getEdgeValidationError>. If false such edges will be silently ignored.\n * \n * Parameters:\n * \n * value - Boolean indicating if cloned invalid edges should be\n * inserted into the graph or ignored.\n */\nmxGraph.prototype.setCloneInvalidEdges = function(value)\n{\n\tthis.cloneInvalidEdges = value;\n};\n\n/**\n * Function: isCloneInvalidEdges\n *\n * Returns <cloneInvalidEdges> as a boolean.\n */\nmxGraph.prototype.isCloneInvalidEdges = function()\n{\n\treturn this.cloneInvalidEdges;\n};\n\n/**\n * Function: setAllowLoops\n * \n * Specifies if loops are allowed.\n * \n * Parameters:\n * \n * value - Boolean indicating if loops are allowed.\n */\nmxGraph.prototype.setAllowLoops = function(value)\n{\n\tthis.allowLoops = value;\n};\n\n/**\n * Function: isDisconnectOnMove\n *\n * Returns <disconnectOnMove> as a boolean.\n */\nmxGraph.prototype.isDisconnectOnMove = function()\n{\n\treturn this.disconnectOnMove;\n};\n\n/**\n * Function: setDisconnectOnMove\n * \n * Specifies if edges should be disconnected when moved. (Note: Cloned\n * edges are always disconnected.)\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be disconnected\n * when moved.\n */\nmxGraph.prototype.setDisconnectOnMove = function(value)\n{\n\tthis.disconnectOnMove = value;\n};\n\n/**\n * Function: isDropEnabled\n *\n * Returns <dropEnabled> as a boolean.\n */\nmxGraph.prototype.isDropEnabled = function()\n{\n\treturn this.dropEnabled;\n};\n\n/**\n * Function: setDropEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setDropEnabled = function(value)\n{\n\tthis.dropEnabled = value;\n};\n\n/**\n * Function: isSplitEnabled\n *\n * Returns <splitEnabled> as a boolean.\n */\nmxGraph.prototype.isSplitEnabled = function()\n{\n\treturn this.splitEnabled;\n};\n\n/**\n * Function: setSplitEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setSplitEnabled = function(value)\n{\n\tthis.splitEnabled = value;\n};\n\n/**\n * Function: isCellResizable\n *\n * Returns true if the given cell is resizable. This returns\n * <cellsResizable> for all given cells if <isCellLocked> does not return\n * true for the given cell and its style does not specify\n * <mxConstants.STYLE_RESIZABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose resizable state should be returned.\n */\nmxGraph.prototype.isCellResizable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\n\treturn this.isCellsResizable() && !this.isCellLocked(cell) &&\n\t\tmxUtils.getValue(style, mxConstants.STYLE_RESIZABLE, '1') != '0';\n};\n\n/**\n * Function: isCellsResizable\n *\n * Returns <cellsResizable>.\n */\nmxGraph.prototype.isCellsResizable = function()\n{\n\treturn this.cellsResizable;\n};\n\n/**\n * Function: setCellsResizable\n * \n * Specifies if the graph should allow resizing of cells. This\n * implementation updates <cellsResizable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow resizing of\n * cells.\n */\nmxGraph.prototype.setCellsResizable = function(value)\n{\n\tthis.cellsResizable = value;\n};\n\n/**\n * Function: isTerminalPointMovable\n *\n * Returns true if the given terminal point is movable. This is independent\n * from <isCellConnectable> and <isCellDisconnectable> and controls if terminal\n * points can be moved in the graph if the edge is not connected. Note that it\n * is required for this to return true to connect unconnected edges. This\n * implementation returns true.\n * \n * Parameters:\n * \n * cell - <mxCell> whose terminal point should be moved.\n * source - Boolean indicating if the source or target terminal should be moved.\n */\nmxGraph.prototype.isTerminalPointMovable = function(cell, source)\n{\n\treturn true;\n};\n\n/**\n * Function: isCellBendable\n *\n * Returns true if the given cell is bendable. This returns <cellsBendable>\n * for all given cells if <isLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_BENDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bendable state should be returned.\n */\nmxGraph.prototype.isCellBendable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsBendable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_BENDABLE] != 0;\n};\n\n/**\n * Function: isCellsBendable\n *\n * Returns <cellsBenadable>.\n */\nmxGraph.prototype.isCellsBendable = function()\n{\n\treturn this.cellsBendable;\n};\n\n/**\n * Function: setCellsBendable\n * \n * Specifies if the graph should allow bending of edges. This\n * implementation updates <bendable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow bending of\n * edges.\n */\nmxGraph.prototype.setCellsBendable = function(value)\n{\n\tthis.cellsBendable = value;\n};\n\n/**\n * Function: isCellEditable\n *\n * Returns true if the given cell is editable. This returns <cellsEditable> for\n * all given cells if <isCellLocked> does not return true for the given cell\n * and its style does not specify <mxConstants.STYLE_EDITABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose editable state should be returned.\n */\nmxGraph.prototype.isCellEditable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsEditable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_EDITABLE] != 0;\n};\n\n/**\n * Function: isCellsEditable\n *\n * Returns <cellsEditable>.\n */\nmxGraph.prototype.isCellsEditable = function()\n{\n\treturn this.cellsEditable;\n};\n\n/**\n * Function: setCellsEditable\n * \n * Specifies if the graph should allow in-place editing for cell labels.\n * This implementation updates <cellsEditable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow in-place\n * editing.\n */\nmxGraph.prototype.setCellsEditable = function(value)\n{\n\tthis.cellsEditable = value;\n};\n\n/**\n * Function: isCellDisconnectable\n *\n * Returns true if the given cell is disconnectable from the source or\n * target terminal. This returns <isCellsDisconnectable> for all given\n * cells if <isCellLocked> does not return true for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose disconnectable state should be returned.\n * terminal - <mxCell> that represents the source or target terminal.\n * source - Boolean indicating if the source or target terminal is to be\n * disconnected.\n */\nmxGraph.prototype.isCellDisconnectable = function(cell, terminal, source)\n{\n\treturn this.isCellsDisconnectable() && !this.isCellLocked(cell);\n};\n\n/**\n * Function: isCellsDisconnectable\n *\n * Returns <cellsDisconnectable>.\n */\nmxGraph.prototype.isCellsDisconnectable = function()\n{\n\treturn this.cellsDisconnectable;\n};\n\n/**\n * Function: setCellsDisconnectable\n *\n * Sets <cellsDisconnectable>.\n */\nmxGraph.prototype.setCellsDisconnectable = function(value)\n{\n\tthis.cellsDisconnectable = value;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns true if the given cell is a valid source for new connections.\n * This implementation returns true for all non-null values and is\n * called by is called by <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible source or null.\n */\nmxGraph.prototype.isValidSource = function(cell)\n{\n\treturn (cell == null && this.allowDanglingEdges) ||\n\t\t(cell != null && (!this.model.isEdge(cell) ||\n\t\tthis.connectableEdges) && this.isCellConnectable(cell));\n};\n\t\n/**\n * Function: isValidTarget\n * \n * Returns <isValidSource> for the given cell. This is called by\n * <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible target or null.\n */\nmxGraph.prototype.isValidTarget = function(cell)\n{\n\treturn this.isValidSource(cell);\n};\n\n/**\n * Function: isValidConnection\n * \n * Returns true if the given target cell is a valid target for source.\n * This is a boolean implementation for not allowing connections between\n * certain pairs of vertices and is called by <getEdgeValidationError>.\n * This implementation returns true if <isValidSource> returns true for\n * the source and <isValidTarget> returns true for the target.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source cell.\n * target - <mxCell> that represents the target cell.\n */\nmxGraph.prototype.isValidConnection = function(source, target)\n{\n\treturn this.isValidSource(source) && this.isValidTarget(target);\n};\n\n/**\n * Function: setConnectable\n * \n * Specifies if the graph should allow new connections. This implementation\n * updates <mxConnectionHandler.enabled> in <connectionHandler>.\n * \n * Parameters:\n * \n * connectable - Boolean indicating if new connections should be allowed.\n */\nmxGraph.prototype.setConnectable = function(connectable)\n{\n\tthis.connectionHandler.setEnabled(connectable);\n};\n\t\n/**\n * Function: isConnectable\n * \n * Returns true if the <connectionHandler> is enabled.\n */\nmxGraph.prototype.isConnectable = function()\n{\n\treturn this.connectionHandler.isEnabled();\n};\n\n/**\n * Function: setTooltips\n * \n * Specifies if tooltips should be enabled. This implementation updates\n * <mxTooltipHandler.enabled> in <tooltipHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if tooltips should be enabled.\n */\nmxGraph.prototype.setTooltips = function (enabled)\n{\n\tthis.tooltipHandler.setEnabled(enabled);\n};\n\n/**\n * Function: setPanning\n * \n * Specifies if panning should be enabled. This implementation updates\n * <mxPanningHandler.panningEnabled> in <panningHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if panning should be enabled.\n */\nmxGraph.prototype.setPanning = function(enabled)\n{\n\tthis.panningHandler.panningEnabled = enabled;\n};\n\n/**\n * Function: isEditing\n * \n * Returns true if the given cell is currently being edited.\n * If no cell is specified then this returns true if any\n * cell is currently being edited.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be checked.\n */\nmxGraph.prototype.isEditing = function(cell)\n{\n\tif (this.cellEditor != null)\n\t{\n\t\tvar editingCell = this.cellEditor.getEditingCell();\n\t\t\n\t\treturn (cell == null) ? editingCell != null : cell == editingCell;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isAutoSizeCell\n * \n * Returns true if the size of the given cell should automatically be\n * updated after a change of the label. This implementation returns\n * <autoSizeCells> or checks if the cell style does specify\n * <mxConstants.STYLE_AUTOSIZE> to be 1.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be resized.\n */\nmxGraph.prototype.isAutoSizeCell = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isAutoSizeCells() || style[mxConstants.STYLE_AUTOSIZE] == 1;\n};\n\n/**\n * Function: isAutoSizeCells\n * \n * Returns <autoSizeCells>.\n */\nmxGraph.prototype.isAutoSizeCells = function()\n{\n\treturn this.autoSizeCells;\n};\n\n/**\n * Function: setAutoSizeCells\n * \n * Specifies if cell sizes should be automatically updated after a label\n * change. This implementation sets <autoSizeCells> to the given parameter.\n * To update the size of cells when the cells are added, set\n * <autoSizeCellsOnAdd> to true.\n * \n * Parameters:\n * \n * value - Boolean indicating if cells should be resized\n * automatically.\n */\nmxGraph.prototype.setAutoSizeCells = function(value)\n{\n\tthis.autoSizeCells = value;\n};\n\n/**\n * Function: isExtendParent\n * \n * Returns true if the parent of the given cell should be extended if the\n * child has been resized so that it overlaps the parent. This\n * implementation returns <isExtendParents> if the cell is not an edge.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.isExtendParent = function(cell)\n{\n\treturn !this.getModel().isEdge(cell) && this.isExtendParents();\n};\n\n/**\n * Function: isExtendParents\n * \n * Returns <extendParents>.\n */\nmxGraph.prototype.isExtendParents = function()\n{\n\treturn this.extendParents;\n};\n\n/**\n * Function: setExtendParents\n * \n * Sets <extendParents>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParents>.\n */\nmxGraph.prototype.setExtendParents = function(value)\n{\n\tthis.extendParents = value;\n};\n\n/**\n * Function: isExtendParentsOnAdd\n * \n * Returns <extendParentsOnAdd>.\n */\nmxGraph.prototype.isExtendParentsOnAdd = function(cell)\n{\n\treturn this.extendParentsOnAdd;\n};\n\n/**\n * Function: setExtendParentsOnAdd\n * \n * Sets <extendParentsOnAdd>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnAdd = function(value)\n{\n\tthis.extendParentsOnAdd = value;\n};\n\n/**\n * Function: isExtendParentsOnMove\n * \n * Returns <extendParentsOnMove>.\n */\nmxGraph.prototype.isExtendParentsOnMove = function()\n{\n\treturn this.extendParentsOnMove;\n};\n\n/**\n * Function: setExtendParentsOnMove\n * \n * Sets <extendParentsOnMove>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnMove = function(value)\n{\n\tthis.extendParentsOnMove = value;\n};\n\n/**\n * Function: isRecursiveResize\n * \n * Returns <recursiveResize>.\n * \n * Parameters:\n * \n * state - <mxCellState> that is being resized.\n */\nmxGraph.prototype.isRecursiveResize = function(state)\n{\n\treturn this.recursiveResize;\n};\n\n/**\n * Function: setRecursiveResize\n * \n * Sets <recursiveResize>.\n * \n * Parameters:\n * \n * value - New boolean value for <recursiveResize>.\n */\nmxGraph.prototype.setRecursiveResize = function(value)\n{\n\tthis.recursiveResize = value;\n};\n\n/**\n * Function: isConstrainChild\n * \n * Returns true if the given cell should be kept inside the bounds of its\n * parent according to the rules defined by <getOverlap> and\n * <isAllowOverlapParent>. This implementation returns false for all children\n * of edges and <isConstrainChildren> otherwise.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be constrained.\n */\nmxGraph.prototype.isConstrainChild = function(cell)\n{\n\treturn this.isConstrainChildren() && !this.getModel().isEdge(this.getModel().getParent(cell));\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <constrainChildren>.\n */\nmxGraph.prototype.isConstrainChildren = function()\n{\n\treturn this.constrainChildren;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <constrainChildren>.\n */\nmxGraph.prototype.setConstrainChildren = function(value)\n{\n\tthis.constrainChildren = value;\n};\n\n/**\n * Function: isConstrainRelativeChildren\n * \n * Returns <constrainRelativeChildren>.\n */\nmxGraph.prototype.isConstrainRelativeChildren = function()\n{\n\treturn this.constrainRelativeChildren;\n};\n\n/**\n * Function: setConstrainRelativeChildren\n * \n * Sets <constrainRelativeChildren>.\n */\nmxGraph.prototype.setConstrainRelativeChildren = function(value)\n{\n\tthis.constrainRelativeChildren = value;\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <allowNegativeCoordinates>.\n */\nmxGraph.prototype.isAllowNegativeCoordinates = function()\n{\n\treturn this.allowNegativeCoordinates;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <allowNegativeCoordinates>.\n */\nmxGraph.prototype.setAllowNegativeCoordinates = function(value)\n{\n\tthis.allowNegativeCoordinates = value;\n};\n\n/**\n * Function: getOverlap\n * \n * Returns a decimal number representing the amount of the width and height\n * of the given cell that is allowed to overlap its parent. A value of 0\n * means all children must stay inside the parent, 1 means the child is\n * allowed to be placed outside of the parent such that it touches one of\n * the parents sides. If <isAllowOverlapParent> returns false for the given\n * cell, then this method returns 0.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the overlap ratio should be returned.\n */\nmxGraph.prototype.getOverlap = function(cell)\n{\n\treturn (this.isAllowOverlapParent(cell)) ? this.defaultOverlap : 0;\n};\n\t\n/**\n * Function: isAllowOverlapParent\n * \n * Returns true if the given cell is allowed to be placed outside of the\n * parents area.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the child to be checked.\n */\nmxGraph.prototype.isAllowOverlapParent = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getFoldableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getFoldableCells = function(cells, collapse)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellFoldable(cell, collapse);\n\t}));\n};\n\n/**\n * Function: isCellFoldable\n * \n * Returns true if the given cell is foldable. This implementation\n * returns true if the cell has at least one child and its style\n * does not specify <mxConstants.STYLE_FOLDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose foldable state should be returned.\n */\nmxGraph.prototype.isCellFoldable = function(cell, collapse)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.model.getChildCount(cell) > 0 && style[mxConstants.STYLE_FOLDABLE] != 0;\n};\n\n/**\n * Function: isValidDropTarget\n *\n * Returns true if the given cell is a valid drop target for the specified\n * cells. If <splitEnabled> is true then this returns <isSplitTarget> for\n * the given arguments else it returns true if the cell is not collapsed\n * and its child count is greater than 0.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the possible drop target.\n * cells - <mxCells> that should be dropped into the target.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isValidDropTarget = function(cell, cells, evt)\n{\n\treturn cell != null && ((this.isSplitEnabled() &&\n\t\tthis.isSplitTarget(cell, cells, evt)) || (!this.model.isEdge(cell) &&\n\t\t(this.isSwimlane(cell) || (this.model.getChildCount(cell) > 0 &&\n\t\t!this.isCellCollapsed(cell)))));\n};\n\n/**\n * Function: isSplitTarget\n *\n * Returns true if the given edge may be splitted into two edges with the\n * given cell as a new terminal between the two.\n * \n * Parameters:\n * \n * target - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that should split the edge.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isSplitTarget = function(target, cells, evt)\n{\n\tif (this.model.isEdge(target) && cells != null && cells.length == 1 &&\n\t\tthis.isCellConnectable(cells[0]) && this.getEdgeValidationError(target,\n\t\t\tthis.model.getTerminal(target, true), cells[0]) == null)\n\t{\n\t\tvar src = this.model.getTerminal(target, true);\n\t\tvar trg = this.model.getTerminal(target, false);\n\n\t\treturn (!this.model.isAncestor(cells[0], src) &&\n\t\t\t\t!this.model.isAncestor(cells[0], trg));\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the given cell if it is a drop target for the given cells or the\n * nearest ancestor that may be used as a drop target for the given cells.\n * If the given array contains a swimlane and <swimlaneNesting> is false\n * then this always returns null. If no cell is given, then the bottommost\n * swimlane at the location of the given event is returned.\n * \n * This function should only be used if <isDropEnabled> returns true.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> which are to be dropped onto the target.\n * evt - Mouseevent for the drag and drop.\n * cell - <mxCell> that is under the mousepointer.\n * clone - Optional boolean to indicate of cells will be cloned.\n */\nmxGraph.prototype.getDropTarget = function(cells, evt, cell, clone)\n{\n\tif (!this.isSwimlaneNesting())\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar pt = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\tpt.x -= this.panDx;\n\tpt.y -= this.panDy;\n\tvar swimlane = this.getSwimlaneAt(pt.x, pt.y);\n\t\n\tif (cell == null)\n\t{\n\t\tcell = swimlane;\n\t}\n\telse if (swimlane != null)\n\t{\n\t\t// Checks if the cell is an ancestor of the swimlane\n\t\t// under the mouse and uses the swimlane in that case\n\t\tvar tmp = this.model.getParent(swimlane);\n\t\t\n\t\twhile (tmp != null && this.isSwimlane(tmp) && tmp != cell)\n\t\t{\n\t\t\ttmp = this.model.getParent(tmp);\n\t\t}\n\t\t\n\t\tif (tmp == cell)\n\t\t{\n\t\t\tcell = swimlane;\n\t\t}\n\t}\n\t\n\twhile (cell != null && !this.isValidDropTarget(cell, cells, evt) &&\n\t\t!this.model.isLayer(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\t// Checks if parent is dropped into child if not cloning\n\tif (clone == null || !clone)\n\t{\n\t\tvar parent = cell;\n\t\t\n\t\twhile (parent != null && mxUtils.indexOf(cells, parent) < 0)\n\t\t{\n\t\t\tparent = this.model.getParent(parent);\n\t\t}\n\t}\n\n\treturn (!this.model.isLayer(cell) && parent == null) ? cell : null;\n};\n\n/**\n * Group: Cell retrieval\n */\n\n/**\n * Function: getDefaultParent\n * \n * Returns <defaultParent> or <mxGraphView.currentRoot> or the first child\n * child of <mxGraphModel.root> if both are null. The value returned by\n * this function should be used as the parent for new cells (aka default\n * layer).\n */\nmxGraph.prototype.getDefaultParent = function()\n{\n\tvar parent = this.getCurrentRoot();\n\t\n\tif (parent == null)\n\t{\n\t\tparent = this.defaultParent;\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tvar root = this.model.getRoot();\n\t\t\tparent = this.model.getChildAt(root, 0);\n\t\t}\n\t}\n\t\n\treturn parent;\n};\n\n/**\n * Function: setDefaultParent\n * \n * Sets the <defaultParent> to the given cell. Set this to null to return\n * the first child of the root in getDefaultParent.\n */\nmxGraph.prototype.setDefaultParent = function(cell)\n{\n\tthis.defaultParent = cell;\n};\n\n/**\n * Function: getSwimlane\n * \n * Returns the nearest ancestor of the given cell which is a swimlane, or\n * the given cell, if it is itself a swimlane.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the ancestor swimlane should be returned.\n */\nmxGraph.prototype.getSwimlane = function(cell)\n{\n\twhile (cell != null && !this.isSwimlane(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: getSwimlaneAt\n * \n * Returns the bottom-most swimlane that intersects the given point (x, y)\n * in the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.getSwimlaneAt = function (x, y, parent)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getRoot();\n\t\t}\n\t}\n\t\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\tvar result = this.getSwimlaneAt(x, y, child);\n\t\t\t\t\n\t\t\t\tif (result != null)\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\telse if (this.isCellVisible(child) && this.isSwimlane(child))\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\t\n\t\t\t\t\tif (this.intersects(state, x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getCellAt\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy starting at the given parent. This will also return\n * swimlanes if the given location intersects the content area of the\n * swimlane. If this is not desired, then the <hitsSwimlaneContent> may be\n * used if the returned cell is a swimlane to determine if the location\n * is inside the content area or on the actual title of the swimlane.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * vertices - Optional boolean indicating if vertices should be returned.\n * Default is true.\n * edges - Optional boolean indicating if edges should be returned. Default\n * is true.\n * ignoreFn - Optional function that returns true if cell should be ignored.\n * The function is passed the cell state and the x and y parameter.\n */\nmxGraph.prototype.getCellAt = function(x, y, parent, vertices, edges, ignoreFn)\n{\n\tvertices = (vertices != null) ? vertices : true;\n\tedges = (edges != null) ? edges : true;\n\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar cell = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getCellAt(x, y, cell, vertices, edges, ignoreFn);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isCellVisible(cell) && (edges && this.model.isEdge(cell) ||\n\t\t\t\tvertices && this.model.isVertex(cell)))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cell);\n\n\t\t\t\tif (state != null && (ignoreFn == null || !ignoreFn(state, x, y)) &&\n\t\t\t\t\tthis.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: intersects\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n */\nmxGraph.prototype.intersects = function(state, x, y)\n{\n\tif (state != null)\n\t{\n\t\tvar pts = state.absolutePoints;\n\n\t\tif (pts != null)\n\t\t{\n\t\t\tvar t2 = this.tolerance * this.tolerance;\n\t\t\tvar pt = pts[0];\n\t\t\t\n\t\t\tfor (var i = 1; i < pts.length; i++)\n\t\t\t{\n\t\t\t\tvar next = pts[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(pt.x, pt.y, next.x, next.y, x, y);\n\t\t\t\t\n\t\t\t\tif (dist <= t2)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpt = next;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (mxUtils.contains(state, x, y))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: hitsSwimlaneContent\n * \n * Returns true if the given coordinate pair is inside the content\n * are of the given swimlane.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that specifies the swimlane.\n * x - X-coordinate of the mouse event.\n * y - Y-coordinate of the mouse event.\n */\nmxGraph.prototype.hitsSwimlaneContent = function(swimlane, x, y)\n{\n\tvar state = this.getView().getState(swimlane);\n\tvar size = this.getStartSize(swimlane);\n\t\n\tif (state != null)\n\t{\n\t\tvar scale = this.getView().getScale();\n\t\tx -= state.x;\n\t\ty -= state.y;\n\t\t\n\t\tif (size.width > 0 && x > 0 && x > size.width * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (size.height > 0 && y > 0 && y > size.height * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getChildVertices\n * \n * Returns the visible child vertices of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n */\nmxGraph.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\n/**\n * Function: getChildEdges\n * \n * Returns the visible child edges of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose child vertices should be returned.\n */\nmxGraph.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the visible child vertices or edges in the given parent. If\n * vertices and edges is false, then all children are returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n * vertices - Optional boolean that specifies if child vertices should\n * be returned. Default is false.\n * edges - Optional boolean that specifies if child edges should\n * be returned. Default is false.\n */\nmxGraph.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tparent = (parent != null) ? parent : this.getDefaultParent();\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\n\tvar cells = this.model.getChildCells(parent, vertices, edges);\n\tvar result = [];\n\n\t// Filters out the non-visible child cells\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tresult.push(cells[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\n/**\n * Function: getConnections\n * \n * Returns all visible edges connected to the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connections should be returned.\n * parent - Optional parent of the opposite end for a connection to be\n * returned.\n */\nmxGraph.prototype.getConnections = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, true, false);\n};\n\t\n/**\n * Function: getIncomingEdges\n * \n * Returns the visible incoming edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getIncomingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, false, false);\n};\n\t\n/**\n * Function: getOutgoingEdges\n * \n * Returns the visible outgoing edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getOutgoingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, false, true, false);\n};\n\t\n/**\n * Function: getEdges\n * \n * Returns the incoming and/or outgoing edges for the given cell.\n * If the optional parent argument is specified, then only edges are returned\n * where the opposite is in the given parent cell. If at least one of incoming\n * or outgoing is true, then loops are ignored, if both are false, then all\n * edges connected to the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n * incoming - Optional boolean that specifies if incoming edges should\n * be included in the result. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should\n * be included in the result. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be\n * included in the result. Default is true.\n * recurse - Optional boolean the specifies if the parent specified only \n * need be an ancestral parent, true, or the direct parent, false.\n * Default is false\n */\nmxGraph.prototype.getEdges = function(cell, parent, incoming, outgoing, includeLoops, recurse)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tvar edges = [];\n\tvar isCollapsed = this.isCellCollapsed(cell);\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\n\t\tif (isCollapsed || !this.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(this.model.getEdges(child, incoming, outgoing));\n\t\t}\n\t}\n\n\tedges = edges.concat(this.model.getEdges(cell, incoming, outgoing));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming &&\n\t\t\ttarget == cell && (parent == null || this.isValidAncestor(source, parent, recurse))) ||\n\t\t\t(outgoing && source == cell && (parent == null ||\n\t\t\t\t\tthis.isValidAncestor(target, parent, recurse))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isValidAncestor\n * \n * Returns whether or not the specified parent is a valid\n * ancestor of the specified cell, either direct or indirectly\n * based on whether ancestor recursion is enabled.\n * \n * Parameters:\n * \n * cell - <mxCell> the possible child cell\n * parent - <mxCell> the possible parent cell\n * recurse - boolean whether or not to recurse the child ancestors\n */\nmxGraph.prototype.isValidAncestor = function(cell, parent, recurse)\n{\n\treturn (recurse ? this.model.isAncestor(parent, cell) : this.model\n\t\t\t.getParent(cell) == parent);\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all distinct visible opposite cells for the specified terminal\n * on the given edges.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contains the edges whose opposite\n * terminals should be returned.\n * terminal - Terminal that specifies the end whose opposite should be\n * returned.\n * sources - Optional boolean that specifies if source terminals should be\n * included in the result. Default is true.\n * targets - Optional boolean that specifies if targer terminals should be\n * included in the result. Default is true.\n */\nmxGraph.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\t// Fast lookup to avoid duplicates in terminals array\n\tvar dict = new mxDictionary();\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar state = this.view.getState(edges[i]);\n\t\t\t\n\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of the edge and if the\n\t\t\t// target should be stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tif (!dict.get(target))\n\t\t\t\t{\n\t\t\t\t\tdict.put(target, true);\n\t\t\t\t\tterminals.push(target);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of the edge and if the\n\t\t\t// source should be stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tif (!dict.get(source))\n\t\t\t\t{\n\t\t\t\t\tdict.put(source, true);\n\t\t\t\t\tterminals.push(source);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and returns the connected edges\n * as displayed on the screen.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxGraph.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar src = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar trg = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns an <mxPoint> representing the given event in the unscaled,\n * non-translated coordinate space of <container> and applies the grid.\n * \n * Parameters:\n * \n * evt - Mousevent that contains the mouse pointer location.\n * addOffset - Optional boolean that specifies if the position should be\n * offset by half of the <gridSize>. Default is true.\n */\n mxGraph.prototype.getPointForEvent = function(evt, addOffset)\n {\n\tvar p = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\n\tvar s = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar off = (addOffset != false) ? this.gridSize / 2 : 0;\n\t\n\tp.x = this.snap(p.x / s - tr.x - off);\n\tp.y = this.snap(p.y / s - tr.y - off);\n\t\n\treturn p;\n};\n\n/**\n * Function: getCells\n * \n * Returns the child vertices and edges of the given parent that are contained\n * in the given rectangle. The result is added to the optional result array,\n * which is returned. If no result array is specified then a new array is\n * created and returned.\n * \n * Parameters:\n * \n * x - X-coordinate of the rectangle.\n * y - Y-coordinate of the rectangle.\n * width - Width of the rectangle.\n * height - Height of the rectangle.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * result - Optional array to store the result in.\n * intersection - Optional <mxRectangle> to check vertices for intersection.\n * ignoreFn - Optional function to check if a cell state is ignored.\n * includeDescendants - Optional boolean flag to add descendants to the result.\n * Default is false.\n */\nmxGraph.prototype.getCells = function(x, y, width, height, parent, result, intersection, ignoreFn, includeDescendants)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (width > 0 || height > 0 || intersection != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar right = x + width;\n\t\tvar bottom = y + height;\n\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getCurrentRoot();\n\t\t\t\n\t\t\tif (parent == null)\n\t\t\t{\n\t\t\t\tparent = model.getRoot();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(cell);\n\t\t\t\t\n\t\t\t\tif (state != null && this.isCellVisible(cell) &&\n\t\t\t\t\t(ignoreFn == null || !ignoreFn(state)))\n\t\t\t\t{\n\t\t\t\t\tvar deg = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0;\n\t\t\t\t\tvar box = state;\n\t\t\t\t\t\n\t\t\t\t\tif (deg != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbox = mxUtils.getBoundingBox(box, deg);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar hit = (intersection != null && model.isVertex(cell) && mxUtils.intersects(intersection, box)) ||\n\t\t\t\t\t\t(intersection == null && (model.isEdge(cell) || model.isVertex(cell)) &&\n\t\t\t\t\t\tbox.x >= x && box.y + box.height <= bottom &&\n\t\t\t\t\t\tbox.y >= y && box.x + box.width <= right);\n\t\t\t\t\t\n\t\t\t\t\tif (hit)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(cell);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!hit || includeDescendants)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.getCells(x, y, width, height, cell, result, intersection, ignoreFn, includeDescendants);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsBeyond\n * \n * Returns the children of the given parent that are contained in the\n * halfpane from the given point (x0, y0) rightwards or downwards\n * depending on rightHalfpane and bottomHalfpane.\n * \n * Parameters:\n * \n * x0 - X-coordinate of the origin.\n * y0 - Y-coordinate of the origin.\n * parent - Optional <mxCell> whose children should be checked. Default is\n * <defaultParent>.\n * rightHalfpane - Boolean indicating if the cells in the right halfpane\n * from the origin should be returned.\n * bottomHalfpane - Boolean indicating if the cells in the bottom halfpane\n * from the origin should be returned.\n */\nmxGraph.prototype.getCellsBeyond = function(x0, y0, parent, rightHalfpane, bottomHalfpane)\n{\n\tvar result = [];\n\t\n\tif (rightHalfpane || bottomHalfpane)\n\t{\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getDefaultParent();\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\n\t\t\t\tif (this.isCellVisible(child) && state != null)\n\t\t\t\t{\n\t\t\t\t\tif ((!rightHalfpane || state.x >= x0) &&\n\t\t\t\t\t\t(!bottomHalfpane || state.y >= y0))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: findTreeRoots\n * \n * Returns all children in the given parent which do not have incoming\n * edges. If the result is empty then the with the greatest difference\n * between incoming and outgoing edges is returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * isolate - Optional boolean that specifies if edges should be ignored if\n * the opposite end is not a child of the given parent cell. Default is\n * false.\n * invert - Optional boolean that specifies if outgoing or incoming edges\n * should be counted for a tree root. If false then outgoing edges will be\n * counted. Default is false.\n */\nmxGraph.prototype.findTreeRoots = function(parent, isolate, invert)\n{\n\tisolate = (isolate != null) ? isolate : false;\n\tinvert = (invert != null) ? invert : false;\n\tvar roots = [];\n\t\n\tif (parent != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar best = null;\n\t\tvar maxDiff = 0;\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (this.model.isVertex(cell) && this.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getConnections(cell, (isolate) ? parent : null);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < conns.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.view.getVisibleTerminal(conns[j], true);\n\n                    if (src == cell)\n                    {\n                        fanOut++;\n                    }\n                    else\n                    {\n                        fanIn++;\n                    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((invert && fanOut == 0 && fanIn > 0) ||\n\t\t\t\t\t(!invert && fanIn == 0 && fanOut > 0))\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar diff = (invert) ? fanIn - fanOut : fanOut - fanIn;\n\t\t\t\t\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> from cells to true for the visited cells.\n * inverse - Optional boolean to traverse in inverse direction. Default is false.\n * This is ignored if directed is false.\n */\nmxGraph.prototype.traverse = function(vertex, directed, func, edge, visited, inverse)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tinverse = (inverse != null) ? inverse : false;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || (!inverse == isSource))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.model.getTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited, inverse);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Selection\n */\n\n/**\n * Function: isCellSelected\n * \n * Returns true if the given cell is selected.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the selection state should be returned.\n */\nmxGraph.prototype.isCellSelected = function(cell)\n{\n\treturn this.getSelectionModel().isSelected(cell);\n};\n\n/**\n * Function: isSelectionEmpty\n * \n * Returns true if the selection is empty.\n */\nmxGraph.prototype.isSelectionEmpty = function()\n{\n\treturn this.getSelectionModel().isEmpty();\n};\n\n/**\n * Function: clearSelection\n * \n * Clears the selection using <mxGraphSelectionModel.clear>.\n */\nmxGraph.prototype.clearSelection = function()\n{\n\treturn this.getSelectionModel().clear();\n};\n\n/**\n * Function: getSelectionCount\n * \n * Returns the number of selected cells.\n */\nmxGraph.prototype.getSelectionCount = function()\n{\n\treturn this.getSelectionModel().cells.length;\n};\n\t\n/**\n * Function: getSelectionCell\n * \n * Returns the first cell from the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCell = function()\n{\n\treturn this.getSelectionModel().cells[0];\n};\n\n/**\n * Function: getSelectionCells\n * \n * Returns the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCells = function()\n{\n\treturn this.getSelectionModel().cells.slice();\n};\n\n/**\n * Function: setSelectionCell\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraph.prototype.setSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().setCell(cell);\n};\n\n/**\n * Function: setSelectionCells\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraph.prototype.setSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().setCells(cells);\n};\n\n/**\n * Function: addSelectionCell\n * \n * Adds the given cell to the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be add to the selection.\n */\nmxGraph.prototype.addSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().addCell(cell);\n};\n\n/**\n * Function: addSelectionCells\n * \n * Adds the given cells to the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be added to the selection.\n */\nmxGraph.prototype.addSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().addCells(cells);\n};\n\n/**\n * Function: removeSelectionCell\n * \n * Removes the given cell from the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().removeCell(cell);\n};\n\n/**\n * Function: removeSelectionCells\n * \n * Removes the given cells from the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().removeCells(cells);\n};\n\n/**\n * Function: selectRegion\n * \n * Selects and returns the cells inside the given rectangle for the\n * specified event.\n * \n * Parameters:\n * \n * rect - <mxRectangle> that represents the region to be selected.\n * evt - Mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectRegion = function(rect, evt)\n{\n\tvar cells = this.getCells(rect.x, rect.y, rect.width, rect.height);\n\tthis.selectCellsForEvent(cells, evt);\n\t\n\treturn cells;\n};\n\n/**\n * Function: selectNextCell\n * \n * Selects the next cell.\n */\nmxGraph.prototype.selectNextCell = function()\n{\n\tthis.selectCell(true);\n};\n\n/**\n * Function: selectPreviousCell\n * \n * Selects the previous cell.\n */\nmxGraph.prototype.selectPreviousCell = function()\n{\n\tthis.selectCell();\n};\n\n/**\n * Function: selectParentCell\n * \n * Selects the parent cell.\n */\nmxGraph.prototype.selectParentCell = function()\n{\n\tthis.selectCell(false, true);\n};\n\n/**\n * Function: selectChildCell\n * \n * Selects the first child cell.\n */\nmxGraph.prototype.selectChildCell = function()\n{\n\tthis.selectCell(false, false, true);\n};\n\n/**\n * Function: selectCell\n * \n * Selects the next, parent, first child or previous cell, if all arguments\n * are false.\n * \n * Parameters:\n * \n * isNext - Boolean indicating if the next cell should be selected.\n * isParent - Boolean indicating if the parent cell should be selected.\n * isChild - Boolean indicating if the first child cell should be selected.\n */\nmxGraph.prototype.selectCell = function(isNext, isParent, isChild)\n{\n\tvar sel = this.selectionModel;\n\tvar cell = (sel.cells.length > 0) ? sel.cells[0] : null;\n\t\n\tif (sel.cells.length > 1)\n\t{\n\t\tsel.clear();\n\t}\n\t\n\tvar parent = (cell != null) ?\n\t\tthis.model.getParent(cell) :\n\t\tthis.getDefaultParent();\n\t\n\tvar childCount = this.model.getChildCount(parent);\n\t\n\tif (cell == null && childCount > 0)\n\t{\n\t\tvar child = this.model.getChildAt(parent, 0);\n\t\tthis.setSelectionCell(child);\n\t}\n\telse if ((cell == null || isParent) &&\n\t\tthis.view.getState(parent) != null &&\n\t\tthis.model.getGeometry(parent) != null)\n\t{\n\t\tif (this.getCurrentRoot() != parent)\n\t\t{\n\t\t\tthis.setSelectionCell(parent);\n\t\t}\n\t}\n\telse if (cell != null && isChild)\n\t{\n\t\tvar tmp = this.model.getChildCount(cell);\n\t\t\n\t\tif (tmp > 0)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(cell, 0);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n\telse if (childCount > 0)\n\t{\n\t\tvar i = parent.getIndex(cell);\n\t\t\n\t\tif (isNext)\n\t\t{\n\t\t\ti++;\n\t\t\tvar child = this.model.getChildAt(parent, i % childCount);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti--;\n\t\t\tvar index =  (i < 0) ? childCount - 1 : i;\n\t\t\tvar child = this.model.getChildAt(parent, index);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectAll\n * \n * Selects all children of the given parent cell or the children of the\n * default parent if no parent is specified. To select leaf vertices and/or\n * edges use <selectCells>.\n * \n * Parameters:\n * \n * parent - Optional <mxCell> whose children should be selected.\n * Default is <defaultParent>.\n * descendants - Optional boolean specifying whether all descendants should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectAll = function(parent, descendants)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar cells = (descendants) ? this.model.filterDescendants(mxUtils.bind(this, function(cell)\n\t{\n\t\treturn cell != parent && this.view.getState(cell) != null;\n\t}), parent) : this.model.getChildren(parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectVertices = function(parent, selectGroups)\n{\n\tthis.selectCells(true, false, parent, selectGroups);\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectEdges = function(parent)\n{\n\tthis.selectCells(false, true, parent);\n};\n\n/**\n * Function: selectCells\n * \n * Selects all vertices and/or edges depending on the given boolean\n * arguments recursively, starting at the given parent or the default\n * parent if no parent is specified. Use <selectAll> to select all cells.\n * For vertices, only cells with no children are selected.\n * \n * Parameters:\n * \n * vertices - Boolean indicating if vertices should be selected.\n * edges - Boolean indicating if edges should be selected.\n * parent - Optional <mxCell> that acts as the root of the recursion.\n * Default is <defaultParent>.\n * selectGroups - Optional boolean that specifies if groups should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectCells = function(vertices, edges, parent, selectGroups)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.view.getState(cell) != null &&\n\t\t\t(((selectGroups || this.model.getChildCount(cell) == 0) &&\n\t\t\tthis.model.isVertex(cell) && vertices\n\t\t\t&& !this.model.isEdge(this.model.getParent(cell))) ||\n\t\t\t(this.model.isEdge(cell) && edges));\n\t});\n\t\n\tvar cells = this.model.filterDescendants(filter, parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectCellForEvent\n * \n * Selects the given cell by either adding it to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellForEvent = function(cell, evt)\n{\n\tvar isSelected = this.isCellSelected(cell);\n\t\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tif (isSelected)\n\t\t{\n\t\t\tthis.removeSelectionCell(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.addSelectionCell(cell);\n\t\t}\n\t}\n\telse if (!isSelected || this.getSelectionCount() != 1)\n\t{\n\t\tthis.setSelectionCell(cell);\n\t}\n};\n\n/**\n * Function: selectCellsForEvent\n * \n * Selects the given cells by either adding them to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellsForEvent = function(cells, evt)\n{\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tthis.addSelectionCells(cells);\n\t}\n\telse\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Group: Selection state\n */\n\n/**\n * Function: createHandler\n * \n * Creates a new handler for the given cell state. This implementation\n * returns a new <mxEdgeHandler> of the corresponding cell is an edge,\n * otherwise it returns an <mxVertexHandler>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose handler should be created.\n */\nmxGraph.prototype.createHandler = function(state)\n{\n\tvar result = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (this.model.isEdge(state.cell))\n\t\t{\n\t\t\tvar source = state.getVisibleTerminalState(true);\n\t\t\tvar target = state.getVisibleTerminalState(false);\n\t\t\tvar geo = this.getCellGeometry(state.cell);\n\t\t\t\n\t\t\tvar edgeStyle = this.view.getEdgeStyle(state, (geo != null) ? geo.points : null, source, target);\n\t\t\tresult = this.createEdgeHandler(state, edgeStyle);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = this.createVertexHandler(state);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createVertexHandler\n * \n * Hooks to create a new <mxVertexHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createVertexHandler = function(state)\n{\n\treturn new mxVertexHandler(state);\n};\n\n/**\n * Function: createEdgeHandler\n * \n * Hooks to create a new <mxEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeHandler = function(state, edgeStyle)\n{\n\tvar result = null;\n\t\n\tif (edgeStyle == mxEdgeStyle.Loop ||\n\t\tedgeStyle == mxEdgeStyle.ElbowConnector ||\n\t\tedgeStyle == mxEdgeStyle.SideToSide ||\n\t\tedgeStyle == mxEdgeStyle.TopToBottom)\n\t{\n\t\tresult = this.createElbowEdgeHandler(state);\n\t}\n\telse if (edgeStyle == mxEdgeStyle.SegmentConnector || \n\t\t\tedgeStyle == mxEdgeStyle.OrthConnector)\n\t{\n\t\tresult = this.createEdgeSegmentHandler(state);\n\t}\n\telse\n\t{\n\t\tresult = new mxEdgeHandler(state);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createEdgeSegmentHandler\n * \n * Hooks to create a new <mxEdgeSegmentHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeSegmentHandler = function(state)\n{\n\treturn new mxEdgeSegmentHandler(state);\n};\n\n/**\n * Function: createElbowEdgeHandler\n * \n * Hooks to create a new <mxElbowEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createElbowEdgeHandler = function(state)\n{\n\treturn new mxElbowEdgeHandler(state);\n};\n\n/**\n * Group: Graph events\n */\n\n/**\n * Function: addMouseListener\n * \n * Adds a listener to the graph event dispatch loop. The listener\n * must implement the mouseDown, mouseMove and mouseUp methods\n * as shown in the <mxMouseEvent> class.\n * \n * Parameters:\n * \n * listener - Listener to be added to the graph event listeners.\n */\nmxGraph.prototype.addMouseListener = function(listener)\n{\n\tif (this.mouseListeners == null)\n\t{\n\t\tthis.mouseListeners = [];\n\t}\n\t\n\tthis.mouseListeners.push(listener);\n};\n\n/**\n * Function: removeMouseListener\n * \n * Removes the specified graph listener.\n * \n * Parameters:\n * \n * listener - Listener to be removed from the graph event listeners.\n */\nmxGraph.prototype.removeMouseListener = function(listener)\n{\n\tif (this.mouseListeners != null)\n\t{\n\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t{\n\t\t\tif (this.mouseListeners[i] == listener)\n\t\t\t{\n\t\t\t\tthis.mouseListeners.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateMouseEvent\n * \n * Sets the graphX and graphY properties if the given <mxMouseEvent> if\n * required and returned the event.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> to be updated.\n * evtName - Name of the mouse event.\n */\nmxGraph.prototype.updateMouseEvent = function(me, evtName)\n{\n\tif (me.graphX == null || me.graphY == null)\n\t{\n\t\tvar pt = mxUtils.convertPoint(this.container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x - this.panDx;\n\t\tme.graphY = pt.y - this.panDy;\n\t\t\n\t\t// Searches for rectangles using method if native hit detection is disabled on shape\n\t\tif (me.getCell() == null && this.isMouseDown && evtName == mxEvent.MOUSE_MOVE)\n\t\t{\n\t\t\tme.state = this.view.getState(this.getCellAt(pt.x, pt.y, null, null, null, function(state)\n\t\t\t{\n\t\t\t\treturn state.shape == null || state.shape.paintBackground != mxRectangleShape.prototype.paintBackground ||\n\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1' ||\n\t\t\t\t\t(state.shape.fill != null && state.shape.fill != mxConstants.NONE);\n\t\t\t}));\n\t\t}\n\t}\n\t\n\treturn me;\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the state for the given touch event.\n */\nmxGraph.prototype.getStateForTouchEvent = function(evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\t\n\t// Dispatches the drop event to the graph which\n\t// consumes and executes the source function\n\tvar pt = mxUtils.convertPoint(this.container, x, y);\n\n\treturn this.view.getState(this.getCellAt(pt.x, pt.y));\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>.\n */\nmxGraph.prototype.isEventIgnored = function(evtName, me, sender)\n{\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\tvar result = false;\n\n\t// Drops events that are fired more than once\n\tif (me.getEvent() == this.lastEvent)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tthis.lastEvent = me.getEvent();\n\t}\n\n\t// Installs event listeners to capture the complete gesture from the event source\n\t// for non-MS touch events as a workaround for all events for the same geture being\n\t// fired from the event source even if that was removed from the DOM.\n\tif (this.eventSource != null && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t\tthis.mouseMoveRedirect = null;\n\t\tthis.mouseUpRedirect = null;\n\t\tthis.eventSource = null;\n\t}\n\telse if (!mxClient.IS_GC && this.eventSource != null && me.getSource() != this.eventSource)\n\t{\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_TOUCH && evtName == mxEvent.MOUSE_DOWN &&\n\t\t\t!mouseEvent && !mxEvent.isPenEvent(me.getEvent()))\n\t{\n\t\tthis.eventSource = me.getSource();\n\n\t\tthis.mouseMoveRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\tthis.mouseUpRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t}\n\n\t// Factored out the workarounds for FF to make it easier to override/remove\n\t// Note this method has side-effects!\n\tif (this.isSyntheticEventIgnored(evtName, me, sender))\n\t{\n\t\tresult = true;\n\t}\n\n\t// Never fires mouseUp/-Down for double clicks\n\tif (!mxEvent.isPopupTrigger(this.lastEvent) && evtName != mxEvent.MOUSE_MOVE && this.lastEvent.detail == 2)\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Filters out of sequence events or mixed event types during a gesture\n\tif (evtName == mxEvent.MOUSE_UP && this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = false;\n\t}\n\telse if (evtName == mxEvent.MOUSE_DOWN && !this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = true;\n\t\tthis.isMouseTrigger = mouseEvent;\n\t}\n\t// Drops mouse events that are fired during touch gestures as a workaround for Webkit\n\t// and mouse events that are not in sync with the current internal button state\n\telse if (!result && (((!mxClient.IS_FF || evtName != mxEvent.MOUSE_MOVE) &&\n\t\tthis.isMouseDown && this.isMouseTrigger != mouseEvent) ||\n\t\t(evtName == mxEvent.MOUSE_DOWN && this.isMouseDown) ||\n\t\t(evtName == mxEvent.MOUSE_UP && !this.isMouseDown)))\n\t{\n\t\tresult = true;\n\t}\n\t\n\tif (!result && evtName == mxEvent.MOUSE_DOWN)\n\t{\n\t\tthis.lastMouseX = me.getX();\n\t\tthis.lastMouseY = me.getY();\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isSyntheticEventIgnored\n * \n * Hook for ignoring synthetic mouse events after touchend in Firefox.\n */\nmxGraph.prototype.isSyntheticEventIgnored = function(evtName, me, sender)\n{\n\tvar result = false;\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\t\n\t// LATER: This does not cover all possible cases that can go wrong in FF\n\tif (this.ignoreMouseEvents && mouseEvent && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tthis.ignoreMouseEvents = evtName != mxEvent.MOUSE_UP;\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_FF && !mouseEvent && evtName == mxEvent.MOUSE_UP)\n\t{\n\t\tthis.ignoreMouseEvents = true;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isEventSourceIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>. This\n * implementation returns true for select, option and input (if not of type\n * checkbox, radio, button, submit or file) event sources if the event is not\n * a mouse event or a left mouse button press event.\n * \n * Parameters:\n * \n * evtName - The name of the event.\n * me - <mxMouseEvent> that should be ignored.\n */\nmxGraph.prototype.isEventSourceIgnored = function(evtName, me)\n{\n\tvar source = me.getSource();\n\tvar name = (source.nodeName != null) ? source.nodeName.toLowerCase() : '';\n\tvar candidate = !mxEvent.isMouseEvent(me.getEvent()) || mxEvent.isLeftMouseButton(me.getEvent());\n\t\n\treturn evtName == mxEvent.MOUSE_DOWN && candidate && (name == 'select' || name == 'option' ||\n\t\t(name == 'input' && source.type != 'checkbox' && source.type != 'radio' &&\n\t\tsource.type != 'button' && source.type != 'submit' && source.type != 'file'));\n};\n\n/**\n * Function: getEventState\n * \n * Returns the <mxCellState> to be used when firing the mouse event for the\n * given state. This implementation returns the given state.\n * \n * Parameters:\n * \n * <mxCellState> - State whose event source should be returned.\n */\nmxGraph.prototype.getEventState = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: fireMouseEvent\n * \n * Dispatches the given event in the graph event dispatch loop. Possible\n * event names are <mxEvent.MOUSE_DOWN>, <mxEvent.MOUSE_MOVE> and\n * <mxEvent.MOUSE_UP>. All listeners are invoked for all events regardless\n * of the consumed state of the event.\n * \n * Parameters:\n * \n * evtName - String that specifies the type of event to be dispatched.\n * me - <mxMouseEvent> to be fired.\n * sender - Optional sender argument. Default is this.\n */\nmxGraph.prototype.fireMouseEvent = function(evtName, me, sender)\n{\n\tif (this.isEventSourceIgnored(evtName, me))\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t\t\n\t\treturn;\n\t}\n\t\n\tif (sender == null)\n\t{\n\t\tsender = this;\n\t}\n\n\t// Updates the graph coordinates in the event\n\tme = this.updateMouseEvent(me, evtName);\n\n\t// Detects and processes double taps for touch-based devices which do not have native double click events\n\t// or where detection of double click is not always possible (quirks, IE10+). Note that this can only handle\n\t// double clicks on cells because the sequence of events in IE prevents detection on the background, it fires\n\t// two mouse ups, one of which without a cell but no mousedown for the second click which means we cannot\n\t// detect which mouseup(s) are part of the first click, ie we do not know when the first click ends.\n\tif ((!this.nativeDblClickEnabled && !mxEvent.isPopupTrigger(me.getEvent())) || (this.doubleTapEnabled &&\n\t\tmxClient.IS_TOUCH && (mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent()))))\n\t{\n\t\tvar currentTime = new Date().getTime();\n\t\t\n\t\t// NOTE: Second mouseDown for double click missing in quirks mode\n\t\tif ((!mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_DOWN) || (mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_UP && !this.fireDoubleClick))\n\t\t{\n\t\t\tif (this.lastTouchEvent != null && this.lastTouchEvent != me.getEvent() &&\n\t\t\t\tcurrentTime - this.lastTouchTime < this.doubleTapTimeout &&\n\t\t\t\tMath.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance &&\n\t\t\t\tthis.doubleClickCounter < 2)\n\t\t\t{\n\t\t\t\tthis.doubleClickCounter++;\n\t\t\t\tvar doubleClickFired = false;\n\t\t\t\t\n\t\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t{\n\t\t\t\t\tif (me.getCell() == this.lastTouchCell && this.lastTouchCell != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t\t\tvar cell = this.lastTouchCell;\n\t\t\t\t\t\tthis.lastTouchCell = null;\n\n\t\t\t\t\t\t// Fires native dblclick event via event source\n\t\t\t\t\t\t// NOTE: This fires two double click events on edges in quirks mode. While\n\t\t\t\t\t\t// trying to fix this, we realized that nativeDoubleClick can be disabled for\n\t\t\t\t\t\t// quirks and IE10+ (or we didn't find the case mentioned above where it\n\t\t\t\t\t\t// would not work), ie. all double clicks seem to be working without this.\n\t\t\t\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tme.getSource().fireEvent('ondblclick');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t\t\t\tdoubleClickFired = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.fireDoubleClick = true;\n\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t}\n\n\t\t\t\t// Do not ignore mouse up in quirks in this case\n\t\t\t\tif (!mxClient.IS_QUIRKS || doubleClickFired)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.lastTouchEvent == null || this.lastTouchEvent != me.getEvent())\n\t\t\t{\n\t\t\t\tthis.lastTouchCell = me.getCell();\n\t\t\t\tthis.lastTouchX = me.getX();\n\t\t\t\tthis.lastTouchY = me.getY();\n\t\t\t\tthis.lastTouchTime = currentTime;\n\t\t\t\tthis.lastTouchEvent = me.getEvent();\n\t\t\t\tthis.doubleClickCounter = 0;\n\t\t\t}\n\t\t}\n\t\telse if ((this.isMouseDown || evtName == mxEvent.MOUSE_UP) && this.fireDoubleClick)\n\t\t{\n\t\t\tthis.fireDoubleClick = false;\n\t\t\tvar cell = this.lastTouchCell;\n\t\t\tthis.lastTouchCell = null;\n\t\t\tthis.isMouseDown = false;\n\t\t\t\n\t\t\t// Workaround for Chrome/Safari not firing native double click events for double touch on background\n\t\t\tvar valid = (cell != null) || ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\t\t(mxClient.IS_GC || mxClient.IS_SF));\n\t\t\t\n\t\t\tif (valid && Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance)\n\t\t\t{\n\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!this.isEventIgnored(evtName, me, sender))\n\t{\n\t\t// Updates the event state via getEventState\n\t\tme.state = this.getEventState(me.getState());\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FIRE_MOUSE_EVENT, 'eventName', evtName, 'event', me));\n\t\t\n\t\tif ((mxClient.IS_OP || mxClient.IS_SF || mxClient.IS_GC || mxClient.IS_IE11 ||\n\t\t\t(mxClient.IS_IE && mxClient.IS_SVG) || me.getEvent().target != this.container))\n\t\t{\n\t\t\tif (evtName == mxEvent.MOUSE_MOVE && this.isMouseDown && this.autoScroll && !mxEvent.isMultiTouchEvent(me.getEvent))\n\t\t\t{\n\t\t\t\tthis.scrollPointToVisible(me.getGraphX(), me.getGraphY(), this.autoExtend);\n\t\t\t}\n\t\t\telse if (evtName == mxEvent.MOUSE_UP && this.ignoreScrollbars && this.translateToScrollPosition &&\n\t\t\t\t\t(this.container.scrollLeft != 0 || this.container.scrollTop != 0))\n\t\t\t{\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar tr = this.view.translate;\n\t\t\t\tthis.view.setTranslate(tr.x - this.container.scrollLeft / s, tr.y - this.container.scrollTop / s);\n\t\t\t\tthis.container.scrollLeft = 0;\n\t\t\t\tthis.container.scrollTop = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.mouseListeners != null)\n\t\t\t{\n\t\t\t\tvar args = [sender, me];\n\t\n\t\t\t\t// Does not change returnValue in Opera\n\t\t\t\tif (!me.getEvent().preventDefault)\n\t\t\t\t{\n\t\t\t\t\tme.getEvent().returnValue = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar l = this.mouseListeners[i];\n\t\t\t\t\t\n\t\t\t\t\tif (evtName == mxEvent.MOUSE_DOWN)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseDown.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_MOVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseMove.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseUp.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Invokes the click handler\n\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t{\n\t\t\t\tthis.click(me);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Detects tapAndHold events using a timer\n\t\tif ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\tevtName == mxEvent.MOUSE_DOWN && this.tapAndHoldEnabled && !this.tapAndHoldInProgress)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = true;\n\t\t\tthis.initialTouchX = me.getGraphX();\n\t\t\tthis.initialTouchY = me.getGraphY();\n\t\t\t\n\t\t\tvar handler = function()\n\t\t\t{\n\t\t\t\tif (this.tapAndHoldValid)\n\t\t\t\t{\n\t\t\t\t\tthis.tapAndHold(me);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\t\tthis.tapAndHoldValid = false;\n\t\t\t};\n\t\t\t\n\t\t\tif (this.tapAndHoldThread)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.tapAndHoldThread);\n\t\t\t}\n\t\n\t\t\tthis.tapAndHoldThread = window.setTimeout(mxUtils.bind(this, handler), this.tapAndHoldDelay);\n\t\t\tthis.tapAndHoldValid = true;\n\t\t}\n\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\tthis.tapAndHoldValid = false;\n\t\t}\n\t\telse if (this.tapAndHoldValid)\n\t\t{\n\t\t\tthis.tapAndHoldValid =\n\t\t\t\tMath.abs(this.initialTouchX - me.getGraphX()) < this.tolerance &&\n\t\t\t\tMath.abs(this.initialTouchY - me.getGraphY()) < this.tolerance;\n\t\t}\n\n\t\t// Stops editing for all events other than from cellEditor\n\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isEditing() && !this.cellEditor.isEventSource(me.getEvent()))\n\t\t{\n\t\t\tthis.stopEditing(!this.isInvokesStopCellEditing());\n\t\t}\n\n\t\tthis.consumeMouseEvent(evtName, me, sender);\n\t}\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given <mxMouseEvent> if it's a touchStart event.\n */\nmxGraph.prototype.consumeMouseEvent = function(evtName, me, sender)\n{\n\t// Workaround for duplicate click in Windows 8 with Chrome/FF/Opera with touch\n\tif (evtName == mxEvent.MOUSE_DOWN && mxEvent.isTouchEvent(me.getEvent()))\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: fireGestureEvent\n * \n * Dispatches a <mxEvent.GESTURE> event. The following example will resize the\n * cell under the mouse based on the scale property of the native touch event.\n * \n * (code)\n * graph.addListener(mxEvent.GESTURE, function(sender, eo)\n * {\n *   var evt = eo.getProperty('event');\n *   var state = graph.view.getState(eo.getProperty('cell'));\n *   \n *   if (graph.isEnabled() && graph.isCellResizable(state.cell) && Math.abs(1 - evt.scale) > 0.2)\n *   {\n *     var scale = graph.view.scale;\n *     var tr = graph.view.translate;\n *     \n *     var w = state.width * evt.scale;\n *     var h = state.height * evt.scale;\n *     var x = state.x - (w - state.width) / 2;\n *     var y = state.y - (h - state.height) / 2;\n *     \n *     var bounds = new mxRectangle(graph.snap(x / scale) - tr.x,\n *     \t\tgraph.snap(y / scale) - tr.y, graph.snap(w / scale), graph.snap(h / scale));\n *     graph.resizeCell(state.cell, bounds);\n *     eo.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * evt - Gestureend event that represents the gesture.\n * cell - Optional <mxCell> associated with the gesture.\n */\nmxGraph.prototype.fireGestureEvent = function(evt, cell)\n{\n\t// Resets double tap event handling when gestures take place\n\tthis.lastTouchTime = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.GESTURE, 'event', evt, 'cell', cell));\n};\n\n/**\n * Function: destroy\n * \n * Destroys the graph and all its resources.\n */\nmxGraph.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\t\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.selectionCellsHandler != null)\n\t\t{\n\t\t\tthis.selectionCellsHandler.destroy();\n\t\t}\n\n\t\tif (this.panningHandler != null)\n\t\t{\n\t\t\tthis.panningHandler.destroy();\n\t\t}\n\n\t\tif (this.popupMenuHandler != null)\n\t\t{\n\t\t\tthis.popupMenuHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.connectionHandler != null)\n\t\t{\n\t\t\tthis.connectionHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.graphHandler != null)\n\t\t{\n\t\t\tthis.graphHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.cellEditor != null)\n\t\t{\n\t\t\tthis.cellEditor.destroy();\n\t\t}\n\t\t\n\t\tif (this.view != null)\n\t\t{\n\t\t\tthis.view.destroy();\n\t\t}\n\n\t\tif (this.model != null && this.graphModelChangeListener != null)\n\t\t{\n\t\t\tthis.model.removeListener(this.graphModelChangeListener);\n\t\t\tthis.graphModelChangeListener = null;\n\t\t}\n\n\t\tthis.container = null;\n\t}\n};\n\n__mxOutput.mxGraph = typeof mxGraph !== 'undefined' ? mxGraph : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellOverlay\n *\n * Extends <mxEventSource> to implement a graph overlay, represented by an icon\n * and a tooltip. Overlays can handle and fire <click> events and are added to\n * the graph using <mxGraph.addCellOverlay>, and removed using\n * <mxGraph.removeCellOverlay>, or <mxGraph.removeCellOverlays> to remove all overlays.\n * The <mxGraph.getCellOverlays> function returns the array of overlays for a given\n * cell in a graph. If multiple overlays exist for the same cell, then\n * <getBounds> should be overridden in at least one of the overlays.\n * \n * Overlays appear on top of all cells in a special layer. If this is not\n * desirable, then the image must be rendered as part of the shape or label of\n * the cell instead.\n *\n * Example:\n * \n * The following adds a new overlays for a given vertex and selects the cell\n * if the overlay is clicked.\n *\n * (code)\n * var overlay = new mxCellOverlay(img, html);\n * graph.addCellOverlay(vertex, overlay);\n * overlay.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   graph.setSelectionCell(cell);\n * });\n * (end)\n * \n * For cell overlays to be printed use <mxPrintPreview.printOverlays>.\n *\n * Event: mxEvent.CLICK\n *\n * Fires when the user clicks on the overlay. The <code>event</code> property\n * contains the corresponding mouse event and the <code>cell</code> property\n * contains the cell. For touch devices this is fired if the element receives\n * a touchend event.\n * \n * Constructor: mxCellOverlay\n *\n * Constructs a new overlay using the given image and tooltip.\n * \n * Parameters:\n * \n * image - <mxImage> that represents the icon to be displayed.\n * tooltip - Optional string that specifies the tooltip.\n * align - Optional horizontal alignment for the overlay. Possible\n * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>\n * (default).\n * verticalAlign - Vertical alignment for the overlay. Possible\n * values are <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>\n * (default).\n */\nfunction mxCellOverlay(image, tooltip, align, verticalAlign, offset, cursor)\n{\n\tthis.image = image;\n\tthis.tooltip = tooltip;\n\tthis.align = (align != null) ? align : this.align;\n\tthis.verticalAlign = (verticalAlign != null) ? verticalAlign : this.verticalAlign;\n\tthis.offset = (offset != null) ? offset : new mxPoint();\n\tthis.cursor = (cursor != null) ? cursor : 'help';\n};\n\n/**\n * Extends mxEventSource.\n */\nmxCellOverlay.prototype = new mxEventSource();\nmxCellOverlay.prototype.constructor = mxCellOverlay;\n\n/**\n * Variable: image\n *\n * Holds the <mxImage> to be used as the icon.\n */\nmxCellOverlay.prototype.image = null;\n\n/**\n * Variable: tooltip\n * \n * Holds the optional string to be used as the tooltip.\n */\nmxCellOverlay.prototype.tooltip = null;\n\n/**\n * Variable: align\n * \n * Holds the horizontal alignment for the overlay. Default is\n * <mxConstants.ALIGN_RIGHT>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.align = mxConstants.ALIGN_RIGHT;\n\n/**\n * Variable: verticalAlign\n * \n * Holds the vertical alignment for the overlay. Default is\n * <mxConstants.ALIGN_BOTTOM>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.verticalAlign = mxConstants.ALIGN_BOTTOM;\n\n/**\n * Variable: offset\n * \n * Holds the offset as an <mxPoint>. The offset will be scaled according to the\n * current scale.\n */\nmxCellOverlay.prototype.offset = null;\n\n/**\n * Variable: cursor\n * \n * Holds the cursor for the overlay. Default is 'help'.\n */\nmxCellOverlay.prototype.cursor = null;\n\n/**\n * Variable: defaultOverlap\n * \n * Defines the overlapping for the overlay, that is, the proportional distance\n * from the origin to the point defined by the alignment. Default is 0.5.\n */\nmxCellOverlay.prototype.defaultOverlap = 0.5;\n\n/**\n * Function: getBounds\n * \n * Returns the bounds of the overlay for the given <mxCellState> as an\n * <mxRectangle>. This should be overridden when using multiple overlays\n * per cell so that the overlays do not overlap.\n * \n * The following example will place the overlay along an edge (where\n * x=[-1..1] from the start to the end of the edge and y is the\n * orthogonal offset in px).\n * \n * (code)\n * overlay.getBounds = function(state)\n * {\n *   var bounds = mxCellOverlay.prototype.getBounds.apply(this, arguments);\n *   \n *   if (state.view.graph.getModel().isEdge(state.cell))\n *   {\n *     var pt = state.view.getPoint(state, {x: 0, y: 0, relative: true});\n *     \n *     bounds.x = pt.x - bounds.width / 2;\n *     bounds.y = pt.y - bounds.height / 2;\n *   }\n *   \n *   return bounds;\n * };\n * (end)\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the current state of the\n * associated cell.\n */\nmxCellOverlay.prototype.getBounds = function(state)\n{\n\tvar isEdge = state.view.graph.getModel().isEdge(state.cell);\n\tvar s = state.view.scale;\n\tvar pt = null;\n\n\tvar w = this.image.width;\n\tvar h = this.image.height;\n\t\n\tif (isEdge)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (pts.length % 2 == 1)\n\t\t{\n\t\t\tpt = pts[Math.floor(pts.length / 2)];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar idx = pts.length / 2;\n\t\t\tvar p0 = pts[idx-1];\n\t\t\tvar p1 = pts[idx];\n\t\t\tpt = new mxPoint(p0.x + (p1.x - p0.x) / 2,\n\t\t\t\tp0.y + (p1.y - p0.y) / 2);\n\t\t}\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint();\n\t\t\n\t\tif (this.align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tpt.x = state.x;\n\t\t}\n\t\telse if (this.align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tpt.x = state.x + state.width / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.x = state.x + state.width;\n\t\t}\n\t\t\n\t\tif (this.verticalAlign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tpt.y = state.y;\n\t\t}\n\t\telse if (this.verticalAlign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tpt.y = state.y + state.height / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.y = state.y + state.height;\n\t\t}\n\t}\n\n\treturn new mxRectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s),\n\t\tMath.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);\n};\n\n/**\n * Function: toString\n * \n * Returns the textual representation of the overlay to be used as the\n * tooltip. This implementation returns <tooltip>.\n */\nmxCellOverlay.prototype.toString = function()\n{\n\treturn this.tooltip;\n};\n\n__mxOutput.mxCellOverlay = typeof mxCellOverlay !== 'undefined' ? mxCellOverlay : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxOutline\n *\n * Implements an outline (aka overview) for a graph. Set <updateOnPan> to true\n * to enable updates while the source graph is panning.\n * \n * Example:\n * \n * (code)\n * var outline = new mxOutline(graph, div);\n * (end)\n * \n * If an outline is used in an <mxWindow> in IE8 standards mode, the following\n * code makes sure that the shadow filter is not inherited and that any\n * transparent elements in the graph do not show the page background, but the\n * background of the graph container.\n * \n * (code)\n * if (document.documentMode == 8)\n * {\n *   container.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n * }\n * (end)\n * \n * To move the graph to the top, left corner the following code can be used.\n * \n * (code)\n * var scale = graph.view.scale;\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x / scale, -bounds.y / scale);\n * (end)\n * \n * To toggle the suspended mode, the following can be used.\n * \n * (code)\n * outline.suspended = !outln.suspended;\n * if (!outline.suspended)\n * {\n *   outline.update(true);\n * }\n * (end)\n * \n * Constructor: mxOutline\n *\n * Constructs a new outline for the specified graph inside the given\n * container.\n * \n * Parameters:\n * \n * source - <mxGraph> to create the outline for.\n * container - DOM node that will contain the outline.\n */\nfunction mxOutline(source, container)\n{\n\tthis.source = source;\n\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\n/**\n * Function: source\n * \n * Reference to the source <mxGraph>.\n */\nmxOutline.prototype.source = null;\n\n/**\n * Function: outline\n * \n * Reference to the <mxGraph> that renders the outline.\n */\nmxOutline.prototype.outline = null;\n\n/**\n * Function: graphRenderHint\n * \n * Renderhint to be used for the outline graph. Default is faster.\n */\nmxOutline.prototype.graphRenderHint = mxConstants.RENDERING_HINT_FASTER;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxOutline.prototype.enabled = true;\n\n/**\n * Variable: showViewport\n * \n * Specifies a viewport rectangle should be shown. Default is true.\n */\nmxOutline.prototype.showViewport = true;\n\n/**\n * Variable: border\n * \n * Border to be added at the bottom and right. Default is 10.\n */\nmxOutline.prototype.border = 10;\n\n/**\n * Variable: enabled\n * \n * Specifies the size of the sizer handler. Default is 8.\n */\nmxOutline.prototype.sizerSize = 8;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible in the outline. Default is false.\n */\nmxOutline.prototype.labelsVisible = false;\n\n/**\n * Variable: updateOnPan\n * \n * Specifies if <update> should be called for <mxEvent.PAN> in the source\n * graph. Default is false.\n */\nmxOutline.prototype.updateOnPan = false;\n\n/**\n * Variable: sizerImage\n * \n * Optional <mxImage> to be used for the sizer. Default is null.\n */\nmxOutline.prototype.sizerImage = null;\n\n/**\n * Variable: minScale\n * \n * Minimum scale to be used. Default is 0.0001.\n */\nmxOutline.prototype.minScale = 0.0001;\n\n/**\n * Variable: suspended\n * \n * Optional boolean flag to suspend updates. Default is false. This flag will\n * also suspend repaints of the outline. To toggle this switch, use the\n * following code.\n * \n * (code)\n * nav.suspended = !nav.suspended;\n * \n * if (!nav.suspended)\n * {\n *   nav.update(true);\n * }\n * (end)\n */\nmxOutline.prototype.suspended = false;\n\n/**\n * Variable: forceVmlHandles\n * \n * Specifies if VML should be used to render the handles in this control. This\n * is true for IE8 standards mode and false for all other browsers and modes.\n * This is a workaround for rendering issues of HTML elements over elements\n * with filters in IE 8 standards mode.\n */\nmxOutline.prototype.forceVmlHandles = document.documentMode == 8;\n\n/**\n * Function: createGraph\n * \n * Creates the <mxGraph> used in the outline.\n */\nmxOutline.prototype.createGraph = function(container)\n{\n\tvar graph = new mxGraph(container, this.source.getModel(), this.graphRenderHint, this.source.getStylesheet());\n\tgraph.foldingEnabled = false;\n\tgraph.autoScroll = false;\n\t\n\treturn graph;\n};\n\n/**\n * Function: init\n * \n * Initializes the outline inside the given container.\n */\nmxOutline.prototype.init = function(container)\n{\n\tthis.outline = this.createGraph(container);\n\t\n\t// Do not repaint when suspended\n\tvar outlineGraphModelChanged = this.outline.graphModelChanged;\n\tthis.outline.graphModelChanged = mxUtils.bind(this, function(changes)\n\t{\n\t\tif (!this.suspended && this.outline != null)\n\t\t{\n\t\t\toutlineGraphModelChanged.apply(this.outline, arguments);\n\t\t}\n\t});\n\n\t// Enables faster painting in SVG\n\tif (mxClient.IS_SVG)\n\t{\n\t\tvar node = this.outline.getView().getCanvas().parentNode;\n\t\tnode.setAttribute('shape-rendering', 'optimizeSpeed');\n\t\tnode.setAttribute('image-rendering', 'optimizeSpeed');\n\t}\n\t\n\t// Hides cursors and labels\n\tthis.outline.labelsVisible = this.labelsVisible;\n\tthis.outline.setEnabled(false);\n\t\n\tthis.updateHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (!this.suspended && !this.active)\n\t\t{\n\t\t\tthis.update();\n\t\t}\n\t});\n\t\n\t// Updates the scale of the outline after a change of the main graph\n\tthis.source.getModel().addListener(mxEvent.CHANGE, this.updateHandler);\n\tthis.outline.addMouseListener(this);\n\t\n\t// Adds listeners to keep the outline in sync with the source graph\n\tvar view = this.source.getView();\n\tview.addListener(mxEvent.SCALE, this.updateHandler);\n\tview.addListener(mxEvent.TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.SCALE_AND_TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.DOWN, this.updateHandler);\n\tview.addListener(mxEvent.UP, this.updateHandler);\n\n\t// Updates blue rectangle on scroll\n\tmxEvent.addListener(this.source.container, 'scroll', this.updateHandler);\n\t\n\tthis.panHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.updateOnPan)\n\t\t{\n\t\t\tthis.updateHandler.apply(this, arguments);\n\t\t}\n\t});\n\tthis.source.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Refreshes the graph in the outline after a refresh of the main graph\n\tthis.refreshHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.outline.setStylesheet(this.source.getStylesheet());\n\t\tthis.outline.refresh();\n\t});\n\tthis.source.addListener(mxEvent.REFRESH, this.refreshHandler);\n\n\t// Creates the blue rectangle for the viewport\n\tthis.bounds = new mxRectangle(0, 0, 0, 0);\n\tthis.selectionBorder = new mxRectangleShape(this.bounds, null,\n\t\tmxConstants.OUTLINE_COLOR, mxConstants.OUTLINE_STROKEWIDTH);\n\tthis.selectionBorder.dialect = this.outline.dialect;\n\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.selectionBorder.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.selectionBorder.init(this.outline.getView().getOverlayPane());\n\n\t// Handles event by catching the initial pointer start and then listening to the\n\t// complete gesture on the event target. This is needed because all the events\n\t// are routed via the initial element even if that element is removed from the\n\t// DOM, which happens when we repaint the selection border and zoom handles.\n\tvar handler = mxUtils.bind(this, function(evt)\n\t{\n\t\tvar t = mxEvent.getSource(evt);\n\t\t\n\t\tvar redirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tvar redirect2 = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tmxEvent.removeGestureListeners(t, null, redirect, redirect2);\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(t, null, redirect, redirect2);\n\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t});\n\t\n\tmxEvent.addGestureListeners(this.selectionBorder.node, handler);\n\n\t// Creates a small blue rectangle for sizing (sizer handle)\n\tthis.sizer = this.createSizer();\n\t\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.sizer.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.sizer.init(this.outline.getView().getOverlayPane());\n\t\n\tif (this.enabled)\n\t{\n\t\tthis.sizer.node.style.cursor = 'nwse-resize';\n\t}\n\t\n\tmxEvent.addGestureListeners(this.sizer.node, handler);\n\n\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\tthis.sizer.node.style.display = this.selectionBorder.node.style.display;\n\tthis.selectionBorder.node.style.cursor = 'move';\n\n\tthis.update(false);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxOutline.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setZoomEnabled\n * \n * Enables or disables the zoom handling by showing or hiding the respective\n * handle.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setZoomEnabled = function(value)\n{\n\tthis.sizer.node.style.visibility = (value) ? 'visible' : 'hidden';\n};\n\n/**\n * Function: refresh\n * \n * Invokes <update> and revalidate the outline. This method is deprecated.\n */\nmxOutline.prototype.refresh = function()\n{\n\tthis.update(true);\n};\n\n/**\n * Function: createSizer\n * \n * Creates the shape used as the sizer.\n */\nmxOutline.prototype.createSizer = function()\n{\n\tif (this.sizerImage != null)\n\t{\n\t\tvar sizer = new mxImageShape(new mxRectangle(0, 0, this.sizerImage.width, this.sizerImage.height), this.sizerImage.src);\n\t\tsizer.dialect = this.outline.dialect;\n\t\t\n\t\treturn sizer;\n\t}\n\telse\n\t{\n\t\tvar sizer = new mxRectangleShape(new mxRectangle(0, 0, this.sizerSize, this.sizerSize),\n\t\t\tmxConstants.OUTLINE_HANDLE_FILLCOLOR, mxConstants.OUTLINE_HANDLE_STROKECOLOR);\n\t\tsizer.dialect = this.outline.dialect;\n\t\n\t\treturn sizer;\n\t}\n};\n\n/**\n * Function: getSourceContainerSize\n * \n * Returns the size of the source container.\n */\nmxOutline.prototype.getSourceContainerSize = function()\n{\n\treturn new mxRectangle(0, 0, this.source.container.scrollWidth, this.source.container.scrollHeight);\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getOutlineOffset = function(scale)\n{\n\treturn null;\n};\n\n/**\n * Function: getSourceGraphBounds\n * \n * Returns the graph bound boxing of the source.\n */\nmxOutline.prototype.getSourceGraphBounds = function()\n{\n\treturn this.source.getGraphBounds();\n};\n\n/**\n * Function: update\n * \n * Updates the outline.\n */\nmxOutline.prototype.update = function(revalidate)\n{\n\tif (this.source != null && this.source.container != null &&\n\t\tthis.outline != null && this.outline.container != null)\n\t{\n\t\tvar sourceScale = this.source.view.scale;\n\t\tvar scaledGraphBounds = this.getSourceGraphBounds();\n\t\tvar unscaledGraphBounds = new mxRectangle(scaledGraphBounds.x / sourceScale + this.source.panDx,\n\t\t\t\tscaledGraphBounds.y / sourceScale + this.source.panDy, scaledGraphBounds.width / sourceScale,\n\t\t\t\tscaledGraphBounds.height / sourceScale);\n\n\t\tvar unscaledFinderBounds = new mxRectangle(0, 0,\n\t\t\tthis.source.container.clientWidth / sourceScale,\n\t\t\tthis.source.container.clientHeight / sourceScale);\n\t\t\n\t\tvar union = unscaledGraphBounds.clone();\n\t\tunion.add(unscaledFinderBounds);\n\t\n\t\t// Zooms to the scrollable area if that is bigger than the graph\n\t\tvar size = this.getSourceContainerSize();\n\t\tvar completeWidth = Math.max(size.width / sourceScale, union.width);\n\t\tvar completeHeight = Math.max(size.height / sourceScale, union.height);\n\t\n\t\tvar availableWidth = Math.max(0, this.outline.container.clientWidth - this.border);\n\t\tvar availableHeight = Math.max(0, this.outline.container.clientHeight - this.border);\n\t\t\n\t\tvar outlineScale = Math.min(availableWidth / completeWidth, availableHeight / completeHeight);\n\t\tvar scale = (isNaN(outlineScale)) ? this.minScale : Math.max(this.minScale, outlineScale);\n\n\t\tif (scale > 0)\n\t\t{\n\t\t\tif (this.outline.getView().scale != scale)\n\t\t\t{\n\t\t\t\tthis.outline.getView().scale = scale;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\tvar navView = this.outline.getView();\n\t\t\t\n\t\t\tif (navView.currentRoot != this.source.getView().currentRoot)\n\t\t\t{\n\t\t\t\tnavView.setCurrentRoot(this.source.getView().currentRoot);\n\t\t\t}\n\n\t\t\tvar t = this.source.view.translate;\n\t\t\tvar tx = t.x + this.source.panDx;\n\t\t\tvar ty = t.y + this.source.panDy;\n\t\t\t\n\t\t\tvar off = this.getOutlineOffset(scale);\n\t\t\t\n\t\t\tif (off != null)\n\t\t\t{\n\t\t\t\ttx += off.x;\n\t\t\t\tty += off.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (unscaledGraphBounds.x < 0)\n\t\t\t{\n\t\t\t\ttx = tx - unscaledGraphBounds.x;\n\t\t\t}\n\t\t\tif (unscaledGraphBounds.y < 0)\n\t\t\t{\n\t\t\t\tty = ty - unscaledGraphBounds.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (navView.translate.x != tx || navView.translate.y != ty)\n\t\t\t{\n\t\t\t\tnavView.translate.x = tx;\n\t\t\t\tnavView.translate.y = ty;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\t// Prepares local variables for computations\n\t\t\tvar t2 = navView.translate;\n\t\t\tscale = this.source.getView().scale;\n\t\t\tvar scale2 = scale / navView.scale;\n\t\t\tvar scale3 = 1.0 / navView.scale;\n\t\t\tvar container = this.source.container;\n\t\t\t\n\t\t\t// Updates the bounds of the viewrect in the navigation\n\t\t\tthis.bounds = new mxRectangle(\n\t\t\t\t(t2.x - t.x - this.source.panDx) / scale3,\n\t\t\t\t(t2.y - t.y - this.source.panDy) / scale3,\n\t\t\t\t(container.clientWidth / scale2),\n\t\t\t\t(container.clientHeight / scale2));\n\t\t\t\n\t\t\t// Adds the scrollbar offset to the finder\n\t\t\tthis.bounds.x += this.source.container.scrollLeft * navView.scale / scale;\n\t\t\tthis.bounds.y += this.source.container.scrollTop * navView.scale / scale;\n\t\t\t\n\t\t\tvar b = this.selectionBorder.bounds;\n\t\t\t\n\t\t\tif (b.x != this.bounds.x || b.y != this.bounds.y || b.width != this.bounds.width || b.height != this.bounds.height)\n\t\t\t{\n\t\t\t\tthis.selectionBorder.bounds = this.bounds;\n\t\t\t\tthis.selectionBorder.redraw();\n\t\t\t}\n\t\t\n\t\t\t// Updates the bounds of the zoom handle at the bottom right\n\t\t\tvar b = this.sizer.bounds;\n\t\t\tvar b2 = new mxRectangle(this.bounds.x + this.bounds.width - b.width / 2,\n\t\t\t\t\tthis.bounds.y + this.bounds.height - b.height / 2, b.width, b.height);\n\n\t\t\tif (b.x != b2.x || b.y != b2.y || b.width != b2.width || b.height != b2.height)\n\t\t\t{\n\t\t\t\tthis.sizer.bounds = b2;\n\t\t\t\t\n\t\t\t\t// Avoids update of visibility in redraw for VML\n\t\t\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t\t\t{\n\t\t\t\t\tthis.sizer.redraw();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (revalidate)\n\t\t\t{\n\t\t\t\tthis.outline.view.revalidate();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by starting a translation or zoom.\n */\nmxOutline.prototype.mouseDown = function(sender, me)\n{\n\tif (this.enabled && this.showViewport)\n\t{\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.source.tolerance : 0;\n\t\tvar hit = (this.source.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tthis.zoom = me.isSource(this.sizer) || (hit != null && mxUtils.intersects(shape.bounds, hit));\n\t\tthis.startX = me.getX();\n\t\tthis.startY = me.getY();\n\t\tthis.active = true;\n\n\t\tif (this.source.useScrollbarsForPanning && mxUtils.hasScrollbars(this.source.container))\n\t\t{\n\t\t\tthis.dx0 = this.source.container.scrollLeft;\n\t\t\tthis.dy0 = this.source.container.scrollTop;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx0 = 0;\n\t\t\tthis.dy0 = 0;\n\t\t}\n\t}\n\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by previewing the viewrect in <graph> and updating the\n * rectangle that represents the viewrect in the outline.\n */\nmxOutline.prototype.mouseMove = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\t\tthis.sizer.node.style.display = this.selectionBorder.node.style.display; \n\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar bounds = null;\n\t\t\n\t\tif (!this.zoom)\n\t\t{\n\t\t\t// Previews the panning on the source graph\n\t\t\tvar scale = this.outline.getView().scale;\n\t\t\tbounds = new mxRectangle(this.bounds.x + dx,\n\t\t\t\tthis.bounds.y + dy, this.bounds.width, this.bounds.height);\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t\tdx /= scale;\n\t\t\tdx *= this.source.getView().scale;\n\t\t\tdy /= scale;\n\t\t\tdy *= this.source.getView().scale;\n\t\t\tthis.source.panGraph(-dx - this.dx0, -dy - this.dy0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Does *not* preview zooming on the source graph\n\t\t\tvar container = this.source.container;\n\t\t\tvar viewRatio = container.clientWidth / container.clientHeight;\n\t\t\tdy = dx / viewRatio;\n\t\t\tbounds = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y,\n\t\t\t\tMath.max(1, this.bounds.width + dx),\n\t\t\t\tMath.max(1, this.bounds.height + dy));\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t}\n\t\t\n\t\t// Updates the zoom handle\n\t\tvar b = this.sizer.bounds;\n\t\tthis.sizer.bounds = new mxRectangle(\n\t\t\tbounds.x + bounds.width - b.width / 2,\n\t\t\tbounds.y + bounds.height - b.height / 2,\n\t\t\tb.width, b.height);\n\t\t\n\t\t// Avoids update of visibility in redraw for VML\n\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t{\n\t\t\tthis.sizer.redraw();\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: getTranslateForEvent\n * \n * Gets the translate for the given mouse event. Here is an example to limit\n * the outline to stay within positive coordinates:\n * \n * (code)\n * outline.getTranslateForEvent = function(me)\n * {\n *   var pt = new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n *   \n *   if (!this.zoom)\n *   {\n *     var tr = this.source.view.translate;\n *     pt.x = Math.max(tr.x * this.outline.view.scale, pt.x);\n *     pt.y = Math.max(tr.y * this.outline.view.scale, pt.y);\n *   }\n *   \n *   return pt;\n * };\n * (end)\n */\nmxOutline.prototype.getTranslateForEvent = function(me)\n{\n\treturn new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the translation or zoom to <graph>.\n */\nmxOutline.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\t\n\t\tif (Math.abs(dx) > 0 || Math.abs(dy) > 0)\n\t\t{\n\t\t\tif (!this.zoom)\n\t\t\t{\n\t\t\t\t// Applies the new translation if the source\n\t\t\t\t// has no scrollbars\n\t\t\t\tif (!this.source.useScrollbarsForPanning ||\n\t\t\t\t\t!mxUtils.hasScrollbars(this.source.container))\n\t\t\t\t{\n\t\t\t\t\tthis.source.panGraph(0, 0);\n\t\t\t\t\tdx /= this.outline.getView().scale;\n\t\t\t\t\tdy /= this.outline.getView().scale;\n\t\t\t\t\tvar t = this.source.getView().translate;\n\t\t\t\t\tthis.source.getView().setTranslate(t.x - dx, t.y - dy);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Applies the new zoom\n\t\t\t\tvar w = this.selectionBorder.bounds.width;\n\t\t\t\tvar scale = this.source.getView().scale;\n\t\t\t\tthis.source.zoomTo(Math.max(this.minScale, scale - (dx * scale) / w), false);\n\t\t\t}\n\n\t\t\tthis.update();\n\t\t\tme.consume();\n\t\t}\n\t\t\t\n\t\t// Resets the state of the handler\n\t\tthis.index = null;\n\t\tthis.active = false;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroy this outline and removes all listeners from <source>.\n */\nmxOutline.prototype.destroy = function()\n{\n\tif (this.source != null)\n\t{\n\t\tthis.source.removeListener(this.panHandler);\n\t\tthis.source.removeListener(this.refreshHandler);\n\t\tthis.source.getModel().removeListener(this.updateHandler);\n\t\tthis.source.getView().removeListener(this.updateHandler);\n\t\tmxEvent.removeListener(this.source.container, 'scroll', this.updateHandler);\n\t\tthis.source = null;\n\t}\n\t\n\tif (this.outline != null)\n\t{\n\t\tthis.outline.removeMouseListener(this);\n\t\tthis.outline.destroy();\n\t\tthis.outline = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tif (this.sizer != null)\n\t{\n\t\tthis.sizer.destroy();\n\t\tthis.sizer = null;\n\t}\n};\n\n__mxOutput.mxOutline = typeof mxOutline !== 'undefined' ? mxOutline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMultiplicity\n * \n * Defines invalid connections along with the error messages that they produce.\n * To add or remove rules on a graph, you must add/remove instances of this\n * class to <mxGraph.multiplicities>.\n * \n * Example:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only circle targets allowed'));\n * (end)\n * \n * Defines a rule where each rectangle must be connected to no more than 2\n * circles and no other types of targets are allowed.\n * \n * Constructor: mxMultiplicity\n * \n * Instantiate class mxMultiplicity in order to describe allowed\n * connections in a graph. Not all constraints can be enforced while\n * editing, some must be checked at validation time. The <countError> and\n * <typeError> are treated as resource keys in <mxResources>.\n * \n * Parameters:\n * \n * source - Boolean indicating if this rule applies to the source or target\n * terminal.\n * type - Type of the source or target terminal that this rule applies to.\n * See <type> for more information.\n * attr - Optional attribute name to match the source or target terminal.\n * value - Optional attribute value to match the source or target terminal.\n * min - Minimum number of edges for this rule. Default is 1.\n * max - Maximum number of edges for this rule. n means infinite. Default\n * is n.\n * validNeighbors - Array of types of the opposite terminal for which this\n * rule applies.\n * countError - Error to be displayed for invalid number of edges.\n * typeError - Error to be displayed for invalid opposite terminals.\n * validNeighborsAllowed - Optional boolean indicating if the array of\n * opposite types should be valid or invalid.\n */\nfunction mxMultiplicity(source, type, attr, value, min, max,\n\tvalidNeighbors, countError, typeError, validNeighborsAllowed)\n{\n\tthis.source = source;\n\tthis.type = type;\n\tthis.attr = attr;\n\tthis.value = value;\n\tthis.min = (min != null) ? min : 0;\n\tthis.max = (max != null) ? max : 'n';\n\tthis.validNeighbors = validNeighbors;\n\tthis.countError = mxResources.get(countError) || countError;\n\tthis.typeError = mxResources.get(typeError) || typeError;\n\tthis.validNeighborsAllowed = (validNeighborsAllowed != null) ?\n\t\tvalidNeighborsAllowed : true;\n};\n\n/**\n * Variable: type\n * \n * Defines the type of the source or target terminal. The type is a string\n * passed to <mxUtils.isNode> together with the source or target vertex\n * value as the first argument.\n */\nmxMultiplicity.prototype.type = null;\n\n/**\n * Variable: attr\n * \n * Optional string that specifies the attributename to be passed to\n * <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.attr = null;\n\n/**\n * Variable: value\n * \n * Optional string that specifies the value of the attribute to be passed\n * to <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.value = null;\n\n/**\n * Variable: source\n * \n * Boolean that specifies if the rule is applied to the source or target\n * terminal of an edge.\n */\nmxMultiplicity.prototype.source = null;\n\n/**\n * Variable: min\n * \n * Defines the minimum number of connections for which this rule applies.\n * Default is 0.\n */\nmxMultiplicity.prototype.min = null;\n\n/**\n * Variable: max\n * \n * Defines the maximum number of connections for which this rule applies.\n * A value of 'n' means unlimited times. Default is 'n'. \n */\nmxMultiplicity.prototype.max = null;\n\n/**\n * Variable: validNeighbors\n * \n * Holds an array of strings that specify the type of neighbor for which\n * this rule applies. The strings are used in <mxCell.is> on the opposite\n * terminal to check if the rule applies to the connection.\n */\nmxMultiplicity.prototype.validNeighbors = null;\n\n/**\n * Variable: validNeighborsAllowed\n * \n * Boolean indicating if the list of validNeighbors are those that are allowed\n * for this rule or those that are not allowed for this rule.\n */\nmxMultiplicity.prototype.validNeighborsAllowed = true;\n\n/**\n * Variable: countError\n * \n * Holds the localized error message to be displayed if the number of\n * connections for which the rule applies is smaller than <min> or greater\n * than <max>.\n */\nmxMultiplicity.prototype.countError = null;\n\n/**\n * Variable: typeError\n * \n * Holds the localized error message to be displayed if the type of the\n * neighbor for a connection does not match the rule.\n */\nmxMultiplicity.prototype.typeError = null;\n\n/**\n * Function: check\n * \n * Checks the multiplicity for the given arguments and returns the error\n * for the given connection or null if the multiplicity does not apply.\n *  \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph> instance.\n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * sourceOut - Number of outgoing edges from the source terminal.\n * targetIn - Number of incoming edges for the target terminal.\n */\nmxMultiplicity.prototype.check = function(graph, edge, source, target, sourceOut, targetIn)\n{\n\tvar error = '';\n\n\tif ((this.source && this.checkTerminal(graph, source, edge)) ||\n\t\t(!this.source && this.checkTerminal(graph, target, edge)))\n\t{\n\t\tif (this.countError != null && \n\t\t\t((this.source && (this.max == 0 || (sourceOut >= this.max))) ||\n\t\t\t(!this.source && (this.max == 0 || (targetIn >= this.max)))))\n\t\t{\n\t\t\terror += this.countError + '\\n';\n\t\t}\n\n\t\tif (this.validNeighbors != null && this.typeError != null && this.validNeighbors.length > 0)\n\t\t{\n\t\t\tvar isValid = this.checkNeighbors(graph, edge, source, target);\n\n\t\t\tif (!isValid)\n\t\t\t{\n\t\t\t\terror += this.typeError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: checkNeighbors\n * \n * Checks if there are any valid neighbours in <validNeighbors>. This is only\n * called if <validNeighbors> is a non-empty array.\n */\nmxMultiplicity.prototype.checkNeighbors = function(graph, edge, source, target)\n{\n\tvar sourceValue = graph.model.getValue(source);\n\tvar targetValue = graph.model.getValue(target);\n\tvar isValid = !this.validNeighborsAllowed;\n\tvar valid = this.validNeighbors;\n\t\n\tfor (var j = 0; j < valid.length; j++)\n\t{\n\t\tif (this.source &&\n\t\t\tthis.checkType(graph, targetValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t\telse if (!this.source && \n\t\t\tthis.checkType(graph, sourceValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn isValid;\n};\n\n/**\n * Function: checkTerminal\n * \n * Checks the given terminal cell and returns true if this rule applies. The\n * given cell is the source or target of the given edge, depending on\n * <source>. This implementation uses <checkType> on the terminal's value.\n */\nmxMultiplicity.prototype.checkTerminal = function(graph, terminal, edge)\n{\n\tvar value = graph.model.getValue(terminal);\n\t\n\treturn this.checkType(graph, value, this.type, this.attr, this.value);\n};\n\n/**\n * Function: checkType\n * \n * Checks the type of the given value.\n */\nmxMultiplicity.prototype.checkType = function(graph, value, type, attr, attrValue)\n{\n\tif (value != null)\n\t{\n\t\tif (!isNaN(value.nodeType)) // Checks if value is a DOM node\n\t\t{\n\t\t\treturn mxUtils.isNode(value, type, attr, attrValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn value == type;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n__mxOutput.mxMultiplicity = typeof mxMultiplicity !== 'undefined' ? mxMultiplicity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLayoutManager\n * \n * Implements a layout manager that runs a given layout after any changes to the graph:\n * \n * Example:\n * \n * (code)\n * var layoutMgr = new mxLayoutManager(graph);\n * layoutMgr.getLayout = function(cell, eventName)\n * {\n *   return layout;\n * };\n * (end)\n * \n * See <getLayout> for a description of the possible eventNames.\n * \n * Event: mxEvent.LAYOUT_CELLS\n * \n * Fires between begin- and endUpdate after all cells have been layouted in\n * <layoutCells>. The <code>cells</code> property contains all cells that have\n * been passed to <layoutCells>.\n * \n * Constructor: mxLayoutManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxLayoutManager(graph)\n{\n\t// Executes the layout before the changes are dispatched\n\tthis.undoHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.beforeUndo(evt.getProperty('edit'));\n\t\t}\n\t});\n\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.moveHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsMoved(evt.getProperty('cells'), evt.getProperty('event'));\n\t\t}\n\t});\n\t\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'), evt.getProperty('bounds'),\n\t\t\t\tevt.getProperty('previous'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxLayoutManager.prototype = new mxEventSource();\nmxLayoutManager.prototype.constructor = mxLayoutManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxLayoutManager.prototype.graph = null;\n\n/**\n * Variable: bubbling\n * \n * Specifies if the layout should bubble along\n * the cell hierarchy. Default is true.\n */\nmxLayoutManager.prototype.bubbling = true;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxLayoutManager.prototype.enabled = true;\n\n/**\n * Variable: undoHandler\n * \n * Holds the function that handles the endUpdate event.\n */\nmxLayoutManager.prototype.undoHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxLayoutManager.prototype.moveHandler = null;\n\n/**\n * Variable: resizeHandler\n * \n * Holds the function that handles the resize event.\n */\nmxLayoutManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxLayoutManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxLayoutManager.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isBubbling\n * \n * Returns true if a layout should bubble, that is, if the parent layout\n * should be executed whenever a cell layout (layout of the children of\n * a cell) has been executed. This implementation returns <bubbling>.\n */\nmxLayoutManager.prototype.isBubbling = function()\n{\n\treturn this.bubbling;\n};\n\n/**\n * Function: setBubbling\n * \n * Sets <bubbling>.\n */\nmxLayoutManager.prototype.setBubbling = function(value)\n{\n\tthis.bubbling = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxLayoutManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxLayoutManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\t\n\t\tmodel.removeListener(this.undoHandler);\n\t\tthis.graph.removeListener(this.moveHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\n\t\tmodel.addListener(mxEvent.BEFORE_UNDO, this.undoHandler);\n\t\tthis.graph.addListener(mxEvent.MOVE_CELLS, this.moveHandler);\n\t\tthis.graph.addListener(mxEvent.RESIZE_CELLS, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: hasLayout\n * \n * Returns true if the given cell has a layout. This implementation invokes\n * <getLayout> with <mxEvent.LAYOUT_CELLS> as the eventName. Override this\n * if creating layouts in <getLayout> is expensive and return true if\n * <getLayout> will return a layout for the given cell for\n * <mxEvent.BEGIN_UPDATE> or <mxEvent.END_UPDATE>.\n */\nmxLayoutManager.prototype.hasLayout = function(cell)\n{\n\treturn this.getLayout(cell, mxEvent.LAYOUT_CELLS);\n};\n\n/**\n * Function: getLayout\n * \n * Returns the layout for the given cell and eventName. Possible\n * event names are <mxEvent.MOVE_CELLS> and <mxEvent.RESIZE_CELLS>\n * when cells are moved or resized and <mxEvent.BEGIN_UPDATE> or\n * <mxEvent.END_UPDATE> for the bottom up and top down phases after\n * changes to the graph model. <mxEvent.LAYOUT_CELLS> is used to\n * check if a layout exists for the given cell. This is called\n * from <hasLayout>.\n */\nmxLayoutManager.prototype.getLayout = function(cell, eventName)\n{\n\treturn null;\n};\n\n/**\n * Function: beforeUndo\n * \n * Called from <undoHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.beforeUndo = function(undoableEdit)\n{\n\tthis.executeLayoutForCells(this.getCellsForChanges(undoableEdit.changes));\n};\n\n/**\n * Function: cellsMoved\n * \n * Called from <moveHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.cellsMoved = function(cells, evt)\n{\n\tif (cells != null && evt != null)\n\t{\n\t\tvar point = mxUtils.convertPoint(this.getGraph().container,\n\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar layout = this.getLayout(model.getParent(cells[i]), mxEvent.MOVE_CELLS);\n\n\t\t\tif (layout != null)\n\t\t\t{\n\t\t\t\tlayout.moveCell(cells[i], point.x, point.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called from <resizeHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been resized.\n * bounds - <mxRectangle> taht represents the new bounds.\n */\nmxLayoutManager.prototype.cellsResized = function(cells, bounds, prev)\n{\n\tif (cells != null && bounds != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar layout = this.getLayout(model.getParent(cells[i]), mxEvent.RESIZE_CELLS);\n\n\t\t\tif (layout != null)\n\t\t\t{\n\t\t\t\tlayout.resizeCell(cells[i], bounds[i], prev[i]);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getCellsForChanges\n * \n * Returns the cells for which a layout should be executed.\n */\nmxLayoutManager.prototype.getCellsForChanges = function(changes)\n{\n\tvar result = [];\n\t\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change instanceof mxRootChange)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = result.concat(this.getCellsForChange(change));\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForChange\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.getCellsForChange = function(change)\n{\n\tif (change instanceof mxChildChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.child,\n\t\t\tthis.addCellsWithLayout(change.previous));\n\t}\n\telse if (change instanceof mxTerminalChange ||\n\t\tchange instanceof mxGeometryChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.cell);\n\t}\n\telse if (change instanceof mxVisibleChange ||\n\t\tchange instanceof mxStyleChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.cell);\n\t}\n\t\n\treturn [];\n};\n\n/**\n * Function: addCellsWithLayout\n * \n * Adds all ancestors of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addCellsWithLayout = function(cell, result)\n{\n\treturn this.addDescendantsWithLayout(cell,\n\t\tthis.addAncestorsWithLayout(cell, result));\n};\n\n/**\n * Function: addAncestorsWithLayout\n * \n * Adds all ancestors of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addAncestorsWithLayout = function(cell, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (cell != null)\n\t{\n\t\tvar layout = this.hasLayout(cell);\n\t\t\n\t\tif (layout != null)\n\t\t{\n\t\t\tresult.push(cell);\n\t\t}\n\t\t\n\t\tif (this.isBubbling())\n\t\t{\n\t\t\tvar model = this.getGraph().getModel();\n\t\t\tthis.addAncestorsWithLayout(\n\t\t\t\tmodel.getParent(cell), result);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: addDescendantsWithLayout\n * \n * Adds all descendants of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addDescendantsWithLayout = function(cell, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (cell != null && this.hasLayout(cell))\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < model.getChildCount(cell); i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\tif (this.hasLayout(child))\n\t\t\t{\n\t\t\t\tresult.push(child);\n\t\t\t\tthis.addDescendantsWithLayout(child, result);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: executeLayoutForCells\n * \n * Executes all layouts for the given cells in two phases: In the first phase\n * layouts for child cells are executed before layouts for parent cells with\n * <mxEvent.BEGIN_UPDATE>, in the second phase layouts for parent cells are\n * executed before layouts for child cells with <mxEvent.END_UPDATE>.\n */\nmxLayoutManager.prototype.executeLayoutForCells = function(cells)\n{\n\tvar sorted = mxUtils.sortCells(cells, false);\n\tthis.layoutCells(sorted, true);\n\tthis.layoutCells(sorted.reverse(), false);\n};\n\n/**\n * Function: layoutCells\n * \n * Executes all layouts which have been scheduled during the changes.\n */\nmxLayoutManager.prototype.layoutCells = function(cells, bubble)\n{\n\tif (cells.length > 0)\n\t{\n\t\t// Invokes the layouts while removing duplicates\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry \n\t\t{\n\t\t\tvar last = null;\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] != model.getRoot() && cells[i] != last)\n\t\t\t\t{\n\t\t\t\t\tthis.executeLayout(cells[i], bubble);\n\t\t\t\t\tlast = cells[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.LAYOUT_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayout = function(cell, bubble)\n{\n\tvar layout = this.getLayout(cell, (bubble) ?\n\t\tmxEvent.BEGIN_UPDATE : mxEvent.END_UPDATE);\n\n\tif (layout != null)\n\t{\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxLayoutManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxLayoutManager = typeof mxLayoutManager !== 'undefined' ? mxLayoutManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneManager\n * \n * Manager for swimlanes and nested swimlanes that sets the size of newly added\n * swimlanes to that of their siblings, and propagates changes to the size of a\n * swimlane to its siblings, if <siblings> is true, and its ancestors, if\n * <bubbling> is true.\n * \n * Constructor: mxSwimlaneManager\n *\n * Constructs a new swimlane manager for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxSwimlaneManager(graph, horizontal, addEnabled, resizeEnabled)\n{\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.addEnabled = (addEnabled != null) ? addEnabled : true;\n\tthis.resizeEnabled = (resizeEnabled != null) ? resizeEnabled : true;\n\n\tthis.addHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isAddEnabled())\n\t\t{\n\t\t\tthis.cellsAdded(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isResizeEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxSwimlaneManager.prototype = new mxEventSource();\nmxSwimlaneManager.prototype.constructor = mxSwimlaneManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSwimlaneManager.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxSwimlaneManager.prototype.enabled = true;\n\n/**\n * Variable: horizontal\n * \n * Specifies the orientation of the swimlanes. Default is true.\n */\nmxSwimlaneManager.prototype.horizontal = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if newly added cells should be resized to match the size of their\n * existing siblings. Default is true.\n */\nmxSwimlaneManager.prototype.addEnabled = true;\n\n/**\n * Variable: resizeEnabled\n * \n * Specifies if resizing of swimlanes should be handled. Default is true.\n */\nmxSwimlaneManager.prototype.resizeEnabled = true;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.addHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxSwimlaneManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxSwimlaneManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxSwimlaneManager.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: setHorizontal\n * \n * Sets <horizontal>.\n */\nmxSwimlaneManager.prototype.setHorizontal = function(value)\n{\n\tthis.horizontal = value;\n};\n\n/**\n * Function: isAddEnabled\n * \n * Returns <addEnabled>.\n */\nmxSwimlaneManager.prototype.isAddEnabled = function()\n{\n\treturn this.addEnabled;\n};\n\n/**\n * Function: setAddEnabled\n * \n * Sets <addEnabled>.\n */\nmxSwimlaneManager.prototype.setAddEnabled = function(value)\n{\n\tthis.addEnabled = value;\n};\n\n/**\n * Function: isResizeEnabled\n * \n * Returns <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.isResizeEnabled = function()\n{\n\treturn this.resizeEnabled;\n};\n\n/**\n * Function: setResizeEnabled\n * \n * Sets <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.setResizeEnabled = function(value)\n{\n\tthis.resizeEnabled = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this manager operates on.\n */\nmxSwimlaneManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the manager operates on.\n */\nmxSwimlaneManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.removeListener(this.addHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.addListener(mxEvent.ADD_CELLS, this.addHandler);\n\t\tthis.graph.addListener(mxEvent.CELLS_RESIZED, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: isSwimlaneIgnored\n * \n * Returns true if the given swimlane should be ignored.\n */\nmxSwimlaneManager.prototype.isSwimlaneIgnored = function(swimlane)\n{\n\treturn !this.getGraph().isSwimlane(swimlane);\n};\n\n/**\n * Function: isCellHorizontal\n * \n * Returns true if the given cell is horizontal. If the given cell is not a\n * swimlane, then the global orientation is returned.\n */\nmxSwimlaneManager.prototype.isCellHorizontal = function(cell)\n{\n\tif (this.graph.isSwimlane(cell))\n\t{\n\t\tvar style = this.graph.getCellStyle(cell);\n\t\t\n\t\treturn mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n\t}\n\t\n\treturn !this.isHorizontal();\n};\n\n/**\n * Function: cellsAdded\n * \n * Called if any cells have been added.\n * \n * Parameters:\n * \n * cell - Array of <mxCells> that have been added.\n */\nmxSwimlaneManager.prototype.cellsAdded = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.swimlaneAdded(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swimlaneAdded\n * \n * Updates the size of the given swimlane to match that of any existing\n * siblings swimlanes.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that represents the new swimlane.\n */\nmxSwimlaneManager.prototype.swimlaneAdded = function(swimlane)\n{\n\tvar model = this.getGraph().getModel();\n\tvar parent = model.getParent(swimlane);\n\tvar childCount = model.getChildCount(parent);\n\tvar geo = null;\n\t\n\t// Finds the first valid sibling swimlane as reference\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (child != swimlane && !this.isSwimlaneIgnored(child))\n\t\t{\n\t\t\tgeo = model.getGeometry(child);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Applies the size of the refernece to the newly added swimlane\n\tif (geo != null)\n\t{\n\t\tvar parentHorizontal = (parent != null) ? this.isCellHorizontal(parent) : this.horizontal;\n\t\tthis.resizeSwimlane(swimlane, geo.width, geo.height, parentHorizontal);\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called if any cells have been resizes. Calls <swimlaneResized> for all\n * swimlanes where <isSwimlaneIgnored> returns false.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose size was changed.\n */\nmxSwimlaneManager.prototype.cellsResized = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Finds the top-level swimlanes and adds offsets\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = model.getGeometry(cells[i]);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = new mxRectangle(0, 0, geo.width, geo.height);\n\t\t\t\t\t\tvar top = cells[i];\n\t\t\t\t\t\tvar current = top;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (current != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttop = current;\n\t\t\t\t\t\t\tcurrent = model.getParent(current);\n\t\t\t\t\t\t\tvar tmp = (this.graph.isSwimlane(current)) ?\n\t\t\t\t\t\t\t\t\tthis.graph.getStartSize(current) :\n\t\t\t\t\t\t\t\t\tnew mxRectangle();\n\t\t\t\t\t\t\tsize.width += tmp.width;\n\t\t\t\t\t\t\tsize.height += tmp.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar parentHorizontal = (current != null) ? this.isCellHorizontal(current) : this.horizontal;\n\t\t\t\t\t\tthis.resizeSwimlane(top, size.width, size.height, parentHorizontal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeSwimlane\n * \n * Called from <cellsResized> for all swimlanes that are not ignored to update\n * the size of the siblings and the size of the parent swimlanes, recursively,\n * if <bubbling> is true.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose size has changed.\n */\nmxSwimlaneManager.prototype.resizeSwimlane = function(swimlane, w, h, parentHorizontal)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar horizontal = this.isCellHorizontal(swimlane);\n\t\t\n\t\tif (!this.isSwimlaneIgnored(swimlane))\n\t\t{\n\t\t\tvar geo = model.getGeometry(swimlane);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tif ((parentHorizontal && geo.height != h) || (!parentHorizontal && geo.width != w))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (parentHorizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = h;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = w;\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.setGeometry(swimlane, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = (this.graph.isSwimlane(swimlane)) ?\n\t\t\t\tthis.graph.getStartSize(swimlane) :\n\t\t\t\tnew mxRectangle();\n\t\tw -= tmp.width;\n\t\th -= tmp.height;\n\t\t\n\t\tvar childCount = model.getChildCount(swimlane);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(swimlane, i);\n\t\t\tthis.resizeSwimlane(child, w, h, horizontal);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxSwimlaneManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxSwimlaneManager = typeof mxSwimlaneManager !== 'undefined' ? mxSwimlaneManager : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxTemporaryCellStates\n * \n * Creates a temporary set of cell states.\n */\nfunction mxTemporaryCellStates(view, scale, cells, isCellVisibleFn, getLinkForCellState)\n{\n\tscale = (scale != null) ? scale : 1;\n\tthis.view = view;\n\t\n\t// Stores the previous state\n\tthis.oldValidateCellState = view.validateCellState;\n\tthis.oldBounds = view.getGraphBounds();\n\tthis.oldStates = view.getStates();\n\tthis.oldScale = view.getScale();\n\tthis.oldDoRedrawShape = view.graph.cellRenderer.doRedrawShape;\n\n\tvar self = this;\n\n\t// Overrides doRedrawShape and paint shape to add links on shapes\n\tif (getLinkForCellState != null)\n\t{\n\t\tview.graph.cellRenderer.doRedrawShape = function(state)\n\t\t{\n\t\t\tvar oldPaint = state.shape.paint;\n\t\t\t\n\t\t\tstate.shape.paint = function(c)\n\t\t\t{\n\t\t\t\tvar link = getLinkForCellState(state);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(link);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toldPaint.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(null);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tself.oldDoRedrawShape.apply(view.graph.cellRenderer, arguments);\n\t\t\tstate.shape.paint = oldPaint;\n\t\t};\n\t}\n\n\t// Overrides validateCellState to ignore invisible cells\n\tview.validateCellState = function(cell, resurse)\n\t{\n\t\tif (cell == null || isCellVisibleFn == null || isCellVisibleFn(cell))\n\t\t{\n\t\t\treturn self.oldValidateCellState.apply(view, arguments);\n\t\t}\n\t\t\n\t\treturn null;\n\t};\n\t\n\t// Creates space for new states\n\tview.setStates(new mxDictionary());\n\tview.setScale(scale);\n\t\n\tif (cells != null)\n\t{\n\t\tview.resetValidationState();\n\t\tvar bbox = null;\n\n\t\t// Validates the vertices and edges without adding them to\n\t\t// the model so that the original cells are not modified\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar bounds = view.getBoundingBox(view.validateCellState(view.validateCell(cells[i])));\n\t\t\t\n\t\t\tif (bbox == null)\n\t\t\t{\n\t\t\t\tbbox = bounds;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox.add(bounds);\n\t\t\t}\n\t\t}\n\n\t\tview.setGraphBounds(bbox || new mxRectangle());\n\t}\n};\n\n/**\n * Variable: view\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.view = null;\n\n/**\n * Variable: oldStates\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldStates = null;\n\n/**\n * Variable: oldBounds\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldBounds = null;\n\n/**\n * Variable: oldScale\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldScale = null;\n\n/**\n * Function: destroy\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxTemporaryCellStates.prototype.destroy = function()\n{\n\tthis.view.setScale(this.oldScale);\n\tthis.view.setStates(this.oldStates);\n\tthis.view.setGraphBounds(this.oldBounds);\n\tthis.view.validateCellState = this.oldValidateCellState;\n\tthis.view.graph.cellRenderer.doRedrawShape = this.oldDoRedrawShape;\n};\n\n__mxOutput.mxTemporaryCellStates = typeof mxTemporaryCellStates !== 'undefined' ? mxTemporaryCellStates : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxCellStatePreview\n * \n * Implements a live preview for moving cells.\n * \n * Constructor: mxCellStatePreview\n * \n * Constructs a move preview for the given graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellStatePreview(graph)\n{\n\tthis.deltas = new mxDictionary();\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.graph = null;\n\n/**\n * Variable: deltas\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.deltas = null;\n\n/**\n * Variable: count\n * \n * Contains the number of entries in the map.\n */\nmxCellStatePreview.prototype.count = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if this contains no entries.\n */\nmxCellStatePreview.prototype.isEmpty = function()\n{\n\treturn this.count == 0;\n};\n\n/**\n * Function: moveState\n */\nmxCellStatePreview.prototype.moveState = function(state, dx, dy, add, includeEdges)\n{\n\tadd = (add != null) ? add : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar delta = this.deltas.get(state.cell);\n\n\tif (delta == null)\n\t{\n\t\t// Note: Deltas stores the point and the state since the key is a string.\n\t\tdelta = {point: new mxPoint(dx, dy), state: state};\n\t\tthis.deltas.put(state.cell, delta);\n\t\tthis.count++;\n\t}\n\telse if (add)\n\t{\n\t\tdelta.point.x += dx;\n\t\tdelta.point.y += dy;\n\t}\n\telse\n\t{\n\t\tdelta.point.x = dx;\n\t\tdelta.point.y = dy;\n\t}\n\t\n\tif (includeEdges)\n\t{\n\t\tthis.addEdges(state);\n\t}\n\t\n\treturn delta.point;\n};\n\n/**\n * Function: show\n */\nmxCellStatePreview.prototype.show = function(visitor)\n{\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.translateState(delta.state, delta.point.x, delta.point.y);\n\t}));\n\t\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.revalidateState(delta.state, delta.point.x, delta.point.y, visitor);\n\t}));\n};\n\n/**\n * Function: translateState\n */\nmxCellStatePreview.prototype.translateState = function(state, dx, dy)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tif (model.isVertex(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t\tvar geo = model.getGeometry(state.cell);\n\t\t\t\n\t\t\t// Moves selection cells and non-relative vertices in\n\t\t\t// the first phase so that edge terminal points will\n\t\t\t// be updated in the second phase\n\t\t\tif ((dx != 0 || dy != 0) && geo != null && (!geo.relative || this.deltas.get(state.cell) != null))\n\t\t\t{\n\t\t\t\tstate.x += dx;\n\t\t\t\tstate.y += dy;\n\t\t\t}\n\t\t}\n\t    \n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.translateState(state.view.getState(model.getChildAt(state.cell, i)), dx, dy);\n\t    }\n\t}\n};\n\n/**\n * Function: revalidateState\n */\nmxCellStatePreview.prototype.revalidateState = function(state, dx, dy, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\t// Updates the edge terminal points and restores the\n\t\t// (relative) positions of any (relative) children\n\t\tif (model.isEdge(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t}\n\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\n\t\tvar pState = state.view.getState(model.getParent(state.cell));\n\t\t\n\t\t// Moves selection vertices which are relative\n\t\tif ((dx != 0 || dy != 0) && geo != null && geo.relative &&\n\t\t\tmodel.isVertex(state.cell) && (pState == null ||\n\t\t\tmodel.isVertex(pState.cell) || this.deltas.get(state.cell) != null))\n\t\t{\n\t\t\tstate.x += dx;\n\t\t\tstate.y += dy;\n\t\t}\n\t\t\n\t\tthis.graph.cellRenderer.redraw(state);\n\t\n\t\t// Invokes the visitor on the given state\n\t\tif (visitor != null)\n\t\t{\n\t\t\tvisitor(state);\n\t\t}\n\t\t\t\t\t\t\n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.revalidateState(this.graph.view.getState(model.getChildAt(state.cell, i)), dx, dy, visitor);\n\t    }\n\t}\n};\n\n/**\n * Function: addEdges\n */\nmxCellStatePreview.prototype.addEdges = function(state)\n{\n\tvar model = this.graph.getModel();\n\tvar edgeCount = model.getEdgeCount(state.cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar s = state.view.getState(model.getEdgeAt(state.cell, i));\n\n\t\tif (s != null)\n\t\t{\n\t\t\tthis.moveState(s, 0, 0);\n\t\t}\n\t}\n};\n\n__mxOutput.mxCellStatePreview = typeof mxCellStatePreview !== 'undefined' ? mxCellStatePreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnectionConstraint\n * \n * Defines an object that contains the constraints about how to connect one\n * side of an edge to its terminal.\n * \n * Constructor: mxConnectionConstraint\n * \n * Constructs a new connection constraint for the given point and boolean\n * arguments.\n * \n * Parameters:\n * \n * point - Optional <mxPoint> that specifies the fixed location of the point\n * in relative coordinates. Default is null.\n * perimeter - Optional boolean that specifies if the fixed point should be\n * projected onto the perimeter of the terminal. Default is true.\n */\nfunction mxConnectionConstraint(point, perimeter, name, dx, dy)\n{\n\tthis.point = point;\n\tthis.perimeter = (perimeter != null) ? perimeter : true;\n\tthis.name = name;\n\tthis.dx = dx? dx : 0;\n\tthis.dy = dy? dy : 0;\n};\n\n/**\n * Variable: point\n * \n * <mxPoint> that specifies the fixed location of the connection point.\n */\nmxConnectionConstraint.prototype.point = null;\n\n/**\n * Variable: perimeter\n * \n * Boolean that specifies if the point should be projected onto the perimeter\n * of the terminal.\n */\nmxConnectionConstraint.prototype.perimeter = null;\n\n/**\n * Variable: name\n * \n * Optional string that specifies the name of the constraint.\n */\nmxConnectionConstraint.prototype.name = null;\n\n/**\n * Variable: dx\n * \n * Optional float that specifies the horizontal offset of the constraint.\n */\nmxConnectionConstraint.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Optional float that specifies the vertical offset of the constraint.\n */\nmxConnectionConstraint.prototype.dy = null;\n\n\n__mxOutput.mxConnectionConstraint = typeof mxConnectionConstraint !== 'undefined' ? mxConnectionConstraint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHandler\n * \n * Graph event handler that handles selection. Individual cells are handled\n * separately using <mxVertexHandler> or one of the edge handlers. These\n * handlers are created using <mxGraph.createHandler> in\n * <mxGraphSelectionModel.cellAdded>.\n * \n * To avoid the container to scroll a moved cell into view, set\n * <scrollAfterMove> to false.\n * \n * Constructor: mxGraphHandler\n * \n * Constructs an event handler that creates handles for the\n * selection cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphHandler(graph)\n{\n\tthis.graph = graph;\n\tthis.graph.addMouseListener(this);\n\t\n\t// Repaints the handler after autoscroll\n\tthis.panHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (!this.suspended)\n\t\t{\n\t\t\tthis.updatePreview();\n\t\t\tthis.updateHint();\n\t\t}\n\t});\n\t\n\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Handles escape keystrokes\n\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t\n\t// Updates the preview box for remote changes\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Merges multiple pending calls\n\t\tif (this.refreshThread)\n\t\t{\n\t\t\twindow.clearTimeout(this.refreshThread);\n\t\t}\n\n\t\t// Waits for the states and handlers to be updated\n\t\tthis.refreshThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.refreshThread = null;\n\t\t\t\n\t\t\tif (this.first != null && !this.suspended)\n\t\t\t{\n\t\t\t\t// Updates preview with no translate to compute bounding box\n\t\t\t\tvar dx = this.currentDx;\n\t\t\t\tvar dy = this.currentDy;\n\t\t\t\tthis.currentDx = 0;\n\t\t\t\tthis.currentDy = 0;\n\t\t\t\tthis.updatePreview();\n\t\t\t\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\t\t\t\tthis.pBounds = this.getPreviewBounds(this.cells);\n\n\t\t\t\tif (this.pBounds == null && !this.livePreviewUsed)\n\t\t\t\t{\n\t\t\t\t\tthis.reset();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Restores translate and updates preview\n\t\t\t\t\tthis.currentDx = dx;\n\t\t\t\t\tthis.currentDy = dy;\n\t\t\t\t\tthis.updatePreview();\n\t\t\t\t\tthis.updateHint();\n\n\t\t\t\t\tif (this.livePreviewUsed)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Forces update to ignore last visible state\n\t\t\t\t\t\tthis.setHandlesVisibleForCells(\n\t\t\t\t\t\t\tthis.graph.selectionCellsHandler.\n\t\t\t\t\t\t\tgetHandledSelectionCells(), false, true);\n\t\t\t\t\t\tthis.updatePreview();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}), 0);\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.addListener(mxEvent.REFRESH, this.refreshHandler);\n\t\n\tthis.keyHandler = mxUtils.bind(this, function(e)\n\t{\n\t\tif (this.graph.container != null && this.graph.container.style.visibility != 'hidden' &&\n\t\t\tthis.first != null && !this.suspended)\n\t\t{\n\t\t\tvar clone = this.graph.isCloneEvent(e) &&\n\t\t\t\tthis.graph.isCellsCloneable() &&\n\t\t\t\tthis.isCloneEnabled();\n\t\t\t\n\t\t\tif (clone != this.cloning)\n\t\t\t{\n\t\t\t\tthis.cloning = clone;\n\t\t\t\tthis.checkPreview();\n\t\t\t\tthis.updatePreview();\n\t\t\t}\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(document, 'keydown', this.keyHandler);\n\tmxEvent.addListener(document, 'keyup', this.keyHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphHandler.prototype.graph = null;\n\n/**\n * Variable: maxCells\n * \n * Defines the maximum number of cells to paint subhandles\n * for. Default is 50 for Firefox and 20 for IE. Set this\n * to 0 if you want an unlimited number of handles to be\n * displayed. This is only recommended if the number of\n * cells in the graph is limited to a small number, eg.\n * 500.\n */\nmxGraphHandler.prototype.maxCells = (mxClient.IS_IE) ? 20 : 50;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxGraphHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightEnabled\n * \n * Specifies if drop targets under the mouse should be enabled. Default is\n * true.\n */\nmxGraphHandler.prototype.highlightEnabled = true;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxGraphHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: moveEnabled\n * \n * Specifies if moving is enabled. Default is true.\n */\nmxGraphHandler.prototype.moveEnabled = true;\n\n/**\n * Variable: guidesEnabled\n * \n * Specifies if other cells should be used for snapping the right, center or\n * left side of the current selection. Default is false.\n */\nmxGraphHandler.prototype.guidesEnabled = false;\n\n/**\n * Variable: handlesVisible\n * \n * Whether the handles of the selection are currently visible.\n */\nmxGraphHandler.prototype.handlesVisible = true;\n\n/**\n * Variable: guide\n * \n * Holds the <mxGuide> instance that is used for alignment.\n */\nmxGraphHandler.prototype.guide = null;\n\n/**\n * Variable: currentDx\n * \n * Stores the x-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDx = null;\n\n/**\n * Variable: currentDy\n * \n * Stores the y-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDy = null;\n\n/**\n * Variable: updateCursor\n * \n * Specifies if a move cursor should be shown if the mouse is over a movable\n * cell. Default is true.\n */\nmxGraphHandler.prototype.updateCursor = true;\n\n/**\n * Variable: selectEnabled\n * \n * Specifies if selecting is enabled. Default is true.\n */\nmxGraphHandler.prototype.selectEnabled = true;\n\n/**\n * Variable: removeCellsFromParent\n * \n * Specifies if cells may be moved out of their parents. Default is true.\n */\nmxGraphHandler.prototype.removeCellsFromParent = true;\n\n/**\n * Variable: removeEmptyParents\n * \n * If empty parents should be removed from the model after all child cells\n * have been moved out. Default is true.\n */\nmxGraphHandler.prototype.removeEmptyParents = false;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if drop events are interpreted as new connections if no other\n * drop action is defined. Default is false.\n */\nmxGraphHandler.prototype.connectOnDrop = false;\n\n/**\n * Variable: scrollOnMove\n * \n * Specifies if the view should be scrolled so that a moved cell is\n * visible. Default is true.\n */\nmxGraphHandler.prototype.scrollOnMove = true;\n\n/**\n * Variable: minimumSize\n * \n * Specifies the minimum number of pixels for the width and height of a\n * selection border. Default is 6.\n */\nmxGraphHandler.prototype.minimumSize = 6;\n\n/**\n * Variable: previewColor\n * \n * Specifies the color of the preview shape. Default is black.\n */\nmxGraphHandler.prototype.previewColor = 'black';\n\n/**\n * Variable: htmlPreview\n * \n * Specifies if the graph container should be used for preview. If this is used\n * then drop target detection relies entirely on <mxGraph.getCellAt> because\n * the HTML preview does not \"let events through\". Default is false.\n */\nmxGraphHandler.prototype.htmlPreview = false;\n\n/**\n * Variable: shape\n * \n * Reference to the <mxShape> that represents the preview.\n */\nmxGraphHandler.prototype.shape = null;\n\n/**\n * Variable: scaleGrid\n * \n * Specifies if the grid should be scaled. Default is false.\n */\nmxGraphHandler.prototype.scaleGrid = false;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if the bounding box should allow for rotation. Default is true.\n */\nmxGraphHandler.prototype.rotationEnabled = true;\n\n/**\n * Variable: maxLivePreview\n * \n * Maximum number of cells for which live preview should be used. Default is 0\n * which means no live preview.\n */\nmxGraphHandler.prototype.maxLivePreview = 0;\n\n/**\n * Variable: allowLivePreview\n * \n * If live preview is allowed on this system. Default is true for systems with\n * SVG support.\n */\nmxGraphHandler.prototype.allowLivePreview = mxClient.IS_SVG;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxGraphHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxGraphHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isCloneEnabled\n * \n * Returns <cloneEnabled>.\n */\nmxGraphHandler.prototype.isCloneEnabled = function()\n{\n\treturn this.cloneEnabled;\n};\n\n/**\n * Function: setCloneEnabled\n * \n * Sets <cloneEnabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new clone enabled state.\n */\nmxGraphHandler.prototype.setCloneEnabled = function(value)\n{\n\tthis.cloneEnabled = value;\n};\n\n/**\n * Function: isMoveEnabled\n * \n * Returns <moveEnabled>.\n */\nmxGraphHandler.prototype.isMoveEnabled = function()\n{\n\treturn this.moveEnabled;\n};\n\n/**\n * Function: setMoveEnabled\n * \n * Sets <moveEnabled>.\n */\nmxGraphHandler.prototype.setMoveEnabled = function(value)\n{\n\tthis.moveEnabled = value;\n};\n\n/**\n * Function: isSelectEnabled\n * \n * Returns <selectEnabled>.\n */\nmxGraphHandler.prototype.isSelectEnabled = function()\n{\n\treturn this.selectEnabled;\n};\n\n/**\n * Function: setSelectEnabled\n * \n * Sets <selectEnabled>.\n */\nmxGraphHandler.prototype.setSelectEnabled = function(value)\n{\n\tthis.selectEnabled = value;\n};\n\n/**\n * Function: isRemoveCellsFromParent\n * \n * Returns <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.isRemoveCellsFromParent = function()\n{\n\treturn this.removeCellsFromParent;\n};\n\n/**\n * Function: setRemoveCellsFromParent\n * \n * Sets <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.setRemoveCellsFromParent = function(value)\n{\n\tthis.removeCellsFromParent = value;\n};\n\n/**\n * Function: isPropagateSelectionCell\n * \n * Returns true if the given cell and parent should propagate\n * selection state to the parent.\n */\nmxGraphHandler.prototype.isPropagateSelectionCell = function(cell, immediate, me)\n{\n\tvar parent = this.graph.model.getParent(cell);\n\n\tif (immediate)\n\t{\n\t\tvar geo = (this.graph.model.isEdge(cell)) ? null :\n\t\t\tthis.graph.getCellGeometry(cell);\n\t\t\n\t\treturn !this.graph.isSiblingSelected(cell) &&\n\t\t\t((geo != null && geo.relative) ||\n\t\t\t!this.graph.isSwimlane(parent));\n\t}\n\telse\n\t{\n\t\treturn (!this.graph.isToggleEvent(me.getEvent()) ||\n\t\t\t(!this.graph.isSiblingSelected(cell) &&\n\t\t\t!this.graph.isCellSelected(cell) &&\n\t\t\t(!this.graph.isSwimlane(parent)) ||\n\t\t\tthis.graph.isCellSelected(parent))) &&\n\t\t\t(this.graph.isToggleEvent(me.getEvent()) ||\n\t\t\t!this.graph.isCellSelected(parent));\n\t}\n};\n\n/**\n * Function: getInitialCellForEvent\n * \n * Hook to return initial cell for the given event. This returns\n * the topmost cell that is not a swimlane or is selected.\n */\nmxGraphHandler.prototype.getInitialCellForEvent = function(me)\n{\n\tvar state = me.getState();\n\t\n\tif ((!this.graph.isToggleEvent(me.getEvent()) || !mxEvent.isAltDown(me.getEvent())) &&\n\t\tstate != null && !this.graph.isCellSelected(state.cell))\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar next = this.graph.view.getState(model.getParent(state.cell));\n\n\t\twhile (next != null && !this.graph.isCellSelected(next.cell) &&\n\t\t\t(model.isVertex(next.cell) || model.isEdge(next.cell)) &&\n\t\t\tthis.isPropagateSelectionCell(state.cell, true, me))\n\t\t{\n\t\t\tstate = next;\n\t\t\tnext = this.graph.view.getState(this.graph.getModel().getParent(state.cell));\n\t\t}\n\t}\n\t\n\treturn (state != null) ? state.cell : null;\n};\n\n/**\n * Function: isDelayedSelection\n * \n * Returns true if the cell or one of its ancestors is selected.\n */\nmxGraphHandler.prototype.isDelayedSelection = function(cell, me)\n{\n\tif (!this.graph.isToggleEvent(me.getEvent()) || !mxEvent.isAltDown(me.getEvent()))\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\tif (this.graph.selectionCellsHandler.isHandled(cell))\n\t\t\t{\n\t\t\t\treturn this.graph.cellEditor.getEditingCell() != cell;\n\t\t\t}\n\t\t\t\n\t\t\tcell = this.graph.model.getParent(cell);\n\t\t}\n\t}\n\t\n\treturn this.graph.isToggleEvent(me.getEvent()) && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: selectDelayed\n * \n * Implements the delayed selection for the given mouse event.\n */\nmxGraphHandler.prototype.selectDelayed = function(me)\n{\n\tif (!this.graph.popupMenuHandler.isPopupTrigger(me))\n\t{\n\t\tvar cell = me.getCell();\n\t\t\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.cell;\n\t\t}\n\t\t\n\t\tthis.selectCellForEvent(cell, me);\n\t}\n};\n\n/**\n * Function: selectCellForEvent\n * \n * Selects the given cell for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.selectCellForEvent = function(cell, me)\n{\n\tvar state = this.graph.view.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tif (me.isSource(state.control))\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!this.graph.isToggleEvent(me.getEvent()) ||\n\t\t\t\t!mxEvent.isAltDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\t\n\t\t\t\twhile (this.graph.view.getState(parent) != null &&\n\t\t\t\t\t(model.isVertex(parent) || model.isEdge(parent)) &&\n\t\t\t\t\tthis.isPropagateSelectionCell(cell, false, me))\n\t\t\t\t{\n\t\t\t\t\tcell = parent;\n\t\t\t\t\tparent = model.getParent(cell);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given mouse event. NOTE: This may be used to enable click\n * events for links in labels on iOS as follows as consuming the initial\n * touchStart disables firing the subsequent click event on the link.\n * \n * <code>\n * mxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n * {\n *   var source = mxEvent.getSource(me.getEvent());\n *   \n *   if (!mxEvent.isTouchEvent(me.getEvent()) || source.nodeName != 'A')\n *   {\n *     me.consume();\n *   }\n * }\n * </code>\n */\nmxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by selecing the given cell and creating a handle for\n * it. By consuming the event all subsequent events of the gesture are\n * redirected to this handler.\n */\nmxGraphHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() != null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar cell = this.getInitialCellForEvent(me);\n\t\tthis.delayedSelection = this.isDelayedSelection(cell, me);\n\t\tthis.cell = null;\n\t\t\n\t\tif (this.isSelectEnabled() && !this.delayedSelection)\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\n\t\tif (this.isMoveEnabled())\n\t\t{\n\t\t\tvar model = this.graph.model;\n\t\t\tvar geo = model.getGeometry(cell);\n\n\t\t\tif (this.graph.isCellMovable(cell) && ((!model.isEdge(cell) || this.graph.getSelectionCount() > 1 ||\n\t\t\t\t(geo.points != null && geo.points.length > 0) || model.getTerminal(cell, true) == null ||\n\t\t\t\tmodel.getTerminal(cell, false) == null) || this.graph.allowDanglingEdges || \n\t\t\t\t(this.graph.isCloneEvent(me.getEvent()) && this.graph.isCellsCloneable())))\n\t\t\t{\n\t\t\t\tthis.start(cell, me.getX(), me.getY());\n\t\t\t}\n\t\t\telse if (this.delayedSelection)\n\t\t\t{\n\t\t\t\tthis.cell = cell;\n\t\t\t}\n\n\t\t\tthis.cellWasClicked = true;\n\t\t\tthis.consumeMouseEvent(mxEvent.MOUSE_DOWN, me);\n\t\t}\n\t}\n};\n\n/**\n * Function: getGuideStates\n * \n * Creates an array of cell states which should be used as guides.\n */\nmxGraphHandler.prototype.getGuideStates = function()\n{\n\tvar parent = this.graph.getDefaultParent();\n\tvar model = this.graph.getModel();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.graph.view.getState(cell) != null &&\n\t\t\tmodel.isVertex(cell) &&\n\t\t\tmodel.getGeometry(cell) != null &&\n\t\t\t!model.getGeometry(cell).relative;\n\t});\n\t\n\treturn this.graph.view.getCellStates(model.filterDescendants(filter, parent));\n};\n\n/**\n * Function: getCells\n * \n * Returns the cells to be modified by this handler. This implementation\n * returns all selection cells that are movable, or the given initial cell if\n * the given cell is not selected and movable. This handles the case of moving\n * unselectable or unselected cells.\n * \n * Parameters:\n * \n * initialCell - <mxCell> that triggered this handler.\n */\nmxGraphHandler.prototype.getCells = function(initialCell)\n{\n\tif (!this.delayedSelection && this.graph.isCellMovable(initialCell))\n\t{\n\t\treturn [initialCell];\n\t}\n\telse\n\t{\n\t\treturn this.graph.getMovableCells(this.graph.getSelectionCells());\n\t}\n};\n\n/**\n * Function: getPreviewBounds\n * \n * Returns the <mxRectangle> used as the preview bounds for\n * moving the given cells.\n */\nmxGraphHandler.prototype.getPreviewBounds = function(cells)\n{\n\tvar bounds = this.getBoundingBox(cells);\n\t\n\tif (bounds != null)\n\t{\n\t\t// Corrects width and height\n\t\tbounds.width = Math.max(0, bounds.width - 1);\n\t\tbounds.height = Math.max(0, bounds.height - 1);\n\t\t\n\t\tif (bounds.width < this.minimumSize)\n\t\t{\n\t\t\tvar dx = this.minimumSize - bounds.width;\n\t\t\tbounds.x -= dx / 2;\n\t\t\tbounds.width = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.x = Math.round(bounds.x);\n\t\t\tbounds.width = Math.ceil(bounds.width);\n\t\t}\n\t\t\n\t\tvar tr = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (bounds.height < this.minimumSize)\n\t\t{\n\t\t\tvar dy = this.minimumSize - bounds.height;\n\t\t\tbounds.y -= dy / 2;\n\t\t\tbounds.height = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.y = Math.round(bounds.y);\n\t\t\tbounds.height = Math.ceil(bounds.height);\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the union of the <mxCellStates> for the given array of <mxCells>.\n * For vertices, this method uses the bounding box of the corresponding shape\n * if one exists. The bounding box of the corresponding text label and all\n * controls and overlays are ignored. See also: <mxGraphView.getBounds> and\n * <mxGraph.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraphHandler.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = state;\n\t\t\t\t\t\n\t\t\t\t\tif (model.isVertex(cells[i]) && state.shape != null && state.shape.boundingBox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = state.shape.boundingBox;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createPreviewShape\n * \n * Creates the shape used to draw the preview for the given bounds.\n */\nmxGraphHandler.prototype.createPreviewShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.previewColor);\n\tshape.isDashed = true;\n\t\n\tif (this.htmlPreview)\n\t{\n\t\tshape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tshape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t// event-transparency on the background area of the rectangle since\n\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\tshape.init(this.graph.getView().getOverlayPane());\n\t\tshape.pointerEvents = false;\n\t\t\n\t\t// Workaround for artifacts on iOS\n\t\tif (mxClient.IS_IOS)\n\t\t{\n\t\t\tshape.getSvgScreenOffset = function()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxGraphHandler.prototype.start = function(cell, x, y, cells)\n{\n\tthis.cell = cell;\n\tthis.first = mxUtils.convertPoint(this.graph.container, x, y);\n\tthis.cells = (cells != null) ? cells : this.getCells(this.cell);\n\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\tthis.pBounds = this.getPreviewBounds(this.cells);\n\tthis.allCells = new mxDictionary();\n\tthis.cloning = false;\n\tthis.cellCount = 0;\n\t\n\tfor (var i = 0; i < this.cells.length; i++)\n\t{\n\t\tthis.cellCount += this.addStates(this.cells[i], this.allCells);\n\t}\n\t\n\tif (this.guidesEnabled)\n\t{\n\t\tthis.guide = new mxGuide(this.graph, this.getGuideStates());\n\t\tvar parent = this.graph.model.getParent(cell);\n\t\tvar ignore = this.graph.model.getChildCount(parent) < 2;\n\t\t\n\t\t// Uses connected states as guides\n\t\tvar connected = new mxDictionary();\n\t\tvar opps = this.graph.getOpposites(this.graph.getEdges(this.cell), this.cell);\n\t\t\n\t\tfor (var i = 0; i < opps.length; i++)\n\t\t{\n\t\t\tvar state = this.graph.view.getState(opps[i]);\n\t\t\t\n\t\t\tif (state != null && !connected.get(state))\n\t\t\t{\n\t\t\t\tconnected.put(state, true);\n\t\t\t}\n\t\t}\n\n\t\tthis.guide.isStateIgnored = mxUtils.bind(this, function(state)\n\t\t{\n\t\t\tvar p = this.graph.model.getParent(state.cell);\n\t\t\t\n\t\t\treturn state.cell != null && ((!this.cloning &&\n\t\t\t\tthis.isCellMoving(state.cell)) ||\n\t\t\t\t(state.cell != (this.target || parent) && !ignore &&\n\t\t\t\t!connected.get(state) &&\n\t\t\t\t(this.target == null || this.graph.model.getChildCount(\n\t\t\t\tthis.target) >= 2) && p != (this.target || parent)));  \n\t\t});\n\t}\n};\n\n/**\n * Function: addStates\n * \n * Adds the states for the given cell recursively to the given dictionary.\n */\nmxGraphHandler.prototype.addStates = function(cell, dict)\n{\n\tvar state = this.graph.view.getState(cell);\n\tvar count = 0;\n\t\n\tif (state != null && dict.get(cell) == null)\n\t{\n\t\tdict.put(cell, state);\n\t\tcount++;\n\t\t\n\t\tvar childCount = this.graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tcount += this.addStates(this.graph.model.getChildAt(cell, i), dict);\n\t\t}\n\t}\n\t\n\treturn count;\n};\n\n/**\n * Function: isCellMoving\n * \n * Returns true if the given cell is currently being moved.\n */\nmxGraphHandler.prototype.isCellMoving = function(cell)\n{\n\treturn this.allCells.get(cell) != null;\n};\n\n/**\n * Function: useGuidesForEvent\n * \n * Returns true if the guides should be used for the given <mxMouseEvent>.\n * This implementation returns <mxGuide.isEnabledForEvent>.\n */\nmxGraphHandler.prototype.useGuidesForEvent = function(me)\n{\n\treturn (this.guide != null) ? this.guide.isEnabledForEvent(me.getEvent()) &&\n\t\t!this.graph.isConstrainedEvent(me.getEvent()) : true;\n};\n\n\n/**\n * Function: snap\n * \n * Snaps the given vector to the grid and returns the given mxPoint instance.\n */\nmxGraphHandler.prototype.snap = function(vector)\n{\n\tvar scale = (this.scaleGrid) ? this.graph.view.scale : 1;\n\t\n\tvector.x = this.graph.snap(vector.x / scale) * scale;\n\tvector.y = this.graph.snap(vector.y / scale) * scale;\n\t\n\treturn vector;\n};\n\n/**\n * Function: getDelta\n * \n * Returns an <mxPoint> that represents the vector for moving the cells\n * for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.getDelta = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\t\n\treturn new mxPoint(point.x - this.first.x - this.graph.panDx,\n\t\tpoint.y - this.first.y - this.graph.panDy);\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxGraphHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxGraphHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled vector. Allows for half steps in the raster so\n * numbers coming in should be rounded if no half steps are allowed (ie for non\n * aligned standard moving where pixel steps should be preferred).\n */\nmxGraphHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 100) / 100;\n};\n\n/**\n * Function: isValidDropTarget\n * \n * Returns true if the given cell is a valid drop target.\n */\nmxGraphHandler.prototype.isValidDropTarget = function(target, me)\n{\n\treturn this.graph.model.getParent(this.cell) != target;\n};\n\n/**\n * Function: checkPreview\n * \n * Updates the preview if cloning state has changed.\n */\nmxGraphHandler.prototype.checkPreview = function()\n{\n\tif (this.livePreviewActive && this.cloning)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.livePreviewActive = false;\n\t}\n\telse if (this.maxLivePreview >= this.cellCount && !this.livePreviewActive && this.allowLivePreview)\n\t{\n\t\tif (!this.cloning || !this.livePreviewActive)\n\t\t{\n\t\t\tthis.livePreviewActive = true;\n\t\t\tthis.livePreviewUsed = true;\n\t\t}\n\t}\n\telse if (!this.livePreviewUsed && this.shape == null)\n\t{\n\t\tthis.shape = this.createPreviewShape(this.bounds);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting possible drop targets and updating the\n * preview.\n */\nmxGraphHandler.prototype.mouseMove = function(sender, me)\n{\n\tvar graph = this.graph;\n\n\tif (!me.isConsumed() && graph.isMouseDown && this.cell != null &&\n\t\tthis.first != null && this.bounds != null && !this.suspended)\n\t{\n\t\t// Stops moving if a multi touch event is received\n\t\tif (mxEvent.isMultiTouchEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.reset();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar delta = this.getDelta(me);\n\t\tvar tol = graph.tolerance;\n\n\t\tif (this.shape != null || this.livePreviewActive || Math.abs(delta.x) > tol || Math.abs(delta.y) > tol)\n\t\t{\n\t\t\t// Highlight is used for highlighting drop targets\n\t\t\tif (this.highlight == null)\n\t\t\t{\n\t\t\t\tthis.highlight = new mxCellHighlight(this.graph,\n\t\t\t\t\tmxConstants.DROP_TARGET_COLOR, 3);\n\t\t\t}\n\n\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\tvar gridEnabled = graph.isGridEnabledEvent(me.getEvent());\n\t\t\tvar cell = me.getCell();\n\t\t\tvar hideGuide = true;\n\t\t\tvar target = null;\n\t\t\tthis.cloning = clone;\n\t\t\t\n\t\t\tif (graph.isDropEnabled() && this.highlightEnabled)\n\t\t\t{\n\t\t\t\t// Contains a call to getCellAt to find the cell under the mouse\n\t\t\t\ttarget = graph.getDropTarget(this.cells, me.getEvent(), cell, clone);\n\t\t\t}\n\n\t\t\tvar state = graph.getView().getState(target);\n\t\t\tvar highlight = false;\n\t\t\t\n\t\t\tif (state != null && (clone || this.isValidDropTarget(target, me)))\n\t\t\t{\n\t\t\t    if (this.target != target)\n\t\t\t    {\n\t\t\t\t    this.target = target;\n\t\t\t\t    this.setHighlightColor(mxConstants.DROP_TARGET_COLOR);\n\t\t\t\t}\n\t\t\t    \n\t\t\t    highlight = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.target = null;\n\n\t\t\t\tif (this.connectOnDrop && cell != null && this.cells.length == 1 &&\n\t\t\t\t\tgraph.getModel().isVertex(cell) && graph.isCellConnectable(cell))\n\t\t\t\t{\n\t\t\t\t\tstate = graph.getView().getState(cell);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar error = graph.getEdgeValidationError(null, this.cell, cell);\n\t\t\t\t\t\tvar color = (error == null) ?\n\t\t\t\t\t\t\tmxConstants.VALID_COLOR :\n\t\t\t\t\t\t\tmxConstants.INVALID_CONNECT_TARGET_COLOR;\n\t\t\t\t\t\tthis.setHighlightColor(color);\n\t\t\t\t\t\thighlight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (state != null && highlight)\n\t\t\t{\n\t\t\t\tthis.highlight.highlight(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.highlight.hide();\n\t\t\t}\n\n\t\t\tif (this.guide != null && this.useGuidesForEvent(me))\n\t\t\t{\n\t\t\t\tdelta = this.guide.move(this.bounds, delta, gridEnabled, clone);\n\t\t\t\thideGuide = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta = this.graph.snapDelta(delta, this.bounds, !gridEnabled, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.guide != null && hideGuide)\n\t\t\t{\n\t\t\t\tthis.guide.hide();\n\t\t\t}\n\n\t\t\t// Constrained movement if shift key is pressed\n\t\t\tif (graph.isConstrainedEvent(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(delta.x) > Math.abs(delta.y))\n\t\t\t\t{\n\t\t\t\t\tdelta.y = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelta.x = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.checkPreview();\n\t\t\t\n\t\t\tif (this.currentDx != delta.x || this.currentDy != delta.y)\n\t\t\t{\n\t\t\t\tthis.currentDx = delta.x;\n\t\t\t\tthis.currentDy = delta.y;\n\t\t\t\tthis.updatePreview();\n\t\t\t}\n\t\t}\n\n\t\tthis.updateHint(me);\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_MOVE, me);\n\t\t\n\t\t// Cancels the bubbling of events to the container so\n\t\t// that the droptarget is not reset due to an mouseMove\n\t\t// fired on the container with no associated state.\n\t\tmxEvent.consume(me.getEvent());\n\t}\n\telse if ((this.isMoveEnabled() || this.isCloneEnabled()) && this.updateCursor && !me.isConsumed() &&\n\t\t\t(me.getState() != null || me.sourceState != null) && !graph.isMouseDown)\n\t{\n\t\tvar cursor = graph.getCursorForMouseEvent(me);\n\t\t\n\t\tif (cursor == null && graph.isEnabled() && graph.isCellMovable(me.getCell()))\n\t\t{\n\t\t\tif (graph.getModel().isEdge(me.getCell()))\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_EDGE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_VERTEX;\n\t\t\t}\n\t\t}\n\n\t\t// Sets the cursor on the original source state under the mouse\n\t\t// instead of the event source state which can be the parent\n\t\tif (cursor != null && me.sourceState != null)\n\t\t{\n\t\t\tme.sourceState.setCursor(cursor);\n\t\t}\n\t}\n};\n\n/**\n * Function: updatePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreview = function(remote)\n{\n\tif (this.livePreviewUsed && !remote)\n\t{\n\t\tif (this.cells != null)\n\t\t{\n\t\t\tthis.setHandlesVisibleForCells(\n\t\t\t\tthis.graph.selectionCellsHandler.\n\t\t\t\tgetHandledSelectionCells(), false);\n\t\t\tthis.updateLivePreview(this.currentDx, this.currentDy);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.updatePreviewShape();\n\t}\n};\n\n/**\n * Function: updatePreviewShape\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreviewShape = function()\n{\n\tif (this.shape != null && this.pBounds != null)\n\t{\n\t\tthis.shape.bounds = new mxRectangle(Math.round(this.pBounds.x + this.currentDx),\n\t\t\t\tMath.round(this.pBounds.y + this.currentDy), this.pBounds.width, this.pBounds.height);\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updateLivePreview = function(dx, dy)\n{\n\tif (!this.suspended)\n\t{\n\t\tvar states = [];\n\t\t\n\t\tif (this.allCells != null)\n\t\t{\n\t\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t\t{\n\t\t\t\tvar realState = this.graph.view.getState(state.cell);\n\t\t\t\t\n\t\t\t\t// Checks if cell was removed or replaced\n\t\t\t\tif (realState != state)\n\t\t\t\t{\n\t\t\t\t\tstate.destroy();\n\t\t\t\t\t\n\t\t\t\t\tif (realState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.allCells.put(state.cell, realState);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.allCells.remove(state.cell);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstate = realState;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\t// Saves current state\n\t\t\t\t\tvar tempState = state.clone();\n\t\t\t\t\tstates.push([state, tempState]);\n\t\t\n\t\t\t\t\t// Makes transparent for events to detect drop targets\n\t\t\t\t\tif (state.shape != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (state.shape.originalPointerEvents == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.shape.originalPointerEvents = state.shape.pointerEvents;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstate.shape.pointerEvents = false;\n\t\t\n\t\t\t\t\t\tif (state.text != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (state.text.originalPointerEvents == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.originalPointerEvents = state.text.pointerEvents;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tstate.text.pointerEvents = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\t// Temporarily changes position\n\t\t\t\t\tif (this.graph.model.isVertex(state.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.x += dx;\n\t\t\t\t\t\tstate.y += dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Draws the live preview\n\t\t\t\t\t\tif (!this.cloning)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Forces redraw of connected edges after all states\n\t\t\t\t\t\t\t// have been updated but avoids update of state\n\t\t\t\t\t\t\tstate.view.invalidate(state.cell);\n\t\t\t\t\t\t\tstate.invalid = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Hides folding icon\n\t\t\t\t\t\t\tif (state.control != null && state.control.node != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.control.node.style.visibility = 'hidden';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Clone live preview may use text bounds\n\t\t\t\t\t\telse if (state.text != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.text.updateBoundingBox();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Fixes preview box for edge labels\n\t\t\t\t\t\t\tif (state.text.boundingBox != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.boundingBox.x += dx;\n\t\t\t\t\t\t\t\tstate.text.boundingBox.y += dy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (state.text.unrotatedBoundingBox != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.unrotatedBoundingBox.x += dx;\n\t\t\t\t\t\t\t\tstate.text.unrotatedBoundingBox.y += dy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Resets the handler if everything was removed\n\t\tif (states.length == 0)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Redraws connected edges\n\t\t\tvar s = this.graph.view.scale;\n\t\t\t\n\t\t\tfor (var i = 0; i < states.length; i++)\n\t\t\t{\n\t\t\t\tvar state = states[i][0];\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isEdge(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\t\t\tvar points = [];\n\t\t\t\t\t\n\t\t\t\t\tif (geometry != null && geometry.points != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var j = 0; j < geometry.points.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (geometry.points[j] != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.push(new mxPoint(\n\t\t\t\t\t\t\t\t\tgeometry.points[j].x + dx / s,\n\t\t\t\t\t\t\t\t\tgeometry.points[j].y + dy / s));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar source = state.visibleSourceState;\n\t\t\t\t\tvar target = state.visibleTargetState;\n\t\t\t\t\tvar pts = states[i][1].absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\tif (source == null || !this.isCellMoving(source.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt0 = pts[0];\n\t\t\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(pt0.x + dx, pt0.y + dy), true);\n\t\t\t\t\t\tsource = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.updateFixedTerminalPoint(state, source, true,\n\t\t\t\t\t\t\tthis.graph.getConnectionConstraint(state, source, true));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (target == null || !this.isCellMoving(target.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ptn = pts[pts.length - 1];\n\t\t\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(ptn.x + dx, ptn.y + dy), false);\n\t\t\t\t\t\ttarget = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.updateFixedTerminalPoint(state, target, false,\n\t\t\t\t\t\t\tthis.graph.getConnectionConstraint(state, target, false));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstate.view.updatePoints(state, points, source, target);\n\t\t\t\t\tstate.view.updateFloatingTerminalPoints(state, source, target);\n\t\t\t\t\tstate.view.updateEdgeLabelOffset(state);\n\t\t\t\t\tstate.invalid = false;\n\t\n\t\t\t\t\t// Draws the live preview but avoids update of state\n\t\t\t\t\tif (!this.cloning)\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tthis.graph.view.validate();\n\t\t\tthis.redrawHandles(states);\n\t\t\tthis.resetPreviewStates(states);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the preview shape for the given states array.\n */\nmxGraphHandler.prototype.redrawHandles = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tvar handler = this.graph.selectionCellsHandler.getHandler(states[i][0].cell);\n\t\t\n\t\tif (handler != null)\n\t\t{\n\t\t\thandler.redraw(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetPreviewStates\n * \n * Resets the given preview states array.\n */\nmxGraphHandler.prototype.resetPreviewStates = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tstates[i][0].setState(states[i][1]);\n\t}\n};\n\n/**\n * Function: suspend\n * \n * Suspends the livew preview.\n */\nmxGraphHandler.prototype.suspend = function()\n{\n\tif (!this.suspended)\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.updateLivePreview(0, 0);\n\t\t}\n\t\t\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.node.style.visibility = 'hidden';\n\t\t} \n\t\n\t\tif (this.guide != null)\n\t\t{\n\t\t\tthis.guide.setVisible(false);\n\t\t}\n\t\t\n\t\tthis.suspended = true;\n\t}\n};\n\n/**\n * Function: resume\n * \n * Suspends the livew preview.\n */\nmxGraphHandler.prototype.resume = function()\n{\n\tif (this.suspended)\n\t{\n\t\tthis.suspended = null;\n\t\t\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.livePreviewActive = true;\n\t\t}\n\t\t\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.node.style.visibility = 'visible';\n\t\t}\n\t\t\n\t\tif (this.guide != null)\n\t\t{\n\t\t\tthis.guide.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetLivePreview\n * \n * Resets the livew preview.\n */\nmxGraphHandler.prototype.resetLivePreview = function()\n{\n\tif (this.allCells != null)\n\t{\n\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t{\n\t\t\t// Restores event handling\n\t\t\tif (state.shape != null && state.shape.originalPointerEvents != null)\n\t\t\t{\n\t\t\t\tstate.shape.pointerEvents = state.shape.originalPointerEvents;\n\t\t\t\tstate.shape.originalPointerEvents = null;\n\t\t\t\t\n\t\t\t\t// Forces repaint even if not moved to update pointer events\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t\t\n\t\t\t\tif (state.text != null)\n\t\t\t\t{\n\t\t\t\t\tstate.text.pointerEvents = state.text.originalPointerEvents;\n\t\t\t\t\tstate.text.originalPointerEvents = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Shows folding icon\n\t\t\tif (state.control != null && state.control.node != null &&\n\t\t\t\tstate.control.node.style.visibility == 'hidden')\n\t\t\t{\n\t\t\t\tstate.control.node.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\t// Fixes preview box for edge labels\n\t\t\tif (!this.cloning)\n\t\t\t{\n\t\t\t\tif (state.text != null)\n\t\t\t\t{\n\t\t\t\t\tstate.text.updateBoundingBox();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Forces repaint of connected edges\n\t\t\tstate.view.invalidate(state.cell);\n\t\t}));\n\n\t\t// Repaints all invalid states\n\t\tthis.graph.view.validate();\n\t}\n};\n\n/**\n * Function: setHandlesVisibleForCells\n * \n * Sets wether the handles attached to the given cells are visible.\n * \n * Parameters:\n * \n * cells - Array of <mxCells>.\n * visible - Boolean that specifies if the handles should be visible.\n * force - Forces an update of the handler regardless of the last used value.\n */\nmxGraphHandler.prototype.setHandlesVisibleForCells = function(cells, visible, force)\n{\n\tif (force || this.handlesVisible != visible)\n\t{\n\t\tthis.handlesVisible = visible;\n\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(cells[i]);\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\thandler.setHandlesVisible(visible);\n\t\t\t\t\n\t\t\t\tif (visible)\n\t\t\t\t{\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxGraphHandler.prototype.setHighlightColor = function(color)\n{\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.setHighlightColor(color);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the selection cells.\n */\nmxGraphHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed())\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.resetLivePreview();\n\t\t}\n\t\t\n\t\tif (this.cell != null && this.first != null && (this.shape != null || this.livePreviewUsed) &&\n\t\t\tthis.currentDx != null && this.currentDy != null)\n\t\t{\n\t\t\tvar graph = this.graph;\n\t\t\tvar cell = me.getCell();\n\t\t\t\n\t\t\tif (this.connectOnDrop && this.target == null && cell != null && graph.getModel().isVertex(cell) &&\n\t\t\t\tgraph.isCellConnectable(cell) && graph.isEdgeValid(null, this.cell, cell))\n\t\t\t{\n\t\t\t\tgraph.connectionHandler.connect(this.cell, cell, me.getEvent());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\t\tvar scale = graph.getView().scale;\n\t\t\t\tvar dx = this.roundLength(this.currentDx / scale);\n\t\t\t\tvar dy = this.roundLength(this.currentDy / scale);\n\t\t\t\tvar target = this.target;\n\t\t\t\t\n\t\t\t\tif (graph.isSplitEnabled() && graph.isSplitTarget(target, this.cells, me.getEvent()))\n\t\t\t\t{\n\t\t\t\t\tgraph.splitEdge(target, this.cells, null, dx, dy,\n\t\t\t\t\t\tme.getGraphX(), me.getGraphY());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.moveCells(this.cells, dx, dy, clone, this.target, me.getEvent());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSelectEnabled() && this.delayedSelection && this.cell != null)\n\t\t{\n\t\t\tthis.selectDelayed(me);\n\t\t}\n\t}\n\n\t// Consumes the event if a cell was initially clicked\n\tif (this.cellWasClicked)\n\t{\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_UP, me);\n\t}\n\n\tthis.reset();\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.reset = function()\n{\n\tif (this.livePreviewUsed)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.setHandlesVisibleForCells(\n\t\t\tthis.graph.selectionCellsHandler.\n\t\t\tgetHandledSelectionCells(), true);\n\t}\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n\n\tthis.delayedSelection = false;\n\tthis.livePreviewActive = null;\n\tthis.livePreviewUsed = null;\n\tthis.cellWasClicked = false;\n\tthis.suspended = null;\n\tthis.currentDx = null;\n\tthis.currentDy = null;\n\tthis.cellCount = null;\n\tthis.cloning = false;\n\tthis.allCells = null;\n\tthis.pBounds = null;\n\tthis.guides = null;\n\tthis.target = null;\n\tthis.first = null;\n\tthis.cells = null;\n\tthis.cell = null;\n};\n\n/**\n * Function: shouldRemoveCellsFromParent\n * \n * Returns true if the given cells should be removed from the parent for the specified\n * mousereleased event.\n */\nmxGraphHandler.prototype.shouldRemoveCellsFromParent = function(parent, cells, evt)\n{\n\tif (this.graph.getModel().isVertex(parent))\n\t{\n\t\tvar pState = this.graph.getView().getState(parent);\n\t\t\n\t\tif (pState != null)\n\t\t{\n\t\t\tvar pt = mxUtils.convertPoint(this.graph.container,\n\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(pState.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, cx);\n\t\t\t}\n\t\t\n\t\t\treturn !mxUtils.contains(pState, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: moveCells\n * \n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.moveCells = function(cells, dx, dy, clone, target, evt)\n{\n\tif (clone)\n\t{\n\t\tcells = this.graph.getCloneableCells(cells);\n\t}\n\t\n\t// Removes cells from parent\n\tvar parent = this.graph.getModel().getParent(this.cell);\n\t\n\tif (target == null && this.isRemoveCellsFromParent() &&\n\t\tthis.shouldRemoveCellsFromParent(parent, cells, evt))\n\t{\n\t\ttarget = this.graph.getDefaultParent();\n\t}\n\t\n\t// Cloning into locked cells is not allowed\n\tclone = clone && !this.graph.isCellLocked(target || this.graph.getDefaultParent());\n\n\tthis.graph.getModel().beginUpdate();\n\ttry\n\t{\n\t\tvar parents = [];\n\t\t\n\t\t// Removes parent if all child cells are removed\n\t\tif (!clone && target != null && this.removeEmptyParents)\n\t\t{\n\t\t\t// Collects all non-selected parents\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Recurse up the cell hierarchy\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar par = this.graph.model.getParent(cells[i]);\n\n\t\t\t\tif (par != null && !dict.get(par))\n\t\t\t\t{\n\t\t\t\t\tdict.put(par, true);\n\t\t\t\t\tparents.push(par);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Passes all selected cells in order to correctly clone or move into\n\t\t// the target cell. The method checks for each cell if its movable.\n\t\tcells = this.graph.moveCells(cells, dx, dy, clone, target, evt);\n\n\t\t// Removes parent if all child cells are removed\n\t\tvar temp = [];\n\t\t\n\t\tfor (var i = 0; i < parents.length; i++)\n\t\t{\n\t\t\tif (this.shouldRemoveParent(parents[i]))\n\t\t\t{\n\t\t\t\ttemp.push(parents[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.graph.removeCells(temp, false);\n\t}\n\tfinally\n\t{\n\t\tthis.graph.getModel().endUpdate();\n\t}\n\n\t// Selects the new cells if cells have been cloned\n\tif (clone)\n\t{\n\t\tthis.graph.setSelectionCells(cells);\n\t}\n\n\tif (this.isSelectEnabled() && this.scrollOnMove)\n\t{\n\t\tthis.graph.scrollCellToVisible(cells[0]);\n\t}\n};\n\n/**\n * Function: shouldRemoveParent\n * \n * Returns true if the given parent should be removed after removal of child cells.\n */\nmxGraphHandler.prototype.shouldRemoveParent = function(parent)\n{\n\tvar state = this.graph.view.getState(parent);\n\t\n\treturn state != null && (this.graph.model.isEdge(state.cell) || this.graph.model.isVertex(state.cell)) &&\n\t\tthis.graph.isCellDeletable(state.cell) && this.graph.model.getChildCount(state.cell) == 0 &&\n\t\tthis.graph.isTransparentState(state);\n};\n\n/**\n * Function: destroyShapes\n * \n * Destroy the preview and highlight shapes.\n */\nmxGraphHandler.prototype.destroyShapes = function()\n{\n\t// Destroys the preview dashed rectangle\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.guide != null)\n\t{\n\t\tthis.guide.destroy();\n\t\tthis.guide = null;\n\t}\n\t\n\t// Destroys the drop target highlight\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.destroy();\n\t\tthis.highlight = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxGraphHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.panHandler);\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n\t\n\tmxEvent.removeListener(document, 'keydown', this.keyHandler);\n\tmxEvent.removeListener(document, 'keyup', this.keyHandler);\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n};\n\n__mxOutput.mxGraphHandler = typeof mxGraphHandler !== 'undefined' ? mxGraphHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningHandler\n * \n * Event handler that pans and creates popupmenus. To use the left\n * mousebutton for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>. This handler is built-into\n * <mxGraph.panningHandler> and enabled using <mxGraph.setPanning>.\n * \n * Constructor: mxPanningHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>\n * and pans the graph.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n */\nfunction mxPanningHandler(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force panning event\n\t\tthis.forcePanningHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForcePanningEvent(me))\n\t\t\t{\n\t\t\t\tthis.start(me);\n\t\t\t\tthis.active = true;\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n\t\t\n\t\t// Handles pinch gestures\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.isPinchEnabled())\n\t\t\t{\n\t\t\t\tvar evt = eo.getProperty('event');\n\t\t\t\t\n\t\t\t\tif (!mxEvent.isConsumed(evt) && evt.type == 'gesturestart')\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\t\t// Forces start of panning when pinch gesture starts\n\t\t\t\t\tif (!this.active && this.mouseDownEvent != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.start(this.mouseDownEvent);\n\t\t\t\t\t\tthis.mouseDownEvent = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (evt.type == 'gestureend' && this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.zoomGraph(evt);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.reset();\n\t    \t}\n\t\t});\n\t\t\n\t\t// Stops scrolling on every mouseup anywhere in the document\n\t\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPanningHandler.prototype = new mxEventSource();\nmxPanningHandler.prototype.constructor = mxPanningHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPanningHandler.prototype.graph = null;\n\n/**\n * Variable: useLeftButtonForPanning\n * \n * Specifies if panning should be active for the left mouse button.\n * Setting this to true may conflict with <mxRubberband>. Default is false.\n */\nmxPanningHandler.prototype.useLeftButtonForPanning = false;\n\n/**\n * Variable: usePopupTrigger\n * \n * Specifies if <mxEvent.isPopupTrigger> should also be used for panning.\n */\nmxPanningHandler.prototype.usePopupTrigger = true;\n\n/**\n * Variable: ignoreCell\n * \n * Specifies if panning should be active even if there is a cell under the\n * mousepointer. Default is false.\n */\nmxPanningHandler.prototype.ignoreCell = false;\n\n/**\n * Variable: previewEnabled\n * \n * Specifies if the panning should be previewed. Default is true.\n */\nmxPanningHandler.prototype.previewEnabled = true;\n\n/**\n * Variable: useGrid\n * \n * Specifies if the panning steps should be aligned to the grid size.\n * Default is false.\n */\nmxPanningHandler.prototype.useGrid = false;\n\n/**\n * Variable: panningEnabled\n * \n * Specifies if panning should be enabled. Default is true.\n */\nmxPanningHandler.prototype.panningEnabled = true;\n\n/**\n * Variable: pinchEnabled\n * \n * Specifies if pinch gestures should be handled as zoom. Default is true.\n */\nmxPanningHandler.prototype.pinchEnabled = true;\n\n/**\n * Variable: maxScale\n * \n * Specifies the maximum scale. Default is 8.\n */\nmxPanningHandler.prototype.maxScale = 8;\n\n/**\n * Variable: minScale\n * \n * Specifies the minimum scale. Default is 0.01.\n */\nmxPanningHandler.prototype.minScale = 0.01;\n\n/**\n * Variable: dx\n * \n * Holds the current horizontal offset.\n */\nmxPanningHandler.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Holds the current vertical offset.\n */\nmxPanningHandler.prototype.dy = null;\n\n/**\n * Variable: startX\n * \n * Holds the x-coordinate of the start point.\n */\nmxPanningHandler.prototype.startX = 0;\n\n/**\n * Variable: startY\n * \n * Holds the y-coordinate of the start point.\n */\nmxPanningHandler.prototype.startY = 0;\n\n/**\n * Function: isActive\n * \n * Returns true if the handler is currently active.\n */\nmxPanningHandler.prototype.isActive = function()\n{\n\treturn this.active || this.initialScale != null;\n};\n\n/**\n * Function: isPanningEnabled\n * \n * Returns <panningEnabled>.\n */\nmxPanningHandler.prototype.isPanningEnabled = function()\n{\n\treturn this.panningEnabled;\n};\n\n/**\n * Function: setPanningEnabled\n * \n * Sets <panningEnabled>.\n */\nmxPanningHandler.prototype.setPanningEnabled = function(value)\n{\n\tthis.panningEnabled = value;\n};\n\n/**\n * Function: isPinchEnabled\n * \n * Returns <pinchEnabled>.\n */\nmxPanningHandler.prototype.isPinchEnabled = function()\n{\n\treturn this.pinchEnabled;\n};\n\n/**\n * Function: setPinchEnabled\n * \n * Sets <pinchEnabled>.\n */\nmxPanningHandler.prototype.setPinchEnabled = function(value)\n{\n\tthis.pinchEnabled = value;\n};\n\n/**\n * Function: isPanningTrigger\n * \n * Returns true if the given event is a panning trigger for the optional\n * given cell. This returns true if control-shift is pressed or if\n * <usePopupTrigger> is true and the event is a popup trigger.\n */\nmxPanningHandler.prototype.isPanningTrigger = function(me)\n{\n\tvar evt = me.getEvent();\n\t\n\treturn (this.useLeftButtonForPanning && me.getState() == null &&\n\t\t\tmxEvent.isLeftMouseButton(evt)) || (mxEvent.isControlDown(evt) &&\n\t\t\tmxEvent.isShiftDown(evt)) || (this.usePopupTrigger && mxEvent.isPopupTrigger(evt));\n};\n\n/**\n * Function: isForcePanningEvent\n * \n * Returns true if the given <mxMouseEvent> should start panning. This\n * implementation always returns true if <ignoreCell> is true or for\n * multi touch events.\n */\nmxPanningHandler.prototype.isForcePanningEvent = function(me)\n{\n\treturn this.ignoreCell || mxEvent.isMultiTouchEvent(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPanningHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownEvent = me;\n\t\n\tif (!me.isConsumed() && this.isPanningEnabled() && !this.active && this.isPanningTrigger(me))\n\t{\n\t\tthis.start(me);\n\t\tthis.consumePanningTrigger(me);\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts panning at the given event.\n */\nmxPanningHandler.prototype.start = function(me)\n{\n\tthis.dx0 = -this.graph.container.scrollLeft;\n\tthis.dy0 = -this.graph.container.scrollTop;\n\n\t// Stores the location of the trigger event\n\tthis.startX = me.getX();\n\tthis.startY = me.getY();\n\tthis.dx = null;\n\tthis.dy = null;\n\t\n\tthis.panningTrigger = true;\n};\n\n/**\n * Function: consumePanningTrigger\n * \n * Consumes the given <mxMouseEvent> if it was a panning trigger in\n * <mouseDown>. The default is to invoke <mxMouseEvent.consume>. Note that this\n * will block any further event processing. If you haven't disabled built-in\n * context menus and require immediate selection of the cell on mouseDown in\n * Safari and/or on the Mac, then use the following code:\n * \n * (code)\n * mxPanningHandler.prototype.consumePanningTrigger = function(me)\n * {\n *   if (me.evt.preventDefault)\n *   {\n *     me.evt.preventDefault();\n *   }\n *   \n *   // Stops event processing in IE\n *   me.evt.returnValue = false;\n *   \n *   // Sets local consumed state\n *   if (!mxClient.IS_SF && !mxClient.IS_MAC)\n *   {\n *     me.consumed = true;\n *   }\n * };\n * (end)\n */\nmxPanningHandler.prototype.consumePanningTrigger = function(me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPanningHandler.prototype.mouseMove = function(sender, me)\n{\n\tthis.dx = me.getX() - this.startX;\n\tthis.dy = me.getY() - this.startY;\n\t\n\tif (this.active)\n\t{\n\t\tif (this.previewEnabled)\n\t\t{\n\t\t\t// Applies the grid to the panning steps\n\t\t\tif (this.useGrid)\n\t\t\t{\n\t\t\t\tthis.dx = this.graph.snap(this.dx);\n\t\t\t\tthis.dy = this.graph.snap(this.dy);\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN, 'event', me));\n\t}\n\telse if (this.panningTrigger)\n\t{\n\t\tvar tmp = this.active;\n\n\t\t// Panning is activated only if the mouse is moved\n\t\t// beyond the graph tolerance\n\t\tthis.active = Math.abs(this.dx) > this.graph.tolerance || Math.abs(this.dy) > this.graph.tolerance;\n\n\t\tif (!tmp && this.active)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t}\n\t}\n\t\n\tif (this.active || this.panningTrigger)\n\t{\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tif (this.dx != null && this.dy != null)\n\t\t{\n\t\t\t// Ignores if scrollbars have been used for panning\n\t\t\tif (!this.graph.useScrollbarsForPanning || !mxUtils.hasScrollbars(this.graph.container))\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar t = this.graph.getView().translate;\n\t\t\t\tthis.graph.panGraph(0, 0);\n\t\t\t\tthis.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n\t\t\t}\n\t\t\t\n\t\t\tme.consume();\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_END, 'event', me));\n\t}\n\t\n\tthis.reset();\n};\n\n/**\n * Function: zoomGraph\n * \n * Zooms the graph to the given value and consumed the event if needed.\n */\nmxPanningHandler.prototype.zoomGraph = function(evt)\n{\n\tvar value = Math.round(this.initialScale * evt.scale * 100) / 100;\n\t\n\tif (this.minScale != null)\n\t{\n\t\tvalue = Math.max(this.minScale, value);\n\t}\n\t\n\tif (this.maxScale != null)\n\t{\n\t\tvalue = Math.min(this.maxScale, value);\n\t}\n\n\tif (this.graph.view.scale != value)\n\t{\n\t\tthis.graph.zoomTo(value);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxPanningHandler.prototype.reset = function()\n{\n\tthis.panningTrigger = false;\n\tthis.mouseDownEvent = null;\n\tthis.active = false;\n\tthis.dx = null;\n\tthis.dy = null;\n};\n\n/**\n * Function: panGraph\n * \n * Pans <graph> by the given amount.\n */\nmxPanningHandler.prototype.panGraph = function(dx, dy)\n{\n\tthis.graph.getView().setTranslate(dx, dy);\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPanningHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.forcePanningHandler);\n\tthis.graph.removeListener(this.gestureHandler);\n\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n};\n\n__mxOutput.mxPanningHandler = typeof mxPanningHandler !== 'undefined' ? mxPanningHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenuHandler\n * \n * Event handler that creates popupmenus.\n * \n * Constructor: mxPopupMenuHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>.\n */\nfunction mxPopupMenuHandler(graph, factoryMethod)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.graph.addMouseListener(this);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxPopupMenu.\n */\nmxPopupMenuHandler.prototype = new mxPopupMenu();\nmxPopupMenuHandler.prototype.constructor = mxPopupMenuHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPopupMenuHandler.prototype.graph = null;\n\n/**\n * Variable: selectOnPopup\n * \n * Specifies if cells should be selected if a popupmenu is displayed for\n * them. Default is true.\n */\nmxPopupMenuHandler.prototype.selectOnPopup = true;\n\n/**\n * Variable: clearSelectionOnBackground\n * \n * Specifies if cells should be deselected if a popupmenu is displayed for\n * the diagram background. Default is true.\n */\nmxPopupMenuHandler.prototype.clearSelectionOnBackground = true;\n\n/**\n * Variable: triggerX\n * \n * X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerX = null;\n\n/**\n * Variable: triggerY\n * \n * Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerY = null;\n\n/**\n * Variable: screenX\n * \n * Screen X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenX = null;\n\n/**\n * Variable: screenY\n * \n * Screen Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenY = null;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenuHandler.prototype.init = function()\n{\n\t// Supercall\n\tmxPopupMenu.prototype.init.apply(this);\n\n\t// Hides the tooltip if the mouse is over\n\t// the context menu\n\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.tooltipHandler.hide();\n\t}));\n};\n\n/**\n * Function: isSelectOnPopup\n * \n * Hook for returning if a cell should be selected for a given <mxMouseEvent>.\n * This implementation returns <selectOnPopup>.\n */\nmxPopupMenuHandler.prototype.isSelectOnPopup = function(me)\n{\n\treturn this.selectOnPopup;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPopupMenuHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.isEnabled() && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\t// Hides the popupmenu if is is being displayed\n\t\tthis.hideMenu();\n\t\tthis.triggerX = me.getGraphX();\n\t\tthis.triggerY = me.getGraphY();\n\t\tthis.screenX = mxEvent.getMainEvent(me.getEvent()).screenX;\n\t\tthis.screenY = mxEvent.getMainEvent(me.getEvent()).screenY;\n\t\tthis.popupTrigger = this.isPopupTrigger(me);\n\t\tthis.inTolerance = true;\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPopupMenuHandler.prototype.mouseMove = function(sender, me)\n{\n\t// Popup trigger may change on mouseUp so ignore it\n\tif (this.inTolerance && this.screenX != null && this.screenY != null)\n\t{\n\t\tif (Math.abs(mxEvent.getMainEvent(me.getEvent()).screenX - this.screenX) > this.graph.tolerance ||\n\t\t\tMath.abs(mxEvent.getMainEvent(me.getEvent()).screenY - this.screenY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPopupMenuHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.popupTrigger && this.inTolerance && this.triggerX != null && this.triggerY != null)\n\t{\n\t\tvar cell = this.getCellForPopupEvent(me);\n\n\t\t// Selects the cell for which the context menu is being displayed\n\t\tif (this.graph.isEnabled() && this.isSelectOnPopup(me) &&\n\t\t\tcell != null && !this.graph.isCellSelected(cell))\n\t\t{\n\t\t\tthis.graph.setSelectionCell(cell);\n\t\t}\n\t\telse if (this.clearSelectionOnBackground && cell == null)\n\t\t{\n\t\t\tthis.graph.clearSelection();\n\t\t}\n\t\t\n\t\t// Hides the tooltip if there is one\n\t\tthis.graph.tooltipHandler.hide();\n\n\t\t// Menu is shifted by 1 pixel so that the mouse up event\n\t\t// is routed via the underlying shape instead of the DIV\n\t\tvar origin = mxUtils.getScrollOrigin();\n\t\tthis.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());\n\t\tme.consume();\n\t}\n\t\n\tthis.popupTrigger = false;\n\tthis.inTolerance = false;\n};\n\n/**\n * Function: getCellForPopupEvent\n * \n * Hook to return the cell for the mouse up popup trigger handling.\n */\nmxPopupMenuHandler.prototype.getCellForPopupEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenuHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.gestureHandler);\n\t\n\t// Supercall\n\tmxPopupMenu.prototype.destroy.apply(this);\n};\n\n__mxOutput.mxPopupMenuHandler = typeof mxPopupMenuHandler !== 'undefined' ? mxPopupMenuHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellMarker\n * \n * A helper class to process mouse locations and highlight cells.\n * \n * Helper class to highlight cells. To add a cell marker to an existing graph\n * for highlighting all cells, the following code is used:\n * \n * (code)\n * var marker = new mxCellMarker(graph);\n * graph.addMouseListener({\n *   mouseDown: function() {},\n *   mouseMove: function(sender, me)\n *   {\n *     marker.process(me);\n *   },\n *   mouseUp: function() {}\n * });\n * (end)\n *\n * Event: mxEvent.MARK\n * \n * Fires after a cell has been marked or unmarked. The <code>state</code>\n * property contains the marked <mxCellState> or null if no state is marked.\n * \n * Constructor: mxCellMarker\n * \n * Constructs a new cell marker.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * validColor - Optional marker color for valid states. Default is\n * <mxConstants.DEFAULT_VALID_COLOR>.\n * invalidColor - Optional marker color for invalid states. Default is\n * <mxConstants.DEFAULT_INVALID_COLOR>.\n * hotspot - Portion of the width and hight where a state intersects a\n * given coordinate pair. A value of 0 means always highlight. Default is\n * <mxConstants.DEFAULT_HOTSPOT>.\n */\nfunction mxCellMarker(graph, validColor, invalidColor, hotspot)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.validColor = (validColor != null) ? validColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.invalidColor = (invalidColor != null) ? invalidColor : mxConstants.DEFAULT_INVALID_COLOR;\n\t\tthis.hotspot = (hotspot != null) ? hotspot : mxConstants.DEFAULT_HOTSPOT;\n\t\t\n\t\tthis.highlight = new mxCellHighlight(graph);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxCellMarker, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellMarker.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if the marker is enabled. Default is true.\n */\nmxCellMarker.prototype.enabled = true;\n\n/**\n * Variable: hotspot\n * \n * Specifies the portion of the width and height that should trigger\n * a highlight. The area around the center of the cell to be marked is used\n * as the hotspot. Possible values are between 0 and 1. Default is\n * mxConstants.DEFAULT_HOTSPOT.\n */\nmxCellMarker.prototype.hotspot = mxConstants.DEFAULT_HOTSPOT; \n\n/**\n * Variable: hotspotEnabled\n * \n * Specifies if the hotspot is enabled. Default is false.\n */\nmxCellMarker.prototype.hotspotEnabled = false;\n\n/**\n * Variable: validColor\n * \n * Holds the valid marker color.\n */\nmxCellMarker.prototype.validColor = null;\n\n/**\n * Variable: invalidColor\n * \n * Holds the invalid marker color.\n */\nmxCellMarker.prototype.invalidColor = null;\n\n/**\n * Variable: currentColor\n * \n * Holds the current marker color.\n */\nmxCellMarker.prototype.currentColor = null;\n\n/**\n * Variable: validState\n * \n * Holds the marked <mxCellState> if it is valid.\n */\nmxCellMarker.prototype.validState = null; \n\n/**\n * Variable: markedState\n * \n * Holds the marked <mxCellState>.\n */\nmxCellMarker.prototype.markedState = null;\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxCellMarker.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxCellMarker.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setHotspot\n * \n * Sets the <hotspot>.\n */\nmxCellMarker.prototype.setHotspot = function(hotspot)\n{\n\tthis.hotspot = hotspot;\n};\n\n/**\n * Function: getHotspot\n * \n * Returns the <hotspot>.\n */\nmxCellMarker.prototype.getHotspot = function()\n{\n\treturn this.hotspot;\n};\n\n/**\n * Function: setHotspotEnabled\n * \n * Specifies whether the hotspot should be used in <intersects>.\n */\nmxCellMarker.prototype.setHotspotEnabled = function(enabled)\n{\n\tthis.hotspotEnabled = enabled;\n};\n\n/**\n * Function: isHotspotEnabled\n * \n * Returns true if hotspot is used in <intersects>.\n */\nmxCellMarker.prototype.isHotspotEnabled = function()\n{\n\treturn this.hotspotEnabled;\n};\n\n/**\n * Function: hasValidState\n * \n * Returns true if <validState> is not null.\n */\nmxCellMarker.prototype.hasValidState = function()\n{\n\treturn this.validState != null;\n};\n\n/**\n * Function: getValidState\n * \n * Returns the <validState>.\n */\nmxCellMarker.prototype.getValidState = function()\n{\n\treturn this.validState;\n};\n\n/**\n * Function: getMarkedState\n * \n * Returns the <markedState>.\n */\nmxCellMarker.prototype.getMarkedState = function()\n{\n\treturn this.markedState;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the cell marker.\n */\nmxCellMarker.prototype.reset = function()\n{\n\tthis.validState = null;\n\t\n\tif (this.markedState != null)\n\t{\n\t\tthis.markedState = null;\n\t\tthis.unmark();\n\t}\n};\n\n/**\n * Function: process\n * \n * Processes the given event and cell and marks the state returned by\n * <getState> with the color returned by <getMarkerColor>. If the\n * markerColor is not null, then the state is stored in <markedState>. If\n * <isValidState> returns true, then the state is stored in <validState>\n * regardless of the marker color. The state is returned regardless of the\n * marker color and valid state. \n */\nmxCellMarker.prototype.process = function(me)\n{\n\tvar state = null;\n\t\n\tif (this.isEnabled())\n\t{\n\t\tstate = this.getState(me);\n\t\tthis.setCurrentState(state, me);\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: setCurrentState\n * \n * Sets and marks the current valid state.\n */\nmxCellMarker.prototype.setCurrentState = function(state, me, color)\n{\n\tvar isValid = (state != null) ? this.isValidState(state) : false;\n\tcolor = (color != null) ? color : this.getMarkerColor(me.getEvent(), state, isValid);\n\t\n\tif (isValid)\n\t{\n\t\tthis.validState = state;\n\t}\n\telse\n\t{\n\t\tthis.validState = null;\n\t}\n\t\n\tif (state != this.markedState || color != this.currentColor)\n\t{\n\t\tthis.currentColor = color;\n\t\t\n\t\tif (state != null && this.currentColor != null)\n\t\t{\n\t\t\tthis.markedState = state;\n\t\t\tthis.mark();\t\t\n\t\t}\n\t\telse if (this.markedState != null)\n\t\t{\n\t\t\tthis.markedState = null;\n\t\t\tthis.unmark();\n\t\t}\n\t}\n};\n\n/**\n * Function: markCell\n * \n * Marks the given cell using the given color, or <validColor> if no color is specified.\n */\nmxCellMarker.prototype.markCell = function(cell, color)\n{\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tthis.currentColor = (color != null) ? color : this.validColor;\n\t\tthis.markedState = state;\n\t\tthis.mark();\n\t}\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellMarker.prototype.mark = function()\n{\n\tthis.highlight.setHighlightColor(this.currentColor);\n\tthis.highlight.highlight(this.markedState);\n\tthis.fireEvent(new mxEventObject(mxEvent.MARK, 'state', this.markedState));\n};\n\n/**\n * Function: unmark\n * \n * Hides the marker and fires a <mark> event.\n */\nmxCellMarker.prototype.unmark = function()\n{\n\tthis.mark();\n};\n\n/**\n * Function: isValidState\n * \n * Returns true if the given <mxCellState> is a valid state. If this\n * returns true, then the state is stored in <validState>. The return value\n * of this method is used as the argument for <getMarkerColor>.\n */\nmxCellMarker.prototype.isValidState = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMarkerColor\n * \n * Returns the valid- or invalidColor depending on the value of isValid.\n * The given <mxCellState> is ignored by this implementation.\n */\nmxCellMarker.prototype.getMarkerColor = function(evt, state, isValid)\n{\n\treturn (isValid) ? this.validColor : this.invalidColor;\n};\n\n/**\n * Function: getState\n * \n * Uses <getCell>, <getStateToMark> and <intersects> to return the\n * <mxCellState> for the given <mxMouseEvent>.\n */\nmxCellMarker.prototype.getState = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar cell = this.getCell(me);\n\tvar state = this.getStateToMark(view.getState(cell));\n\n\treturn (state != null && this.intersects(state, me)) ? state : null;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> for the given event and cell. This returns the\n * given cell.\n */\nmxCellMarker.prototype.getCell = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: getStateToMark\n * \n * Returns the <mxCellState> to be marked for the given <mxCellState> under\n * the mouse. This returns the given state.\n */\nmxCellMarker.prototype.getStateToMark = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given coordinate pair intersects the given state.\n * This returns true if the <hotspot> is 0 or the coordinates are inside\n * the hotspot for the given cell state.\n */\nmxCellMarker.prototype.intersects = function(state, me)\n{\n\tif (this.hotspotEnabled)\n\t{\n\t\treturn mxUtils.intersectsHotspot(state, me.getGraphX(), me.getGraphY(),\n\t\t\tthis.hotspot, mxConstants.MIN_HOTSPOT_SIZE,\n\t\t\tmxConstants.MAX_HOTSPOT_SIZE);\n\t}\n\t\n\treturn true;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellMarker.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getModel().removeListener(this.resetHandler);\n\tthis.highlight.destroy();\n};\n\n__mxOutput.mxCellMarker = typeof mxCellMarker !== 'undefined' ? mxCellMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSelectionCellsHandler\n * \n * An event handler that manages cell handlers and invokes their mouse event\n * processing functions.\n * \n * Group: Events\n * \n * Event: mxEvent.ADD\n * \n * Fires if a cell has been added to the selection. The <code>state</code>\n * property contains the <mxCellState> that has been added.\n * \n * Event: mxEvent.REMOVE\n * \n * Fires if a cell has been remove from the selection. The <code>state</code>\n * property contains the <mxCellState> that has been removed.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxSelectionCellsHandler(graph)\n{\n\tmxEventSource.call(this);\n\t\n\tthis.graph = graph;\n\tthis.handlers = new mxDictionary();\n\tthis.graph.addMouseListener(this);\n\t\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.refresh();\n\t\t}\n\t});\n\t\n\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.refreshHandler);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxSelectionCellsHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSelectionCellsHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxSelectionCellsHandler.prototype.enabled = true;\n\n/**\n * Variable: refreshHandler\n * \n * Keeps a reference to an event listener for later removal.\n */\nmxSelectionCellsHandler.prototype.refreshHandler = null;\n\n/**\n * Variable: maxHandlers\n * \n * Defines the maximum number of handlers to paint individually. Default is 100.\n */\nmxSelectionCellsHandler.prototype.maxHandlers = 100;\n\n/**\n * Variable: handlers\n * \n * <mxDictionary> that maps from cells to handlers.\n */\nmxSelectionCellsHandler.prototype.handlers = null;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxSelectionCellsHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxSelectionCellsHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getHandler\n * \n * Returns the handler for the given cell.\n */\nmxSelectionCellsHandler.prototype.getHandler = function(cell)\n{\n\treturn this.handlers.get(cell);\n};\n\n/**\n * Function: isHandled\n * \n * Returns true if the given cell has a handler.\n */\nmxSelectionCellsHandler.prototype.isHandled = function(cell)\n{\n\treturn this.getHandler(cell) != null;\n};\n\n/**\n * Function: reset\n * \n * Resets all handlers.\n */\nmxSelectionCellsHandler.prototype.reset = function()\n{\n\tthis.handlers.visit(function(key, handler)\n\t{\n\t\thandler.reset.apply(handler);\n\t});\n};\n\n/**\n * Function: getHandledSelectionCells\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.getHandledSelectionCells = function()\n{\n\treturn this.graph.getSelectionCells();\n};\n\n/**\n * Function: refresh\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.refresh = function()\n{\n\t// Removes all existing handlers\n\tvar oldHandlers = this.handlers;\n\tthis.handlers = new mxDictionary();\n\t\n\t// Creates handles for all selection cells\n\tvar tmp = mxUtils.sortCells(this.getHandledSelectionCells(), false);\n\n\t// Destroys or updates old handlers\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = oldHandlers.remove(tmp[i]);\n\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tif (handler.state != state)\n\t\t\t\t{\n\t\t\t\t\thandler.destroy();\n\t\t\t\t\thandler = null;\n\t\t\t\t}\n\t\t\t\telse if (!this.isHandlerActive(handler))\n\t\t\t\t{\n\t\t\t\t\tif (handler.refresh != null)\n\t\t\t\t\t{\n\t\t\t\t\t\thandler.refresh();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Destroys unused handlers\n\toldHandlers.visit(mxUtils.bind(this, function(key, handler)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE, 'state', handler.state));\n\t\thandler.destroy();\n\t}));\n\t\n\t// Creates new handlers and updates parent highlight on existing handlers\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = this.handlers.get(tmp[i]);\n\n\t\t\tif (handler == null)\n\t\t\t{\n\t\t\t\thandler = this.graph.createHandler(state);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'state', state));\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thandler.updateParentHighlight();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isHandlerActive\n * \n * Returns true if the given handler is active and should not be redrawn.\n */\nmxSelectionCellsHandler.prototype.isHandlerActive = function(handler)\n{\n\treturn handler.index != null;\n};\n\n/**\n * Function: updateHandler\n * \n * Updates the handler for the given shape if one exists.\n */\nmxSelectionCellsHandler.prototype.updateHandler = function(state)\n{\n\tvar handler = this.handlers.remove(state.cell);\n\t\n\tif (handler != null)\n\t{\n\t\t// Transfers the current state to the new handler\n\t\tvar index = handler.index;\n\t\tvar x = handler.startX;\n\t\tvar y = handler.startY;\n\t\t\n\t\thandler.destroy();\n\t\thandler = this.graph.createHandler(state);\n\n\t\tif (handler != null)\n\t\t{\n\t\t\tthis.handlers.put(state.cell, handler);\n\t\t\t\n\t\t\tif (index != null && x != null && y != null)\n\t\t\t{\n\t\t\t\thandler.start(x, y, index);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseDown.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseMove.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseUp.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxSelectionCellsHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getSelectionModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getView().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n};\n\n__mxOutput.mxSelectionCellsHandler = typeof mxSelectionCellsHandler !== 'undefined' ? mxSelectionCellsHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxConnectionHandler\n *\n * Graph event handler that creates new connections. Uses <mxTerminalMarker>\n * for finding and highlighting the source and target vertices and\n * <factoryMethod> to create the edge instance. This handler is built-into\n * <mxGraph.connectionHandler> and enabled using <mxGraph.setConnectable>.\n *\n * Example:\n * \n * (code)\n * new mxConnectionHandler(graph, function(source, target, style)\n * {\n *   edge = new mxCell('', new mxGeometry());\n *   edge.setEdge(true);\n *   edge.setStyle(style);\n *   edge.geometry.relative = true;\n *   return edge;\n * });\n * (end)\n * \n * Here is an alternative solution that just sets a specific user object for\n * new edges by overriding <insertEdge>.\n *\n * (code)\n * mxConnectionHandlerInsertEdge = mxConnectionHandler.prototype.insertEdge;\n * mxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n * {\n *   value = 'Test';\n * \n *   return mxConnectionHandlerInsertEdge.apply(this, arguments);\n * };\n * (end)\n * \n * Using images to trigger connections:\n * \n * This handler uses mxTerminalMarker to find the source and target cell for\n * the new connection and creates a new edge using <connect>. The new edge is\n * created using <createEdge> which in turn uses <factoryMethod> or creates a\n * new default edge.\n * \n * The handler uses a \"highlight-paradigm\" for indicating if a cell is being\n * used as a source or target terminal, as seen in other diagramming products.\n * In order to allow both, moving and connecting cells at the same time,\n * <mxConstants.DEFAULT_HOTSPOT> is used in the handler to determine the hotspot\n * of a cell, that is, the region of the cell which is used to trigger a new\n * connection. The constant is a value between 0 and 1 that specifies the\n * amount of the width and height around the center to be used for the hotspot\n * of a cell and its default value is 0.5. In addition,\n * <mxConstants.MIN_HOTSPOT_SIZE> defines the minimum number of pixels for the\n * width and height of the hotspot.\n * \n * This solution, while standards compliant, may be somewhat confusing because\n * there is no visual indicator for the hotspot and the highlight is seen to\n * switch on and off while the mouse is being moved in and out. Furthermore,\n * this paradigm does not allow to create different connections depending on\n * the highlighted hotspot as there is only one hotspot per cell and it\n * normally does not allow cells to be moved and connected at the same time as\n * there is no clear indication of the connectable area of the cell.\n * \n * To come across these issues, the handle has an additional <createIcons> hook\n * with a default implementation that allows to create one icon to be used to\n * trigger new connections. If this icon is specified, then new connections can\n * only be created if the image is clicked while the cell is being highlighted.\n * The <createIcons> hook may be overridden to create more than one\n * <mxImageShape> for creating new connections, but the default implementation\n * supports one image and is used as follows:\n * \n * In order to display the \"connect image\" whenever the mouse is over the cell,\n * an DEFAULT_HOTSPOT of 1 should be used:\n * \n * (code)\n * mxConstants.DEFAULT_HOTSPOT = 1;\n * (end)\n * \n * In order to avoid confusion with the highlighting, the highlight color\n * should not be used with a connect image:\n * \n * (code)\n * mxConstants.HIGHLIGHT_COLOR = null;\n * (end)\n * \n * To install the image, the connectImage field of the mxConnectionHandler must\n * be assigned a new <mxImage> instance:\n * \n * (code)\n * mxConnectionHandler.prototype.connectImage = new mxImage('images/green-dot.gif', 14, 14);\n * (end)\n * \n * This will use the green-dot.gif with a width and height of 14 pixels as the\n * image to trigger new connections. In createIcons the icon field of the\n * handler will be set in order to remember the icon that has been clicked for\n * creating the new connection. This field will be available under selectedIcon\n * in the connect method, which may be overridden to take the icon that\n * triggered the new connection into account. This is useful if more than one\n * icon may be used to create a connection.\n *\n * Group: Events\n * \n * Event: mxEvent.START\n * \n * Fires when a new connection is being created by the user. The <code>state</code>\n * property contains the state of the source cell.\n * \n * Event: mxEvent.CONNECT\n * \n * Fires between begin- and endUpdate in <connect>. The <code>cell</code>\n * property contains the inserted edge, the <code>event</code> and <code>target</code> \n * properties contain the respective arguments that were passed to <connect> (where\n * target corresponds to the dropTarget argument). Finally, the <code>terminal</code>\n * property corresponds to the target argument in <connect> or the clone of the source\n * terminal if <createTarget> is enabled.\n * \n * Note that the target is the cell under the mouse where the mouse button was released.\n * Depending on the logic in the handler, this doesn't necessarily have to be the target\n * of the inserted edge. To print the source, target or any optional ports IDs that the\n * edge is connected to, the following code can be used. To get more details about the\n * actual connection point, <mxGraph.getConnectionConstraint> can be used. To resolve\n * the port IDs, use <mxGraphModel.getCell>.\n * \n * (code)\n * graph.connectionHandler.addListener(mxEvent.CONNECT, function(sender, evt)\n * {\n *   var edge = evt.getProperty('cell');\n *   var source = graph.getModel().getTerminal(edge, true);\n *   var target = graph.getModel().getTerminal(edge, false);\n *   \n *   var style = graph.getCellStyle(edge);\n *   var sourcePortId = style[mxConstants.STYLE_SOURCE_PORT];\n *   var targetPortId = style[mxConstants.STYLE_TARGET_PORT];\n *   \n *   mxLog.show();\n *   mxLog.debug('connect', edge, source.id, target.id, sourcePortId, targetPortId);\n * });\n * (end)\n *\n * Event: mxEvent.RESET\n * \n * Fires when the <reset> method is invoked.\n *\n * Constructor: mxConnectionHandler\n *\n * Constructs an event handler that connects vertices using the specified\n * factory method to create the new edges. Modify\n * <mxConstants.ACTIVE_REGION> to setup the region on a cell which triggers\n * the creation of a new connection or use connect icons as explained\n * above.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and an\n * optional cell style from the preview as the third argument. It returns\n * the <mxCell> that represents the new edge.\n */\nfunction mxConnectionHandler(graph, factoryMethod)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxConnectionHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConnectionHandler.prototype.graph = null;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used for creating new edges. The function takes the\n * source and target <mxCell> as the first and second argument and returns\n * a new <mxCell> that represents the edge. This is used in <createEdge>.\n */\nmxConnectionHandler.prototype.factoryMethod = true;\n\n/**\n * Variable: moveIconFront\n * \n * Specifies if icons should be displayed inside the graph container instead\n * of the overlay pane. This is used for HTML labels on vertices which hide\n * the connect icon. This has precendence over <moveIconBack> when set\n * to true. Default is false.\n */\nmxConnectionHandler.prototype.moveIconFront = false;\n\n/**\n * Variable: moveIconBack\n * \n * Specifies if icons should be moved to the back of the overlay pane. This can\n * be set to true if the icons of the connection handler conflict with other\n * handles, such as the vertex label move handle. Default is false.\n */\nmxConnectionHandler.prototype.moveIconBack = false;\n\n/**\n * Variable: connectImage\n * \n * <mxImage> that is used to trigger the creation of a new connection. This\n * is used in <createIcons>. Default is null.\n */\nmxConnectionHandler.prototype.connectImage = null;\n\n/**\n * Variable: targetConnectImage\n * \n * Specifies if the connect icon should be centered on the target state\n * while connections are being previewed. Default is false.\n */\nmxConnectionHandler.prototype.targetConnectImage = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConnectionHandler.prototype.enabled = true;\n\n/**\n * Variable: select\n * \n * Specifies if new edges should be selected. Default is true.\n */\nmxConnectionHandler.prototype.select = true;\n\n/**\n * Variable: createTarget\n * \n * Specifies if <createTargetVertex> should be called if no target was under the\n * mouse for the new connection. Setting this to true means the connection\n * will be drawn as valid if no target is under the mouse, and\n * <createTargetVertex> will be called before the connection is created between\n * the source cell and the newly created vertex in <createTargetVertex>, which\n * can be overridden to create a new target. Default is false.\n */\nmxConnectionHandler.prototype.createTarget = false;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> used for finding source and target cells.\n */\nmxConnectionHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxConnectionHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while connections are being created.\n */\nmxConnectionHandler.prototype.error = null;\n\n/**\n * Variable: waypointsEnabled\n * \n * Specifies if single clicks should add waypoints on the new edge. Default is\n * false.\n */\nmxConnectionHandler.prototype.waypointsEnabled = false;\n\n/**\n * Variable: ignoreMouseDown\n * \n * Specifies if the connection handler should ignore the state of the mouse\n * button when highlighting the source. Default is false, that is, the\n * handler only highlights the source if no button is being pressed.\n */\nmxConnectionHandler.prototype.ignoreMouseDown = false;\n\n/**\n * Variable: first\n * \n * Holds the <mxPoint> where the mouseDown took place while the handler is\n * active.\n */\nmxConnectionHandler.prototype.first = null;\n\n/**\n * Variable: connectIconOffset\n * \n * Holds the offset for connect icons during connection preview.\n * Default is mxPoint(0, <mxConstants.TOOLTIP_VERTICAL_OFFSET>).\n * Note that placing the icon under the mouse pointer with an\n * offset of (0,0) will affect hit detection.\n */\nmxConnectionHandler.prototype.connectIconOffset = new mxPoint(0, mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\n/**\n * Variable: edgeState\n * \n * Optional <mxCellState> that represents the preview edge while the\n * handler is active. This is created in <createEdgeState>.\n */\nmxConnectionHandler.prototype.edgeState = null;\n\n/**\n * Variable: changeHandler\n * \n * Holds the change event listener for later removal.\n */\nmxConnectionHandler.prototype.changeHandler = null;\n\n/**\n * Variable: drillHandler\n * \n * Holds the drill event listener for later removal.\n */\nmxConnectionHandler.prototype.drillHandler = null;\n\n/**\n * Variable: mouseDownCounter\n * \n * Counts the number of mouseDown events since the start. The initial mouse\n * down event counts as 1.\n */\nmxConnectionHandler.prototype.mouseDownCounter = 0;\n\n/**\n * Variable: movePreviewAway\n * \n * Switch to enable moving the preview away from the mousepointer. This is required in browsers\n * where the preview cannot be made transparent to events and if the built-in hit detection on\n * the HTML elements in the page should be used. Default is the value of <mxClient.IS_VML>.\n */\nmxConnectionHandler.prototype.movePreviewAway = mxClient.IS_VML;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxConnectionHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: livePreview\n * \n * Specifies if the actual shape of the edge state should be used for the preview.\n * Default is false. (Ignored if no edge state is created in <createEdgeState>.)\n */\nmxConnectionHandler.prototype.livePreview = false;\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used while the handler is active. Default is null.\n */\nmxConnectionHandler.prototype.cursor = null;\n\n/**\n * Variable: insertBeforeSource\n * \n * Specifies if new edges should be inserted before the source vertex in the\n * cell hierarchy. Default is false for backwards compatibility.\n */\nmxConnectionHandler.prototype.insertBeforeSource = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConnectionHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConnectionHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isInsertBefore\n * \n * Returns <insertBeforeSource> for non-loops and false for loops.\n *\n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be inserted.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.isInsertBefore = function(edge, source, target, evt, dropTarget)\n{\n\treturn this.insertBeforeSource && source != target;\n};\n\n/**\n * Function: isCreateTarget\n * \n * Returns <createTarget>.\n *\n * Parameters:\n *\n * evt - Current active native pointer event.\n */\nmxConnectionHandler.prototype.isCreateTarget = function(evt)\n{\n\treturn this.createTarget;\n};\n\n/**\n * Function: setCreateTarget\n * \n * Sets <createTarget>.\n */\nmxConnectionHandler.prototype.setCreateTarget = function(value)\n{\n\tthis.createTarget = value;\n};\n\n/**\n * Function: createShape\n * \n * Creates the preview shape for new connections.\n */\nmxConnectionHandler.prototype.createShape = function()\n{\n\t// Creates the edge preview\n\tvar shape = (this.livePreview && this.edgeState != null) ?\n\t\tthis.graph.cellRenderer.createShape(this.edgeState) :\n\t\tnew mxPolyline([], mxConstants.INVALID_COLOR);\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.scale = this.graph.view.scale;\n\tshape.pointerEvents = false;\n\tshape.isDashed = true;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, null);\n\n\treturn shape;\n};\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this connection handler. This should\n * be invoked if <mxGraph.container> is assigned after the connection\n * handler has been created.\n */\nmxConnectionHandler.prototype.init = function()\n{\n\tthis.graph.addMouseListener(this);\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\n\t// Redraws the icons if the graph changes\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.iconState = this.graph.getView().getState(this.iconState.cell);\n\t\t}\n\t\t\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.redrawIcons(this.icons, this.iconState);\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != null && this.graph.view.getState(this.previous.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.changeHandler);\n\t\n\t// Removes the icon if we step into/up or start editing\n\tthis.drillHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.START_EDITING, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.drillHandler);\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxConnectionHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxConnectionHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tmarker.hotspotEnabled = true;\n\n\t// Overrides to return cell at location only if valid (so that\n\t// there is no highlight for invalid cells)\n\tmarker.getCell = mxUtils.bind(this, function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(marker, arguments);\n\t\tthis.error = null;\n\t\t\n\t\t// Checks for cell at preview point (with grid)\n\t\tif (cell == null && this.currentPoint != null)\n\t\t{\n\t\t\tcell = this.graph.getCellAt(this.currentPoint.x, this.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && this.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, this.currentPoint.x, this.currentPoint.y)) ||\n\t\t\t!this.isConnectableCell(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isConnecting())\n\t\t\t{\n\t\t\t\tif (this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tthis.error = this.validateConnection(this.previous.cell, cell);\n\t\t\t\t\t\n\t\t\t\t\tif (this.error != null && this.error.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell = null;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Enables create target inside groups\n\t\t\t\t\t\tif (this.isCreateTarget(me.getEvent()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.error = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!this.isValidSource(cell, me))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.isConnecting() && !this.isCreateTarget(me.getEvent()) &&\n\t\t\t\t!this.graph.allowDanglingEdges)\n\t\t{\n\t\t\tthis.error = '';\n\t\t}\n\n\t\treturn cell;\n\t});\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = mxUtils.bind(this, function(state)\n\t{\n\t\tif (this.isConnecting())\n\t\t{\n\t\t\treturn this.error == null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxCellMarker.prototype.isValidState.apply(marker, arguments);\n\t\t}\n\t});\n\n\t// Overrides to use marker color only in highlight mode or for\n\t// target selection\n\tmarker.getMarkerColor = mxUtils.bind(this, function(evt, state, isValid)\n\t{\n\t\treturn (this.connectImage == null || this.isConnecting()) ?\n\t\t\tmxCellMarker.prototype.getMarkerColor.apply(marker, arguments) :\n\t\t\tnull;\n\t});\n\n\t// Overrides to use hotspot only for source selection otherwise\n\t// intersects always returns true when over a cell\n\tmarker.intersects = mxUtils.bind(this, function(state, evt)\n\t{\n\t\tif (this.connectImage != null || this.isConnecting())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxCellMarker.prototype.intersects.apply(marker, arguments);\n\t});\n\n\treturn marker;\n};\n\n/**\n * Function: start\n * \n * Starts a new connection for the given state and coordinates.\n */\nmxConnectionHandler.prototype.start = function(state, x, y, edgeState)\n{\n\tthis.previous = state;\n\tthis.first = new mxPoint(x, y);\n\tthis.edgeState = (edgeState != null) ? edgeState : this.createEdgeState(null);\n\t\n\t// Marks the source state\n\tthis.marker.currentColor = this.marker.validColor;\n\tthis.marker.markedState = state;\n\tthis.marker.mark();\n\n\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n};\n\n/**\n * Function: isConnecting\n * \n * Returns true if the source terminal has been clicked and a new\n * connection is currently being previewed.\n */\nmxConnectionHandler.prototype.isConnecting = function()\n{\n\treturn this.first != null && this.shape != null;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns <mxGraph.isValidSource> for the given source terminal.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the source terminal.\n * me - <mxMouseEvent> that is associated with this call.\n */\nmxConnectionHandler.prototype.isValidSource = function(cell, me)\n{\n\treturn this.graph.isValidSource(cell);\n};\n\n/**\n * Function: isValidTarget\n * \n * Returns true. The call to <mxGraph.isValidTarget> is implicit by calling\n * <mxGraph.getEdgeValidationError> in <validateConnection>. This is an\n * additional hook for disabling certain targets in this specific handler.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.isValidTarget = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.validateConnection = function(source, target)\n{\n\tif (!this.isValidTarget(target))\n\t{\n\t\treturn '';\n\t}\n\t\n\treturn this.graph.getEdgeValidationError(null, source, target);\n};\n\n/**\n * Function: getConnectImage\n * \n * Hook to return the <mxImage> used for the connection icon of the given\n * <mxCellState>. This implementation returns <connectImage>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect image should be returned.\n */\nmxConnectionHandler.prototype.getConnectImage = function(state)\n{\n\treturn this.connectImage;\n};\n\n/**\n * Function: isMoveIconToFrontForState\n * \n * Returns true if the state has a HTML label in the graph's container, otherwise\n * it returns <moveIconFront>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.isMoveIconToFrontForState = function(state)\n{\n\tif (state.text != null && state.text.node.parentNode == this.graph.container)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn this.moveIconFront;\n};\n\n/**\n * Function: createIcons\n * \n * Creates the array <mxImageShapes> that represent the connect icons for\n * the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.createIcons = function(state)\n{\n\tvar image = this.getConnectImage(state);\n\t\n\tif (image != null && state != null)\n\t{\n\t\tthis.iconState = state;\n\t\tvar icons = [];\n\n\t\t// Cannot use HTML for the connect icons because the icon receives all\n\t\t// mouse move events in IE, must use VML and SVG instead even if the\n\t\t// connect-icon appears behind the selection border and the selection\n\t\t// border consumes the events before the icon gets a chance\n\t\tvar bounds = new mxRectangle(0, 0, image.width, image.height);\n\t\tvar icon = new mxImageShape(bounds, image.src, null, null, 0);\n\t\ticon.preserveImageAspect = false;\n\t\t\n\t\tif (this.isMoveIconToFrontForState(state))\n\t\t{\n\t\t\ticon.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\ticon.init(this.graph.container);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ticon.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\ticon.init(this.graph.getView().getOverlayPane());\n\n\t\t\t// Move the icon back in the overlay pane\n\t\t\tif (this.moveIconBack && icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\t\t}\n\n\t\ticon.node.style.cursor = mxConstants.CURSOR_CONNECT;\n\n\t\t// Events transparency\n\t\tvar getState = mxUtils.bind(this, function()\n\t\t{\n\t\t\treturn (this.currentState != null) ? this.currentState : state;\n\t\t});\n\t\t\n\t\t// Updates the local icon before firing the mouse down event.\n\t\tvar mouseDown = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tthis.icon = icon;\n\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN,\n\t\t\t\t\tnew mxMouseEvent(evt, getState()));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState, mouseDown);\n\t\t\n\t\ticons.push(icon);\n\t\tthis.redrawIcons(icons, this.iconState);\n\t\t\n\t\treturn icons;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.redrawIcons = function(icons, state)\n{\n\tif (icons != null && icons[0] != null && state != null)\n\t{\n\t\tvar pos = this.getIconPosition(icons[0], state);\n\t\ticons[0].bounds.x = pos.x;\n\t\ticons[0].bounds.y = pos.y;\n\t\ticons[0].redraw();\n\t}\n};\n\n/**\n * Function: getIconPosition\n * \n * Returns the center position of the given icon.\n * \n * Parameters:\n * \n * icon - The connect icon of <mxImageShape> with the mouse.\n * state - <mxCellState> under the mouse.\n */\nmxConnectionHandler.prototype.getIconPosition = function(icon, state)\n{\n\tvar scale = this.graph.getView().scale;\n\tvar cx = state.getCenterX();\n\tvar cy = state.getCenterY();\n\t\n\tif (this.graph.isSwimlane(state.cell))\n\t{\n\t\tvar size = this.graph.getStartSize(state.cell);\n\t\t\n\t\tcx = (size.width != 0) ? state.x + size.width * scale / 2 : cx;\n\t\tcy = (size.height != 0) ? state.y + size.height * scale / 2 : cy;\n\t\t\n\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin, ct);\n\t\t\tcx = pt.x;\n\t\t\tcy = pt.y;\n\t\t}\n\t}\n\n\treturn new mxPoint(cx - icon.bounds.width / 2,\n\t\t\tcy - icon.bounds.height / 2);\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the connect icons and resets the respective state.\n */\nmxConnectionHandler.prototype.destroyIcons = function()\n{\n\tif (this.icons != null)\n\t{\n\t\tfor (var i = 0; i < this.icons.length; i++)\n\t\t{\n\t\t\tthis.icons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.icons = null;\n\t\tthis.icon = null;\n\t\tthis.selectedIcon = null;\n\t\tthis.iconState = null;\n\t}\n};\n\n/**\n * Function: isStartEvent\n * \n * Returns true if the given mouse down event should start this handler. The\n * This implementation returns true if the event does not force marquee\n * selection, and the currentConstraint and currentFocus of the\n * <constraintHandler> are not null, or <previous> and <error> are not null and\n * <icons> is null or <icons> and <icon> are not null.\n */\nmxConnectionHandler.prototype.isStartEvent = function(me)\n{\n\treturn ((this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null) ||\n\t\t(this.previous != null && this.error == null && (this.icons == null || (this.icons != null &&\n\t\tthis.icon != null))));\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a new connection.\n */\nmxConnectionHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownCounter++;\n\t\n\tif (this.isEnabled() && this.graph.isEnabled() && !me.isConsumed() &&\n\t\t!this.isConnecting() && this.isStartEvent(me))\n\t{\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t{\n\t\t\tthis.sourceConstraint = this.constraintHandler.currentConstraint;\n\t\t\tthis.previous = this.constraintHandler.currentFocus;\n\t\t\tthis.first = this.constraintHandler.currentPoint.clone();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Stores the location of the initial mousedown\n\t\t\tthis.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t}\n\t\n\t\tthis.edgeState = this.createEdgeState(me);\n\t\tthis.mouseDownCounter = 1;\n\t\t\n\t\tif (this.waypointsEnabled && this.shape == null)\n\t\t{\n\t\t\tthis.waypoints = null;\n\t\t\tthis.shape = this.createShape();\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t}\n\t\t}\n\n\t\t// Stores the starting point in the geometry of the preview\n\t\tif (this.previous == null && this.edgeState != null)\n\t\t{\n\t\t\tvar pt = this.graph.getPointForEvent(me.getEvent());\n\t\t\tthis.edgeState.cell.geometry.setTerminalPoint(pt, true);\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n\n\t\tme.consume();\n\t}\n\n\tthis.selectedIcon = this.icon;\n\tthis.icon = null;\n};\n\n/**\n * Function: isImmediateConnectSource\n * \n * Returns true if a tap on the given source state should immediately start\n * connecting. This implementation returns true if the state is not movable\n * in the graph. \n */\nmxConnectionHandler.prototype.isImmediateConnectSource = function(state)\n{\n\treturn !this.graph.isCellMovable(state.cell);\n};\n\n/**\n * Function: createEdgeState\n * \n * Hook to return an <mxCellState> which may be used during the preview.\n * This implementation returns null.\n * \n * Use the following code to create a preview for an existing edge style:\n * \n * (code)\n * graph.connectionHandler.createEdgeState = function(me)\n * {\n *   var edge = graph.createEdge(null, null, null, null, null, 'edgeStyle=elbowEdgeStyle');\n *   \n *   return new mxCellState(this.graph.view, edge, this.graph.getCellStyle(edge));\n * };\n * (end)\n */\nmxConnectionHandler.prototype.createEdgeState = function(me)\n{\n\treturn null;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxConnectionHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updateCurrentState\n * \n * Updates the current state for a given mouse move event by using\n * the <marker>.\n */\nmxConnectionHandler.prototype.updateCurrentState = function(me, point)\n{\n\tthis.constraintHandler.update(me, this.first == null, false, (this.first == null ||\n\t\tme.isSource(this.marker.highlight.shape)) ? null : point);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\n\t\t// Updates validation state\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.error = this.validateConnection(this.previous.cell, this.constraintHandler.currentFocus.cell);\n\t\t\t\n\t\t\tif (this.error == null)\n\t\t\t{\n\t\t\t\tthis.currentState = this.constraintHandler.currentFocus;\n\t\t\t}\n\t\t\t\t\t\n\t\t\tif (this.error != null || (this.currentState != null &&\n\t\t\t\t!this.isCellEnabled(this.currentState.cell)))\n\t\t\t{\n\t\t\t\tthis.constraintHandler.reset();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.process(me);\n\t\t\tthis.currentState = this.marker.getValidState();\n\t\t}\n\t\t\t\n\t\tif (this.currentState != null && !this.isCellEnabled(this.currentState.cell))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar outline = this.isOutlineConnectEvent(me);\n\t\t\n\t\tif (this.currentState != null && outline)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tvar constraint = this.graph.getOutlineConstraint(point, this.currentState, me);\n\t\t\tthis.constraintHandler.setFocus(me, this.currentState, false);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\n\t\tif (this.outlineConnect)\n\t\t{\n\t\t\tif (this.marker.highlight != null && this.marker.highlight.shape != null)\n\t\t\t{\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.OUTLINE_HIGHLIGHT_COLOR;\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t} \n\t\t\t\telse if (this.marker.hasValidState())\n\t\t\t\t{\n\t\t\t\t\t// Handles special case where actual end point of edge and current mouse point\n\t\t\t\t\t// are not equal (due to grid snapping) and there is no hit on shape or highlight\n\t\t\t\t\t// but ignores cases where parent is used for non-connectable child cells\n\t\t\t\t\tif (this.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\t\t\tthis.marker.getValidState() != me.getState())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\t\tthis.currentState = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.DEFAULT_VALID_COLOR;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell allows new connections to be created. This implementation\n * always returns true.\n */\nmxConnectionHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: convertWaypoint\n * \n * Converts the given point from screen coordinates to model coordinates.\n */\nmxConnectionHandler.prototype.convertWaypoint = function(point)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\n\tpoint.x = point.x / scale - tr.x;\n\tpoint.y = point.y / scale - tr.y;\n};\n\n/**\n * Function: snapToPreview\n * \n * Called to snap the given point to the current preview. This snaps to the\n * first point of the preview if alt is not pressed.\n */\nmxConnectionHandler.prototype.snapToPreview = function(me, point)\n{\n\tif (!mxEvent.isAltDown(me.getEvent()) && this.previous != null)\n\t{\n\t\tvar tol = this.graph.gridSize * this.graph.view.scale / 2;\t\n\t\tvar tmp = (this.sourceConstraint != null) ? this.first :\n\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\n\t\tif (Math.abs(tmp.x - me.getGraphX()) < tol)\n\t\t{\n\t\t\tpoint.x = tmp.x;\n\t\t}\n\t\t\n\t\tif (Math.abs(tmp.y - me.getGraphY()) < tol)\n\t\t{\n\t\t\tpoint.y = tmp.y;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview edge or by highlighting\n * a possible source or target terminal.\n */\nmxConnectionHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && (this.ignoreMouseDown || this.first != null || !this.graph.isMouseDown))\n\t{\n\t\t// Handles special case when handler is disabled during highlight\n\t\tif (!this.isEnabled() && this.currentState != null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar view = this.graph.getView();\n\t\tvar scale = view.scale;\n\t\tvar tr = view.translate;\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tthis.error = null;\n\n\t\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t\t{\n\t\t\tpoint = new mxPoint((this.graph.snap(point.x / scale - tr.x) + tr.x) * scale,\n\t\t\t\t(this.graph.snap(point.y / scale - tr.y) + tr.y) * scale);\n\t\t}\n\t\t\n\t\tthis.snapToPreview(me, point);\n\t\tthis.currentPoint = point;\n\t\t\n\t\tif ((this.first != null || (this.isEnabled() && this.graph.isEnabled())) &&\n\t\t\t(this.shape != null || this.first == null ||\n\t\t\tMath.abs(me.getGraphX() - this.first.x) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.first.y) > this.graph.tolerance))\n\t\t{\n\t\t\tthis.updateCurrentState(me, point);\n\t\t}\n\n\t\tif (this.first != null)\n\t\t{\n\t\t\tvar constraint = null;\n\t\t\tvar current = point;\n\t\t\t\n\t\t\t// Uses the current point from the constraint handler if available\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tconstraint = this.constraintHandler.currentConstraint;\n\t\t\t\tcurrent = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.previous != null && !this.graph.isIgnoreTerminalEvent(me.getEvent()) &&\n\t\t\t\tmxEvent.isShiftDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(this.previous.getCenterX() - point.x) <\n\t\t\t\t\tMath.abs(this.previous.getCenterY() - point.y))\n\t\t\t\t{\n\t\t\t\t\tpoint.x = this.previous.getCenterX();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpoint.y = this.previous.getCenterY();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pt2 = this.first;\n\t\t\t\n\t\t\t// Moves the connect icon with the mouse\n\t\t\tif (this.selectedIcon != null)\n\t\t\t{\n\t\t\t\tvar w = this.selectedIcon.bounds.width;\n\t\t\t\tvar h = this.selectedIcon.bounds.height;\n\t\t\t\t\n\t\t\t\tif (this.currentState != null && this.targetConnectImage)\n\t\t\t\t{\n\t\t\t\t\tvar pos = this.getIconPosition(this.selectedIcon, this.currentState);\n\t\t\t\t\tthis.selectedIcon.bounds.x = pos.x;\n\t\t\t\t\tthis.selectedIcon.bounds.y = pos.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar bounds = new mxRectangle(me.getGraphX() + this.connectIconOffset.x,\n\t\t\t\t\t\tme.getGraphY() + this.connectIconOffset.y, w, h);\n\t\t\t\t\tthis.selectedIcon.bounds = bounds;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.selectedIcon.redraw();\n\t\t\t}\n\n\t\t\t// Uses edge state to compute the terminal points\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(current, constraint);\n\t\t\t\tcurrent = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 1];\n\t\t\t\tpt2 = this.edgeState.absolutePoints[0];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.currentState != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.constraintHandler.currentConstraint == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = this.getTargetPerimeterPoint(this.currentState, me);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Computes the source perimeter point\n\t\t\t\tif (this.sourceConstraint == null && this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\t\t\t\tthis.waypoints[0] : current;\n\t\t\t\t\tvar tmp = this.getSourcePerimeterPoint(this.previous, next, me);\n\t\t\t\t\t\n\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt2 = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Makes sure the cell under the mousepointer can be detected\n\t\t\t// by moving the preview shape away from the mouse. This\n\t\t\t// makes sure the preview shape does not prevent the detection\n\t\t\t// of the cell under the mousepointer even for slow gestures.\n\t\t\tif (this.currentState == null && this.movePreviewAway)\n\t\t\t{\n\t\t\t\tvar tmp = pt2; \n\t\t\t\t\n\t\t\t\tif (this.edgeState != null && this.edgeState.absolutePoints.length >= 2)\n\t\t\t\t{\n\t\t\t\t\tvar tmp2 = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 2];\n\t\t\t\t\t\n\t\t\t\t\tif (tmp2 != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = tmp2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = current.x - tmp.x;\n\t\t\t\tvar dy = current.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\n\t\t\t\tif (len == 0)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Stores old point to reuse when creating edge\n\t\t\t\tthis.originalPoint = current.clone();\n\t\t\t\tcurrent.x -= dx * 4 / len;\n\t\t\t\tcurrent.y -= dy * 4 / len;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.originalPoint = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the preview shape (lazy)\n\t\t\tif (this.shape == null)\n\t\t\t{\n\t\t\t\tvar dx = Math.abs(me.getGraphX() - this.first.x);\n\t\t\t\tvar dy = Math.abs(me.getGraphY() - this.first.y);\n\n\t\t\t\tif (dx > this.graph.tolerance || dy > this.graph.tolerance)\n\t\t\t\t{\n\t\t\t\t\tthis.shape = this.createShape();\n\n\t\t\t\t\tif (this.edgeState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Revalidates current connection\n\t\t\t\t\tthis.updateCurrentState(me, point);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Updates the points in the preview edge\n\t\t\tif (this.shape != null)\n\t\t\t{\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.points = this.edgeState.absolutePoints;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pts = [pt2];\n\t\t\t\t\t\n\t\t\t\t\tif (this.waypoints != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpts = pts.concat(this.waypoints);\n\t\t\t\t\t}\n\n\t\t\t\t\tpts.push(current);\n\t\t\t\t\tthis.shape.points = pts;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.drawPreview();\n\t\t\t}\n\t\t\t\n\t\t\t// Makes sure endpoint of edge is visible during connect\n\t\t\tif (this.cursor != null)\n\t\t\t{\n\t\t\t\tthis.graph.container.style.cursor = this.cursor;\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(me.getEvent());\n\t\t\tme.consume();\n\t\t}\n\t\telse if (!this.isEnabled() || !this.graph.isEnabled())\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != this.currentState && this.edgeState == null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\t\n\t\t\t// Sets the cursor on the current shape\t\t\t\t\n\t\t\tif (this.currentState != null && this.error == null && this.constraintHandler.currentConstraint == null)\n\t\t\t{\n\t\t\t\tthis.icons = this.createIcons(this.currentState);\n\n\t\t\t\tif (this.icons == null)\n\t\t\t\t{\n\t\t\t\t\tthis.currentState.setCursor(mxConstants.CURSOR_CONNECT);\n\t\t\t\t\tme.consume();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.previous = this.currentState;\n\t\t}\n\t\telse if (this.previous == this.currentState && this.currentState != null && this.icons == null &&\n\t\t\t!this.graph.isMouseDown)\n\t\t{\n\t\t\t// Makes sure that no cursors are changed\n\t\t\tme.consume();\n\t\t}\n\n\t\tif (!this.graph.isMouseDown && this.currentState != null && this.icons != null)\n\t\t{\n\t\t\tvar hitsIcon = false;\n\t\t\tvar target = me.getSource();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.icons.length && !hitsIcon; i++)\n\t\t\t{\n\t\t\t\thitsIcon = target == this.icons[i].node || target.parentNode == this.icons[i].node;\n\t\t\t}\n\n\t\t\tif (!hitsIcon)\n\t\t\t{\n\t\t\t\tthis.updateIcons(this.currentState, this.icons, me);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n};\n\n/**\n * Function: updateEdgeState\n * \n * Updates <edgeState>.\n */\nmxConnectionHandler.prototype.updateEdgeState = function(current, constraint)\n{\n\t// TODO: Use generic method for writing constraint to style\n\tif (this.sourceConstraint != null && this.sourceConstraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_X] = this.sourceConstraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_Y] = this.sourceConstraint.point.y;\n\t}\n\n\tif (constraint != null && constraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t}\n\telse\n\t{\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_X];\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_Y];\n\t}\n\t\n\tthis.edgeState.absolutePoints = [null, (this.currentState != null) ? null : current];\n\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.previous, true, this.sourceConstraint);\n\t\n\tif (this.currentState != null)\n\t{\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = this.graph.getConnectionConstraint(this.edgeState, this.previous, false);\n\t\t}\n\t\t\n\t\tthis.edgeState.setAbsoluteTerminalPoint(null, false);\n\t\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.currentState, false, constraint);\n\t}\n\t\n\t// Scales and translates the waypoints to the model\n\tvar realPoints = null;\n\t\n\tif (this.waypoints != null)\n\t{\n\t\trealPoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t{\n\t\t\tvar pt = this.waypoints[i].clone();\n\t\t\tthis.convertWaypoint(pt);\n\t\t\trealPoints[i] = pt;\n\t\t}\n\t}\n\t\n\tthis.graph.view.updatePoints(this.edgeState, realPoints, this.previous, this.currentState);\n\tthis.graph.view.updateFloatingTerminalPoints(this.edgeState, this.previous, this.currentState);\n};\n\n/**\n * Function: getTargetPerimeterPoint\n * \n * Returns the perimeter point for the given target state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getTargetPerimeterPoint = function(state, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar targetPerimeter = view.getPerimeterFunction(state);\n\t\n\tif (targetPerimeter != null)\n\t{\n\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\tthis.waypoints[this.waypoints.length - 1] :\n\t\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\t\tvar tmp = targetPerimeter(view.getPerimeterBounds(state),\n\t\t\tthis.edgeState, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint(state.getCenterX(), state.getCenterY());\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSourcePerimeterPoint\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * next - <mxPoint> that represents the next point along the previewed edge.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getSourcePerimeterPoint = function(state, next, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar sourcePerimeter = view.getPerimeterFunction(state);\n\tvar c = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\n\tif (sourcePerimeter != null)\n\t{\n\t\tvar theta = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\tvar rad = -theta * (Math.PI / 180);\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\tnext = mxUtils.getRotatedPoint(new mxPoint(next.x, next.y), Math.cos(rad), Math.sin(rad), c);\n\t\t}\n\t\t\n\t\tvar tmp = sourcePerimeter(view.getPerimeterBounds(state), state, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tif (theta != 0)\n\t\t\t{\n\t\t\t\ttmp = mxUtils.getRotatedPoint(new mxPoint(tmp.x, tmp.y), Math.cos(-rad), Math.sin(-rad), c);\n\t\t\t}\n\t\t\t\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = c;\n\t}\n\t\n\treturn result;\n};\n\n\n/**\n * Function: updateIcons\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> under the mouse.\n * icons - Array of currently displayed icons.\n * me - <mxMouseEvent> that contains the mouse event.\n */\nmxConnectionHandler.prototype.updateIcons = function(state, icons, me)\n{\n\t// empty\n};\n\n/**\n * Function: isStopEvent\n * \n * Returns true if the given mouse up event should stop this handler. The\n * connection will be created if <error> is null. Note that this is only\n * called if <waypointsEnabled> is true. This implemtation returns true\n * if there is a cell state in the given event.\n */\nmxConnectionHandler.prototype.isStopEvent = function(me)\n{\n\treturn me.getState() != null;\n};\n\n/**\n * Function: addWaypoint\n * \n * Adds the waypoint for the given event to <waypoints>.\n */\nmxConnectionHandler.prototype.addWaypointForEvent = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar dx = Math.abs(point.x - this.first.x);\n\tvar dy = Math.abs(point.y - this.first.y);\n\tvar addPoint = this.waypoints != null || (this.mouseDownCounter > 1 &&\n\t\t\t(dx > this.graph.tolerance || dy > this.graph.tolerance));\n\n\tif (addPoint)\n\t{\n\t\tif (this.waypoints == null)\n\t\t{\n\t\t\tthis.waypoints = [];\n\t\t}\n\t\t\n\t\tvar scale = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.graph.snap(me.getGraphX() / scale) * scale,\n\t\t\t\tthis.graph.snap(me.getGraphY() / scale) * scale);\n\t\tthis.waypoints.push(point);\n\t}\n};\n\n/**\n * Function: checkConstraints\n * \n * Returns true if the connection for the given constraints is valid. This\n * implementation returns true if the constraints are not pointing to the\n * same fixed connection point.\n */\nmxConnectionHandler.prototype.checkConstraints = function(c1, c2)\n{\n\treturn (c1 == null || c2 == null || c1.point == null || c2.point == null ||\n\t\t!c1.point.equals(c2.point) || c1.dx != c2.dx || c1.dy != c2.dy ||\n\t\tc1.perimeter != c2.perimeter);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by inserting the new connection.\n */\nmxConnectionHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isConnecting())\n\t{\n\t\tif (this.waypointsEnabled && !this.isStopEvent(me))\n\t\t{\n\t\t\tthis.addWaypointForEvent(me);\n\t\t\tme.consume();\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar c1 = this.sourceConstraint;\n\t\tvar c2 = this.constraintHandler.currentConstraint;\n\n\t\tvar source = (this.previous != null) ? this.previous.cell : null;\n\t\tvar target = null;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\ttarget = this.constraintHandler.currentFocus.cell;\n\t\t}\n\t\t\n\t\tif (target == null && this.currentState != null)\n\t\t{\n\t\t\ttarget = this.currentState.cell;\n\t\t}\n\t\t\n\t\t// Inserts the edge if no validation error exists and if constraints differ\n\t\tif (this.error == null && (source == null || target == null ||\n\t\t\tsource != target || this.checkConstraints(c1, c2)))\n\t\t{\n\t\t\tthis.connect(source, target, me.getEvent(), me.getCell());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Selects the source terminal for self-references\n\t\t\tif (this.previous != null && this.marker.validState != null &&\n\t\t\t\tthis.previous.cell == this.marker.validState.cell)\n\t\t\t{\n\t\t\t\tthis.graph.selectCellForEvent(this.marker.source, me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\t// Displays the error message if it is not an empty string,\n\t\t\t// for empty error messages, the event is silently dropped\n\t\t\tif (this.error != null && this.error.length > 0)\n\t\t\t{\n\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Redraws the connect icons and resets the handler state\n\t\tthis.destroyIcons();\n\t\tme.consume();\n\t}\n\n\tif (this.first != null)\n\t{\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConnectionHandler.prototype.reset = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\t// Resets the cursor on the container\n\tif (this.cursor != null && this.graph.container != null)\n\t{\n\t\tthis.graph.container.style.cursor = '';\n\t}\n\t\n\tthis.destroyIcons();\n\tthis.marker.reset();\n\tthis.constraintHandler.reset();\n\tthis.originalPoint = null;\n\tthis.currentPoint = null;\n\tthis.edgeState = null;\n\tthis.previous = null;\n\tthis.error = null;\n\tthis.sourceConstraint = null;\n\tthis.mouseDownCounter = 0;\n\tthis.first = null;\n\n\tthis.fireEvent(new mxEventObject(mxEvent.RESET));\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview edge using the color and width returned by\n * <getEdgeColor> and <getEdgeWidth>.\n */\nmxConnectionHandler.prototype.drawPreview = function()\n{\n\tthis.updatePreview(this.error == null);\n\tthis.shape.redraw();\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.updatePreview = function(valid)\n{\n\tthis.shape.strokewidth = this.getEdgeWidth(valid);\n\tthis.shape.stroke = this.getEdgeColor(valid);\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeColor = function(valid)\n{\n\treturn (valid) ? mxConstants.VALID_COLOR : mxConstants.INVALID_COLOR;\n};\n\t\n/**\n * Function: getEdgeWidth\n * \n * Returns the width used to draw the preview edge. This returns 3 if\n * there is no edge validation error and 1 otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the width for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeWidth = function(valid)\n{\n\treturn (valid) ? 3 : 1;\n};\n\n/**\n * Function: connect\n * \n * Connects the given source and target using a new edge. This\n * implementation uses <createEdge> to create the edge.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.connect = function(source, target, evt, dropTarget)\n{\n\tif (target != null || this.isCreateTarget(evt) || this.graph.allowDanglingEdges)\n\t{\n\t\t// Uses the common parent of source and target or\n\t\t// the default parent to insert the edge\n\t\tvar model = this.graph.getModel();\n\t\tvar terminalInserted = false;\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (source != null && target == null && !this.graph.isIgnoreTerminalEvent(evt) && this.isCreateTarget(evt))\n\t\t\t{\n\t\t\t\ttarget = this.createTargetVertex(evt, source);\n\t\t\t\t\n\t\t\t\tif (target != null)\n\t\t\t\t{\n\t\t\t\t\tdropTarget = this.graph.getDropTarget([target], evt, dropTarget);\n\t\t\t\t\tterminalInserted = true;\n\t\t\t\t\t\n\t\t\t\t\t// Disables edges as drop targets if the target cell was created\n\t\t\t\t\t// FIXME: Should not shift if vertex was aligned (same in Java)\n\t\t\t\t\tif (dropTarget == null || !this.graph.getModel().isEdge(dropTarget))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pstate = this.graph.getView().getState(dropTarget);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = model.getGeometry(target);\n\t\t\t\t\t\t\ttmp.x -= pstate.origin.x;\n\t\t\t\t\t\t\ttmp.y -= pstate.origin.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdropTarget = this.graph.getDefaultParent();\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tthis.graph.addCell(target, dropTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar parent = this.graph.getDefaultParent();\n\n\t\t\tif (source != null && target != null &&\n\t\t\t\tmodel.getParent(source) == model.getParent(target) &&\n\t\t\t\tmodel.getParent(model.getParent(source)) != model.getRoot())\n\t\t\t{\n\t\t\t\tparent = model.getParent(source);\n\n\t\t\t\tif ((source.geometry != null && source.geometry.relative) &&\n\t\t\t\t\t(target.geometry != null && target.geometry.relative))\n\t\t\t\t{\n\t\t\t\t\tparent = model.getParent(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Uses the value of the preview edge state for inserting\n\t\t\t// the new edge into the graph\n\t\t\tvar value = null;\n\t\t\tvar style = null;\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tvalue = this.edgeState.cell.value;\n\t\t\t\tstyle = this.edgeState.cell.style;\n\t\t\t}\n\n\t\t\tedge = this.insertEdge(parent, null, value, source, target, style);\n\t\t\t\n\t\t\tif (edge != null)\n\t\t\t{\n\t\t\t\t// Updates the connection constraints\n\t\t\t\tthis.graph.setConnectionConstraint(edge, source, true, this.sourceConstraint);\n\t\t\t\tthis.graph.setConnectionConstraint(edge, target, false, this.constraintHandler.currentConstraint);\n\t\t\t\t\n\t\t\t\t// Uses geometry of the preview edge state\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmodel.setGeometry(edge, this.edgeState.cell.geometry);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar parent = model.getParent(source);\n\t\t\t\t\n\t\t\t\t// Inserts edge before source\n\t\t\t\tif (this.isInsertBefore(edge, source, target, evt, dropTarget))\n\t\t\t\t{\n\t\t\t\t\tvar index = null;\n\t\t\t\t\tvar tmp = source;\n\n\t\t\t\t\twhile (tmp.parent != null && tmp.geometry != null &&\n\t\t\t\t\t\ttmp.geometry.relative && tmp.parent != edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = this.graph.model.getParent(tmp);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmp != null && tmp.parent != null && tmp.parent == edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.add(parent, edge, tmp.parent.getIndex(tmp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Makes sure the edge has a non-null, relative geometry\n\t\t\t\tvar geo = model.getGeometry(edge);\n\n\t\t\t\tif (geo == null)\n\t\t\t\t{\n\t\t\t\t\tgeo = new mxGeometry();\n\t\t\t\t\tgeo.relative = true;\n\t\t\t\t\t\n\t\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Uses scaled waypoints in geometry\n\t\t\t\tif (this.waypoints != null && this.waypoints.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar tr = this.graph.view.translate;\n\t\t\t\t\tgeo.points = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt = this.waypoints[i];\n\t\t\t\t\t\tgeo.points.push(new mxPoint(pt.x / s - tr.x, pt.y / s - tr.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar t = this.graph.view.translate;\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar pt = (this.originalPoint != null) ?\n\t\t\t\t\t\t\tnew mxPoint(this.originalPoint.x / s - t.x, this.originalPoint.y / s - t.y) :\n\t\t\t\t\t\tnew mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\tgeo.setTerminalPoint(pt, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT, 'cell', edge, 'terminal', target,\n\t\t\t\t\t'event', evt, 'target', dropTarget, 'terminalInserted', terminalInserted));\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxLog.show();\n\t\t\tmxLog.debug(e.message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tif (this.select)\n\t\t{\n\t\t\tthis.selectCells(edge, (terminalInserted) ? target : null);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectCells\n * \n * Selects the given edge after adding a new connection. The target argument\n * contains the target vertex if one has been inserted.\n */\nmxConnectionHandler.prototype.selectCells = function(edge, target)\n{\n\tthis.graph.setSelectionCell(edge);\n};\n\n/**\n * Function: insertEdge\n * \n * Creates, inserts and returns the new edge for the given parameters. This\n * implementation does only use <createEdge> if <factoryMethod> is defined,\n * otherwise <mxGraph.insertEdge> will be used.\n */\nmxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tif (this.factoryMethod == null)\n\t{\n\t\treturn this.graph.insertEdge(parent, id, value, source, target, style);\n\t}\n\telse\n\t{\n\t\tvar edge = this.createEdge(value, source, target, style);\n\t\tedge = this.graph.addEdge(edge, parent, source, target);\n\t\t\n\t\treturn edge;\n\t}\n};\n\n/**\n * Function: createTargetVertex\n * \n * Hook method for creating new vertices on the fly if no target was\n * under the mouse. This is only called if <createTarget> is true and\n * returns null.\n * \n * Parameters:\n * \n * evt - Mousedown event of the connect gesture.\n * source - <mxCell> that represents the source terminal.\n */\nmxConnectionHandler.prototype.createTargetVertex = function(evt, source)\n{\n\t// Uses the first non-relative source\n\tvar geo = this.graph.getCellGeometry(source);\n\t\n\twhile (geo != null && geo.relative)\n\t{\n\t\tsource = this.graph.getModel().getParent(source);\n\t\tgeo = this.graph.getCellGeometry(source);\n\t}\n\t\n\tvar clone = this.graph.cloneCell(source);\n\tvar geo = this.graph.getModel().getGeometry(clone);\n\t\n\tif (geo != null)\n\t{\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\tgeo.x = Math.round(point.x - geo.width / 2 - this.graph.panDx / s);\n\t\tgeo.y = Math.round(point.y - geo.height / 2 - this.graph.panDy / s);\n\n\t\t// Aligns with source if within certain tolerance\n\t\tvar tol = this.getAlignmentTolerance();\n\t\t\n\t\tif (tol > 0)\n\t\t{\n\t\t\tvar sourceState = this.graph.view.getState(source);\n\t\t\t\n\t\t\tif (sourceState != null)\n\t\t\t{\n\t\t\t\tvar x = sourceState.x / s - t.x;\n\t\t\t\tvar y = sourceState.y / s - t.y;\n\t\t\t\t\n\t\t\t\tif (Math.abs(x - geo.x) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.x = Math.round(x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(y - geo.y) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.y = Math.round(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn clone;\t\t\n};\n\n/**\n * Function: getAlignmentTolerance\n * \n * Returns the tolerance for aligning new targets to sources. This returns the grid size / 2.\n */\nmxConnectionHandler.prototype.getAlignmentTolerance = function(evt)\n{\n\treturn (this.graph.isGridEnabled()) ? this.graph.gridSize / 2 : this.graph.tolerance;\n};\n\n/**\n * Function: createEdge\n * \n * Creates and returns a new edge using <factoryMethod> if one exists. If\n * no factory method is defined, then a new default edge is returned. The\n * source and target arguments are informal, the actual connection is\n * setup later by the caller of this function.\n * \n * Parameters:\n * \n * value - Value to be used for creating the edge.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * style - Optional style from the preview edge.\n */\nmxConnectionHandler.prototype.createEdge = function(value, source, target, style)\n{\n\tvar edge = null;\n\t\n\t// Creates a new edge using the factoryMethod\n\tif (this.factoryMethod != null)\n\t{\n\t\tedge = this.factoryMethod(source, target, style);\n\t}\n\t\n\tif (edge == null)\n\t{\n\t\tedge = new mxCell(value || '');\n\t\tedge.setEdge(true);\n\t\tedge.setStyle(style);\n\t\t\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\tedge.setGeometry(geo);\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This should be\n * called on all instances. It is called automatically for the built-in\n * instance created for each <mxGraph>.\n */\nmxConnectionHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.graph.getView().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\t\n\tif (this.drillHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.drillHandler);\n\t\tthis.graph.getView().removeListener(this.drillHandler);\n\t\tthis.drillHandler = null;\n\t}\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n};\n\n__mxOutput.mxConnectionHandler = typeof mxConnectionHandler !== 'undefined' ? mxConnectionHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConstraintHandler\n *\n * Handles constraints on connection targets. This class is in charge of\n * showing fixed points when the mouse is over a vertex and handles constraints\n * to establish new connections.\n *\n * Constructor: mxConstraintHandler\n *\n * Constructs an new constraint handler.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and\n * returns the <mxCell> that represents the new edge.\n */\nfunction mxConstraintHandler(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Adds a graph model listener to update the current focus on changes\n\tthis.resetHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.currentFocus != null && this.graph.view.getState(this.currentFocus.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.redraw();\n\t\t}\n\t});\n\t\n\tthis.graph.model.addListener(mxEvent.CHANGE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE, this.resetHandler);\n\tthis.graph.addListener(mxEvent.ROOT, this.resetHandler);\n};\n\n/**\n * Variable: pointImage\n * \n * <mxImage> to be used as the image for fixed connection points.\n */\nmxConstraintHandler.prototype.pointImage = new mxImage(mxClient.imageBasePath + '/point.gif', 5, 5);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConstraintHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConstraintHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightColor\n * \n * Specifies the color for the highlight. Default is <mxConstants.DEFAULT_VALID_COLOR>.\n */\nmxConstraintHandler.prototype.highlightColor = mxConstants.DEFAULT_VALID_COLOR;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConstraintHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConstraintHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConstraintHandler.prototype.reset = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t}\n\t\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n\t\n\tthis.currentConstraint = null;\n\tthis.currentFocusArea = null;\n\tthis.currentPoint = null;\n\tthis.currentFocus = null;\n\tthis.focusPoints = null;\n};\n\n/**\n * Function: getTolerance\n * \n * Returns the tolerance to be used for intersecting connection points. This\n * implementation returns <mxGraph.tolerance>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose tolerance should be returned.\n */\nmxConstraintHandler.prototype.getTolerance = function(me)\n{\n\treturn this.graph.getTolerance();\n};\n\n/**\n * Function: getImageForConstraint\n * \n * Returns the tolerance to be used for intersecting connection points.\n */\nmxConstraintHandler.prototype.getImageForConstraint = function(state, constraint, point)\n{\n\treturn this.pointImage;\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given <mxMouseEvent> should be ignored in <update>. This\n * implementation always returns false.\n */\nmxConstraintHandler.prototype.isEventIgnored = function(me, source)\n{\n\treturn false;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored. This always returns false.\n */\nmxConstraintHandler.prototype.isStateIgnored = function(state, source)\n{\n\treturn false;\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the <focusIcons> if they exist.\n */\nmxConstraintHandler.prototype.destroyIcons = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t\tthis.focusPoints = null;\n\t}\n};\n\n/**\n * Function: destroyFocusHighlight\n * \n * Destroys the <focusHighlight> if one exists.\n */\nmxConstraintHandler.prototype.destroyFocusHighlight = function()\n{\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n};\n\n/**\n * Function: isKeepFocusEvent\n * \n * Returns true if the current focused state should not be changed for the given event.\n * This returns true if shift and alt are pressed.\n */\nmxConstraintHandler.prototype.isKeepFocusEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent());\n};\n\n/**\n * Function: getCellForEvent\n * \n * Returns the cell for the given event.\n */\nmxConstraintHandler.prototype.getCellForEvent = function(me, point)\n{\n\tvar cell = me.getCell();\n\t\n\t// Gets cell under actual point if different from event location\n\tif (cell == null && point != null && (me.getGraphX() != point.x || me.getGraphY() != point.y))\n\t{\n\t\tcell = this.graph.getCellAt(point.x, point.y);\n\t}\n\t\n\t// Uses connectable parent vertex if one exists\n\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\n\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t{\n\t\t\tcell = parent;\n\t\t}\n\t}\n\t\n\treturn (this.graph.isCellLocked(cell)) ? null : cell;\n};\n\n/**\n * Function: update\n * \n * Updates the state of this handler based on the given <mxMouseEvent>.\n * Source is a boolean indicating if the cell is a source or target.\n */\nmxConstraintHandler.prototype.update = function(me, source, existingEdge, point)\n{\n\tif (this.isEnabled() && !this.isEventIgnored(me))\n\t{\n\t\t// Lazy installation of mouseleave handler\n\t\tif (this.mouseleaveHandler == null && this.graph.container != null)\n\t\t{\n\t\t\tthis.mouseleaveHandler = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t});\n\n\t\t\tmxEvent.addListener(this.graph.container, 'mouseleave', this.resetHandler);\t\n\t\t}\n\t\t\n\t\tvar tol = this.getTolerance(me);\n\t\tvar x = (point != null) ? point.x : me.getGraphX();\n\t\tvar y = (point != null) ? point.y : me.getGraphY();\n\t\tvar grid = new mxRectangle(x - tol, y - tol, 2 * tol, 2 * tol);\n\t\tvar mouse = new mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol);\n\t\tvar state = this.graph.view.getState(this.getCellForEvent(me, point));\n\n\t\t// Keeps focus icons visible while over vertex bounds and no other cell under mouse or shift is pressed\n\t\tif (!this.isKeepFocusEvent(me) && (this.currentFocusArea == null || this.currentFocus == null ||\n\t\t\t(state != null) || !this.graph.getModel().isVertex(this.currentFocus.cell) ||\n\t\t\t!mxUtils.intersects(this.currentFocusArea, mouse)) && (state != this.currentFocus))\n\t\t{\n\t\t\tthis.currentFocusArea = null;\n\t\t\tthis.currentFocus = null;\n\t\t\tthis.setFocus(me, state, source);\n\t\t}\n\n\t\tthis.currentConstraint = null;\n\t\tthis.currentPoint = null;\n\t\tvar minDistSq = null;\n\t\t\n\t\tif (this.focusIcons != null && this.constraints != null &&\n\t\t\t(state == null || this.currentFocus == state))\n\t\t{\n\t\t\tvar cx = mouse.getCenterX();\n\t\t\tvar cy = mouse.getCenterY();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tvar dx = cx - this.focusIcons[i].bounds.getCenterX();\n\t\t\t\tvar dy = cy - this.focusIcons[i].bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\t\n\t\t\t\tif ((this.intersects(this.focusIcons[i], mouse, source, existingEdge) || (point != null &&\n\t\t\t\t\tthis.intersects(this.focusIcons[i], grid, source, existingEdge))) &&\n\t\t\t\t\t(minDistSq == null || tmp < minDistSq))\n\t\t\t\t{\n\t\t\t\t\tthis.currentConstraint = this.constraints[i];\n\t\t\t\t\tthis.currentPoint = this.focusPoints[i];\n\t\t\t\t\tminDistSq = tmp;\n\t\t\t\t\t\n\t\t\t\t\tvar tmp = this.focusIcons[i].bounds.clone();\n\t\t\t\t\ttmp.grow(mxConstants.HIGHLIGHT_SIZE + 1);\n\t\t\t\t\ttmp.width -= 1;\n\t\t\t\t\ttmp.height -= 1;\n\t\t\t\t\t\n\t\t\t\t\tif (this.focusHighlight == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar hl = this.createHighlightShape();\n\t\t\t\t\t\thl.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\t\t\t\thl.pointerEvents = false;\n\n\t\t\t\t\t\thl.init(this.graph.getView().getOverlayPane());\n\t\t\t\t\t\tthis.focusHighlight = hl;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\tmxEvent.redirectMouseEvents(hl.node, this.graph, getState);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.focusHighlight.bounds = tmp;\n\t\t\t\t\tthis.focusHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.currentConstraint == null)\n\t\t{\n\t\t\tthis.destroyFocusHighlight();\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.currentConstraint = null;\n\t\tthis.currentFocus = null;\n\t\tthis.currentPoint = null;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.redraw = function()\n{\n\tif (this.currentFocus != null && this.constraints != null && this.focusIcons != null)\n\t{\n\t\tvar state = this.graph.view.getState(this.currentFocus.cell);\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tthis.focusIcons[i].bounds = bounds;\n\t\t\tthis.focusIcons[i].redraw();\n\t\t\tthis.currentFocusArea.add(this.focusIcons[i].bounds);\n\t\t\tthis.focusPoints[i] = cp;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: setFocus\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.setFocus = function(me, state, source)\n{\n\tthis.constraints = (state != null && !this.isStateIgnored(state, source) &&\n\t\tthis.graph.isCellConnectable(state.cell)) ? ((this.isEnabled()) ?\n\t\t(this.graph.getAllConnectionConstraints(state, source) || []) : []) : null;\n\n\t// Only uses cells which have constraints\n\tif (this.constraints != null)\n\t{\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tif (this.focusIcons != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tthis.focusIcons[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tthis.focusIcons = null;\n\t\t\tthis.focusPoints = null;\n\t\t}\n\t\t\n\t\tthis.focusPoints = [];\n\t\tthis.focusIcons = [];\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar src = img.src;\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tvar icon = new mxImageShape(bounds, src);\n\t\t\ticon.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\ticon.preserveImageAspect = false;\n\t\t\ticon.init(this.graph.getView().getDecoratorPane());\n\t\t\t\n\t\t\t// Fixes lost event tracking for images in quirks / IE8 standards\n\t\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(icon.node, 'dragstart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// Move the icon behind all other overlays\n\t\t\tif (icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\n\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t});\n\t\t\t\n\t\t\ticon.redraw();\n\n\t\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState);\n\t\t\tthis.currentFocusArea.add(icon.bounds);\n\t\t\tthis.focusIcons.push(icon);\n\t\t\tthis.focusPoints.push(cp);\n\t\t}\n\t\t\n\t\tthis.currentFocusArea.grow(this.getTolerance(me));\n\t}\n\telse\n\t{\n\t\tthis.destroyIcons();\n\t\tthis.destroyFocusHighlight();\n\t}\n};\n\n/**\n * Function: createHighlightShape\n * \n * Create the shape used to paint the highlight.\n * \n * Returns true if the given icon intersects the given point.\n */\nmxConstraintHandler.prototype.createHighlightShape = function()\n{\n\tvar hl = new mxRectangleShape(null, this.highlightColor, this.highlightColor, mxConstants.HIGHLIGHT_STROKEWIDTH);\n\thl.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\t\n\treturn hl;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given icon intersects the given rectangle.\n */\nmxConstraintHandler.prototype.intersects = function(icon, mouse, source, existingEdge)\n{\n\treturn mxUtils.intersects(icon.bounds, mouse);\n};\n\n/**\n * Function: destroy\n * \n * Destroy this handler.\n */\nmxConstraintHandler.prototype.destroy = function()\n{\n\tthis.reset();\n\t\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.graph.model.removeListener(this.resetHandler);\n\t\tthis.graph.view.removeListener(this.resetHandler);\n\t\tthis.graph.removeListener(this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.mouseleaveHandler != null && this.graph.container != null)\n\t{\n\t\tmxEvent.removeListener(this.graph.container, 'mouseleave', this.mouseleaveHandler);\n\t\tthis.mouseleaveHandler = null;\n\t}\n};\n\n__mxOutput.mxConstraintHandler = typeof mxConstraintHandler !== 'undefined' ? mxConstraintHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxRubberband\n * \n * Event handler that selects rectangular regions. This is not built-into\n * <mxGraph>. To enable rubberband selection in a graph, use the following code.\n * \n * Example:\n * \n * (code)\n * var rubberband = new mxRubberband(graph);\n * (end)\n * \n * Constructor: mxRubberband\n * \n * Constructs an event handler that selects rectangular regions in the graph\n * using rubberband selection.\n */\nfunction mxRubberband(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force rubberband event\n\t\tthis.forceRubberbandHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForceRubberbandEvent(me))\n\t\t\t{\n\t\t\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\t\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\t\t\torigin.x -= offset.x;\n\t\t\t\torigin.y -= offset.y;\n\t\t\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\t\t\t\tme.consume(false);\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forceRubberbandHandler);\n\t\t\n\t\t// Repaints the marquee after autoscroll\n\t\tthis.panHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.repaint();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.first != null)\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: defaultOpacity\n * \n * Specifies the default opacity to be used for the rubberband div. Default\n * is 20.\n */\nmxRubberband.prototype.defaultOpacity = 20;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxRubberband.prototype.enabled = true;\n\n/**\n * Variable: div\n * \n * Holds the DIV element which is currently visible.\n */\nmxRubberband.prototype.div = null;\n\n/**\n * Variable: sharedDiv\n * \n * Holds the DIV element which is used to display the rubberband.\n */\nmxRubberband.prototype.sharedDiv = null;\n\n/**\n * Variable: currentX\n * \n * Holds the value of the x argument in the last call to <update>.\n */\nmxRubberband.prototype.currentX = 0;\n\n/**\n * Variable: currentY\n * \n * Holds the value of the y argument in the last call to <update>.\n */\nmxRubberband.prototype.currentY = 0;\n\n/**\n * Variable: fadeOut\n * \n * Optional fade out effect. Default is false.\n */\nmxRubberband.prototype.fadeOut = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxRubberband.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation updates\n * <enabled>.\n */\nmxRubberband.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isForceRubberbandEvent\n * \n * Returns true if the given <mxMouseEvent> should start rubberband selection.\n * This implementation returns true if the alt key is pressed.\n */\nmxRubberband.prototype.isForceRubberbandEvent = function(me)\n{\n\treturn mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxRubberband.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() == null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\n\t\t// Does not prevent the default for this event so that the\n\t\t// event processing chain is still executed even if we start\n\t\t// rubberbanding. This is required eg. in ExtJs to hide the\n\t\t// current context menu. In mouseMove we'll make sure we're\n\t\t// not selecting anything while we're rubberbanding.\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: start\n * \n * Sets the start point for the rubberband selection.\n */\nmxRubberband.prototype.start = function(x, y)\n{\n\tthis.first = new mxPoint(x, y);\n\n\tvar container = this.graph.container;\n\t\n\tfunction createMouseEvent(evt)\n\t{\n\t\tvar me = new mxMouseEvent(evt);\n\t\tvar pt = mxUtils.convertPoint(container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x;\n\t\tme.graphY = pt.y;\n\t\t\n\t\treturn me;\n\t};\n\n\tthis.dragHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseMove(this.graph, createMouseEvent(evt));\n\t});\n\n\tthis.dropHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseUp(this.graph, createMouseEvent(evt));\n\t});\n\n\t// Workaround for rubberband stopping if the mouse leaves the container in Firefox\n\tif (mxClient.IS_FF)\n\t{\n\t\tmxEvent.addGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating therubberband selection.\n */\nmxRubberband.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.first != null)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tvar x = me.getX() + origin.x;\n\t\tvar y = me.getY() + origin.y;\n\t\tvar dx = this.first.x - x;\n\t\tvar dy = this.first.y - y;\n\t\tvar tol = this.graph.tolerance;\n\t\t\n\t\tif (this.div != null || Math.abs(dx) > tol ||  Math.abs(dy) > tol)\n\t\t{\n\t\t\tif (this.div == null)\n\t\t\t{\n\t\t\t\tthis.div = this.createShape();\n\t\t\t}\n\t\t\t\n\t\t\t// Clears selection while rubberbanding. This is required because\n\t\t\t// the event is not consumed in mouseDown.\n\t\t\tmxUtils.clearSelection();\n\t\t\t\n\t\t\tthis.update(x, y);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates the rubberband selection shape.\n */\nmxRubberband.prototype.createShape = function()\n{\n\tif (this.sharedDiv == null)\n\t{\n\t\tthis.sharedDiv = document.createElement('div');\n\t\tthis.sharedDiv.className = 'mxRubberband';\n\t\tmxUtils.setOpacity(this.sharedDiv, this.defaultOpacity);\n\t}\n\n\tthis.graph.container.appendChild(this.sharedDiv);\n\tvar result = this.sharedDiv;\n\t\n\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t{\n\t\tthis.sharedDiv = null;\n\t}\n\t\t\n\treturn result;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this handler is active.\n */\nmxRubberband.prototype.isActive = function(sender, me)\n{\n\treturn this.div != null && this.div.style.display != 'none';\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by selecting the region of the rubberband using\n * <mxGraph.selectRegion>.\n */\nmxRubberband.prototype.mouseUp = function(sender, me)\n{\n\tvar active = this.isActive();\n\tthis.reset();\n\t\n\tif (active)\n\t{\n\t\tthis.execute(me.getEvent());\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: execute\n * \n * Resets the state of this handler and selects the current region\n * for the given event.\n */\nmxRubberband.prototype.execute = function(evt)\n{\n\tvar rect = new mxRectangle(this.x, this.y, this.width, this.height);\n\tthis.graph.selectRegion(rect, evt);\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the rubberband selection.\n */\nmxRubberband.prototype.reset = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t\t{\n\t\t\tvar temp = this.div;\n\t\t\tmxUtils.setPrefixedStyle(temp.style, 'transition', 'all 0.2s linear');\n\t\t\ttemp.style.pointerEvents = 'none';\n\t\t\ttemp.style.opacity = 0;\n\t\t    \n\t\t    window.setTimeout(function()\n\t\t    \t{\n\t\t    \t\ttemp.parentNode.removeChild(temp);\n\t\t    \t}, 200);\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t}\n\n\tmxEvent.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\tthis.dragHandler = null;\n\tthis.dropHandler = null;\n\t\n\tthis.currentX = 0;\n\tthis.currentY = 0;\n\tthis.first = null;\n\tthis.div = null;\n};\n\n/**\n * Function: update\n * \n * Sets <currentX> and <currentY> and calls <repaint>.\n */\nmxRubberband.prototype.update = function(x, y)\n{\n\tthis.currentX = x;\n\tthis.currentY = y;\n\t\n\tthis.repaint();\n};\n\n/**\n * Function: repaint\n * \n * Computes the bounding box and updates the style of the <div>.\n */\nmxRubberband.prototype.repaint = function()\n{\n\tif (this.div != null)\n\t{\n\t\tvar x = this.currentX - this.graph.panDx;\n\t\tvar y = this.currentY - this.graph.panDy;\n\t\t\n\t\tthis.x = Math.min(this.first.x, x);\n\t\tthis.y = Math.min(this.first.y, y);\n\t\tthis.width = Math.max(this.first.x, x) - this.x;\n\t\tthis.height =  Math.max(this.first.y, y) - this.y;\n\n\t\tvar dx = (mxClient.IS_VML) ? this.graph.panDx : 0;\n\t\tvar dy = (mxClient.IS_VML) ? this.graph.panDy : 0;\n\t\t\n\t\tthis.div.style.left = (this.x + dx) + 'px';\n\t\tthis.div.style.top = (this.y + dy) + 'px';\n\t\tthis.div.style.width = Math.max(1, this.width) + 'px';\n\t\tthis.div.style.height = Math.max(1, this.height) + 'px';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called, it is called automatically when the\n * window unloads.\n */\nmxRubberband.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\tthis.graph.removeMouseListener(this);\n\t\tthis.graph.removeListener(this.forceRubberbandHandler);\n\t\tthis.graph.removeListener(this.panHandler);\n\t\tthis.reset();\n\t\t\n\t\tif (this.sharedDiv != null)\n\t\t{\n\t\t\tthis.sharedDiv = null;\n\t\t}\n\t}\n};\n\n__mxOutput.mxRubberband = typeof mxRubberband !== 'undefined' ? mxRubberband : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHandle\n * \n * Implements a single custom handle for vertices.\n * \n * Constructor: mxHandle\n * \n * Constructs a new handle for the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxHandle(state, cursor, image, shape)\n{\n\tthis.graph = state.view.graph;\n\tthis.state = state;\n\tthis.cursor = (cursor != null) ? cursor : this.cursor;\n\tthis.image = (image != null) ? image : this.image;\n\tthis.shape = (shape != null) ? shape : null;\n\tthis.init();\n};\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used for this handle. Default is 'default'.\n */\nmxHandle.prototype.cursor = 'default';\n\n/**\n * Variable: image\n * \n * Specifies the <mxImage> to be used to render the handle. Default is null.\n */\nmxHandle.prototype.image = null;\n\n/**\n * Variable: ignoreGrid\n * \n * Default is false.\n */\nmxHandle.prototype.ignoreGrid = false;\n\n/**\n * Function: getPosition\n * \n * Hook for subclassers to return the current position of the handle.\n */\nmxHandle.prototype.getPosition = function(bounds) { };\n\n/**\n * Function: setPosition\n * \n * Hooks for subclassers to update the style in the <state>.\n */\nmxHandle.prototype.setPosition = function(bounds, pt, me) { };\n\n/**\n * Function: execute\n * \n * Hook for subclassers to execute the handle.\n */\nmxHandle.prototype.execute = function(me) { };\n\n/**\n * Function: copyStyle\n * \n * Sets the cell style with the given name to the corresponding value in <state>.\n */\nmxHandle.prototype.copyStyle = function(key)\n{\n\tthis.graph.setCellStyles(key, this.state.style[key], [this.state.cell]);\n};\n\n/**\n * Function: processEvent\n * \n * Processes the given <mxMouseEvent> and invokes <setPosition>.\n */\nmxHandle.prototype.processEvent = function(me)\n{\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\tvar pt = new mxPoint(me.getGraphX() / scale - tr.x, me.getGraphY() / scale - tr.y);\n\t\n\t// Center shape on mouse cursor\n\tif (this.shape != null && this.shape.bounds != null)\n\t{\n\t\tpt.x -= this.shape.bounds.width / scale / 4;\n\t\tpt.y -= this.shape.bounds.height / scale / 4;\n\t}\n\n\t// Snaps to grid for the rotated position then applies the rotation for the direction after that\n\tvar alpha1 = -mxUtils.toRadians(this.getRotation());\n\tvar alpha2 = -mxUtils.toRadians(this.getTotalRotation()) - alpha1;\n\tpt = this.flipPoint(this.rotatePoint(this.snapPoint(this.rotatePoint(pt, alpha1),\n\t\t\tthis.ignoreGrid || !this.graph.isGridEnabledEvent(me.getEvent())), alpha2));\n\tthis.setPosition(this.state.getPaintBounds(), pt, me);\n\tthis.redraw();\n};\n\n/**\n * Function: positionChanged\n * \n * Should be called after <setPosition> in <processEvent>.\n * This repaints the state using <mxCellRenderer>.\n */\nmxHandle.prototype.positionChanged = function()\n{\n\tif (this.state.text != null)\n\t{\n\t\tthis.state.text.apply(this.state);\n\t}\n\t\n\tif (this.state.shape != null)\n\t{\n\t\tthis.state.shape.apply(this.state);\n\t}\n\t\n\tthis.graph.cellRenderer.redraw(this.state, true);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation defined in the style of the cell.\n */\nmxHandle.prototype.getRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: getTotalRotation\n * \n * Returns the rotation from the style and the rotation from the direction of\n * the cell.\n */\nmxHandle.prototype.getTotalRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getShapeRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: init\n * \n * Creates and initializes the shapes required for this handle.\n */\nmxHandle.prototype.init = function()\n{\n\tvar html = this.isHtmlRequired();\n\t\n\tif (this.image != null)\n\t{\n\t\tthis.shape = new mxImageShape(new mxRectangle(0, 0, this.image.width, this.image.height), this.image.src);\n\t\tthis.shape.preserveImageAspect = false;\n\t}\n\telse if (this.shape == null)\n\t{\n\t\tthis.shape = this.createShape(html);\n\t}\n\t\n\tthis.initShape(html);\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for this handle.\n */\nmxHandle.prototype.createShape = function(html)\n{\n\tvar bounds = new mxRectangle(0, 0, mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE);\n\t\n\treturn new mxRectangleShape(bounds, mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n};\n\n/**\n * Function: initShape\n * \n * Initializes <shape> and sets its cursor.\n */\nmxHandle.prototype.initShape = function(html)\n{\n\tif (html && this.shape.isHtmlAllowed())\n\t{\n\t\tthis.shape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tthis.shape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\n\t\tif (this.cursor != null)\n\t\t{\n\t\t\tthis.shape.init(this.graph.getView().getOverlayPane());\n\t\t}\n\t}\n\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\tthis.shape.node.style.cursor = this.cursor;\n};\n\n/**\n * Function: redraw\n * \n * Renders the shape for this handle.\n */\nmxHandle.prototype.redraw = function()\n{\n\tif (this.shape != null && this.state.shape != null)\n\t{\n\t\tvar pt = this.getPosition(this.state.getPaintBounds());\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(this.getTotalRotation());\n\t\t\tpt = this.rotatePoint(this.flipPoint(pt), alpha);\n\t\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar tr = this.graph.view.translate;\n\t\t\tthis.shape.bounds.x = Math.floor((pt.x + tr.x) * scale - this.shape.bounds.width / 2);\n\t\t\tthis.shape.bounds.y = Math.floor((pt.y + tr.y) * scale - this.shape.bounds.height / 2);\n\t\t\t\n\t\t\t// Needed to force update of text bounds\n\t\t\tthis.shape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHtmlRequired\n * \n * Returns true if this handle should be rendered in HTML. This returns true if\n * the text node is in the graph container.\n */\nmxHandle.prototype.isHtmlRequired = function()\n{\n\treturn this.state.text != null && this.state.text.node.parentNode == this.graph.container;\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the point by the given angle.\n */\nmxHandle.prototype.rotatePoint = function(pt, alpha)\n{\n\tvar bounds = this.state.getCellBounds();\n\tvar cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\tvar cos = Math.cos(alpha);\n\tvar sin = Math.sin(alpha); \n\n\treturn mxUtils.getRotatedPoint(pt, cos, sin, cx);\n};\n\n/**\n * Function: flipPoint\n * \n * Flips the given point vertically and/or horizontally.\n */\nmxHandle.prototype.flipPoint = function(pt)\n{\n\tif (this.state.shape != null)\n\t{\n\t\tvar bounds = this.state.getCellBounds();\n\t\t\n\t\tif (this.state.shape.flipH)\n\t\t{\n\t\t\tpt.x = 2 * bounds.x + bounds.width - pt.x;\n\t\t}\n\t\t\n\t\tif (this.state.shape.flipV)\n\t\t{\n\t\t\tpt.y = 2 * bounds.y + bounds.height - pt.y;\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: snapPoint\n * \n * Snaps the given point to the grid if ignore is false. This modifies\n * the given point in-place and also returns it.\n */\nmxHandle.prototype.snapPoint = function(pt, ignore)\n{\n\tif (!ignore)\n\t{\n\t\tpt.x = this.graph.snap(pt.x);\n\t\tpt.y = this.graph.snap(pt.y);\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides this handle.\n */\nmxHandle.prototype.setVisible = function(visible)\n{\n\tif (this.shape != null && this.shape.node != null)\n\t{\n\t\tthis.shape.node.style.display = (visible) ? '' : 'none';\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handle by setting its visibility to true.\n */\nmxHandle.prototype.reset = function()\n{\n\tthis.setVisible(true);\n\tthis.state.style = this.graph.getCellStyle(this.state.cell);\n\tthis.positionChanged();\n};\n\n/**\n * Function: destroy\n * \n * Destroys this handle.\n */\nmxHandle.prototype.destroy = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxHandle = typeof mxHandle !== 'undefined' ? mxHandle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxVertexHandler\n * \n * Event handler for resizing cells. This handler is automatically created in\n * <mxGraph.createHandler>.\n * \n * Constructor: mxVertexHandler\n * \n * Constructs an event handler that allows to resize vertices\n * and groups.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be resized.\n */\nfunction mxVertexHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tif (this.livePreview && this.index != null)\n\t\t\t{\n\t\t\t\t// Redraws the live preview\n\t\t\t\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\t\t\t\n\t\t\t\t// Redraws connected edges\n\t\t\t\tthis.state.view.invalidate(this.state.cell);\n\t\t\t\tthis.state.invalid = false;\n\t\t\t\tthis.state.view.validate();\n\t\t\t}\n\t\t\t\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxVertexHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxVertexHandler.prototype.state = null;\n\n/**\n * Variable: singleSizer\n * \n * Specifies if only one sizer handle at the bottom, right corner should be\n * used. Default is false.\n */\nmxVertexHandler.prototype.singleSizer = false;\n\n/**\n * Variable: index\n * \n * Holds the index of the current handle.\n */\nmxVertexHandler.prototype.index = null;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE or\n * if <tolerance> > 0. Default is true.\n */\nmxVertexHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxVertexHandler.prototype.handleImage = null;\n\n/**\n * Variable: handlesVisible\n * \n * If handles are currently visible.\n */\nmxVertexHandler.prototype.handlesVisible = true;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxVertexHandler.prototype.tolerance = 0;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if a rotation handle should be visible. Default is false.\n */\nmxVertexHandler.prototype.rotationEnabled = false;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxVertexHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: rotationRaster\n * \n * Specifies if rotation steps should be \"rasterized\" depening on the distance\n * to the handle. Default is true.\n */\nmxVertexHandler.prototype.rotationRaster = true;\n\n/**\n * Variable: rotationCursor\n * \n * Specifies the cursor for the rotation handle. Default is 'crosshair'.\n */\nmxVertexHandler.prototype.rotationCursor = 'crosshair';\n\n/**\n * Variable: livePreview\n * \n * Specifies if resize should change the cell in-place. This is an experimental\n * feature for non-touch devices. Default is false.\n */\nmxVertexHandler.prototype.livePreview = false;\n\n/**\n * Variable: movePreviewToFront\n * \n * Specifies if the live preview should be moved to the front.\n */\nmxVertexHandler.prototype.movePreviewToFront = false;\n\n/**\n * Variable: manageSizers\n * \n * Specifies if sizers should be hidden and spaced if the vertex is small.\n * Default is false.\n */\nmxVertexHandler.prototype.manageSizers = false;\n\n/**\n * Variable: constrainGroupByChildren\n * \n * Specifies if the size of groups should be constrained by the children.\n * Default is false.\n */\nmxVertexHandler.prototype.constrainGroupByChildren = false;\n\n/**\n * Variable: rotationHandleVSpacing\n * \n * Vertical spacing for rotation icon. Default is -16.\n */\nmxVertexHandler.prototype.rotationHandleVSpacing = -16;\n\n/**\n * Variable: horizontalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset horizontally.\n */\nmxVertexHandler.prototype.horizontalOffset = 0;\n\n/**\n * Variable: verticalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset vertically.\n */\nmxVertexHandler.prototype.verticalOffset = 0;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.selectionBorder = this.createSelectionShape(this.bounds);\n\t// VML dialect required here for event transparency in IE\n\tthis.selectionBorder.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tthis.selectionBorder.pointerEvents = false;\n\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tthis.selectionBorder.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(this.selectionBorder.node, this.graph, this.state);\n\t\n\tif (this.graph.isCellMovable(this.state.cell))\n\t{\n\t\tthis.selectionBorder.setCursor(mxConstants.CURSOR_MOVABLE_VERTEX);\n\t}\n\n\t// Adds the sizer handles\n\tif (mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells)\n\t{\n\t\tvar resizable = this.graph.isCellResizable(this.state.cell);\n\t\tthis.sizers = [];\n\n\t\tif (resizable || (this.graph.isLabelMovable(this.state.cell) &&\n\t\t\tthis.state.width >= 2 && this.state.height >= 2))\n\t\t{\n\t\t\tvar i = 0;\n\n\t\t\tif (resizable)\n\t\t\t{\n\t\t\t\tif (!this.singleSizer)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers.push(this.createSizer('nw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('n-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('ne-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('w-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('e-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('sw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('s-resize', i++));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.sizers.push(this.createSizer('se-resize', i++));\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.model.getGeometry(this.state.cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative && !this.graph.isSwimlane(this.state.cell) &&\n\t\t\t\tthis.graph.isLabelMovable(this.state.cell))\n\t\t\t{\n\t\t\t\t// Marks this as the label handle for getHandleForEvent\n\t\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_LABEL_HANDLE, mxEvent.LABEL_HANDLE,\n\t\t\t\t\tmxConstants.LABEL_HANDLE_SIZE, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\t\tthis.sizers.push(this.labelShape);\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isCellMovable(this.state.cell) && !this.graph.isCellResizable(this.state.cell) &&\n\t\t\tthis.state.width < 2 && this.state.height < 2)\n\t\t{\n\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_MOVABLE_VERTEX,\n\t\t\t\tmxEvent.LABEL_HANDLE, null, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\tthis.sizers.push(this.labelShape);\n\t\t}\n\t}\n\t\n\t// Adds the rotation handler\n\tif (this.isRotationHandleVisible())\n\t{\n\t\tthis.rotationShape = this.createSizer(this.rotationCursor, mxEvent.ROTATION_HANDLE,\n\t\t\tmxConstants.HANDLE_SIZE + 3, mxConstants.HANDLE_FILLCOLOR);\n\t\tthis.sizers.push(this.rotationShape);\n\t}\n\n\tthis.customHandles = this.createCustomHandles();\n\tthis.redraw();\n\t\n\tif (this.constrainGroupByChildren)\n\t{\n\t\tthis.updateMinBounds();\n\t}\n};\n\n/**\n * Function: isRotationHandleVisible\n * \n * Returns true if the rotation handle should be showing.\n */\nmxVertexHandler.prototype.isRotationHandleVisible = function()\n{\n\treturn this.graph.isEnabled() && this.rotationEnabled && this.graph.isCellRotatable(this.state.cell) &&\n\t\t(mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells);\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the aspect ratio if the cell should be maintained.\n */\nmxVertexHandler.prototype.isConstrainedEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent()) || this.state.style[mxConstants.STYLE_ASPECT] == 'fixed';\n};\n\n/**\n * Function: isCenteredEvent\n * \n * Returns true if the center of the vertex should be maintained during the resize.\n */\nmxVertexHandler.prototype.isCenteredEvent = function(state, me)\n{\n\treturn false;\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxVertexHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: updateMinBounds\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.updateMinBounds = function()\n{\n\tvar children = this.graph.getChildCells(this.state.cell);\n\t\n\tif (children.length > 0)\n\t{\n\t\tthis.minBounds = this.graph.view.getBounds(children);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tvar s = this.state.view.scale;\n\t\t\tvar t = this.state.view.translate;\n\n\t\t\tthis.minBounds.x -= this.state.x;\n\t\t\tthis.minBounds.y -= this.state.y;\n\t\t\tthis.minBounds.x /= s;\n\t\t\tthis.minBounds.y /= s;\n\t\t\tthis.minBounds.width /= s;\n\t\t\tthis.minBounds.height /= s;\n\t\t\tthis.x0 = this.state.x / s - t.x;\n\t\t\tthis.y0 = this.state.y / s - t.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: getSelectionBounds\n * \n * Returns the mxRectangle that defines the bounds of the selection\n * border.\n */\nmxVertexHandler.prototype.getSelectionBounds = function(state)\n{\n\treturn new mxRectangle(Math.round(state.x), Math.round(state.y), Math.round(state.width), Math.round(state.height));\n};\n\n/**\n * Function: createParentHighlightShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\treturn this.createSelectionShape(bounds);\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createSelectionShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(\n\t\tmxRectangle.fromRectangle(bounds),\n\t\tnull, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.VERTEX_SELECTION_COLOR>.\n */\nmxVertexHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.VERTEX_SELECTION_STROKEWIDTH>.\n */\nmxVertexHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.VERTEX_SELECTION_DASHED>.\n */\nmxVertexHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_DASHED;\n};\n\n/**\n * Function: createSizer\n * \n * Creates a sizer handle for the specified cursor and index and returns\n * the new <mxRectangleShape> that represents the handle.\n */\nmxVertexHandler.prototype.createSizer = function(cursor, index, size, fillColor)\n{\n\tsize = size || mxConstants.HANDLE_SIZE;\n\t\n\tvar bounds = new mxRectangle(0, 0, size, size);\n\tvar sizer = this.createSizerShape(bounds, index, fillColor);\n\n\tif (sizer.isHtmlAllowed() && this.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t{\n\t\tsizer.bounds.height -= 1;\n\t\tsizer.bounds.width -= 1;\n\t\tsizer.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tsizer.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tsizer.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tsizer.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(sizer.node, this.graph, this.state);\n\t\n\tif (this.graph.isEnabled())\n\t{\n\t\tsizer.setCursor(cursor);\n\t}\n\t\n\tif (!this.isSizerVisible(index))\n\t{\n\t\tsizer.visible = false;\n\t}\n\t\n\treturn sizer;\n};\n\n/**\n * Function: isSizerVisible\n * \n * Returns true if the sizer for the given index is visible.\n * This returns true for all given indices.\n */\nmxVertexHandler.prototype.isSizerVisible = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: createSizerShape\n * \n * Creates the shape used for the sizer handle for the specified bounds an\n * index. Only images and rectangles should be returned if support for HTML\n * labels with not foreign objects is required.\n */\nmxVertexHandler.prototype.createSizerShape = function(bounds, index, fillColor)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tbounds = new mxRectangle(bounds.x, bounds.y, this.handleImage.width, this.handleImage.height);\n\t\tvar shape = new mxImageShape(bounds, this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse if (index == mxEvent.ROTATION_HANDLE)\n\t{\n\t\treturn new mxEllipse(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangleShape(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createBounds\n * \n * Helper method to create an <mxRectangle> around the given centerpoint\n * with a width and height of 2*s or 6, if no s is given.\n */\nmxVertexHandler.prototype.moveSizerTo = function(shape, x, y)\n{\n\tif (shape != null)\n\t{\n\t\tshape.bounds.x = Math.floor(x - shape.bounds.width / 2);\n\t\tshape.bounds.y = Math.floor(y - shape.bounds.height / 2);\n\t\t\n\t\t// Fixes visible inactive handles in VML\n\t\tif (shape.node != null && shape.node.style.display != 'none')\n\t\t{\n\t\t\tshape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event. This returns the index\n * of the sizer from where the event originated or <mxEvent.LABEL_INDEX>.\n */\nmxVertexHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\n\tvar checkShape = mxUtils.bind(this, function(shape)\n\t{\n\t\tvar st = (shape != null && shape.constructor != mxImageShape &&\n\t\t\tthis.allowHandleBoundsCheck) ? shape.strokewidth + shape.svgStrokeTolerance : null;\n\t\tvar real = (st != null) ? new mxRectangle(me.getGraphX() - Math.floor(st / 2),\n\t\t\tme.getGraphY() - Math.floor(st / 2), st, st) : hit;\n\n\t\treturn shape != null && (me.isSource(shape) || (real != null && mxUtils.intersects(shape.bounds, real) &&\n\t\t\tshape.node.style.display != 'none' && shape.node.style.visibility != 'hidden'));\n\t});\n\t\n\tif (checkShape(this.rotationShape))\n\t{\n\t\treturn mxEvent.ROTATION_HANDLE;\n\t}\n\telse if (checkShape(this.labelShape))\n\t{\n\t\treturn mxEvent.LABEL_HANDLE;\n\t}\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.sizers[i]))\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxVertexHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event if a handle has been clicked. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxVertexHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tvar handle = this.getHandleForEvent(me);\n\n\t\tif (handle != null)\n\t\t{\n\t\t\tthis.start(me.getGraphX(), me.getGraphY(), handle);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: isLivePreviewBorder\n * \n * Called if <livePreview> is enabled to check if a border should be painted.\n * This implementation returns true if the shape is transparent.\n */\nmxVertexHandler.prototype.isLivePreviewBorder = function()\n{\n\treturn this.state.shape != null && this.state.shape.fill == null && this.state.shape.stroke == null;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.start = function(x, y, index)\n{\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.livePreviewActive = this.livePreview && this.graph.model.getChildCount(this.state.cell) == 0;\n\t\tthis.inTolerance = true;\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t\tthis.index = index;\n\t\tthis.startX = x;\n\t\tthis.startY = y;\n\t\t\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.isGhostPreview())\n\t\t{\n\t\t\tthis.ghostPreview = this.createGhostPreview();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Saves reference to parent state\n\t\t\tvar model = this.state.view.graph.model;\n\t\t\tvar parent = model.getParent(this.state.cell);\n\t\t\t\n\t\t\tif (this.state.view.currentRoot != parent && (model.isVertex(parent) || model.isEdge(parent)))\n\t\t\t{\n\t\t\t\tthis.parentState = this.state.view.graph.view.getState(parent);\n\t\t\t}\n\t\t\t\n\t\t\t// Creates a preview that can be on top of any HTML label\n\t\t\tthis.selectionBorder.node.style.display = (index == mxEvent.ROTATION_HANDLE) ? 'inline' : 'none';\n\t\t\t\n\t\t\t// Creates the border that represents the new bounds\n\t\t\tif (!this.livePreviewActive || this.isLivePreviewBorder())\n\t\t\t{\n\t\t\t\tthis.preview = this.createSelectionShape(this.bounds);\n\t\t\t\t\n\t\t\t\tif (!(mxClient.IS_SVG && Number(this.state.style[mxConstants.STYLE_ROTATION] || '0') != 0) &&\n\t\t\t\t\tthis.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t\t\t\t{\n\t\t\t\t\tthis.preview.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\t\t\tthis.preview.init(this.graph.container);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.preview.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.preview.init(this.graph.view.getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\t// With the rotation handle in a corner, need the angle and distance\n\t\t\t\tvar pos = this.getRotationHandlePosition();\n\t\t\t\t\n\t\t\t\tvar dx = pos.x - this.state.getCenterX();\n\t\t\t\tvar dy = pos.y - this.state.getCenterY();\n\t\t\t\t\n\t\t\t\tthis.startAngle = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : 0;\n\t\t\t\tthis.startDist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t}\n\t\n\t\t\t// Prepares the handles for live preview\n\t\t\tif (this.livePreviewActive)\n\t\t\t{\n\t\t\t\tthis.hideSizers();\n\t\t\t\t\n\t\t\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t\t\t{\n\t\t\t\t\tthis.rotationShape.node.style.display = '';\n\t\t\t\t}\n\t\t\t\telse if (index == mxEvent.LABEL_HANDLE)\n\t\t\t\t{\n\t\t\t\t\tthis.labelShape.node.style.display = '';\n\t\t\t\t}\n\t\t\t\telse if (this.sizers != null && this.sizers[index] != null)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[index].node.style.display = '';\n\t\t\t\t}\n\t\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Gets the array of connected edge handlers for redrawing\n\t\t\t\tvar edges = this.graph.getEdges(this.state.cell);\n\t\t\t\tthis.edgeHandlers = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(edges[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (handler != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.edgeHandlers.push(handler);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: createGhostPreview\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.createGhostPreview = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\tshape.init(this.graph.view.getOverlayPane());\n\tshape.scale = this.state.view.scale;\n\tshape.bounds = this.bounds;\n\tshape.outline = true;\n\t\n\treturn shape;\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxVertexHandler.prototype.setHandlesVisible = function(visible)\n{\n\tthis.handlesVisible = visible;\n\t\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: hideSizers\n * \n * Hides all sizers except.\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.hideSizers = function()\n{\n\tthis.setHandlesVisible(false);\n};\n\n/**\n * Function: checkTolerance\n * \n * Checks if the coordinates for the given event are within the\n * <mxGraph.tolerance>. If the event is a mouse event then the tolerance is\n * ignored.\n */\nmxVertexHandler.prototype.checkTolerance = function(me)\n{\n\tif (this.inTolerance && this.startX != null && this.startY != null)\n\t{\n\t\tif (mxEvent.isMouseEvent(me.getEvent()) ||\n\t\t\tMath.abs(me.getGraphX() - this.startX) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.startY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxVertexHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxVertexHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundAngle\n * \n * Hook for rounding the angle. This uses Math.round.\n */\nmxVertexHandler.prototype.roundAngle = function(angle)\n{\n\treturn Math.round(angle * 10) / 10;\n};\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxVertexHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 100) / 100;\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxVertexHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.index != null)\n\t{\n\t\t// Checks tolerance for ignoring single clicks\n\t\tthis.checkTolerance(me);\n\n\t\tif (!this.inTolerance)\n\t\t{\n\t\t\tif (this.index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].active = true;\n\t\t\t\t\t\n\t\t\t\t\tif (this.ghostPreview != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.ghostPreview.apply(this.state);\n\t\t\t\t\t\tthis.ghostPreview.strokewidth = this.getSelectionStrokeWidth() /\n\t\t\t\t\t\t\tthis.ghostPreview.scale / this.ghostPreview.scale;\n\t\t\t\t\t\tthis.ghostPreview.isDashed = this.isSelectionDashed();\n\t\t\t\t\t\tthis.ghostPreview.stroke = this.getSelectionColor();\n\t\t\t\t\t\tthis.ghostPreview.redraw();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.selectionBounds != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.selectionBorder.node.style.display = 'none';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.movePreviewToFront)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.moveToFront();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].positionChanged();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.moveLabel(me);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.index == mxEvent.ROTATION_HANDLE)\n\t\t\t\t{\n\t\t\t\t\tthis.rotateVertex(me);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.resizeVertex(me);\n\t\t\t\t}\n\n\t\t\t\tthis.updateHint(me);\n\t\t\t}\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (!this.graph.isMouseDown && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: isGhostPreview\n * \n * Returns true if a ghost preview should be used for custom handles.\n */\nmxVertexHandler.prototype.isGhostPreview = function()\n{\n\treturn this.state.view.graph.model.getChildCount(this.state.cell) > 0;\n};\n\n/**\n * Function: moveLabel\n * \n * Moves the label.\n */\nmxVertexHandler.prototype.moveLabel = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\t\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t}\n\n\tvar index = (this.rotationShape != null) ? this.sizers.length - 2 : this.sizers.length - 1;\n\tthis.moveSizerTo(this.sizers[index], point.x, point.y);\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.rotateVertex = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar dx = this.state.x + this.state.width / 2 - point.x;\n\tvar dy = this.state.y + this.state.height / 2 - point.y;\n\tthis.currentAlpha = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : ((dy < 0) ? 180 : 0);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.currentAlpha -= 180;\n\t}\n\t\n\tthis.currentAlpha -= this.startAngle;\n\t\n\t// Rotation raster\n\tif (this.rotationRaster && this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar dx = point.x - this.state.getCenterX();\n\t\tvar dy = point.y - this.state.getCenterY();\n\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (dist - this.startDist < 2)\n\t\t{\n\t\t\traster = 15;\n\t\t}\n\t\telse if (dist - this.startDist < 25)\n\t\t{\n\t\t\traster = 5;\n\t\t}\n\t\telse\n\t\t{\n\t\t\traster = 1;\n\t\t}\n\t\t\n\t\tthis.currentAlpha = Math.round(this.currentAlpha / raster) * raster;\n\t}\n\telse\n\t{\n\t\tthis.currentAlpha = this.roundAngle(this.currentAlpha);\n\t}\n\n\tthis.selectionBorder.rotation = this.currentAlpha;\n\tthis.selectionBorder.redraw();\n\t\t\t\t\t\n\tif (this.livePreviewActive)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: resizeVertex\n * \n * Risizes the vertex.\n */\nmxVertexHandler.prototype.resizeVertex = function(me)\n{\n\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\tvar cos = Math.cos(-alpha);\n\tvar sin = Math.sin(-alpha);\n\t\n\tvar dx = point.x - this.startX;\n\tvar dy = point.y - this.startY;\n\n\t// Rotates vector for mouse gesture\n\tvar tx = cos * dx - sin * dy;\n\tvar ty = sin * dx + cos * dy;\n\t\n\tdx = tx;\n\tdy = ty;\n\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tthis.unscaledBounds = this.union(geo, dx / scale, dy / scale, this.index,\n\t\tthis.graph.isGridEnabledEvent(me.getEvent()), 1,\n\t\tnew mxPoint(0, 0), this.isConstrainedEvent(me),\n\t\tthis.isCenteredEvent(this.state, me));\n\t\n\t// Keeps vertex within maximum graph or parent bounds\n\tif (!geo.relative)\n\t{\n\t\tvar max = this.graph.getMaximumGraphBounds();\n\t\t\n\t\t// Handles child cells\n\t\tif (max != null && this.parentState != null)\n\t\t{\n\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\n\t\t\tmax.x -= (this.parentState.x - tr.x * scale) / scale;\n\t\t\tmax.y -= (this.parentState.y - tr.y * scale) / scale;\n\t\t}\n\t\t\n\t\tif (this.graph.isConstrainChild(this.state.cell))\n\t\t{\n\t\t\tvar tmp = this.graph.getCellContainmentArea(this.state.cell);\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar overlap = this.graph.getOverlap(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (overlap > 0)\n\t\t\t\t{\n\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\n\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (max == null)\n\t\t\t\t{\n\t\t\t\t\tmax = tmp;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (max != null)\n\t\t{\n\t\t\tif (this.unscaledBounds.x < max.x)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= max.x - this.unscaledBounds.x;\n\t\t\t\tthis.unscaledBounds.x = max.x;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y < max.y)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= max.y - this.unscaledBounds.y;\n\t\t\t\tthis.unscaledBounds.y = max.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.x + this.unscaledBounds.width > max.x + max.width)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= this.unscaledBounds.x +\n\t\t\t\t\tthis.unscaledBounds.width - max.x - max.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y + this.unscaledBounds.height > max.y + max.height)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= this.unscaledBounds.y +\n\t\t\t\t\tthis.unscaledBounds.height - max.y - max.height;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar old = this.bounds;\n\tthis.bounds = new mxRectangle(((this.parentState != null) ? this.parentState.x : tr.x * scale) +\n\t\t(this.unscaledBounds.x) * scale, ((this.parentState != null) ? this.parentState.y : tr.y * scale) +\n\t\t(this.unscaledBounds.y) * scale, this.unscaledBounds.width * scale, this.unscaledBounds.height * scale);\n\n\tif (geo.relative && this.parentState != null)\n\t{\n\t\tthis.bounds.x += this.state.x - this.parentState.x;\n\t\tthis.bounds.y += this.state.y - this.parentState.y;\n\t}\n\n\tcos = Math.cos(alpha);\n\tsin = Math.sin(alpha);\n\t\n\tvar c2 = new mxPoint(this.bounds.getCenterX(), this.bounds.getCenterY());\n\n\tvar dx = c2.x - ct.x;\n\tvar dy = c2.y - ct.y;\n\t\n\tvar dx2 = cos * dx - sin * dy;\n\tvar dy2 = sin * dx + cos * dy;\n\t\n\tvar dx3 = dx2 - dx;\n\tvar dy3 = dy2 - dy;\n\t\n\tvar dx4 = this.bounds.x - this.state.x;\n\tvar dy4 = this.bounds.y - this.state.y;\n\t\n\tvar dx5 = cos * dx4 - sin * dy4;\n\tvar dy5 = sin * dx4 + cos * dy4;\n\t\n\tthis.bounds.x += dx3;\n\tthis.bounds.y += dy3;\n\t\n\t// Rounds unscaled bounds to int\n\tthis.unscaledBounds.x = this.roundLength(this.unscaledBounds.x + dx3 / scale);\n\tthis.unscaledBounds.y = this.roundLength(this.unscaledBounds.y + dy3 / scale);\n\tthis.unscaledBounds.width = this.roundLength(this.unscaledBounds.width);\n\tthis.unscaledBounds.height = this.roundLength(this.unscaledBounds.height);\n\t\n\t// Shifts the children according to parent offset\n\tif (!this.graph.isCellCollapsed(this.state.cell) && (dx3 != 0 || dy3 != 0))\n\t{\n\t\tthis.childOffsetX = this.state.x - this.bounds.x + dx5;\n\t\tthis.childOffsetY = this.state.y - this.bounds.y + dy5;\n\t}\n\telse\n\t{\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t}\n\t\t\t\n\tif (!old.equals(this.bounds))\n\t{\t\n\t\tif (this.livePreviewActive)\n\t\t{\n\t\t\tthis.updateLivePreview(me);\n\t\t}\n\t\t\n\t\tif (this.preview != null)\n\t\t{\n\t\t\tthis.drawPreview();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateParentHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Repaints the live preview.\n */\nmxVertexHandler.prototype.updateLivePreview = function(me)\n{\n\t// TODO: Apply child offset to children in live preview\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\t\n\t// Saves current state\n\tvar tempState = this.state.clone();\n\n\t// Temporarily changes size and origin\n\tthis.state.x = this.bounds.x;\n\tthis.state.y = this.bounds.y;\n\tthis.state.origin = new mxPoint(this.state.x / scale - tr.x, this.state.y / scale - tr.y);\n\tthis.state.width = this.bounds.width;\n\tthis.state.height = this.bounds.height;\n\t\n\t// Redraws cell and handles\n\tvar off = this.state.absoluteOffset;\n\toff = new mxPoint(off.x, off.y);\n\n\t// Required to store and reset absolute offset for updating label position\n\tthis.state.absoluteOffset.x = 0;\n\tthis.state.absoluteOffset.y = 0;\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\t\t\t\t\n\n\tif (geo != null)\n\t{\n\t\tvar offset = geo.offset || this.EMPTY_POINT;\n\n\t\tif (offset != null && !geo.relative)\n\t\t{\n\t\t\tthis.state.absoluteOffset.x = this.state.view.scale * offset.x;\n\t\t\tthis.state.absoluteOffset.y = this.state.view.scale * offset.y;\n\t\t}\n\t\t\n\t\tthis.state.view.updateVertexLabelOffset(this.state);\n\t}\n\t\n\t// Draws the live preview\n\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\n\t// Redraws connected edges TODO: Include child edges\n\tthis.state.view.invalidate(this.state.cell);\n\tthis.state.invalid = false;\n\tthis.state.view.validate();\n\tthis.redrawHandles();\n\t\n\t// Moves live preview to front\n\tif (this.movePreviewToFront)\n\t{\n\t\tthis.moveToFront();\n\t}\n\t\n\t// Hides folding icon\n\tif (this.state.control != null && this.state.control.node != null)\n\t{\n\t\tthis.state.control.node.style.visibility = 'hidden';\n\t}\n\t\n\t// Restores current state\n\tthis.state.setState(tempState);\n};\n\n/**\n * Function: moveToFront\n * \n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.moveToFront = function()\n{\n\tif ((this.state.text != null && this.state.text.node != null &&\n\t\tthis.state.text.node.nextSibling != null) ||\n\t\t(this.state.shape != null && this.state.shape.node != null &&\n\t\tthis.state.shape.node.nextSibling != null && (this.state.text == null ||\n\t\tthis.state.shape.node.nextSibling != this.state.text.node)))\n\t{\n\t\tif (this.state.shape != null && this.state.shape.node != null)\n\t\t{\n\t\t\tthis.state.shape.node.parentNode.appendChild(this.state.shape.node);\n\t\t}\n\t\t\n\t\tif (this.state.text != null && this.state.text.node != null)\n\t\t{\n\t\t\tthis.state.text.node.parentNode.appendChild(this.state.text.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.index != null && this.state != null)\n\t{\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\t\n\t\tif (this.ghostPreview == null)\n\t\t{\n\t\t\t// Required to restore order in case of no change\n\t\t\tthis.state.view.invalidate(this.state.cell, false, false);\n\t\t\tthis.state.view.validate();\n\t\t}\n\t\t\n\t\tthis.graph.getModel().beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\t// Creates style before changing cell state\n\t\t\t\t\tvar style = this.state.view.graph.getCellStyle(this.state.cell);\n\t\t\t\t\t\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].active = false;\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute(me);\n\t\t\t\t\t\n\t\t\t\t\t// Sets style and apply on shape to force repaint and\n\t\t\t\t\t// check if execute has removed custom handles\n\t\t\t\t\tif (this.customHandles != null &&\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.style = style;\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].positionChanged();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.currentAlpha != null)\n\t\t\t\t{\n\t\t\t\t\tvar delta = this.currentAlpha - (this.state.style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\t\t\n\t\t\t\t\tif (delta != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(this.state.cell, delta);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.rotateClick();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gridEnabled = this.graph.isGridEnabledEvent(me.getEvent());\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\t\n\t\t\t\tvar dx = point.x - this.startX;\n\t\t\t\tvar dy = point.y - this.startY;\n\t\t\t\t\n\t\t\t\t// Rotates vector for mouse gesture\n\t\t\t\tvar tx = cos * dx - sin * dy;\n\t\t\t\tvar ty = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tdx = tx;\n\t\t\t\tdy = ty;\n\t\t\t\t\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\tvar recurse = this.isRecursiveResize(this.state, me);\n\t\t\t\tthis.resizeCell(this.state.cell, this.roundLength(dx / s), this.roundLength(dy / s),\n\t\t\t\t\tindex, gridEnabled, this.isConstrainedEvent(me), recurse);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.graph.getModel().endUpdate();\n\t\t}\n\n\t\tme.consume();\n\t\tthis.reset();\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: isRecursiveResize\n * \n * Returns the recursiveResize of the give state.\n * \n * Parameters:\n * \n * state - the given <mxCellState>. This implementation takes \n * the value of this state.\n * me - the mouse event.\n */\nmxVertexHandler.prototype.isRecursiveResize = function(state, me)\n{\n\treturn this.graph.isRecursiveResize(this.state);\n};\n\n/**\n * Function: rotateClick\n * \n * Hook for subclassers to implement a single click on the rotation handle.\n * This code is executed as part of the model transaction. This implementation\n * is empty.\n */\nmxVertexHandler.prototype.rotateClick = function() { };\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell and its children by the given angle in degrees.\n * \n * Parameters:\n * \n * cell - <mxCell> to be rotated.\n * angle - Angle in degrees.\n */\nmxVertexHandler.prototype.rotateCell = function(cell, angle, parent)\n{\n\tif (angle != 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isVertex(cell) || model.isEdge(cell))\n\t\t{\n\t\t\tif (!model.isEdge(cell))\n\t\t\t{\n\t\t\t\tvar style = this.graph.getCurrentCellStyle(cell);\n\t\t\t\tvar total = (style[mxConstants.STYLE_ROTATION] || 0) + angle;\n\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ROTATION, total, [cell]);\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null && !model.isEdge(parent))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.rotate(angle, new mxPoint(pgeo.width / 2, pgeo.height / 2));\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((model.isVertex(cell) && !geo.relative) || model.isEdge(cell))\n\t\t\t\t{\n\t\t\t\t\t// Recursive rotation\n\t\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(model.getChildAt(cell, i), angle, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxVertexHandler.prototype.reset = function()\n{\n\tif (this.sizers != null && this.index != null && this.sizers[this.index] != null &&\n\t\tthis.sizers[this.index].node.style.display == 'none')\n\t{\n\t\tthis.sizers[this.index].node.style.display = '';\n\t}\n\n\tthis.currentAlpha = null;\n\tthis.inTolerance = null;\n\tthis.index = null;\n\n\t// TODO: Reset and redraw cell states for live preview\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\t\n\tif (this.ghostPreview != null)\n\t{\n\t\tthis.ghostPreview.destroy();\n\t\tthis.ghostPreview = null;\n\t}\n\n\tif (this.livePreviewActive && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Shows folding icon\n\t\tif (this.state.control != null && this.state.control.node != null)\n\t\t{\n\t\t\tthis.state.control.node.style.visibility = '';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tif (this.customHandles[i].active)\n\t\t\t{\n\t\t\t\tthis.customHandles[i].active = false;\n\t\t\t\tthis.customHandles[i].reset();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.customHandles[i].setVisible(true);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Checks if handler has been destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.node.style.display = 'inline';\n\t\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\t\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y,\n\t\t\tthis.selectionBounds.width, this.selectionBounds.height);\n\t\tthis.drawPreview();\n\t}\n\n\tthis.removeHint();\n\tthis.redrawHandles();\n\tthis.edgeHandlers = null;\n\tthis.handlesVisible = true;\n\tthis.unscaledBounds = null;\n\tthis.livePreviewActive = null;\n};\n\n/**\n * Function: resizeCell\n * \n * Uses the given vector to change the bounds of the given cell\n * in the graph using <mxGraph.resizeCell>.\n */\nmxVertexHandler.prototype.resizeCell = function(cell, dx, dy, index, gridEnabled, constrained, recurse)\n{\n\tvar geo = this.graph.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (index == mxEvent.LABEL_HANDLE)\n\t\t{\n\t\t\tvar alpha = -mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(\n\t\t\t\tMath.round((this.labelShape.bounds.getCenterX() - this.startX) / scale),\n\t\t\t\tMath.round((this.labelShape.bounds.getCenterY() - this.startY) / scale)),\n\t\t\t\tcos, sin);\n\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = pt;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x += pt.x;\n\t\t\t\tgeo.offset.y += pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(cell, geo);\n\t\t}\n\t\telse if (this.unscaledBounds != null)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\n\t\t\tif (this.childOffsetX != 0 || this.childOffsetY != 0)\n\t\t\t{\n\t\t\t\tthis.moveChildren(cell, Math.round(this.childOffsetX / scale), Math.round(this.childOffsetY / scale));\n\t\t\t}\n\n\t\t\tthis.graph.resizeCell(cell, this.unscaledBounds, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: moveChildren\n * \n * Moves the children of the given cell by the given vector.\n */\nmxVertexHandler.prototype.moveChildren = function(cell, dx, dy)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\t\tvar geo = this.graph.getCellGeometry(child);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.translate(dx, dy);\n\t\t\tmodel.setGeometry(child, geo);\n\t\t}\n\t}\n};\n/**\n * Function: union\n * \n * Returns the union of the given bounds and location for the specified\n * handle index.\n * \n * To override this to limit the size of vertex via a minWidth/-Height style,\n * the following code can be used.\n * \n * (code)\n * var vertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = vertexHandlerUnion.apply(this, arguments);\n *   \n *   result.width = Math.max(result.width, mxUtils.getNumber(this.state.style, 'minWidth', 0));\n *   result.height = Math.max(result.height, mxUtils.getNumber(this.state.style, 'minHeight', 0));\n *   \n *   return result;\n * };\n * (end)\n * \n * The minWidth/-Height style can then be used as follows:\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'minWidth=100;minHeight=100;');\n * (end)\n * \n * To override this to update the height for a wrapped text if the width of a vertex is\n * changed, the following can be used.\n * \n * (code)\n * var mxVertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = mxVertexHandlerUnion.apply(this, arguments);\n *   var s = this.state;\n *   \n *   if (this.graph.isHtmlLabel(s.cell) && (index == 3 || index == 4) &&\n *       s.text != null && s.style[mxConstants.STYLE_WHITE_SPACE] == 'wrap')\n *   {\n *     var label = this.graph.getLabel(s.cell);\n *     var fontSize = mxUtils.getNumber(s.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n *     var ww = result.width / s.view.scale - s.text.spacingRight - s.text.spacingLeft\n *     \n *     result.height = mxUtils.getSizeForString(label, fontSize, s.style[mxConstants.STYLE_FONTFAMILY], ww).height;\n *   }\n *   \n *   return result;\n * };\n * (end)\n */\nmxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained, centered)\n{\n\tgridEnabled = (gridEnabled != null) ? gridEnabled && this.graph.gridEnabled : this.graph.gridEnabled;\n\t\n\tif (this.singleSizer)\n\t{\n\t\tvar x = bounds.x + bounds.width + dx;\n\t\tvar y = bounds.y + bounds.height + dy;\n\t\t\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tx = this.graph.snap(x / scale) * scale;\n\t\t\ty = this.graph.snap(y / scale) * scale;\n\t\t}\n\t\t\n\t\tvar rect = new mxRectangle(bounds.x, bounds.y, 0, 0);\n\t\trect.add(new mxRectangle(x, y, 0, 0));\n\t\t\n\t\treturn rect;\n\t}\n\telse\n\t{\n\t\tvar w0 = bounds.width;\n\t\tvar h0 = bounds.height;\n\t\tvar left = bounds.x - tr.x * scale;\n\t\tvar right = left + w0;\n\t\tvar top = bounds.y - tr.y * scale;\n\t\tvar bottom = top + h0;\n\t\t\n\t\tvar cx = left + w0 / 2;\n\t\tvar cy = top + h0 / 2;\n\t\t\n\t\tif (index > 4 /* Bottom Row */)\n\t\t{\n\t\t\tbottom = bottom + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tbottom = this.graph.snap(bottom / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbottom = Math.round(bottom / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index < 3 /* Top Row */)\n\t\t{\n\t\t\ttop = top + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\ttop = this.graph.snap(top / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttop = Math.round(top / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (index == 0 || index == 3 || index == 5 /* Left */)\n\t\t{\n\t\t\tleft += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tleft = this.graph.snap(left / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tleft = Math.round(left / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index == 2 || index == 4 || index == 7 /* Right */)\n\t\t{\n\t\t\tright += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tright = this.graph.snap(right / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tright = Math.round(right / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar width = right - left;\n\t\tvar height = bottom - top;\n\n\t\tif (constrained)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar aspect = geo.width / geo.height;\n\t\t\t\t\n\t\t\t\tif (index== 1 || index== 2 || index == 7 || index == 6)\n\t\t\t\t{\n\t\t\t\t\twidth = height * aspect;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\theight = width / aspect;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (index == 0)\n\t\t\t\t{\n\t\t\t\t\tleft = right - width;\n\t\t\t\t\ttop = bottom - height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (centered)\n\t\t{\n\t\t\twidth += (width - w0);\n\t\t\theight += (height - h0);\n\t\t\t\n\t\t\tvar cdx = cx - (left + width / 2);\n\t\t\tvar cdy = cy - (top + height / 2);\n\n\t\t\tleft += cdx;\n\t\t\ttop += cdy;\n\t\t\tright += cdx;\n\t\t\tbottom += cdy;\n\t\t}\n\n\t\t// Flips over left side\n\t\tif (width < 0)\n\t\t{\n\t\t\tleft += width;\n\t\t\twidth = Math.abs(width);\n\t\t}\n\t\t\n\t\t// Flips over top side\n\t\tif (height < 0)\n\t\t{\n\t\t\ttop += height;\n\t\t\theight = Math.abs(height);\n\t\t}\n\n\t\tvar result = new mxRectangle(left + tr.x * scale, top + tr.y * scale, width, height);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tresult.width = Math.max(result.width, this.minBounds.x * scale + this.minBounds.width * scale +\n\t\t\t\tMath.max(0, this.x0 * scale - result.x));\n\t\t\tresult.height = Math.max(result.height, this.minBounds.y * scale + this.minBounds.height * scale +\n\t\t\t\tMath.max(0, this.y0 * scale - result.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Redraws the handles and the preview.\n */\nmxVertexHandler.prototype.redraw = function(ignoreHandles)\n{\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y,\n\t\tthis.selectionBounds.width, this.selectionBounds.height);\n\tthis.drawPreview();\n\n\tif (!ignoreHandles)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Returns the padding to be used for drawing handles for the current <bounds>.\n */\nmxVertexHandler.prototype.getHandlePadding = function()\n{\n\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\tvar result = new mxPoint(0, 0);\n\tvar tol = this.tolerance;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null &&\n\t\t(this.bounds.width < 2 * this.sizers[0].bounds.width + 2 * tol ||\n\t\tthis.bounds.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t{\n\t\ttol /= 2;\n\t\t\n\t\tresult.x = this.sizers[0].bounds.width + tol;\n\t\tresult.y = this.sizers[0].bounds.height + tol;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSizerBounds\n * \n * Returns the bounds used to paint the resize handles.\n */\nmxVertexHandler.prototype.getSizerBounds = function()\n{\n\treturn this.bounds;\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles. To hide certain handles the following code can be used.\n * \n * (code)\n * mxVertexHandler.prototype.redrawHandles = function()\n * {\n *   mxVertexHandlerRedrawHandles.apply(this, arguments);\n *   \n *   if (this.sizers != null && this.sizers.length > 7)\n *   {\n *     this.sizers[1].node.style.display = 'none';\n *     this.sizers[6].node.style.display = 'none';\n *   }\n * };\n * (end)\n */\nmxVertexHandler.prototype.redrawHandles = function()\n{\n\tvar s = this.getSizerBounds();\n\tvar tol = this.tolerance;\n\tthis.horizontalOffset = 0;\n\tthis.verticalOffset = 0;\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility =\n\t\t\t\t(this.handlesVisible && this.isCustomHandleVisible(\n\t\t\t\t\tthis.customHandles[i])) ? '' : 'hidden';\n\t\t}\n\t}\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null)\n\t{\n\t\tif (this.index == null && this.manageSizers && this.sizers.length >= 8)\n\t\t{\n\t\t\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\t\t\tvar padding = this.getHandlePadding();\n\t\t\tthis.horizontalOffset = padding.x;\n\t\t\tthis.verticalOffset = padding.y;\n\t\t\t\n\t\t\tif (this.horizontalOffset != 0 || this.verticalOffset != 0)\n\t\t\t{\n\t\t\t\ts = new mxRectangle(s.x, s.y, s.width, s.height);\n\n\t\t\t\ts.x -= this.horizontalOffset / 2;\n\t\t\t\ts.width += this.horizontalOffset;\n\t\t\t\ts.y -= this.verticalOffset / 2;\n\t\t\t\ts.height += this.verticalOffset;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tif ((s.width < 2 * this.sizers[0].bounds.width + 2 * tol) ||\n\t\t\t\t\t(s.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[2].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[5].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[7].node.style.display = 'none';\n\t\t\t\t}\n\t\t\t\telse if (this.handlesVisible)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = '';\n\t\t\t\t\tthis.sizers[2].node.style.display = '';\n\t\t\t\t\tthis.sizers[5].node.style.display = '';\n\t\t\t\t\tthis.sizers[7].node.style.display = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar r = s.x + s.width;\n\t\tvar b = s.y + s.height;\n\t\t\n\t\tif (this.singleSizer)\n\t\t{\n\t\t\tthis.moveSizerTo(this.sizers[0], r, b);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cx = s.x + s.width / 2;\n\t\t\tvar cy = s.y + s.height / 2;\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tvar crs = ['nw-resize', 'n-resize', 'ne-resize', 'e-resize', 'se-resize', 's-resize', 'sw-resize', 'w-resize'];\n\t\t\t\t\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\t\t\t\n\t\t\t\tvar da = Math.round(alpha * 4 / Math.PI);\n\t\t\t\t\n\t\t\t\tvar ct = new mxPoint(s.getCenterX(), s.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(s.x, s.y), cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[0], pt.x, pt.y);\n\t\t\t\tthis.sizers[0].setCursor(crs[mxUtils.mod(0 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[1], pt.x, pt.y);\n\t\t\t\tthis.sizers[1].setCursor(crs[mxUtils.mod(1 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[2], pt.x, pt.y);\n\t\t\t\tthis.sizers[2].setCursor(crs[mxUtils.mod(2 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[3], pt.x, pt.y);\n\t\t\t\tthis.sizers[3].setCursor(crs[mxUtils.mod(7 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[4], pt.x, pt.y);\n\t\t\t\tthis.sizers[4].setCursor(crs[mxUtils.mod(3 + da, crs.length)]);\n\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[5], pt.x, pt.y);\n\t\t\t\tthis.sizers[5].setCursor(crs[mxUtils.mod(6 + da, crs.length)]);\n\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[6], pt.x, pt.y);\n\t\t\t\tthis.sizers[6].setCursor(crs[mxUtils.mod(5 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[7], pt.x, pt.y);\n\t\t\t\tthis.sizers[7].setCursor(crs[mxUtils.mod(4 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx + this.state.absoluteOffset.x;\n\t\t\t\tpt.y = cy + this.state.absoluteOffset.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\tthis.moveSizerTo(this.sizers[8], pt.x, pt.y);\n\t\t\t}\n\t\t\telse if (this.state.width >= 2 && this.state.height >= 2)\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], this.state.x, this.state.y);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.rotationShape != null)\n\t{\n\t\tvar alpha = mxUtils.toRadians((this.currentAlpha != null) ? this.currentAlpha : this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\t\n\t\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(this.getRotationHandlePosition(), cos, sin, ct);\n\n\t\tif (this.rotationShape.node != null)\n\t\t{\n\t\t\tthis.moveSizerTo(this.rotationShape, pt.x, pt.y);\n\n\t\t\t// Hides rotation handle during text editing\n\t\t\tthis.rotationShape.node.style.visibility = (this.state.view.graph.isEditing() ||\n\t\t\t\t!this.handlesVisible) ? 'hidden' : '';\n\t\t}\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t}\n\t\n\tif (this.edgeHandlers != null)\n\t{\t\t\n\t\tfor (var i = 0; i < this.edgeHandlers.length; i++)\n\t\t{\n\t\t\tthis.edgeHandlers[i].redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isCustomHandleVisible\n * \n * Returns true if the given custom handle is visible.\n */\nmxVertexHandler.prototype.isCustomHandleVisible = function(handle)\n{\n\treturn !this.graph.isEditing() && this.state.view.graph.getSelectionCount() == 1;\n};\n\n/**\n * Function: getRotationHandlePosition\n * \n * Returns an <mxPoint> that defines the rotation handle position.\n */\nmxVertexHandler.prototype.getRotationHandlePosition = function()\n{\n\treturn new mxPoint(this.bounds.x + this.bounds.width / 2, this.bounds.y + this.rotationHandleVSpacing)\n};\n\n/**\n * Function: isParentHighlightVisible\n * \n * Returns true if the parent highlight should be visible. This implementation\n * always returns true.\n */\nmxVertexHandler.prototype.isParentHighlightVisible = function()\n{\n\treturn !this.graph.isCellSelected(this.graph.model.getParent(this.state.cell));\n};\n\n/**\n * Function: updateParentHighlight\n * \n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxVertexHandler.prototype.updateParentHighlight = function()\n{\n\tif (!this.isDestroyed())\n\t{\n\t\tvar visible = this.isParentHighlightVisible();\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\tif (this.parentHighlight != null)\n\t\t{\n\t\t\tif (this.graph.model.isVertex(parent) && visible)\n\t\t\t{\n\t\t\t\tvar b = this.parentHighlight.bounds;\n\t\t\t\t\n\t\t\t\tif (pstate != null && (b.x != pstate.x || b.y != pstate.y ||\n\t\t\t\t\tb.width != pstate.width || b.height != pstate.height))\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight.bounds = mxRectangle.fromRectangle(pstate);\n\t\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (pstate != null && pstate.parentHighlight == this.parentHighlight)\n\t\t\t\t{\n\t\t\t\t\tpstate.parentHighlight = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.parentHighlight.destroy();\n\t\t\t\tthis.parentHighlight = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.parentHighlightEnabled && visible)\n\t\t{\n\t\t\tif (this.graph.model.isVertex(parent) && pstate != null &&\n\t\t\t\tpstate.parentHighlight == null)\n\t\t\t{\n\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t\n\t\t\t\t// Shows highlight once per parent\n\t\t\t\tpstate.parentHighlight = this.parentHighlight;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxVertexHandler.prototype.drawPreview = function()\n{\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.bounds = this.bounds;\n\t\t\n\t\tif (this.preview.node.parentNode == this.graph.container)\n\t\t{\n\t\t\tthis.preview.bounds.width = Math.max(0, this.preview.bounds.width - 1);\n\t\t\tthis.preview.bounds.height = Math.max(0, this.preview.bounds.height - 1);\n\t\t}\n\t\n\t\tthis.preview.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tthis.preview.redraw();\n\t}\n\t\n\tthis.selectionBorder.bounds = this.getSelectionBorderBounds();\n\tthis.selectionBorder.redraw();\n\tthis.updateParentHighlight();\n};\n\n/**\n * Function: getSelectionBorderBounds\n * \n * Returns the bounds for the selection border.\n */\nmxVertexHandler.prototype.getSelectionBorderBounds = function()\n{\n\treturn this.bounds;\n};\n\n/**\n * Function: isDestroyed\n * \n * Returns true if this handler was destroyed or not initialized.\n */\nmxVertexHandler.prototype.isDestroyed = function()\n{\n\treturn this.selectionBorder == null;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxVertexHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\tif (pstate != null && pstate.parentHighlight == this.parentHighlight)\n\t\t{\n\t\t\tpstate.parentHighlight = null;\n\t\t}\n\t\t\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.ghostPreview != null)\n\t{\n\t\tthis.ghostPreview.destroy();\n\t\tthis.ghostPreview = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tthis.labelShape = null;\n\tthis.removeHint();\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].destroy();\n\t\t}\n\t\t\n\t\tthis.sizers = null;\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].destroy();\n\t\t}\n\t\t\n\t\tthis.customHandles = null;\n\t}\n};\n\n__mxOutput.mxVertexHandler = typeof mxVertexHandler !== 'undefined' ? mxVertexHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler> for each selected edge.\n * \n * To enable adding/removing control points, the following code can be used:\n * \n * (code)\n * mxEdgeHandler.prototype.addEnabled = true;\n * mxEdgeHandler.prototype.removeEnabled = true;\n * (end)\n * \n * Note: This experimental feature is not recommended for production use.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxEdgeHandler(state)\n{\n\tif (state != null && state.shape != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar dirty = this.index != null;\n\t\t\tthis.reset();\n\t\t\t\n\t\t\tif (dirty)\n\t\t\t{\n\t\t\t\tthis.graph.cellRenderer.redraw(this.state, false, state.view.isRendering());\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxEdgeHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxEdgeHandler.prototype.state = null;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> which is used for highlighting terminals.\n */\nmxEdgeHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxEdgeHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while a connection is being changed.\n */\nmxEdgeHandler.prototype.error = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the preview edge.\n */\nmxEdgeHandler.prototype.shape = null;\n\n/**\n * Variable: bends\n * \n * Holds the <mxShapes> that represent the points.\n */\nmxEdgeHandler.prototype.bends = null;\n\n/**\n * Variable: labelShape\n * \n * Holds the <mxShape> that represents the label position.\n */\nmxEdgeHandler.prototype.labelShape = null;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxEdgeHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if adding bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.addEnabled = false;\n\n/**\n * Variable: removeEnabled\n * \n * Specifies if removing bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.removeEnabled = false;\n\n/**\n * Variable: dblClickRemoveEnabled\n * \n * Specifies if removing bends by double click is enabled. Default is false.\n */\nmxEdgeHandler.prototype.dblClickRemoveEnabled = false;\n\n/**\n * Variable: mergeRemoveEnabled\n * \n * Specifies if removing bends by dropping them on other bends is enabled.\n * Default is false.\n */\nmxEdgeHandler.prototype.mergeRemoveEnabled = false;\n\n/**\n * Variable: straightRemoveEnabled\n * \n * Specifies if removing bends by creating straight segments should be enabled.\n * If enabled, this can be overridden by holding down the alt key while moving.\n * Default is false.\n */\nmxEdgeHandler.prototype.straightRemoveEnabled = false;\n\n/**\n * Variable: virtualBendsEnabled\n * \n * Specifies if virtual bends should be added in the center of each\n * segments. These bends can then be used to add new waypoints.\n * Default is false.\n */\nmxEdgeHandler.prototype.virtualBendsEnabled = false;\n\n/**\n * Variable: virtualBendOpacity\n * \n * Opacity to be used for virtual bends (see <virtualBendsEnabled>).\n * Default is 20.\n */\nmxEdgeHandler.prototype.virtualBendOpacity = 20;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxEdgeHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: preferHtml\n * \n * Specifies if bends should be added to the graph container. This is updated\n * in <init> based on whether the edge or one of its terminals has an HTML\n * label in the container.\n */\nmxEdgeHandler.prototype.preferHtml = false;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE\n * Default is true.\n */\nmxEdgeHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: snapToTerminals\n * \n * Specifies if waypoints should snap to the routing centers of terminals.\n * Default is false.\n */\nmxEdgeHandler.prototype.snapToTerminals = false;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxEdgeHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxEdgeHandler.prototype.tolerance = 0;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxEdgeHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: manageLabelHandle\n * \n * Specifies if the label handle should be moved if it intersects with another\n * handle. Uses <checkLabelHandle> for checking and moving. Default is false.\n */\nmxEdgeHandler.prototype.manageLabelHandle = false;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this edge handler.\n */\nmxEdgeHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\t\n\t// Clones the original points from the cell\n\t// and makes sure at least one point exists\n\tthis.points = [];\n\t\n\t// Uses the absolute points of the state\n\t// for the initial configuration and preview\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.shape = this.createSelectionShape(this.abspoints);\n\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\tthis.shape.init(this.graph.getView().getOverlayPane());\n\tthis.shape.pointerEvents = false;\n\tthis.shape.setCursor(mxConstants.CURSOR_MOVABLE_EDGE);\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\n\t// Updates preferHtml\n\tthis.preferHtml = this.state.text != null &&\n\t\tthis.state.text.node.parentNode == this.graph.container;\n\t\n\tif (!this.preferHtml)\n\t{\n\t\t// Checks source terminal\n\t\tvar sourceState = this.state.getVisibleTerminalState(true);\n\t\t\n\t\tif (sourceState != null)\n\t\t{\n\t\t\tthis.preferHtml = sourceState.text != null &&\n\t\t\t\tsourceState.text.node.parentNode == this.graph.container;\n\t\t}\n\t\t\n\t\tif (!this.preferHtml)\n\t\t{\n\t\t\t// Checks target terminal\n\t\t\tvar targetState = this.state.getVisibleTerminalState(false);\n\t\t\t\n\t\t\tif (targetState != null)\n\t\t\t{\n\t\t\t\tthis.preferHtml = targetState.text != null &&\n\t\t\t\ttargetState.text.node.parentNode == this.graph.container;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Creates bends for the non-routed absolute points\n\t// or bends that don't correspond to points\n\tif (this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells ||\n\t\tmxGraphHandler.prototype.maxCells <= 0)\n\t{\n\t\tthis.bends = this.createBends();\n\n\t\tif (this.isVirtualBendsEnabled())\n\t\t{\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t}\n\n\t// Adds a rectangular handle for the label position\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape = this.createLabelHandleShape();\n\tthis.initBend(this.labelShape);\n\tthis.labelShape.setCursor(mxConstants.CURSOR_LABEL_HANDLE);\n\t\n\tthis.customHandles = this.createCustomHandles();\n\t\n\tthis.updateParentHighlight();\n\tthis.redraw();\n};\n\n\n/**\n * Function: isParentHighlightVisible\n * \n * Returns true if the parent highlight should be visible. This implementation\n * always returns true.\n */\nmxEdgeHandler.prototype.isParentHighlightVisible = mxVertexHandler.prototype.isParentHighlightVisible;\n\n/**\n * Function: updateParentHighlight\n * \n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxEdgeHandler.prototype.updateParentHighlight = mxVertexHandler.prototype.updateParentHighlight;\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxEdgeHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: isVirtualBendsEnabled\n * \n * Returns true if virtual bends should be added. This returns true if\n * <virtualBendsEnabled> is true and the current style allows and\n * renders custom waypoints.\n */\nmxEdgeHandler.prototype.isVirtualBendsEnabled = function(evt)\n{\n\treturn this.virtualBendsEnabled && (this.state.style[mxConstants.STYLE_EDGE] == null ||\n\t\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.NONE ||\n\t\t\tthis.state.style[mxConstants.STYLE_NOEDGESTYLE] == 1)  &&\n\t\t\tmxUtils.getValue(this.state.style, mxConstants.STYLE_SHAPE, null) != 'arrow';\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell allows new connections to be created. This implementation\n * always returns true.\n */\nmxEdgeHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: isAddPointEvent\n * \n * Returns true if the given event is a trigger to add a new point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isAddPointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isRemovePointEvent\n * \n * Returns true if the given event is a trigger to remove a point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isRemovePointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: getSelectionPoints\n * \n * Returns the list of points that defines the selection stroke.\n */\nmxEdgeHandler.prototype.getSelectionPoints = function(state)\n{\n\treturn state.absolutePoints;\n};\n\n/**\n * Function: createParentHighlightShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(mxRectangle.fromRectangle(bounds),\n\t\tnull, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createSelectionShape = function(points)\n{\n\tvar shape = new this.state.shape.constructor();\n\tshape.outline = true;\n\tshape.apply(this.state);\n\t\n\tshape.isDashed = this.isSelectionDashed();\n\tshape.stroke = this.getSelectionColor();\n\tshape.isShadow = false;\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.EDGE_SELECTION_COLOR>.\n */\nmxEdgeHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.EDGE_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.EDGE_SELECTION_STROKEWIDTH>.\n */\nmxEdgeHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.EDGE_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.EDGE_SELECTION_DASHED>.\n */\nmxEdgeHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.EDGE_SELECTION_DASHED;\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxEdgeHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: getCellAt\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.getCellAt = function(x, y)\n{\n\treturn (!this.outlineConnect) ? this.graph.getCellAt(x, y) : null;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tvar self = this; // closure\n\n\t// Only returns edges if they are connectable and never returns\n\t// the edge that is currently being modified\n\tmarker.getCell = function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(this, arguments);\n\n\t\t// Checks for cell at preview point (with grid)\n\t\tif ((cell == self.state.cell || cell == null) && self.currentPoint != null)\n\t\t{\n\t\t\tcell = self.graph.getCellAt(self.currentPoint.x, self.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar model = self.graph.getModel();\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && self.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, self.currentPoint.x, self.currentPoint.y)) ||\n\t\t\t(!self.isConnectableCell(cell)) || (cell == self.state.cell ||\n\t\t\t(cell != null && !self.graph.connectableEdges && model.isEdge(cell))) ||\n\t\t\tmodel.isAncestor(self.state.cell, cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (!this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\treturn cell;\n\t};\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = function(state)\n\t{\n\t\tvar model = self.graph.getModel();\n\t\tvar other = self.graph.view.getTerminalPort(state,\n\t\t\tself.graph.view.getState(model.getTerminal(self.state.cell,\n\t\t\t!self.isSource)), !self.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (self.isSource) ? state.cell : otherCell;\n\t\tvar target = (self.isSource) ? otherCell : state.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tself.error = self.validateConnection(source, target);\n\n\t\treturn self.error == null;\n\t};\n\t\n\treturn marker;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source, target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxEdgeHandler.prototype.validateConnection = function(source, target)\n{\n\treturn this.graph.getEdgeValidationError(this.state.cell, source, target);\n};\n\n/**\n * Function: createBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar bends = [];\n\n\tfor (var i = 0; i < this.abspoints.length; i++)\n\t{\n\t\tif (this.isHandleVisible(i))\n\t\t{\n\t\t\tvar source = i == 0;\n\t\t\tvar target = i == this.abspoints.length - 1;\n\t\t\tvar terminal = source || target;\n\n\t\t\tif (terminal || this.graph.isCellBendable(cell))\n\t\t\t{\n\t\t\t\t(mxUtils.bind(this, function(index)\n\t\t\t\t{\n\t\t\t\t\tvar bend = this.createHandleShape(index);\n\t\t\t\t\tthis.initBend(bend, mxUtils.bind(this, mxUtils.bind(this, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.dblClickRemoveEnabled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.removePoint(this.state, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t})));\n\t\n\t\t\t\t\tif (this.isHandleEnabled(i))\n\t\t\t\t\t{\n\t\t\t\t\t\tbend.setCursor((terminal) ? mxConstants.CURSOR_TERMINAL_HANDLE : mxConstants.CURSOR_BEND_HANDLE);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbends.push(bend);\n\t\t\t\t\n\t\t\t\t\tif (!terminal)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t\t\t\t\tbend.node.style.visibility = 'hidden';\n\t\t\t\t\t}\n\t\t\t\t}))(i);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: createVirtualBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createVirtualBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar last = this.abspoints[0];\n\tvar bends = [];\n\n\tif (this.graph.isCellBendable(cell))\n\t{\n\t\tfor (var i = 1; i < this.abspoints.length; i++)\n\t\t{\n\t\t\t(mxUtils.bind(this, function(bend)\n\t\t\t{\n\t\t\t\tthis.initBend(bend);\n\t\t\t\tbend.setCursor(mxConstants.CURSOR_VIRTUAL_BEND_HANDLE);\n\t\t\t\tbends.push(bend);\n\t\t\t}))(this.createHandleShape());\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: isHandleEnabled\n * \n * Creates the shape used to display the given bend.\n */\nmxEdgeHandler.prototype.isHandleEnabled = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: isHandleVisible\n * \n * Returns true if the handle at the given index is visible.\n */\nmxEdgeHandler.prototype.isHandleVisible = function(index)\n{\n\tvar source = this.state.getVisibleTerminalState(true);\n\tvar target = this.state.getVisibleTerminalState(false);\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tvar edgeStyle = (geo != null) ? this.graph.view.getEdgeStyle(this.state, geo.points, source, target) : null;\n\n\treturn edgeStyle != mxEdgeStyle.EntityRelation || index == 0 || index == this.abspoints.length - 1;\n};\n\n/**\n * Function: createHandleShape\n * \n * Creates the shape used to display the given bend. Note that the index may be\n * null for special cases, such as when called from\n * <mxElbowEdgeHandler.createVirtualBend>. Only images and rectangles should be\n * returned if support for HTML labels with not foreign objects is required.\n * Index if null for virtual handles.\n */\nmxEdgeHandler.prototype.createHandleShape = function(index)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.handleImage.width, this.handleImage.height), this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.HANDLE_SIZE;\n\t\t\n\t\tif (this.preferHtml)\n\t\t{\n\t\t\ts -= 1;\n\t\t}\n\t\t\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createLabelHandleShape\n * \n * Creates the shape used to display the the label handle.\n */\nmxEdgeHandler.prototype.createLabelHandleShape = function()\n{\n\tif (this.labelHandleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.labelHandleImage.width, this.labelHandleImage.height), this.labelHandleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.LABEL_HANDLE_SIZE;\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.LABEL_HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: initBend\n * \n * Helper method to initialize the given bend.\n * \n * Parameters:\n * \n * bend - <mxShape> that represents the bend to be initialized.\n */\nmxEdgeHandler.prototype.initBend = function(bend, dblClick)\n{\n\tif (this.preferHtml)\n\t{\n\t\tbend.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tbend.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tbend.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tbend.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(bend.node, this.graph, this.state,\n\t\t\tnull, null, null, dblClick);\n\t\n\t// Fixes lost event tracking for images in quirks / IE8 standards\n\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t{\n\t\tmxEvent.addListener(bend.node, 'dragstart', function(evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t}\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tbend.node.setAttribute('pointer-events', 'none');\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event.\n */\nmxEdgeHandler.prototype.getHandleForEvent = function(me)\n{\n\tvar result = null;\n\t\n\tif (this.state != null)\n\t{\n\t\t// Connection highlight may consume events before they reach sizer handle\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\t\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tvar minDistSq = null;\n\t\n\t\tfunction checkShape(shape)\n\t\t{\n\t\t\tif (shape != null && shape.node != null && shape.node.style.display != 'none' &&\n\t\t\t\tshape.node.style.visibility != 'hidden' &&\n\t\t\t\t(me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit))))\n\t\t\t{\n\t\t\t\tvar dx = me.getGraphX() - shape.bounds.getCenterX();\n\t\t\t\tvar dy = me.getGraphY() - shape.bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\t\n\t\t\t\tif (minDistSq == null || tmp <= minDistSq)\n\t\t\t\t{\n\t\t\t\t\tminDistSq = tmp;\n\t\t\t\t\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t\t{\n\t\t\t// Inverse loop order to match display order\n\t\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t\t{\n\t\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t\t{\n\t\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (me.isSource(this.state.text) || checkShape(this.labelShape))\n\t\t{\n\t\t\tresult = mxEvent.LABEL_HANDLE;\n\t\t}\n\t\t\n\t\tif (this.bends != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t{\n\t\t\t\tif (checkShape(this.bends[i]))\n\t\t\t\t{\n\t\t\t\t\tresult = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.virtualBends != null && this.isAddVirtualBendEvent(me))\n\t\t{\n\t\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t\t{\n\t\t\t\tif (checkShape(this.virtualBends[i]))\n\t\t\t\t{\n\t\t\t\t\tresult = mxEvent.VIRTUAL_HANDLE - i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isAddVirtualBendEvent\n * \n * Returns true if the given event allows virtual bends to be added. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isAddVirtualBendEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by checking if a special element of the handler\n * was clicked, in which case the index parameter is non-null. The\n * indices may be one of <LABEL_HANDLE> or the number of the respective\n * control point. The source and target points are used for reconnecting\n * the edge.\n */\nmxEdgeHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar handle = this.getHandleForEvent(me);\n\t\n\tif (this.bends != null && this.bends[handle] != null)\n\t{\n\t\tvar b = this.bends[handle].bounds;\n\t\tthis.snapPoint = new mxPoint(b.getCenterX(), b.getCenterY());\n\t}\n\t\n\tif (this.addEnabled && handle == null && this.isAddPointEvent(me.getEvent()))\n\t{\n\t\tthis.addPoint(this.state, me.getEvent());\n\t\tme.consume();\n\t}\n\telse if (handle != null && !me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tif (this.removeEnabled && this.isRemovePointEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.removePoint(this.state, handle);\n\t\t}\n\t\telse if (handle != mxEvent.LABEL_HANDLE || this.graph.isLabelMovable(me.getCell()))\n\t\t{\n\t\t\tif (handle <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.virtualBends[mxEvent.VIRTUAL_HANDLE - handle].node, 100);\n\t\t\t}\n\t\t\t\n\t\t\tthis.start(me.getX(), me.getY(), handle);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxEdgeHandler.prototype.start = function(x, y, index)\n{\n\tthis.startX = x;\n\tthis.startY = y;\n\n\tthis.isSource = (this.bends == null) ? false : index == 0;\n\tthis.isTarget = (this.bends == null) ? false : index == this.bends.length - 1;\n\tthis.isLabel = index == mxEvent.LABEL_HANDLE;\n\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tvar cell = this.state.cell;\n\t\tvar terminal = this.graph.model.getTerminal(cell, this.isSource);\n\n\t\tif ((terminal == null && this.graph.isTerminalPointMovable(cell, this.isSource)) ||\n\t\t\t(terminal != null && this.graph.isCellDisconnectable(cell, terminal, this.isSource)))\n\t\t{\n\t\t\tthis.index = index;\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.index = index;\n\t}\n\t\n\t// Hides other custom handles\n\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t{\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t\t{\n\t\t\t\tif (i != mxEvent.CUSTOM_HANDLE - this.index)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[i].setVisible(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: clonePreviewState\n * \n * Returns a clone of the current preview state for the given point and terminal.\n */\nmxEdgeHandler.prototype.clonePreviewState = function(point, terminal)\n{\n\treturn this.state.clone();\n};\n\n/**\n * Function: getSnapToTerminalTolerance\n * \n * Returns the tolerance for the guides. Default value is\n * gridSize * scale / 2.\n */\nmxEdgeHandler.prototype.getSnapToTerminalTolerance = function()\n{\n\treturn this.graph.gridSize * this.graph.view.scale / 2;\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxEdgeHandler.prototype.updateHint = function(me, point) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxEdgeHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxEdgeHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: isSnapToTerminalsEvent\n * \n * Returns true if <snapToTerminals> is true and if alt is not pressed.\n */\nmxEdgeHandler.prototype.isSnapToTerminalsEvent = function(me)\n{\n\treturn this.snapToTerminals && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns the point for the given event.\n */\nmxEdgeHandler.prototype.getPointForEvent = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar scale = view.scale;\n\tvar point = new mxPoint(this.roundLength(me.getGraphX() / scale) * scale,\n\t\tthis.roundLength(me.getGraphY() / scale) * scale);\n\t\n\tvar tt = this.getSnapToTerminalTolerance();\n\tvar overrideX = false;\n\tvar overrideY = false;\t\t\n\t\n\tif (tt > 0 && this.isSnapToTerminalsEvent(me))\n\t{\n\t\tfunction snapToPoint(pt)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar x = pt.x;\n\n\t\t\t\tif (Math.abs(point.x - x) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = x;\n\t\t\t\t\toverrideX = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar y = pt.y;\n\n\t\t\t\tif (Math.abs(point.y - y) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = y;\n\t\t\t\t\toverrideY = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Temporary function\n\t\tfunction snapToTerminal(terminal)\n\t\t{\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, new mxPoint(view.getRoutingCenterX(terminal),\n\t\t\t\t\t\tview.getRoutingCenterY(terminal)));\n\t\t\t}\n\t\t};\n\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(true));\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(false));\n\n\t\tif (this.state.absolutePoints != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, this.state.absolutePoints[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar tr = view.translate;\n\t\t\n\t\tif (!overrideX)\n\t\t{\n\t\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\t}\n\t\t\n\t\tif (!overrideY)\n\t\t{\n\t\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getPreviewTerminalState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.getPreviewTerminalState = function(me)\n{\n\tthis.constraintHandler.update(me, this.isSource, true, me.isSource(this.marker.highlight.shape) ? null : this.currentPoint);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\t\t\n\t\tvar model = this.graph.getModel();\n\t\tvar other = this.graph.view.getTerminalPort(this.state,\n\t\t\t\tthis.graph.view.getState(model.getTerminal(this.state.cell,\n\t\t\t!this.isSource)), !this.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (this.isSource) ? this.constraintHandler.currentFocus.cell : otherCell;\n\t\tvar target = (this.isSource) ? otherCell : this.constraintHandler.currentFocus.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tthis.error = this.validateConnection(source, target);\n\t\tvar result = null;\n\t\t\n\t\tif (this.error == null)\n\t\t{\n\t\t\tresult = this.constraintHandler.currentFocus;\n\t\t}\n\t\t\n\t\tif (this.error != null || (result != null &&\n\t\t\t!this.isCellEnabled(result.cell)))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\telse if (!this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t{\n\t\tthis.marker.process(me);\n\t\tvar state = this.marker.getValidState();\n\t\t\n\t\tif (state != null && !this.isCellEnabled(state.cell))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t\tthis.marker.reset();\n\t\t}\n\t\t\n\t\treturn this.marker.getValidState();\n\t}\n\telse\n\t{\n\t\tthis.marker.reset();\n\t\t\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n * \n * Parameters:\n * \n * pt - <mxPoint> that contains the current pointer position.\n * me - Optional <mxMouseEvent> that contains the current event.\n */\nmxEdgeHandler.prototype.getPreviewPoints = function(pt, me)\n{\n\tvar geometry = this.graph.getCellGeometry(this.state.cell);\n\tvar points = (geometry.points != null) ? geometry.points.slice() : null;\n\tvar point = new mxPoint(pt.x, pt.y);\n\tvar result = null;\n\t\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tthis.convertPoint(point, false);\n\t\t\n\t\tif (points == null)\n\t\t{\n\t\t\tpoints = [point];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adds point from virtual bend\n\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 0, point);\n\t\t\t}\n\n\t\t\t// Removes point if dragged on terminal point\n\t\t\tif (!this.isSource && !this.isTarget)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (i != this.index)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar bend = this.bends[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bend != null && mxUtils.contains(bend.bounds, pt.x, pt.y))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(this.index - 1, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Removes point if user tries to straighten a segment\n\t\t\t\tif (result == null && this.straightRemoveEnabled && (me == null || !mxEvent.isAltDown(me.getEvent())))\n\t\t\t\t{\n\t\t\t\t\tvar tol = this.graph.tolerance * this.graph.tolerance;\n\t\t\t\t\tvar abs = this.state.absolutePoints.slice();\n\t\t\t\t\tabs[this.index] = pt;\n\t\t\t\t\t\n\t\t\t\t\t// Handes special case where removing waypoint affects tolerance (flickering)\n\t\t\t\t\tvar src = this.state.getVisibleTerminalState(true);\n\t\t\t\t\t\n\t\t\t\t\tif (src != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, src, true);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(src, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[0] = new mxPoint(src.view.getRoutingCenterX(src), src.view.getRoutingCenterY(src));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar trg = this.state.getVisibleTerminalState(false);\n\t\t\t\t\t\n\t\t\t\t\tif (trg != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, trg, false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(trg, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[abs.length - 1] = new mxPoint(trg.view.getRoutingCenterX(trg), trg.view.getRoutingCenterY(trg));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction checkRemove(idx, tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (idx > 0 && idx < abs.length - 1 &&\n\t\t\t\t\t\t\tmxUtils.ptSegDistSq(abs[idx - 1].x, abs[idx - 1].y,\n\t\t\t\t\t\t\t\tabs[idx + 1].x, abs[idx + 1].y, tmp.x, tmp.y) < tol)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpoints.splice(idx - 1, 1);\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// LATER: Check if other points can be removed if a segment is made straight\n\t\t\t\t\tcheckRemove(this.index, pt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Updates existing point\n\t\t\tif (result == null && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints[this.index - 1] = point;\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.graph.resetEdgesOnConnect)\n\t{\n\t\tpoints = null;\n\t}\n\t\n\treturn (result != null) ? result : points;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxEdgeHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updatePreviewState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.updatePreviewState = function(edge, point, terminalState, me, outline)\n{\n\t// Computes the points for the edge style and terminals\n\tvar sourceState = (this.isSource) ? terminalState : this.state.getVisibleTerminalState(true);\n\tvar targetState = (this.isTarget) ? terminalState : this.state.getVisibleTerminalState(false);\n\t\n\tvar sourceConstraint = this.graph.getConnectionConstraint(edge, sourceState, true);\n\tvar targetConstraint = this.graph.getConnectionConstraint(edge, targetState, false);\n\n\tvar constraint = this.constraintHandler.currentConstraint;\n\n\tif (constraint == null && outline)\n\t{\n\t\tif (terminalState != null)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tconstraint = this.graph.getOutlineConstraint(point, terminalState, me);\n\t\t\tthis.constraintHandler.setFocus(me, terminalState, this.isSource);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\t}\n\t\n\tif (this.outlineConnect && this.marker.highlight != null && this.marker.highlight.shape != null)\n\t{\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (outline) ? mxConstants.OUTLINE_HIGHLIGHT_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t\telse if (this.marker.hasValidState())\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (this.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\tthis.marker.getValidState() != me.getState()) ?\n\t\t\t\t'transparent' : mxConstants.DEFAULT_VALID_COLOR;\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t}\n\t\n\tif (this.isSource)\n\t{\n\t\tsourceConstraint = constraint;\n\t}\n\telse if (this.isTarget)\n\t{\n\t\ttargetConstraint = constraint;\n\t}\n\t\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tif (constraint != null && constraint.point != null)\n\t\t{\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t}\n\t}\n\t\n\tedge.setVisibleTerminalState(sourceState, true);\n\tedge.setVisibleTerminalState(targetState, false);\n\t\n\tif (!this.isSource || sourceState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, sourceState, true, sourceConstraint);\n\t}\n\t\n\tif (!this.isTarget || targetState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, targetState, false, targetConstraint);\n\t}\n\t\n\tif ((this.isSource || this.isTarget) && terminalState == null)\n\t{\n\t\tedge.setAbsoluteTerminalPoint(point, this.isSource);\n\n\t\tif (this.marker.getMarkedState() == null)\n\t\t{\n\t\t\tthis.error = (this.graph.allowDanglingEdges) ? null : '';\n\t\t}\n\t}\n\t\n\tedge.view.updatePoints(edge, this.points, sourceState, targetState);\n\tedge.view.updateFloatingTerminalPoints(edge, sourceState, targetState);\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxEdgeHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tthis.currentPoint = this.getPointForEvent(me);\n\t\tthis.error = null;\n\t\t\n\t\t// Uses the current point from the constraint handler if available\n\t\tif (!this.graph.isIgnoreTerminalEvent(me.getEvent()) && mxEvent.isShiftDown(me.getEvent()) && this.snapPoint != null)\n\t\t{\n\t\t\tif (Math.abs(this.snapPoint.x - this.currentPoint.x) < Math.abs(this.snapPoint.y - this.currentPoint.y))\n\t\t\t{\n\t\t\t\tthis.currentPoint.x = this.snapPoint.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.currentPoint.y = this.snapPoint.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t{\n\t\t\tif (this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].positionChanged();\n\t\t\t\t\n\t\t\t\tif (this.shape != null && this.shape.node != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.node.style.display = 'none';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isLabel)\n\t\t{\n\t\t\tthis.label.x = this.currentPoint.x;\n\t\t\tthis.label.y = this.currentPoint.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.points = this.getPreviewPoints(this.currentPoint, me);\n\t\t\tvar terminalState = (this.isSource || this.isTarget) ? this.getPreviewTerminalState(me) : null;\n\t\t\t\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tthis.currentPoint = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.outlineConnect)\n\t\t\t{\n\t\t\t\t// Need to check outline before cloning terminal state\n\t\t\t\tvar outline = (this.isSource || this.isTarget) ? this.isOutlineConnectEvent(me) : false\n\t\t\t\t\t\t\n\t\t\t\tif (outline)\n\t\t\t\t{\n\t\t\t\t\tterminalState = this.marker.highlight.state;\n\t\t\t\t}\n\t\t\t\telse if (terminalState != null && terminalState != me.getState() &&\n\t\t\t\t\tthis.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\t\tthis.marker.highlight.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t\tterminalState = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (terminalState != null && !this.isCellEnabled(terminalState.cell))\n\t\t\t{\n\t\t\t\tterminalState = null;\n\t\t\t\tthis.marker.reset();\n\t\t\t}\n\t\t\t\n\t\t\tvar clone = this.clonePreviewState(this.currentPoint, (terminalState != null) ? terminalState.cell : null);\n\t\t\tthis.updatePreviewState(clone, this.currentPoint, terminalState, me, outline);\n\n\t\t\t// Sets the color of the preview to valid or invalid, updates the\n\t\t\t// points of the preview and redraws\n\t\t\tvar color = (this.error == null) ? this.marker.validColor : this.marker.invalidColor;\n\t\t\tthis.setPreviewColor(color);\n\t\t\tthis.abspoints = clone.absolutePoints;\n\t\t\tthis.active = true;\n\t\t\tthis.updateHint(me, this.currentPoint);\n\t\t}\n\n\t\t// This should go before calling isOutlineConnectEvent above. As a workaround\n\t\t// we add an offset of gridSize to the hint to avoid problem with hit detection\n\t\t// in highlight.isHighlightAt (which uses comonentFromPoint)\n\t\tthis.drawPreview();\n\t\tmxEvent.consume(me.getEvent());\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (mxClient.IS_IE && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event to applying the previewed changes on the edge by\n * using <moveLabel>, <connect> or <changePoints>.\n */\nmxEdgeHandler.prototype.mouseUp = function(sender, me)\n{\n\t// Workaround for wrong event source in Webkit\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tif (this.shape != null && this.shape.node != null)\n\t\t{\n\t\t\tthis.shape.node.style.display = '';\n\t\t}\n\t\t\n\t\tvar edge = this.state.cell;\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\n\t\t// Ignores event if mouse has not been moved\n\t\tif (me.getX() != this.startX || me.getY() != this.startY)\n\t\t{\n\t\t\tvar clone = !this.graph.isIgnoreTerminalEvent(me.getEvent()) && this.graph.isCloneEvent(me.getEvent()) &&\n\t\t\t\tthis.cloneEnabled && this.graph.isCellsCloneable();\n\t\t\t\n\t\t\t// Displays the reason for not carriying out the change\n\t\t\t// if there is an error message with non-zero length\n\t\t\tif (this.error != null)\n\t\t\t{\n\t\t\t\tif (this.error.length > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute(me);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.shape != null && this.shape.node != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.shape.apply(this.state);\n\t\t\t\t\t\t\tthis.shape.redraw();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.isLabel)\n\t\t\t{\n\t\t\t\tthis.moveLabel(this.state, this.label.x, this.label.y);\n\t\t\t}\n\t\t\telse if (this.isSource || this.isTarget)\n\t\t\t{\n\t\t\t\tvar terminal = null;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tterminal = this.constraintHandler.currentFocus.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal == null && this.marker.hasValidState() && this.marker.highlight != null &&\n\t\t\t\t\tthis.marker.highlight.shape != null &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'transparent' &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'white')\n\t\t\t\t{\n\t\t\t\t\tterminal = this.marker.validState.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\tvar parent = model.getParent(edge);\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// Clones and adds the cell\n\t\t\t\t\t\tif (clone)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\t\t\t\tvar clone = this.graph.cloneCell(edge);\n\t\t\t\t\t\t\tmodel.add(parent, clone, model.getChildCount(parent));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\tmodel.setGeometry(clone, geo);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar other = model.getTerminal(edge, !this.isSource);\n\t\t\t\t\t\t\tthis.graph.connectCell(clone, other, !this.isSource);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tedge = clone;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tedge = this.connect(edge, terminal, this.isSource, clone, me);\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.graph.isAllowDanglingEdges())\n\t\t\t\t{\n\t\t\t\t\tvar pt = this.abspoints[(this.isSource) ? 0 : this.abspoints.length - 1];\n\t\t\t\t\tpt.x = this.roundLength(pt.x / this.graph.view.scale - this.graph.view.translate.x);\n\t\t\t\t\tpt.y = this.roundLength(pt.y / this.graph.view.scale - this.graph.view.translate.y);\n\n\t\t\t\t\tvar pstate = this.graph.getView().getState(\n\t\t\t\t\t\t\tthis.graph.getModel().getParent(edge));\n\t\t\t\t\t\t\t\n\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt.x -= pstate.origin.x;\n\t\t\t\t\t\tpt.y -= pstate.origin.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t// Destroys and recreates this handler\n\t\t\t\t\tedge = this.changeTerminalPoint(edge, pt, this.isSource, clone);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.active)\n\t\t\t{\n\t\t\t\tedge = this.changePoints(edge, this.points, clone);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.graph.getView().invalidate(this.state.cell);\n\t\t\t\tthis.graph.getView().validate(this.state.cell);\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isToggleEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(this.state.cell, me.getEvent());\n\t\t}\n\n\t\t// Resets the preview color the state of the handler if this\n\t\t// handler has not been recreated\n\t\tif (this.marker != null)\n\t\t{\n\t\t\tthis.reset();\n\n\t\t\t// Updates the selection if the edge has been cloned\n\t\t\tif (edge != this.state.cell)\n\t\t\t{\n\t\t\t\tthis.graph.setSelectionCell(edge);\n\t\t\t}\n\t\t}\n\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxEdgeHandler.prototype.reset = function()\n{\n\tif (this.active)\n\t{\n\t\tthis.refresh();\n\t}\n\t\n\tthis.error = null;\n\tthis.index = null;\n\tthis.label = null;\n\tthis.points = null;\n\tthis.snapPoint = null;\n\tthis.isLabel = false;\n\tthis.isSource = false;\n\tthis.isTarget = false;\n\tthis.active = false;\n\t\n\tif (this.livePreview && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.reset();\n\t}\n\t\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].reset();\n\t\t}\n\t}\n\n\tthis.setPreviewColor(mxConstants.EDGE_SELECTION_COLOR);\n\tthis.removeHint();\n\tthis.redraw();\n};\n\n/**\n * Function: setPreviewColor\n * \n * Sets the color of the preview to the given value.\n */\nmxEdgeHandler.prototype.setPreviewColor = function(color)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid. Returns the given, modified\n * point instance.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x);\n\tpoint.y = Math.round(point.y / scale - tr.y);\n\n\tvar pstate = this.graph.getView().getState(\n\t\tthis.graph.getModel().getParent(this.state.cell));\n\n\tif (pstate != null)\n\t{\n\t\tpoint.x -= pstate.origin.x;\n\t\tpoint.y -= pstate.origin.y;\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: moveLabel\n * \n * Changes the coordinates for the label of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * x - Integer that specifies the x-coordinate of the new location.\n * y - Integer that specifies the y-coordinate of the new location.\n */\nmxEdgeHandler.prototype.moveLabel = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tgeometry = geometry.clone();\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\t// Resets the relative location stored inside the geometry\n\t\t\tvar pt = this.graph.getView().getRelativePoint(edgeState, x, y);\n\t\t\tgeometry.x = Math.round(pt.x * 10000) / 10000;\n\t\t\tgeometry.y = Math.round(pt.y);\n\t\t\t\n\t\t\t// Resets the offset inside the geometry to find the offset\n\t\t\t// from the resulting point\n\t\t\tgeometry.offset = new mxPoint(0, 0);\n\t\t\tvar pt = this.graph.view.getPoint(edgeState, geometry);\n\t\t\tgeometry.offset = new mxPoint(Math.round((x - pt.x) / scale), Math.round((y - pt.y) / scale));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar points = edgeState.absolutePoints;\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar cx = p0.x + (pe.x - p0.x) / 2;\n\t\t\t\tvar cy = p0.y + (pe.y - p0.y) / 2;\n\t\t\t\t\n\t\t\t\tgeometry.offset = new mxPoint(Math.round((x - cx) / scale), Math.round((y - cy) / scale));\n\t\t\t\tgeometry.x = 0;\n\t\t\t\tgeometry.y = 0;\n\t\t\t}\n\t\t}\n\n\t\tmodel.setGeometry(edgeState.cell, geometry);\n\t}\n};\n\n/**\n * Function: connect\n * \n * Changes the terminal or terminal point of the given edge in the graph\n * model.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be reconnected.\n * terminal - <mxCell> that represents the new terminal.\n * isSource - Boolean indicating if the new terminal is the source or\n * target terminal.\n * isClone - Boolean indicating if the new connection should be a clone of\n * the old edge.\n * me - <mxMouseEvent> that contains the mouse up event.\n */\nmxEdgeHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(edge);\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar constraint = this.constraintHandler.currentConstraint;\n\t\t\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\n\t\tthis.graph.connectCell(edge, terminal, isSource, constraint);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changeTerminalPoint\n * \n * Changes the terminal point of the given edge.\n */\nmxEdgeHandler.prototype.changeTerminalPoint = function(edge, point, isSource, clone)\n{\n\tvar model = this.graph.getModel();\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar terminal = model.getTerminal(edge, !isSource);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, terminal, !isSource);\n\t\t}\n\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.setTerminalPoint(point, isSource);\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t\tthis.graph.connectCell(edge, null, isSource, new mxConnectionConstraint());\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changePoints\n * \n * Changes the control points of the given edge in the graph model.\n */\nmxEdgeHandler.prototype.changePoints = function(edge, points, clone)\n{\n\tvar model = this.graph.getModel();\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar source = model.getTerminal(edge, true);\n\t\t\tvar target = model.getTerminal(edge, false);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, source, true);\n\t\t\tmodel.setTerminal(edge, target, false);\n\t\t}\n\t\t\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points = points;\n\t\t\t\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: addPoint\n * \n * Adds a control point for the given state and event.\n */\nmxEdgeHandler.prototype.addPoint = function(state, evt)\n{\n\tvar pt = mxUtils.convertPoint(this.graph.container, mxEvent.getClientX(evt),\n\t\t\tmxEvent.getClientY(evt));\n\tvar gridEnabled = this.graph.isGridEnabledEvent(evt);\n\tthis.convertPoint(pt, gridEnabled);\n\tthis.addPointAt(state, pt.x, pt.y);\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: addPointAt\n * \n * Adds a control point at the given point.\n */\nmxEdgeHandler.prototype.addPointAt = function(state, x, y)\n{\n\tvar geo = this.graph.getCellGeometry(state.cell);\n\tvar pt = new mxPoint(x, y);\n\t\n\tif (geo != null)\n\t{\n\t\tgeo = geo.clone();\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar offset = new mxPoint(t.x * s, t.y * s);\n\t\t\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pState = this.graph.view.getState(parent);\n\t\t\toffset = new mxPoint(pState.x, pState.y);\n\t\t}\n\t\t\n\t\tvar index = mxUtils.findNearestSegment(state, pt.x * s + offset.x, pt.y * s + offset.y);\n\n\t\tif (geo.points == null)\n\t\t{\n\t\t\tgeo.points = [pt];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.points.splice(index, 0, pt);\n\t\t}\n\t\t\n\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\tthis.refresh();\t\n\t\tthis.redraw();\n\t}\n};\n\n/**\n * Function: removePoint\n * \n * Removes the control point at the given index from the given state.\n */\nmxEdgeHandler.prototype.removePoint = function(state, index)\n{\n\tif (index > 0 && index < this.abspoints.length - 1)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\t\t\n\t\tif (geo != null && geo.points != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points.splice(index - 1, 1);\n\t\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\t\tthis.refresh();\n\t\t\tthis.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleFillColor\n * \n * Returns the fillcolor for the handle at the given index.\n */\nmxEdgeHandler.prototype.getHandleFillColor = function(index)\n{\n\tvar isSource = index == 0;\n\tvar cell = this.state.cell;\n\tvar terminal = this.graph.getModel().getTerminal(cell, isSource);\n\tvar color = mxConstants.HANDLE_FILLCOLOR;\n\t\n\tif ((terminal != null && !this.graph.isCellDisconnectable(cell, terminal, isSource)) ||\n\t\t(terminal == null && !this.graph.isTerminalPointMovable(cell, isSource)))\n\t{\n\t\tcolor = mxConstants.LOCKED_HANDLE_FILLCOLOR;\n\t}\n\telse if (terminal != null && this.graph.isCellDisconnectable(cell, terminal, isSource))\n\t{\n\t\tcolor = mxConstants.CONNECT_HANDLE_FILLCOLOR;\n\t}\n\t\n\treturn color;\n};\n\n/**\n * Function: redraw\n * \n * Redraws the preview, and the bends- and label control points.\n */\nmxEdgeHandler.prototype.redraw = function(ignoreHandles)\n{\n\tif (this.state != null)\n\t{\n\t\tthis.abspoints = this.state.absolutePoints.slice();\n\t\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\t\t\n\t\tif (g != null)\n\t\t{\n\t\t\tvar pts = g.points;\n\t\t\n\t\t\tif (this.bends != null && this.bends.length > 0)\n\t\t\t{\n\t\t\t\tif (pts != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.points == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points = [];\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.bends[i] != null && this.abspoints[i] != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.points[i - 1] = pts[i - 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.drawPreview();\n\t\t\n\t\tif (!ignoreHandles)\n\t\t{\n\t\t\tthis.redrawHandles();\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles.\n */\nmxEdgeHandler.prototype.redrawHandles = function()\n{\n\tvar cell = this.state.cell;\n\n\t// Updates the handle for the label position\n\tvar b = this.labelShape.bounds;\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape.bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\n\t// Shows or hides the label handle depending on the label\n\tvar lab = this.graph.getLabel(cell);\n\tthis.labelShape.visible = (lab != null && lab.length > 0 && this.graph.isLabelMovable(cell));\n\t\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tvar n = this.abspoints.length - 1;\n\t\t\n\t\tvar p0 = this.abspoints[0];\n\t\tvar x0 = p0.x;\n\t\tvar y0 = p0.y;\n\t\t\n\t\tb = this.bends[0].bounds;\n\t\tthis.bends[0].bounds = new mxRectangle(Math.floor(x0 - b.width / 2),\n\t\t\t\tMath.floor(y0 - b.height / 2), b.width, b.height);\n\t\tthis.bends[0].fill = this.getHandleFillColor(0);\n\t\tthis.bends[0].redraw();\n\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[0].bounds);\n\t\t}\n\t\t\t\t\n\t\tvar pe = this.abspoints[n];\n\t\tvar xn = pe.x;\n\t\tvar yn = pe.y;\n\t\t\n\t\tvar bn = this.bends.length - 1;\n\t\tb = this.bends[bn].bounds;\n\t\tthis.bends[bn].bounds = new mxRectangle(Math.floor(xn - b.width / 2),\n\t\t\t\tMath.floor(yn - b.height / 2), b.width, b.height);\n\t\tthis.bends[bn].fill = this.getHandleFillColor(bn);\n\t\tthis.bends[bn].redraw();\n\t\t\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[bn].bounds);\n\t\t}\n\t\t\n\t\tthis.redrawInnerBends(p0, pe);\n\t}\n\n\tif (this.abspoints != null && this.virtualBends != null && this.virtualBends.length > 0)\n\t{\n\t\tvar last = this.abspoints[0];\n\t\t\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (this.virtualBends[i] != null && this.abspoints[i + 1] != null)\n\t\t\t{\n\t\t\t\tvar pt = this.abspoints[i + 1];\n\t\t\t\tvar b = this.virtualBends[i];\n\t\t\t\tvar x = last.x + (pt.x - last.x) / 2;\n\t\t\t\tvar y = last.y + (pt.y - last.y) / 2;\n\t\t\t\tb.bounds = new mxRectangle(Math.floor(x - b.bounds.width / 2),\n\t\t\t\t\t\tMath.floor(y - b.bounds.height / 2), b.bounds.width, b.bounds.height);\n\t\t\t\tb.redraw();\n\t\t\t\tmxUtils.setOpacity(b.node, this.virtualBendOpacity);\n\t\t\t\tlast = pt;\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(b.bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.redraw();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility =\n\t\t\t\t(this.isCustomHandleVisible(this.customHandles[i])) ?\n\t\t\t\t'' : 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: isCustomHandleVisible\n * \n * Returns true if the given custom handle is visible.\n */\nmxEdgeHandler.prototype.isCustomHandleVisible = function(handle)\n{\n\treturn !this.graph.isEditing() && this.state.view.graph.getSelectionCount() == 1;\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxEdgeHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tthis.bends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tthis.virtualBends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.node.style.display = (visible) ? '' : 'none';\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t{\n\t\tif (this.bends[i] != null)\n\t\t{\n\t\t\tif (this.abspoints[i] != null)\n\t\t\t{\n\t\t\t\tvar x = this.abspoints[i].x;\n\t\t\t\tvar y = this.abspoints[i].y;\n\t\t\t\t\n\t\t\t\tvar b = this.bends[i].bounds;\n\t\t\t\tthis.bends[i].node.style.visibility = 'visible';\n\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - b.width / 2),\n\t\t\t\t\t\tMath.round(y - b.height / 2), b.width, b.height);\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(this.bends[i].bounds);\n\t\t\t\t}\n\t\t\t\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(this.bends[i].bounds, this.labelShape.bounds))\n\t\t\t\t{\n\t\t\t\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - w / 2), Math.round(y - h / 2), w, h);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.bends[i].redraw();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.bends[i].destroy();\n\t\t\t\tthis.bends[i] = null;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: checkLabelHandle\n * \n * Checks if the label handle intersects the given bounds and moves it if it\n * intersects.\n */\nmxEdgeHandler.prototype.checkLabelHandle = function(b)\n{\n\tif (this.labelShape != null)\n\t{\n\t\tvar b2 = this.labelShape.bounds;\n\t\t\n\t\tif (mxUtils.intersects(b, b2))\n\t\t{\n\t\t\tif (b.getCenterY() < b2.getCenterY())\n\t\t\t{\n\t\t\t\tb2.y = b.y + b.height;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb2.y = b.y - b2.height;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxEdgeHandler.prototype.drawPreview = function()\n{\n\ttry\n\t{\n\t\tif (this.isLabel)\n\t\t{\n\t\t\tvar b = this.labelShape.bounds;\n\t\t\tvar bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\t\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\t\t\t\n\t\t\tif (!this.labelShape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tthis.labelShape.bounds = bounds;\n\t\t\t\tthis.labelShape.redraw();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.shape != null && !mxUtils.equalPoints(this.shape.points, this.abspoints))\n\t\t{\n\t\t\tthis.shape.apply(this.state);\n\t\t\tthis.shape.points = this.abspoints.slice();\n\t\t\tthis.shape.scale = this.state.view.scale;\n\t\t\tthis.shape.isDashed = this.isSelectionDashed();\n\t\t\tthis.shape.stroke = this.getSelectionColor();\n\t\t\tthis.shape.strokewidth = this.getSelectionStrokeWidth() / this.shape.scale / this.shape.scale;\n\t\t\tthis.shape.isShadow = false;\n\t\t\tthis.shape.redraw();\n\t\t}\n\t\t\n\t\tthis.updateParentHighlight();\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore\n\t}\n};\n\n/**\n * Function: refresh\n * \n * Refreshes the bends of this handler.\n */\nmxEdgeHandler.prototype.refresh = function()\n{\n\tif (this.state != null)\n\t{\n\t\tthis.abspoints = this.getSelectionPoints(this.state);\n\t\tthis.points = [];\n\t\n\t\tif (this.bends != null)\n\t\t{\n\t\t\tthis.destroyBends(this.bends);\n\t\t\tthis.bends = this.createBends();\n\t\t}\n\t\t\n\t\tif (this.virtualBends != null)\n\t\t{\n\t\t\tthis.destroyBends(this.virtualBends);\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t\t\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tthis.destroyBends(this.customHandles);\n\t\t\tthis.customHandles = this.createCustomHandles();\n\t\t}\n\t\t\n\t\t// Puts label node on top of bends\n\t\tif (this.labelShape != null && this.labelShape.node != null && this.labelShape.node.parentNode != null)\n\t\t{\n\t\t\tthis.labelShape.node.parentNode.appendChild(this.labelShape.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isDestroyed\n * \n * Returns true if <destroy> was called.\n */\nmxEdgeHandler.prototype.isDestroyed = function()\n{\n\treturn this.shape == null;\n};\n\n/**\n * Function: destroyBends\n * \n * Destroys all elements in <bends>.\n */\nmxEdgeHandler.prototype.destroyBends = function(bends)\n{\n\tif (bends != null)\n\t{\n\t\tfor (var i = 0; i < bends.length; i++)\n\t\t{\n\t\t\tif (bends[i] != null)\n\t\t\t{\n\t\t\t\tbends[i].destroy();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called as handlers are destroyed automatically\n * when the corresponding cell is deselected.\n */\nmxEdgeHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\tif (pstate != null && pstate.parentHighlight == this.parentHighlight)\n\t\t{\n\t\t\tpstate.parentHighlight = null;\n\t\t}\n\t\t\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.destroy();\n\t\tthis.labelShape = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\t\n\tthis.destroyBends(this.virtualBends);\n\tthis.virtualBends = null;\n\t\n\tthis.destroyBends(this.customHandles);\n\tthis.customHandles = null;\n\n\tthis.destroyBends(this.bends);\n\tthis.bends = null;\n\t\n\tthis.removeHint();\n};\n\n__mxOutput.mxEdgeHandler = typeof mxEdgeHandler !== 'undefined' ? mxEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxElbowEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler>. It extends <mxEdgeHandler>.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be modified.\n */\nfunction mxElbowEdgeHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxElbowEdgeHandler, mxEdgeHandler);\n\n/**\n * Specifies if a double click on the middle handle should call\n * <mxGraph.flipEdge>. Default is true.\n */\nmxElbowEdgeHandler.prototype.flipEnabled = true;\n\n/**\n * Variable: doubleClickOrientationResource\n * \n * Specifies the resource key for the tooltip to be displayed on the single\n * control point for routed edges. If the resource for this key does not\n * exist then the value is used as the error message. Default is\n * 'doubleClickOrientation'.\n */\nmxElbowEdgeHandler.prototype.doubleClickOrientationResource =\n\t(mxClient.language != 'none') ? 'doubleClickOrientation' : '';\n\n/**\n * Function: createBends\n * \n * Overrides <mxEdgeHandler.createBends> to create custom bends.\n */\n mxElbowEdgeHandler.prototype.createBends = function()\n {\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\t// Virtual\n\tbends.push(this.createVirtualBend(mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt) && this.flipEnabled)\n\t\t{\n\t\t\tthis.graph.flipEdge(this.state.cell, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t})));\n\t\n\tthis.points.push(new mxPoint(0,0));\n\n\t// Target\n\tbend = this.createHandleShape(2);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\t\n\treturn bends;\n };\n\n/**\n * Function: createVirtualBend\n * \n * Creates a virtual bend that supports double clicking and calls\n * <mxGraph.flipEdge>.\n */\nmxElbowEdgeHandler.prototype.createVirtualBend = function(dblClickHandler)\n{\n\tvar bend = this.createHandleShape();\n\tthis.initBend(bend, dblClickHandler);\n\n\tbend.setCursor(this.getCursorForBend());\n\n\tif (!this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tbend.node.style.display = 'none';\n\t}\n\n\treturn bend;\n};\n\n/**\n * Function: getCursorForBend\n * \n * Returns the cursor to be used for the bend.\n */\nmxElbowEdgeHandler.prototype.getCursorForBend = function()\n{\n\treturn (this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.TopToBottom ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_TOPTOBOTTOM ||\n\t\t((this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.ElbowConnector ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_ELBOW)&&\n\t\tthis.state.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL)) ? \n\t\t'row-resize' : 'col-resize';\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns the tooltip for the given node.\n */\nmxElbowEdgeHandler.prototype.getTooltipForNode = function(node)\n{\n\tvar tip = null;\n\t\n\tif (this.bends != null && this.bends[1] != null && (node == this.bends[1].node ||\n\t\tnode.parentNode == this.bends[1].node))\n\t{\n\t\ttip = this.doubleClickOrientationResource;\n\t\ttip = mxResources.get(tip) || tip; // translate\n\t}\n\n\treturn tip;\n};\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxElbowEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\tvar origin = this.state.origin;\n\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x - origin.x);\n\tpoint.y = Math.round(point.y / scale - tr.y - origin.y);\n\t\n\treturn point;\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxElbowEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = this.state.absolutePoints;\n\tvar pt = null;\n\n\t// Keeps the virtual bend on the edge shape\n\tif (pts.length > 1)\n\t{\n\t\tp0 = pts[1];\n\t\tpe = pts[pts.length - 2];\n\t}\n\telse if (g.points != null && g.points.length > 0)\n\t{\n\t\tpt = pts[0];\n\t}\n\t\n\tif (pt == null)\n\t{\n\t\tpt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint(this.graph.getView().scale * (pt.x + this.graph.getView().translate.x + this.state.origin.x),\n\t\t\t\tthis.graph.getView().scale * (pt.y + this.graph.getView().translate.y + this.state.origin.y));\n\t}\n\n\t// Makes handle slightly bigger if the yellow  label handle\n\t// exists and intersects this green handle\n\tvar b = this.bends[1].bounds;\n\tvar w = b.width;\n\tvar h = b.height;\n\tvar bounds = new mxRectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);\n\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(bounds);\n\t}\n\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(bounds, this.labelShape.bounds))\n\t{\n\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\tbounds = new mxRectangle(Math.floor(pt.x - w / 2), Math.floor(pt.y - h / 2), w, h);\n\t}\n\n\tthis.bends[1].bounds = bounds;\n\tthis.bends[1].redraw();\n\t\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(this.bends[1].bounds);\n\t}\n};\n\n__mxOutput.mxElbowEdgeHandler = typeof mxElbowEdgeHandler !== 'undefined' ? mxElbowEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nfunction mxEdgeSegmentHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxEdgeSegmentHandler, mxElbowEdgeHandler);\n\n/**\n * Function: getCurrentPoints\n * \n * Returns the current absolute points.\n */\nmxEdgeSegmentHandler.prototype.getCurrentPoints = function()\n{\n\tvar pts = this.state.absolutePoints;\n\t\n\tif (pts != null)\n\t{\n\t\t// Special case for straight edges where we add a virtual middle handle for moving the edge\n\t\tvar tol = Math.max(1, this.graph.view.scale);\n\t\t\n\t\tif (pts.length == 2 || (pts.length == 3 &&\n\t\t\t(Math.abs(pts[0].x - pts[1].x) < tol && Math.abs(pts[1].x - pts[2].x) < tol ||\n\t\t\tMath.abs(pts[0].y - pts[1].y) < tol && Math.abs(pts[1].y - pts[2].y) < tol)))\n\t\t{\n\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\n\t\t\tpts = [pts[0], new mxPoint(cx, cy), new mxPoint(cx, cy), pts[pts.length - 1]];\t\n\t\t}\n\t}\n\n\treturn pts;\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeSegmentHandler.prototype.getPreviewPoints = function(point)\n{\n\tif (this.isSource || this.isTarget)\n\t{\n\t\treturn mxElbowEdgeHandler.prototype.getPreviewPoints.apply(this, arguments);\n\t}\n\telse\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\tvar last = this.convertPoint(pts[0].clone(), false);\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar result = [];\n\n\t\tfor (var i = 1; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt = this.convertPoint(pts[i].clone(), false);\n\t\t\t\n\t\t\tif (i == this.index)\n\t\t\t{\n\t\t\t\tif (Math.round(last.x - pt.x) == 0)\n\t\t \t\t{\n\t\t\t\t\tlast.x = point.x;\n\t\t\t\t\tpt.x = point.x;\n\t\t \t\t}\n\t\t \t\t\n\t\t\t\tif (Math.round(last.y - pt.y) == 0)\n\t\t \t\t{\n\t\t \t\t\tlast.y = point.y;\n\t\t \t\t\tpt.y = point.y;\n\t\t \t\t}\n\t\t\t}\n\n\t\t\tif (i < pts.length - 1)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t}\n\n\t\t\tlast = pt;\n\t\t}\n\t\t\n\t\t// Replaces single point that intersects with source or target\n\t\tif (result.length == 1)\n\t\t{\n\t\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\t\tvar scale = this.state.view.getScale();\n\t\t\tvar tr = this.state.view.getTranslate();\n\t\t\t\n\t\t\tvar x = result[0].x * scale + tr.x;\n\t\t\tvar y = result[0].y * scale + tr.y;\n\t\t\t\n\t\t\tif ((source != null && mxUtils.contains(source, x, y)) ||\n\t\t\t\t(target != null && mxUtils.contains(target, x, y)))\n\t\t\t{\n\t\t\t\tresult = [point, point];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: updatePreviewState\n * \n * Overridden to perform optimization of the edge style result.\n */\nmxEdgeSegmentHandler.prototype.updatePreviewState = function(edge, point, terminalState, me)\n{\n\tmxEdgeHandler.prototype.updatePreviewState.apply(this, arguments);\n\n\t// Checks and corrects preview by running edge style again\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar pts = edge.absolutePoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t\t\n\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\tvar rpts = this.state.absolutePoints;\n\t\t\n\t\t// A straight line is represented by 3 handles\n\t\tif (result.length == 0 && (Math.round(pts[0].x - pts[pts.length - 1].x) == 0 ||\n\t\t\tMath.round(pts[0].y - pts[pts.length - 1].y) == 0))\n\t\t{\n\t\t\tresult = [point, point];\n\t\t}\n\t\t// Handles special case of transitions from straight vertical to routed\n\t\telse if (pts.length == 5 && result.length == 2 && source != null && target != null &&\n\t\t\t\trpts != null && Math.round(rpts[0].x - rpts[rpts.length - 1].x) == 0)\n\t\t{\n\t\t\tvar view = this.graph.getView();\n\t\t\tvar scale = view.getScale();\n\t\t\tvar tr = view.getTranslate();\n\t\t\t\n\t\t\tvar y0 = view.getRoutingCenterY(source) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\t\t\t\n\t\t\tif (sc != null)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(source, sc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\ty0 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar ye = view.getRoutingCenterY(target) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\t\t\n\t\t\tif (tc)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(target, tc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\tye = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult = [new mxPoint(point.x, y0), new mxPoint(point.x, ye)];\n\t\t}\n\n\t\tthis.points = result;\n\n\t\t// LATER: Check if points and result are different\n\t\tedge.view.updateFixedTerminalPoints(edge, source, target);\n\t\tedge.view.updatePoints(edge, this.points, source, target);\n\t\tedge.view.updateFloatingTerminalPoints(edge, source, target);\n\t}\n};\n\n/**\n * Overriden to merge edge segments.\n */\nmxEdgeSegmentHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar geo = model.getGeometry(edge);\n\tvar result = null;\n\t\n\t// Merges adjacent edge segments\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tvar pts = this.abspoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\t\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (result != null)\n\t\t{\n\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.points = result;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge = mxEdgeHandler.prototype.connect.apply(this, arguments);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns no tooltips.\n */\nmxEdgeSegmentHandler.prototype.getTooltipForNode = function(node)\n{\n\treturn null;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxEdgeSegmentHandler.prototype.start = function(x, y, index)\n{\n\tmxEdgeHandler.prototype.start.apply(this, arguments);\n\t\n\tif (this.bends != null && this.bends[index] != null &&\n\t\t!this.isSource && !this.isTarget)\n\t{\n\t\tmxUtils.setOpacity(this.bends[index].node, 100);\n\t}\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.createBends = function()\n{\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\tvar pts = this.getCurrentPoints();\n\n\t// Waypoints (segment handles)\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tif (this.points == null)\n\t\t{\n\t\t\tthis.points = [];\n\t\t}\n\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tbend = this.createVirtualBend();\n\t\t\tbends.push(bend);\n\t\t\tvar horizontal = Math.round(pts[i].x - pts[i + 1].x) == 0;\n\t\t\t\n\t\t\t// Special case where dy is 0 as well\n\t\t\tif (Math.round(pts[i].y - pts[i + 1].y) == 0 && i < pts.length - 2)\n\t\t\t{\n\t\t\t\thorizontal = Math.round(pts[i].x - pts[i + 2].x) == 0;\n\t\t\t}\n\t\t\t\n\t\t\tbend.setCursor((horizontal) ? 'col-resize' : 'row-resize');\n\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t}\n\t}\n\n\t// Target\n\tvar bend = this.createHandleShape(pts.length);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\treturn bends;\n};\n\n/**\n * Function: redraw\n * \n * Overridden to invoke <refresh> before the redraw.\n */\nmxEdgeSegmentHandler.prototype.redraw = function()\n{\n\tthis.refresh();\n\tmxEdgeHandler.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates the position of the custom bends.\n */\nmxEdgeSegmentHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\t\n\t\tif (pts != null && pts.length > 1)\n\t\t{\n\t\t\tvar straight = false;\n\t\t\t\n\t\t\t// Puts handle in the center of straight edges\n\t\t\tif (pts.length == 4 && Math.round(pts[1].x - pts[2].x) == 0 && Math.round(pts[1].y - pts[2].y) == 0)\n\t\t\t{\n\t\t\t\tstraight = true;\n\t\t\t\t\n\t\t\t\tif (Math.round(pts[0].y - pts[pts.length - 1].y) == 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(cx, pts[1].y);\n\t\t\t\t\tpts[2] = new mxPoint(cx, pts[2].y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(pts[1].x, cy);\n\t\t\t\t\tpts[2] = new mxPoint(pts[2].x, cy);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i + 1] != null)\n\t\t\t\t{\n\t\t \t\t\tvar p0 = pts[i];\n\t \t\t\t\tvar pe = pts[i + 1];\n\t\t\t \t\tvar pt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t\t\t \t\tvar b = this.bends[i + 1].bounds;\n\t\t\t \t\tthis.bends[i + 1].bounds = new mxRectangle(Math.floor(pt.x - b.width / 2),\n\t\t\t \t\t\t\tMath.floor(pt.y - b.height / 2), b.width, b.height);\n\t\t\t\t \tthis.bends[i + 1].redraw();\n\t\t\t\t \t\n\t\t\t\t \tif (this.manageLabelHandle)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.checkLabelHandle(this.bends[i + 1].bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (straight)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.bends[1].node, this.virtualBendOpacity);\n\t\t\t\tmxUtils.setOpacity(this.bends[3].node, this.virtualBendOpacity);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeSegmentHandler = typeof mxEdgeSegmentHandler !== 'undefined' ? mxEdgeSegmentHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxKeyHandler\n *\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n * \n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descandants of <mxGraph.container>\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the <graph>.\n * \n * Example:\n * \n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n * \n * (code)\n * var keyHandler = new mxKeyHandler(graph);\n * keyHandler.bindKey(46, function(evt)\n * {\n *   if (graph.isEnabled())\n *   {\n *     graph.removeCells();\n *   }\n * });\n * (end)\n * \n * Keycodes:\n * \n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n * \n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * (code)\n * keyHandler.getFunction = function(evt)\n * {\n *   if (evt != null)\n *   {\n *     return (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *   \n *   return null;\n * };\n * (end)\n * \n * Constructor: mxKeyHandler\n *\n * Constructs an event handler that executes functions bound to specific\n * keystrokes.\n * \n * Parameters:\n * \n * graph - Reference to the associated <mxGraph>.\n * target - Optional reference to the event target. If null, the document\n * element is used as the event target, that is, the object where the key\n * event listener is installed.\n */\nfunction mxKeyHandler(graph, target)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.target = target || document.documentElement;\n\t\t\n\t\t// Creates the arrays to map from keycodes to functions\n\t\tthis.normalKeys = [];\n\t\tthis.shiftKeys = [];\n\t\tthis.controlKeys = [];\n\t\tthis.controlShiftKeys = [];\n\t\t\n\t\tthis.keydownHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.keyDown(evt);\n\t\t});\n\n\t\t// Installs the keystroke listener in the target\n\t\tmxEvent.addListener(this.target, 'keydown', this.keydownHandler);\n\t\t\n\t\t// Automatically deallocates memory in IE\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> associated with this handler.\n */\nmxKeyHandler.prototype.graph = null;\n\n/**\n * Variable: target\n * \n * Reference to the target DOM, that is, the DOM node where the key event\n * listeners are installed.\n */\nmxKeyHandler.prototype.target = null;\n\n/**\n * Variable: normalKeys\n * \n * Maps from keycodes to functions for non-pressed control keys.\n */\nmxKeyHandler.prototype.normalKeys = null;\n\n/**\n * Variable: shiftKeys\n * \n * Maps from keycodes to functions for pressed shift keys.\n */\nmxKeyHandler.prototype.shiftKeys = null;\n\n/**\n * Variable: controlKeys\n * \n * Maps from keycodes to functions for pressed control keys.\n */\nmxKeyHandler.prototype.controlKeys = null;\n\n/**\n * Variable: controlShiftKeys\n * \n * Maps from keycodes to functions for pressed control and shift keys.\n */\nmxKeyHandler.prototype.controlShiftKeys = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxKeyHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxKeyHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling by updating <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxKeyHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: bindKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is not pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindKey = function(code, funct)\n{\n\tthis.normalKeys[code] = funct;\n};\n\n/**\n * Function: bindShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the shift key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindShiftKey = function(code, funct)\n{\n\tthis.shiftKeys[code] = funct;\n};\n\n/**\n * Function: bindControlKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlKey = function(code, funct)\n{\n\tthis.controlKeys[code] = funct;\n};\n\n/**\n * Function: bindControlShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control and shift key are pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlShiftKey = function(code, funct)\n{\n\tthis.controlShiftKeys[code] = funct;\n};\n\n/**\n * Function: isControlDown\n * \n * Returns true if the control key is pressed. This uses <mxEvent.isControlDown>.\n * \n * Parameters:\n * \n * evt - Key event whose control key pressed state should be returned.\n */\nmxKeyHandler.prototype.isControlDown = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: getFunction\n * \n * Returns the function associated with the given key event or null if no\n * function is associated with the given event.\n * \n * Parameters:\n * \n * evt - Key event whose associated function should be returned.\n */\nmxKeyHandler.prototype.getFunction = function(evt)\n{\n\tif (evt != null && !mxEvent.isAltDown(evt))\n\t{\n\t\tif (this.isControlDown(evt))\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.controlShiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.controlKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.shiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.normalKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\t\n/**\n * Function: isGraphEvent\n * \n * Returns true if the event should be processed by this handler, that is,\n * if the event source is either the target, one of its direct children, a\n * descendant of the <mxGraph.container>, or the <mxGraph.cellEditor> of the\n * <graph>.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isGraphEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\t\n\t// Accepts events from the target object or\n\t// in-place editing inside graph\n\tif ((source == this.target || source.parentNode == this.target) ||\n\t\t(this.graph.cellEditor != null && this.graph.cellEditor.isEventSource(evt)))\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Accepts events from inside the container\n\treturn mxUtils.isAncestorNode(this.graph.container, source);\n};\n\n/**\n * Function: keyDown\n * \n * Handles the event by invoking the function bound to the respective keystroke\n * if <isEnabledForEvent> returns true for the given event and if\n * <isEventIgnored> returns false, except for escape for which\n * <isEventIgnored> is not invoked.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.keyDown = function(evt)\n{\n\tif (this.isEnabledForEvent(evt))\n\t{\n\t\t// Cancels the editing if escape is pressed\n\t\tif (evt.keyCode == 27 /* Escape */)\n\t\t{\n\t\t\tthis.escape(evt);\n\t\t}\n\t\t\n\t\t// Invokes the function for the keystroke\n\t\telse if (!this.isEventIgnored(evt))\n\t\t{\n\t\t\tvar boundFunction = this.getFunction(evt);\n\t\t\t\n\t\t\tif (boundFunction != null)\n\t\t\t{\n\t\t\t\tboundFunction(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the given event should be handled. <isEventIgnored> is\n * called later if the event is not an escape key stroke, in which case\n * <escape> is called. This implementation returns true if <isEnabled>\n * returns true for both, this handler and <graph>, if the event is not\n * consumed and if <isGraphEvent> returns true.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEnabledForEvent = function(evt)\n{\n\treturn (this.graph.isEnabled() && !mxEvent.isConsumed(evt) &&\n\t\tthis.isGraphEvent(evt) && this.isEnabled());\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given keystroke should be ignored. This returns\n * graph.isEditing().\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEventIgnored = function(evt)\n{\n\treturn this.graph.isEditing();\n};\n\n/**\n * Function: escape\n * \n * Hook to process ESCAPE keystrokes. This implementation invokes\n * <mxGraph.stopEditing> to cancel the current editing, connecting\n * and/or other ongoing modifications.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke. Possible keycode in this\n * case is 27 (ESCAPE).\n */\nmxKeyHandler.prototype.escape = function(evt)\n{\n\tif (this.graph.isEscapeEnabled())\n\t{\n\t\tthis.graph.escape(evt);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its references into the DOM. This does\n * normally not need to be called, it is called automatically when the\n * window unloads (in IE).\n */\nmxKeyHandler.prototype.destroy = function()\n{\n\tif (this.target != null && this.keydownHandler != null)\n\t{\n\t\tmxEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n\t\tthis.keydownHandler = null;\n\t}\n\t\n\tthis.target = null;\n};\n\n__mxOutput.mxKeyHandler = typeof mxKeyHandler !== 'undefined' ? mxKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTooltipHandler\n * \n * Graph event handler that displays tooltips. <mxGraph.getTooltip> is used to\n * get the tooltip for a cell or handle. This handler is built-into\n * <mxGraph.tooltipHandler> and enabled using <mxGraph.setTooltips>.\n *\n * Example:\n * \n * (code>\n * new mxTooltipHandler(graph);\n * (end)\n * \n * Constructor: mxTooltipHandler\n * \n * Constructs an event handler that displays tooltips with the specified\n * delay (in milliseconds). If no delay is specified then a default delay\n * of 500 ms (0.5 sec) is used.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * delay - Optional delay in milliseconds.\n */\nfunction mxTooltipHandler(graph, delay)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.delay = delay || 500;\n\t\tthis.graph.addMouseListener(this);\n\t}\n};\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the tooltip and its shadow. Default is 10005.\n */\nmxTooltipHandler.prototype.zIndex = 10005;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxTooltipHandler.prototype.graph = null;\n\n/**\n * Variable: delay\n * \n * Delay to show the tooltip in milliseconds. Default is 500.\n */\nmxTooltipHandler.prototype.delay = null;\n\n/**\n * Variable: ignoreTouchEvents\n * \n * Specifies if touch and pen events should be ignored. Default is true.\n */\nmxTooltipHandler.prototype.ignoreTouchEvents = true;\n\n/**\n * Variable: hideOnHover\n * \n * Specifies if the tooltip should be hidden if the mouse is moved over the\n * current cell. Default is false.\n */\nmxTooltipHandler.prototype.hideOnHover = false;\n\n/**\n * Variable: destroyed\n * \n * True if this handler was destroyed using <destroy>.\n */\nmxTooltipHandler.prototype.destroyed = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxTooltipHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxTooltipHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxTooltipHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isHideOnHover\n * \n * Returns <hideOnHover>.\n */\nmxTooltipHandler.prototype.isHideOnHover = function()\n{\n\treturn this.hideOnHover;\n};\n\n/**\n * Function: setHideOnHover\n * \n * Sets <hideOnHover>.\n */\nmxTooltipHandler.prototype.setHideOnHover = function(value)\n{\n\tthis.hideOnHover = value;\n};\n\n/**\n * Function: init\n * \n * Initializes the DOM nodes required for this tooltip handler.\n */\nmxTooltipHandler.prototype.init = function()\n{\n\tif (document.body != null)\n\t{\n\t\tthis.div = document.createElement('div');\n\t\tthis.div.className = 'mxTooltip';\n\t\tthis.div.style.visibility = 'hidden';\n\n\t\tdocument.body.appendChild(this.div);\n\n\t\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar source = mxEvent.getSource(evt);\n\t\t\t\n\t\t\tif (source.nodeName != 'A')\n\t\t\t{\n\t\t\t\tthis.hideTooltip();\n\t\t\t}\n\t\t}));\n\t}\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the <mxCellState> to be used for showing a tooltip for this event.\n */\nmxTooltipHandler.prototype.getStateForEvent = function(me)\n{\n\treturn me.getState();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxTooltipHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.reset(me, false);\n\tthis.hideTooltip();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the rubberband selection.\n */\nmxTooltipHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (me.getX() != this.lastX || me.getY() != this.lastY)\n\t{\n\t\tthis.reset(me, true);\n\t\tvar state = this.getStateForEvent(me);\n\t\t\n\t\tif (this.isHideOnHover() || state != this.state || (me.getSource() != this.node &&\n\t\t\t(!this.stateSource || (state != null && this.stateSource ==\n\t\t\t(me.isSource(state.shape) || !me.isSource(state.text))))))\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}\n\t}\n\t\n\tthis.lastX = me.getX();\n\tthis.lastY = me.getY();\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by resetting the tooltip timer or hiding the existing\n * tooltip.\n */\nmxTooltipHandler.prototype.mouseUp = function(sender, me)\n{\n\tthis.reset(me, true);\n\tthis.hideTooltip();\n};\n\n\n/**\n * Function: resetTimer\n * \n * Resets the timer.\n */\nmxTooltipHandler.prototype.resetTimer = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearTimeout(this.thread);\n\t\tthis.thread = null;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets and/or restarts the timer to trigger the display of the tooltip.\n */\nmxTooltipHandler.prototype.reset = function(me, restart, state)\n{\n\tif (!this.ignoreTouchEvents || mxEvent.isMouseEvent(me.getEvent()))\n\t{\n\t\tthis.resetTimer();\n\t\tstate = (state != null) ? state : this.getStateForEvent(me);\n\t\t\n\t\tif (restart && this.isEnabled() && state != null && (this.div == null ||\n\t\t\tthis.div.style.visibility == 'hidden'))\n\t\t{\n\t\t\tvar node = me.getSource();\n\t\t\tvar x = me.getX();\n\t\t\tvar y = me.getY();\n\t\t\tvar stateSource = me.isSource(state.shape) || me.isSource(state.text);\n\t\n\t\t\tthis.thread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (!this.graph.isEditing() && !this.graph.popupMenuHandler.isMenuShowing() && !this.graph.isMouseDown)\n\t\t\t\t{\n\t\t\t\t\t// Uses information from inside event cause using the event at\n\t\t\t\t\t// this (delayed) point in time is not possible in IE as it no\n\t\t\t\t\t// longer contains the required information (member not found)\n\t\t\t\t\tvar tip = this.graph.getTooltip(state, node, x, y);\n\t\t\t\t\tthis.show(tip, x, y);\n\t\t\t\t\tthis.state = state;\n\t\t\t\t\tthis.node = node;\n\t\t\t\t\tthis.stateSource = stateSource;\n\t\t\t\t}\n\t\t\t}), this.delay);\n\t\t}\n\t}\n};\n\n/**\n * Function: hide\n * \n * Hides the tooltip and resets the timer.\n */\nmxTooltipHandler.prototype.hide = function()\n{\n\tthis.resetTimer();\n\tthis.hideTooltip();\n};\n\n/**\n * Function: hideTooltip\n * \n * Hides the tooltip.\n */\nmxTooltipHandler.prototype.hideTooltip = function()\n{\n\tif (this.div != null)\n\t{\n\t\tthis.div.style.visibility = 'hidden';\n\t\tthis.div.innerHTML = '';\n\t}\n};\n\n/**\n * Function: show\n * \n * Shows the tooltip for the specified cell and optional index at the\n * specified location (with a vertical offset of 10 pixels).\n */\nmxTooltipHandler.prototype.show = function(tip, x, y)\n{\n\tif (!this.destroyed && tip != null && tip.length > 0)\n\t{\n\t\t// Initializes the DOM nodes if required\n\t\tif (this.div == null)\n\t\t{\n\t\t\tthis.init();\n\t\t}\n\t\t\n\t\tvar origin = mxUtils.getScrollOrigin();\n\n\t\tthis.div.style.zIndex = this.zIndex;\n\t\tthis.div.style.left = (x + origin.x) + 'px';\n\t\tthis.div.style.top = (y + mxConstants.TOOLTIP_VERTICAL_OFFSET +\n\t\t\torigin.y) + 'px';\n\n\t\tif (!mxUtils.isNode(tip))\n\t\t{\t\n\t\t\tthis.div.innerHTML = tip.replace(/\\n/g, '<br>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.innerHTML = '';\n\t\t\tthis.div.appendChild(tip);\n\t\t}\n\t\t\n\t\tthis.div.style.visibility = '';\n\t\tmxUtils.fit(this.div);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxTooltipHandler.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div != null && this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.destroyed = true;\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxTooltipHandler = typeof mxTooltipHandler !== 'undefined' ? mxTooltipHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellTracker\n * \n * Event handler that highlights cells. Inherits from <mxCellMarker>.\n * \n * Example:\n * \n * (code)\n * new mxCellTracker(graph, '#00FF00');\n * (end)\n * \n * For detecting dragEnter, dragOver and dragLeave on cells, the following\n * code can be used:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *     \n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *       \n *       this.cell = tmp;\n *       \n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *     \n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     mxLog.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     mxLog.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     mxLog.debug('dragLeave', cell.value);\n *   }\n * });\n * (end)\n * \n * Constructor: mxCellTracker\n * \n * Constructs an event handler that highlights cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * color - Color of the highlight. Default is blue.\n * funct - Optional JavaScript function that is used to override\n * <mxCellMarker.getCell>.\n */\nfunction mxCellTracker(graph, color, funct)\n{\n\tmxCellMarker.call(this, graph, color);\n\n\tthis.graph.addMouseListener(this);\n\t\n\tif (funct != null)\n\t{\n\t\tthis.getCell = funct;\n\t}\n\t\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t}\n};\n\n/**\n * Extends mxCellMarker.\n */\nmxUtils.extend(mxCellTracker, mxCellMarker);\n\n/**\n * Function: mouseDown\n * \n * Ignores the event. The event is not consumed.\n */\nmxCellTracker.prototype.mouseDown = function(sender, me) { };\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting the cell under the mousepointer if it\n * is over the hotspot region of the cell.\n */\nmxCellTracker.prototype.mouseMove = function(sender, me)\n{\n\tif (this.isEnabled())\n\t{\n\t\tthis.process(me);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by reseting the highlight.\n */\nmxCellTracker.prototype.mouseUp = function(sender, me) { };\n\n/**\n * Function: destroy\n * \n * Destroys the object and all its resources and DOM nodes. This doesn't\n * normally need to be called. It is called automatically when the window\n * unloads.\n */\nmxCellTracker.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxCellMarker.prototype.destroy.apply(this);\n\t}\n};\n\n__mxOutput.mxCellTracker = typeof mxCellTracker !== 'undefined' ? mxCellTracker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellHighlight\n * \n * A helper class to highlight cells. Here is an example for a given cell.\n * \n * (code)\n * var highlight = new mxCellHighlight(graph, '#ff0000', 2);\n * highlight.highlight(graph.view.getState(cell)));\n * (end)\n * \n * Constructor: mxCellHighlight\n * \n * Constructs a cell highlight.\n */\nfunction mxCellHighlight(graph, highlightColor, strokeWidth, dashed)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.highlightColor = (highlightColor != null) ? highlightColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.strokeWidth = (strokeWidth != null) ? strokeWidth : mxConstants.HIGHLIGHT_STROKEWIDTH;\n\t\tthis.dashed = (dashed != null) ? dashed : false;\n\t\tthis.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\n\t\t// Updates the marker if the graph changes\n\t\tthis.repaintHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Updates reference to state\n\t\t\tif (this.state != null)\n\t\t\t{\n\t\t\t\tvar tmp = this.graph.view.getState(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (tmp == null)\n\t\t\t\t{\n\t\t\t\t\tthis.hide();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.state = tmp;\n\t\t\t\t\tthis.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.SCALE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.repaintHandler);\n\t\t\n\t\t// Hides the marker if the current root changes\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.hide();\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.DOWN, this.resetHandler);\n\t\tthis.graph.getView().addListener(mxEvent.UP, this.resetHandler);\n\t}\n};\n\n/**\n * Variable: keepOnTop\n * \n * Specifies if the highlights should appear on top of everything\n * else in the overlay pane. Default is false.\n */\nmxCellHighlight.prototype.keepOnTop = false;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellHighlight.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState>.\n */\nmxCellHighlight.prototype.state = null;\n\n/**\n * Variable: spacing\n * \n * Specifies the spacing between the highlight for vertices and the vertex.\n * Default is 2.\n */\nmxCellHighlight.prototype.spacing = 2;\n\n/**\n * Variable: resetHandler\n * \n * Holds the handler that automatically invokes reset if the highlight\n * should be hidden.\n */\nmxCellHighlight.prototype.resetHandler = null;\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxCellHighlight.prototype.setHighlightColor = function(color)\n{\n\tthis.highlightColor = color;\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n/**\n * Function: drawHighlight\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.drawHighlight = function()\n{\n\tthis.shape = this.createShape();\n\tthis.repaint();\n\n\tif (!this.keepOnTop && this.shape.node.parentNode.firstChild != this.shape.node)\n\t{\n\t\tthis.shape.node.parentNode.insertBefore(this.shape.node, this.shape.node.parentNode.firstChild);\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.createShape = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\t\n\tshape.svgStrokeTolerance = this.graph.tolerance;\n\tshape.points = this.state.absolutePoints;\n\tshape.apply(this.state);\n\tshape.stroke = this.highlightColor;\n\tshape.opacity = this.opacity;\n\tshape.isDashed = this.dashed;\n\tshape.isShadow = false;\n\t\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n\t\n\tif (this.graph.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.pointerEvents = false;\n\t}\n\telse\n\t{\n\t\tshape.svgPointerEvents = 'stroke';\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: getStrokeWidth\n * \n * Returns the stroke width.\n */\nmxCellHighlight.prototype.getStrokeWidth = function(state)\n{\n\treturn this.strokeWidth;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.repaint = function()\n{\n\tif (this.state != null && this.shape != null)\n\t{\n\t\tthis.shape.scale = this.state.view.scale;\n\t\t\n\t\tif (this.graph.model.isEdge(this.state.cell))\n\t\t{\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth();\n\t\t\tthis.shape.points = this.state.absolutePoints;\n\t\t\tthis.shape.outline = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.shape.bounds = new mxRectangle(this.state.x - this.spacing, this.state.y - this.spacing,\n\t\t\t\t\tthis.state.width + 2 * this.spacing, this.state.height + 2 * this.spacing);\n\t\t\tthis.shape.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth() / this.state.view.scale;\n\t\t\tthis.shape.outline = true;\n\t\t}\n\n\t\t// Uses cursor from shape in highlight\n\t\tif (this.state.shape != null)\n\t\t{\n\t\t\tthis.shape.setCursor(this.state.shape.getCursor());\n\t\t}\n\t\t\n\t\t// Workaround for event transparency in VML with transparent color\n\t\t// is to use a non-transparent color with near zero opacity\n\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t{\n\t\t\tif (this.shape.stroke == 'transparent')\n\t\t\t{\n\t\t\t\t// KNOWN: Quirks mode does not seem to catch events if\n\t\t\t\t// we do not force an update of the DOM via a change such\n\t\t\t\t// as mxLog.debug. Since IE6 is EOL we do not add a fix.\n\t\t\t\tthis.shape.stroke = 'white';\n\t\t\t\tthis.shape.opacity = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.shape.opacity = this.opacity;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: hide\n * \n * Resets the state of the cell marker.\n */\nmxCellHighlight.prototype.hide = function()\n{\n\tthis.highlight(null);\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellHighlight.prototype.highlight = function(state)\n{\n\tif (this.state != state)\n\t{\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.destroy();\n\t\t\tthis.shape = null;\n\t\t}\n\n\t\tthis.state = state;\n\t\t\n\t\tif (this.state != null)\n\t\t{\n\t\t\tthis.drawHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHighlightAt\n * \n * Returns true if this highlight is at the given position.\n */\nmxCellHighlight.prototype.isHighlightAt = function(x, y)\n{\n\tvar hit = false;\n\t\n\t// Quirks mode is currently not supported as it used a different coordinate system\n\tif (this.shape != null && document.elementFromPoint != null && !mxClient.IS_QUIRKS)\n\t{\n\t\tvar elt = document.elementFromPoint(x, y);\n\n\t\twhile (elt != null)\n\t\t{\n\t\t\tif (elt == this.shape.node)\n\t\t\t{\n\t\t\t\thit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\t\n\treturn hit;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellHighlight.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getView().removeListener(this.repaintHandler);\n\tthis.graph.getModel().removeListener(this.repaintHandler);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxCellHighlight = typeof mxCellHighlight !== 'undefined' ? mxCellHighlight : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultKeyHandler\n *\n * Binds keycodes to actionnames in an editor. This aggregates an internal\n * <handler> and extends the implementation of <mxKeyHandler.escape> to not\n * only cancel the editing, but also hide the properties dialog and fire an\n * <mxEditor.escape> event via <editor>. An instance of this class is created\n * by <mxEditor> and stored in <mxEditor.keyHandler>.\n * \n * Example:\n * \n * Bind the delete key to the delete action in an existing editor.\n * \n * (code)\n * var keyHandler = new mxDefaultKeyHandler(editor);\n * keyHandler.bindAction(46, 'delete');\n * (end)\n *\n * Codec:\n * \n * This class uses the <mxDefaultKeyHandlerCodec> to read configuration\n * data into an existing instance. See <mxDefaultKeyHandlerCodec> for a\n * description of the configuration format.\n * \n * Keycodes:\n * \n * See <mxKeyHandler>.\n * \n * An <mxEvent.ESCAPE> event is fired via the editor if the escape key is\n * pressed.\n * \n * Constructor: mxDefaultKeyHandler\n *\n * Constructs a new default key handler for the <mxEditor.graph> in the\n * given <mxEditor>. (The editor may be null if a prototypical instance for\n * a <mxDefaultKeyHandlerCodec> is created.)\n * \n * Parameters:\n * \n * editor - Reference to the enclosing <mxEditor>.\n */\nfunction mxDefaultKeyHandler(editor)\n{\n\tif (editor != null)\n\t{\n\t\tthis.editor = editor;\n\t\tthis.handler = new mxKeyHandler(editor.graph);\n\t\t\n\t\t// Extends the escape function of the internal key\n\t\t// handle to hide the properties dialog and fire\n\t\t// the escape event via the editor instance\n\t\tvar old = this.handler.escape;\n\t\t\n\t\tthis.handler.escape = function(evt)\n\t\t{\n\t\t\told.apply(this, arguments);\n\t\t\teditor.hideProperties();\n\t\t\teditor.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n\t\t};\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.editor = null;\n\n/**\n * Variable: handler\n *\n * Holds the <mxKeyHandler> for key event handling.\n */\nmxDefaultKeyHandler.prototype.handler = null;\n\n/**\n * Function: bindAction\n *\n * Binds the specified keycode to the given action in <editor>. The\n * optional control flag specifies if the control key must be pressed\n * to trigger the action.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * action - Name of the action to execute in <editor>.\n * control - Optional boolean that specifies if control must be pressed.\n * Default is false.\n */\nmxDefaultKeyHandler.prototype.bindAction = function (code, action, control)\n{\n\tvar keyHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\n\t// Binds the function to control-down keycode\n\tif (control)\n\t{\n\t\tthis.handler.bindControlKey(code, keyHandler);\n\t}\n\n\t// Binds the function to the normal keycode\n\telse\n\t{\n\t\tthis.handler.bindKey(code, keyHandler);\t\t\t\t\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the <handler> associated with this object. This does normally\n * not need to be called, the <handler> is destroyed automatically when the\n * window unloads (in IE) by <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.destroy = function ()\n{\n\tthis.handler.destroy();\n\tthis.handler = null;\n};\n\n__mxOutput.mxDefaultKeyHandler = typeof mxDefaultKeyHandler !== 'undefined' ? mxDefaultKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultPopupMenu\n *\n * Creates popupmenus for mouse events. This object holds an XML node\n * which is a description of the popup menu to be created. In\n * <createMenu>, the configuration is applied to the context and\n * the resulting menu items are added to the menu dynamically. See\n * <createMenu> for a description of the configuration format.\n * \n * This class does not create the DOM nodes required for the popup menu, it\n * only parses an XML description to invoke the respective methods on an\n * <mxPopupMenu> each time the menu is displayed.\n *\n * Codec:\n * \n * This class uses the <mxDefaultPopupMenuCodec> to read configuration\n * data into an existing instance, however, the actual parsing is done\n * by this class during program execution, so the format is described\n * below.\n * \n * Constructor: mxDefaultPopupMenu\n *\n * Constructs a new popupmenu-factory based on given configuration.\n *\n * Paramaters:\n *\n * config - XML node that contains the configuration data.\n */\nfunction mxDefaultPopupMenu(config)\n{\n\tthis.config = config;\n};\n\n/**\n * Variable: imageBasePath\n *\n * Base path for all icon attributes in the config. Default is null.\n */\nmxDefaultPopupMenu.prototype.imageBasePath = null;\n\n/**\n * Variable: config\n *\n * XML node used as the description of new menu items. This node is\n * used in <createMenu> to dynamically create the menu items if their\n * respective conditions evaluate to true for the given arguments.\n */\nmxDefaultPopupMenu.prototype.config = null;\n\n/**\n * Function: createMenu\n *\n * This function is called from <mxEditor> to add items to the\n * given menu based on <config>. The config is a sequence of\n * the following nodes and attributes.\n *\n * Child Nodes: \n *\n * add - Adds a new menu item. See below for attributes.\n * separator - Adds a separator. No attributes.\n * condition - Adds a custom condition. Name attribute.\n * \n * The add-node may have a child node that defines a function to be invoked\n * before the action is executed (or instead of an action to be executed).\n *\n * Attributes:\n *\n * as - Resource key for the label (needs entry in property file).\n * action - Name of the action to execute in enclosing editor.\n * icon - Optional icon (relative/absolute URL).\n * iconCls - Optional CSS class for the icon.\n * if - Optional name of condition that must be true (see below).\n * enabled-if - Optional name of condition that specifies if the menu item\n * should be enabled.\n * name - Name of custom condition. Only for condition nodes.\n *\n * Conditions:\n *\n * nocell - No cell under the mouse.\n * ncells - More than one cell selected.\n * notRoot - Drilling position is other than home.\n * cell - Cell under the mouse.\n * notEmpty - Exactly one cell with children under mouse.\n * expandable - Exactly one expandable cell under mouse.\n * collapsable - Exactly one collapsable cell under mouse.\n * validRoot - Exactly one cell which is a possible root under mouse.\n * swimlane - Exactly one cell which is a swimlane under mouse.\n *\n * Example:\n *\n * To add a new item for a given action to the popupmenu:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"delete\" action=\"delete\" icon=\"images/delete.gif\" if=\"cell\"/>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * To add a new item for a custom function:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"action1\"><![CDATA[\n *\t\tfunction (editor, cell, evt)\n *\t\t{\n *\t\t\teditor.execute('action1', cell, 'myArg');\n *\t\t}\n *   ]]></add>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * The above example invokes action1 with an additional third argument via\n * the editor instance. The third argument is passed to the function that\n * defines action1. If the add-node has no action-attribute, then only the\n * function defined in the text content is executed, otherwise first the\n * function and then the action defined in the action-attribute is\n * executed. The function in the text content has 3 arguments, namely the\n * <mxEditor> instance, the <mxCell> instance under the mouse, and the\n * native mouse event.\n *\n * Custom Conditions:\n *\n * To add a new condition for popupmenu items:\n *  \n * (code)\n * <condition name=\"condition1\"><![CDATA[\n *   function (editor, cell, evt)\n *   {\n *     return cell != null;\n *   }\n * ]]></condition>\n * (end)\n * \n * The new condition can then be used in any item as follows:\n * \n * (code)\n * <add as=\"action1\" action=\"action1\" icon=\"action1.gif\" if=\"condition1\"/>\n * (end)\n * \n * The order in which the items and conditions appear is not significant as\n * all connditions are evaluated before any items are created.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu. \n */\nmxDefaultPopupMenu.prototype.createMenu = function(editor, menu, cell, evt)\n{\n\tif (this.config != null)\n\t{\n\t\tvar conditions = this.createConditions(editor, cell, evt);\n\t\tvar item = this.config.firstChild;\n\n\t\tthis.addItems(editor, menu, cell, evt, conditions, item, null);\n\t}\n};\n\n/**\n * Function: addItems\n * \n * Recursively adds the given items and all of its children into the given menu.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu.\n * conditions - Array of names boolean conditions.\n * item - XML node that represents the current menu item.\n * parent - DOM node that represents the parent menu item.\n */\nmxDefaultPopupMenu.prototype.addItems = function(editor, menu, cell, evt, conditions, item, parent)\n{\n\tvar addSeparator = false;\n\t\n\twhile (item != null)\n\t{\n\t\tif (item.nodeName == 'add')\n\t\t{\n\t\t\tvar condition = item.getAttribute('if');\n\t\t\t\n\t\t\tif (condition == null || conditions[condition])\n\t\t\t{\n\t\t\t\tvar as = item.getAttribute('as');\n\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(item));\n\t\t\t\tvar action = item.getAttribute('action');\n\t\t\t\tvar icon = item.getAttribute('icon');\n\t\t\t\tvar iconCls = item.getAttribute('iconCls');\n\t\t\t\tvar enabledCond = item.getAttribute('enabled-if');\n\t\t\t\tvar enabled = enabledCond == null || conditions[enabledCond];\n\t\t\t\t\n\t\t\t\tif (addSeparator)\n\t\t\t\t{\n\t\t\t\t\tmenu.addSeparator(parent);\n\t\t\t\t\taddSeparator = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (icon != null && this.imageBasePath)\n\t\t\t\t{\n\t\t\t\t\ticon = this.imageBasePath + icon;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar row = this.addAction(menu, editor, as, icon, funct, action, cell, parent, iconCls, enabled);\n\t\t\t\tthis.addItems(editor, menu, cell, evt, conditions, item.firstChild, row);\n\t\t\t}\n\t\t}\n\t\telse if (item.nodeName == 'separator')\n\t\t{\n\t\t\taddSeparator = true;\n\t\t}\n\t\t\n\t\titem = item.nextSibling;\n\t}\n};\n\n/**\n * Function: addAction\n *\n * Helper method to bind an action to a new menu item.\n * \n * Parameters:\n *\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * editor - Enclosing <mxEditor> instance.\n * lab - String that represents the label of the menu item.\n * icon - Optional URL that represents the icon of the menu item.\n * action - Optional name of the action to execute in the given editor.\n * funct - Optional function to execute before the optional action. The\n * function takes an <mxEditor>, the <mxCell> under the mouse and the\n * mouse event that triggered the call.\n * cell - Optional <mxCell> to use as an argument for the action.\n * parent - DOM node that represents the parent menu item.\n * iconCls - Optional CSS class for the menu icon.\n * enabled - Optional boolean that specifies if the menu item is enabled.\n * Default is true.\n */\nmxDefaultPopupMenu.prototype.addAction = function(menu, editor, lab, icon, funct, action, cell, parent, iconCls, enabled)\n{\n\tvar clickHandler = function(evt)\n\t{\n\t\tif (typeof(funct) == 'function')\n\t\t{\n\t\t\tfunct.call(editor, editor, cell, evt);\n\t\t}\n\t\t\n\t\tif (action != null)\n\t\t{\n\t\t\teditor.execute(action, cell, evt);\n\t\t}\n\t};\n\t\n\treturn menu.addItem(lab, icon, clickHandler, parent, iconCls, enabled);\n};\n\n/**\n * Function: createConditions\n * \n * Evaluates the default conditions for the given context.\n */\nmxDefaultPopupMenu.prototype.createConditions = function(editor, cell, evt)\n{\n\t// Creates array with conditions\n\tvar model = editor.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\t// Adds some frequently used conditions\n\tvar conditions = [];\n\tconditions['nocell'] = cell == null;\n\tconditions['ncells'] = editor.graph.getSelectionCount() > 1;\n\tconditions['notRoot'] = model.getRoot() !=\n\t\tmodel.getParent(editor.graph.getDefaultParent());\n\tconditions['cell'] = cell != null;\n\t\n\tvar isCell = cell != null && editor.graph.getSelectionCount() == 1;\n\tconditions['nonEmpty'] = isCell && childCount > 0;\n\tconditions['expandable'] = isCell && editor.graph.isCellFoldable(cell, false);\n\tconditions['collapsable'] = isCell && editor.graph.isCellFoldable(cell, true);\n\tconditions['validRoot'] = isCell && editor.graph.isValidRoot(cell);\n\tconditions['emptyValidRoot'] = conditions['validRoot'] && childCount == 0;\n\tconditions['swimlane'] = isCell && editor.graph.isSwimlane(cell);\n\n\t// Evaluates dynamic conditions from config file\n\tvar condNodes = this.config.getElementsByTagName('condition');\n\t\n\tfor (var i=0; i<condNodes.length; i++)\n\t{\n\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(condNodes[i]));\n\t\tvar name = condNodes[i].getAttribute('name');\n\t\t\n\t\tif (name != null && typeof(funct) == 'function')\n\t\t{\n\t\t\tconditions[name] = funct(editor, cell, evt);\n\t\t}\n\t}\n\t\n\treturn conditions;\n};\n\n__mxOutput.mxDefaultPopupMenu = typeof mxDefaultPopupMenu !== 'undefined' ? mxDefaultPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbar\n *\n * Toolbar for the editor. This modifies the state of the graph\n * or inserts new cells upon mouse clicks.\n * \n * Example:\n * \n * Create a toolbar with a button to copy the selection into the clipboard,\n * and a combo box with one action to paste the selection from the clipboard\n * into the graph.\n * \n * (code)\n * var toolbar = new mxDefaultToolbar(container, editor);\n * toolbar.addItem('Copy', null, 'copy');\n * \n * var combo = toolbar.addActionCombo('More actions...');\n * toolbar.addActionOption(combo, 'Paste', 'paste');\n * (end) \n *\n * Codec:\n * \n * This class uses the <mxDefaultToolbarCodec> to read configuration\n * data into an existing instance. See <mxDefaultToolbarCodec> for a\n * description of the configuration format.\n * \n * Constructor: mxDefaultToolbar\n *\n * Constructs a new toolbar for the given container and editor. The\n * container and editor may be null if a prototypical instance for a\n * <mxDefaultKeyHandlerCodec> is created.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n * editor - Reference to the enclosing <mxEditor>. \n */\nfunction mxDefaultToolbar(container, editor)\n{\n\tthis.editor = editor;\n\n\tif (container != null && editor != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultToolbar.prototype.editor = null;\n\n/**\n * Variable: toolbar\n *\n * Holds the internal <mxToolbar>.\n */\nmxDefaultToolbar.prototype.toolbar = null;\n\n/**\n * Variable: resetHandler\n *\n * Reference to the function used to reset the <toolbar>.\n */\nmxDefaultToolbar.prototype.resetHandler = null;\n\n/**\n * Variable: spacing\n *\n * Defines the spacing between existing and new vertices in\n * gridSize units when a new vertex is dropped on an existing\n * cell. Default is 4 (40 pixels).\n */\nmxDefaultToolbar.prototype.spacing = 4;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if elements should be connected if new cells are dropped onto\n * connectable elements. Default is false.\n */\nmxDefaultToolbar.prototype.connectOnDrop = false;\n\n/**\n * Function: init\n * \n * Constructs the <toolbar> for the given container and installs a listener\n * that updates the <mxEditor.insertFunction> on <editor> if an item is\n * selected in the toolbar. This assumes that <editor> is not null.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nmxDefaultToolbar.prototype.init = function(container)\n{\n\tif (container != null)\n\t{\n\t\tthis.toolbar = new mxToolbar(container);\n\t\t\n\t\t// Installs the insert function in the editor if an item is\n\t\t// selected in the toolbar\n\t\tthis.toolbar.addListener(mxEvent.SELECT, mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar funct = evt.getProperty('function');\n\t\t\t\n\t\t\tif (funct != null)\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = mxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tfunct.apply(this, arguments);\n\t\t\t\t\tthis.toolbar.resetMode();\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = null;\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Resets the selected tool after a doubleclick or escape keystroke\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.toolbar != null)\n\t\t\t{\n\t\t\t\tthis.toolbar.resetMode(true);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.graph.addListener(mxEvent.DOUBLE_CLICK, this.resetHandler);\n\t\tthis.editor.addListener(mxEvent.ESCAPE, this.resetHandler);\n\t}\n};\n\n/**\n * Function: addItem\n *\n * Adds a new item that executes the given action in <editor>. The title,\n * icon and pressedIcon are used to display the toolbar item.\n * \n * Parameters:\n *\n * title - String that represents the title (tooltip) for the item.\n * icon - URL of the icon to be used for displaying the item.\n * action - Name of the action to execute when the item is clicked.\n * pressed - Optional URL of the icon for the pressed state.\n */\nmxDefaultToolbar.prototype.addItem = function(title, icon, action, pressed)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (action != null && action.length > 0)\n\t\t{\n\t\t\tthis.editor.execute(action);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addItem(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addSeparator\n *\n * Adds a vertical separator using the optional icon.\n * \n * Parameters:\n * \n * icon - Optional URL of the icon that represents the vertical separator.\n * Default is <mxClient.imageBasePath> + '/separator.gif'.\n */\nmxDefaultToolbar.prototype.addSeparator = function(icon)\n{\n\ticon = icon || mxClient.imageBasePath + '/separator.gif';\n\tthis.toolbar.addSeparator(icon);\n};\n\t\n/**\n * Function: addCombo\n *\n * Helper method to invoke <mxToolbar.addCombo> on <toolbar> and return the\n * resulting DOM node.\n */\nmxDefaultToolbar.prototype.addCombo = function()\n{\n\treturn this.toolbar.addCombo();\n};\n\t\t\n/**\n * Function: addActionCombo\n *\n * Helper method to invoke <mxToolbar.addActionCombo> on <toolbar> using\n * the given title and return the resulting DOM node.\n * \n * Parameters:\n * \n * title - String that represents the title of the combo.\n */\nmxDefaultToolbar.prototype.addActionCombo = function(title)\n{\n\treturn this.toolbar.addActionCombo(title);\n};\n\n/**\n * Function: addActionOption\n *\n * Binds the given action to a option with the specified label in the\n * given combo. Combo is an object returned from an earlier call to\n * <addCombo> or <addActionCombo>.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * action - Name of the action to execute in <editor>.\n */\nmxDefaultToolbar.prototype.addActionOption = function(combo, title, action)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\t\n\tthis.addOption(combo, title, clickHandler);\n};\n\n/**\n * Function: addOption\n *\n * Helper method to invoke <mxToolbar.addOption> on <toolbar> and return\n * the resulting DOM node that represents the option.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * value - Object that represents the value of the option.\n */\nmxDefaultToolbar.prototype.addOption = function(combo, title, value)\n{\n\treturn this.toolbar.addOption(combo, title, value);\n};\n\t\n/**\n * Function: addMode\n *\n * Creates an item for selecting the given mode in the <editor>'s graph.\n * Supported modenames are select, connect and pan.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * mode - String that represents the mode name to be used in\n * <mxEditor.setMode>.\n * pressed - Optional URL of the icon that represents the pressed state.\n * funct - Optional JavaScript function that takes the <mxEditor> as the\n * first and only argument that is executed after the mode has been\n * selected.\n */\nmxDefaultToolbar.prototype.addMode = function(title, icon, mode, pressed, funct)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.setMode(mode);\n\t\t\n\t\tif (funct != null)\n\t\t{\n\t\t\tfunct(this.editor);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addSwitchMode(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addPrototype\n *\n * Creates an item for inserting a clone of the specified prototype cell into\n * the <editor>'s graph. The ptype may either be a cell or a function that\n * returns a cell.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * ptype - Function or object that represents the prototype cell. If ptype\n * is a function then it is invoked with no arguments to create new\n * instances.\n * pressed - Optional URL of the icon that represents the pressed state.\n * insert - Optional JavaScript function that handles an insert of the new\n * cell. This function takes the <mxEditor>, new cell to be inserted, mouse\n * event and optional <mxCell> under the mouse pointer as arguments.\n * toggle - Optional boolean that specifies if the item can be toggled.\n * Default is true.\n */\nmxDefaultToolbar.prototype.addPrototype = function(title, icon, ptype, pressed, insert, toggle)\n{\n\t// Creates a wrapper function that is in charge of constructing\n\t// the new cell instance to be inserted into the graph\n\tvar factory = mxUtils.bind(this, function()\n\t{\n\t\tif (typeof(ptype) == 'function')\n\t\t{\n\t\t\treturn ptype();\n\t\t}\n\t\telse if (ptype != null)\n\t\t{\n\t\t\treturn this.editor.graph.cloneCell(ptype);\n\t\t}\n\t\t\n\t\treturn null;\n\t});\n\t\n\t// Defines the function for a click event on the graph\n\t// after this item has been selected in the toolbar\n\tvar clickHandler = mxUtils.bind(this, function(evt, cell)\n\t{\n\t\tif (typeof(insert) == 'function')\n\t\t{\n\t\t\tinsert(this.editor, factory(), evt, cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.drop(factory(), evt, cell);\n\t\t}\n\t\t\n\t\tthis.toolbar.resetMode();\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tvar img = this.toolbar.addMode(title, icon, clickHandler, pressed, null, toggle);\n\t\t\t\t\n\t// Creates a wrapper function that calls the click handler without\n\t// the graph argument\n\tvar dropHandler = function(graph, evt, cell)\n\t{\n\t\tclickHandler(evt, cell);\n\t};\n\t\n\tthis.installDropHandler(img, dropHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: drop\n * \n * Handles a drop from a toolbar item to the graph. The given vertex\n * represents the new cell to be inserted. This invokes <insert> or\n * <connect> depending on the given target cell.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * target - Optional <mxCell> that represents the drop target.\n */\nmxDefaultToolbar.prototype.drop = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (target == null ||\n\t\tmodel.isEdge(target) ||\n\t\t!this.connectOnDrop ||\n\t\t!graph.isCellConnectable(target))\n\t{\n\t\twhile (target != null &&\n\t\t\t!graph.isValidDropTarget(target, [vertex], evt))\n\t\t{\n\t\t\ttarget = model.getParent(target);\n\t\t}\n\t\t\n\t\tthis.insert(vertex, evt, target);\n\t}\n\telse\n\t{\n\t\tthis.connect(vertex, evt, target);\n\t}\n};\n\n/**\n * Function: insert\n *\n * Handles a drop by inserting the given vertex into the given parent cell\n * or the default parent if no parent is specified.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * parent - Optional <mxCell> that represents the parent.\n */\nmxDefaultToolbar.prototype.insert = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\t\n\tif (graph.canImportCell(vertex))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\n\t\t// Splits the target edge or inserts into target group\n\t\tif (graph.isSplitEnabled() &&\n\t\t\tgraph.isSplitTarget(target, [vertex], evt))\n\t\t{\n\t\t\treturn graph.splitEdge(target, [vertex], null, pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.editor.addVertex(target, vertex, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: connect\n * \n * Handles a drop by connecting the given vertex to the given source cell.\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * source - Optional <mxCell> that represents the source terminal.\n */\nmxDefaultToolbar.prototype.connect = function(vertex, evt, source)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (source != null &&\n\t\tgraph.isCellConnectable(vertex) &&\n\t\tgraph.isEdgeValid(null, source, vertex))\n\t{\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar geo = model.getGeometry(source);\n\t\t\tvar g = model.getGeometry(vertex).clone();\n\t\t\t\n\t\t\t// Moves the vertex away from the drop target that will\n\t\t\t// be used as the source for the new connection\n\t\t\tg.x = geo.x + (geo.width - g.width) / 2;\n\t\t\tg.y = geo.y + (geo.height - g.height) / 2;\n\t\t\t\n\t\t\tvar step = this.spacing * graph.gridSize;\n\t\t\tvar dist = model.getDirectedEdgeCount(source, true) * 20;\n\t\t\t\n\t\t\tif (this.editor.horizontalFlow)\n\t\t\t{\n\t\t\t\tg.x += (g.width + geo.width) / 2 + step + dist;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.y += (g.height + geo.height) / 2 + step + dist;\n\t\t\t}\n\t\t\t\n\t\t\tvertex.setGeometry(g);\n\t\t\t\n\t\t\t// Fires two add-events with the code below - should be fixed\n\t\t\t// to only fire one add event for both inserts\n\t\t\tvar parent = model.getParent(source);\n\t\t\tgraph.addCell(vertex, parent);\n\t\t\tgraph.constrainChild(vertex);\n\n\t\t\t// Creates the edge using the editor instance and calls\n\t\t\t// the second function that fires an add event\n\t\t\tedge = this.editor.createEdge(source, vertex);\n\t\t\t\n\t\t\tif (model.getGeometry(edge) == null)\n\t\t\t{\n\t\t\t\tvar edgeGeometry = new mxGeometry();\n\t\t\t\tedgeGeometry.relative = true;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, edgeGeometry);\n\t\t\t}\n\t\t\t\n\t\t\tgraph.addEdge(edge, parent, source, vertex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tgraph.setSelectionCells([vertex, edge]);\n\t\tgraph.scrollCellToVisible(vertex);\n\t}\n};\n\n/**\n * Function: installDropHandler\n * \n * Makes the given img draggable using the given function for handling a\n * drop event.\n * \n * Parameters:\n * \n * img - DOM node that represents the image.\n * dropHandler - Function that handles a drop of the image.\n */\nmxDefaultToolbar.prototype.installDropHandler = function (img, dropHandler)\n{\n\tvar sprite = document.createElement('img');\n\tsprite.setAttribute('src', img.getAttribute('src'));\n\n\t// Handles delayed loading of the images\n\tvar loader = mxUtils.bind(this, function(evt)\n\t{\n\t\t// Preview uses the image node with double size. Later this can be\n\t\t// changed to use a separate preview and guides, but for this the\n\t\t// dropHandler must use the additional x- and y-arguments and the\n\t\t// dragsource which makeDraggable returns much be configured to\n\t\t// use guides via mxDragSource.isGuidesEnabled.\n\t\tsprite.style.width = (2 * img.offsetWidth) + 'px';\n\t\tsprite.style.height = (2 * img.offsetHeight) + 'px';\n\n\t\tmxUtils.makeDraggable(img, this.editor.graph, dropHandler,\n\t\t\tsprite);\n\t\tmxEvent.removeListener(sprite, 'load', loader);\n\t});\n\n\tif (mxClient.IS_IE)\n\t{\n\t\tloader();\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(sprite, 'load', loader);\n\t}\t\n};\n\n/**\n * Function: destroy\n * \n * Destroys the <toolbar> associated with this object and removes all\n * installed listeners. This does normally not need to be called, the\n * <toolbar> is destroyed automatically when the window unloads (in IE) by\n * <mxEditor>.\n */\nmxDefaultToolbar.prototype.destroy = function ()\n{\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.editor.graph.removeListener('dblclick', this.resetHandler);\n\t\tthis.editor.removeListener('escape', this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.toolbar != null)\n\t{\n\t\tthis.toolbar.destroy();\n\t\tthis.toolbar = null;\n\t}\n};\n\n__mxOutput.mxDefaultToolbar = typeof mxDefaultToolbar !== 'undefined' ? mxDefaultToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2019, draw.io AG\n */\n/**\n * Class: mxEditor\n *\n * Extends <mxEventSource> to implement an application wrapper for a graph that\n * adds <actions>, I/O using <mxCodec>, auto-layout using <mxLayoutManager>,\n * command history using <undoManager>, and standard dialogs and widgets, eg.\n * properties, help, outline, toolbar, and popupmenu. It also adds <templates>\n * to be used as cells in toolbars, auto-validation using the <validation>\n * flag, attribute cycling using <cycleAttributeValues>, higher-level events\n * such as <root>, and backend integration using <urlPost> and <urlImage>.\n *\n * Actions:\n *\n * Actions are functions stored in the <actions> array under their names. The\n * functions take the <mxEditor> as the first, and an optional <mxCell> as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n *\n * A list of built-in actions is available in the <addActions> description.\n *\n * Read/write Diagrams:\n *\n * To read a diagram from an XML string, for example from a textfield within the\n * page, the following code is used:\n *\n * (code)\n * var doc = mxUtils.parseXML(xmlString);\n * var node = doc.documentElement;\n * editor.readGraphModel(node);\n * (end)\n *\n * For reading a diagram from a remote location, use the <open> method.\n *\n * To save diagrams in XML on a server, you can set the <urlPost> variable.\n * This variable will be used in <getUrlPost> to construct a URL for the post\n * request that is issued in the <save> method. The post request contains the\n * XML representation of the diagram as returned by <writeGraphModel> in the\n * xml parameter.\n *\n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n *\n * Here are some examples of processing a post request in various languages.\n *\n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\")\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n *\n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n *\n * Creating images:\n *\n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n *\n * Special characters:\n *\n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n *\n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n *\n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to a HTML user agent.\n *\n * If you are having problems with special characters on the server-side then\n * you may want to try the <escapePostData> flag.\n *\n * For converting decimal escape sequences inside strings, a user has provided\n * us with the following function:\n *\n * (code)\n * function html2js(text)\n * {\n *   var entitySearch = /&#[0-9]+;/;\n *   var entity;\n *\n *   while (entity = entitySearch.exec(text))\n *   {\n *     var charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *\n *   return text;\n * }\n * (end)\n *\n * Otherwise try using hex escape sequences and the built-in unescape function\n * for converting such strings.\n *\n * Local Files:\n *\n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n *\n * For example, in PHP the code that does this looks as follows.\n *\n * (code)\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * (end)\n *\n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n *\n * Cell Properties:\n *\n * The properties displayed in the properties dialog are the attributes and\n * values of the cell's user object, which is an XML node. The XML node is\n * defined in the templates section of the config file.\n *\n * The templates are stored in <mxEditor.templates> and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n *\n * In the following example, the task node is a business object and only the\n * mxCell node and its mxGeometry child contain graph information:\n *\n * (code)\n * <Task label=\"Task\" description=\"\">\n *   <mxCell vertex=\"true\">\n *     <mxGeometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </mxCell>\n * </Task>\n * (end)\n *\n * The idea is that the XML representation is inverse from the in-memory\n * representation: The outer XML node is the user object and the inner node is\n * the cell. This means the user object of the cell is the Task node with no\n * children for the above example:\n *\n * (code)\n * <Task label=\"Task\" description=\"\"/>\n * (end)\n *\n * The Task node can have any tag name, attributes and child nodes. The\n * <mxCodec> will use the XML hierarchy as the user object, while removing the\n * \"known annotations\", such as the mxCell node. At save-time the cell data\n * will be \"merged\" back into the user object. The user object is only modified\n * via the properties dialog during the lifecycle of the cell.\n *\n * In the default implementation of <createProperties>, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the <mxCellAttributeChange> action in the model. The dialog can be replaced\n * by overriding the <createProperties> hook or by replacing the showProperties\n * action in <actions>. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n *\n * If you want to displey the properties dialog on a doubleclick, you can set\n * <mxEditor.dblClickAction> to showProperties as follows:\n *\n * (code)\n * editor.dblClickAction = 'showProperties';\n * (end)\n *\n * Popupmenu and Toolbar:\n *\n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * (end)\n *\n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the <mxDefaultPopupMenuCodec>, the format of the\n * configuration is explained in <mxDefaultPopupMenu.decode>.\n *\n * The toolbar is defined in the mxDefaultToolbar section. Items can be added\n * and removed in this section.\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * (end)\n *\n * The format of the configuration is described in\n * <mxDefaultToolbarCodec.decode>.\n *\n * Ids:\n *\n * For the IDs, there is an implicit behaviour in <mxCodec>: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the <mxCell.id> of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the <mxGraphModel.getCell> function. If there is a collision, a new\n * Id will be created for the cell using <mxGraphModel.createId>. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n *\n * See <mxEditorCodec>, <mxDefaultToolbarCodec> and <mxDefaultPopupMenuCodec>\n * for information about configuring the editor and user interface.\n *\n * Programmatically inserting cells:\n *\n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n *\n * (code)\n * var userObject = new Object();\n * var parent = editor.graph.getDefaultParent();\n * var model = editor.graph.model;\n * model.beginUpdate();\n * try\n * {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n *\n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n *\n * (code)\n * var template = editor.templates['task'];\n * var clone = editor.graph.model.cloneCell(template);\n * (end)\n *\n * Resources:\n *\n * resources/editor - Language resources for mxEditor\n *\n * Callback: onInit\n *\n * Called from within the constructor. In the callback,\n * \"this\" refers to the editor instance.\n *\n * Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * <resetFirstTime> to reset this cookie. This cookie\n * only exists if <onInit> is implemented.\n *\n * Event: mxEvent.OPEN\n *\n * Fires after a file was opened in <open>. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * <filename>.\n *\n * Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in <save>. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * Event: mxEvent.POST\n *\n * Fires if a successful response was received in <postDiagram>. The\n * <code>request</code> property contains the <mxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request.\n *\n * Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * Event: mxEvent.BEFORE_ADD_VERTEX\n *\n * Fires before a vertex is added in <addVertex>. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n *\n * Event: mxEvent.ADD_VERTEX\n *\n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n *\n * Event: mxEvent.AFTER_ADD_VERTEX\n *\n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n *\n * Example:\n *\n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n *\n * (code)\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt)\n * {\n *   var vertex = evt.getProperty('vertex');\n *\n *   if (editor.graph.isCellEditable(vertex))\n *   {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * (end)\n *\n * Event: mxEvent.ESCAPE\n *\n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n *\n * Constructor: mxEditor\n *\n * Constructs a new editor. This function invokes the <onInit> callback\n * upon completion.\n *\n * Example:\n *\n * (code)\n * var config = mxUtils.load('config/diagrameditor.xml').getDocumentElement();\n * var editor = new mxEditor(config);\n * (end)\n *\n * Parameters:\n *\n * config - Optional XML node that contains the configuration.\n */\nfunction mxEditor(config)\n{\n\tthis.actions = [];\n\tthis.addActions();\n\n\t// Executes the following only if a document has been instanciated.\n\t// That is, don't execute when the editorcodec is setup.\n\tif (document.body != null)\n\t{\n\t\t// Defines instance fields\n\t\tthis.cycleAttributeValues = [];\n\t\tthis.popupHandler = new mxDefaultPopupMenu();\n\t\tthis.undoManager = new mxUndoManager();\n\n\t\t// Creates the graph and toolbar without the containers\n\t\tthis.graph = this.createGraph();\n\t\tthis.toolbar = this.createToolbar();\n\n\t\t// Creates the global keyhandler (requires graph instance)\n\t\tthis.keyHandler = new mxDefaultKeyHandler(this);\n\n\t\t// Configures the editor using the URI\n\t\t// which was passed to the ctor\n\t\tthis.configure(config);\n\n\t\t// Assigns the swimlaneIndicatorColorAttribute on the graph\n\t\tthis.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n\n\t\t// Checks if the <onInit> hook has been set\n\t\tif (this.onInit != null)\n\t\t{\n\t\t\t// Invokes the <onInit> hook\n\t\t\tthis.onInit();\n\t\t}\n\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/editor');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/editor');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxEditor.prototype = new mxEventSource();\nmxEditor.prototype.constructor = mxEditor;\n\n/**\n * Group: Controls and Handlers\n */\n\n/**\n * Variable: askZoomResource\n *\n * Specifies the resource key for the zoom dialog. If the resource for this\n * key does not exist then the value is used as the error message. Default\n * is 'askZoom'.\n */\nmxEditor.prototype.askZoomResource = (mxClient.language != 'none') ? 'askZoom' : '';\n\n/**\n * Variable: lastSavedResource\n *\n * Specifies the resource key for the last saved info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.lastSavedResource = (mxClient.language != 'none') ? 'lastSaved' : '';\n\n/**\n * Variable: currentFileResource\n *\n * Specifies the resource key for the current file info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'currentFile'.\n */\nmxEditor.prototype.currentFileResource = (mxClient.language != 'none') ? 'currentFile' : '';\n\n/**\n * Variable: propertiesResource\n *\n * Specifies the resource key for the properties window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'properties'.\n */\nmxEditor.prototype.propertiesResource = (mxClient.language != 'none') ? 'properties' : '';\n\n/**\n * Variable: tasksResource\n *\n * Specifies the resource key for the tasks window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'tasks'.\n */\nmxEditor.prototype.tasksResource = (mxClient.language != 'none') ? 'tasks' : '';\n\n/**\n * Variable: helpResource\n *\n * Specifies the resource key for the help window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'help'.\n */\nmxEditor.prototype.helpResource = (mxClient.language != 'none') ? 'help' : '';\n\n/**\n * Variable: outlineResource\n *\n * Specifies the resource key for the outline window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'outline'.\n */\nmxEditor.prototype.outlineResource = (mxClient.language != 'none') ? 'outline' : '';\n\n/**\n * Variable: outline\n *\n * Reference to the <mxWindow> that contains the outline. The <mxOutline>\n * is stored in outline.outline.\n */\nmxEditor.prototype.outline = null;\n\n/**\n * Variable: graph\n *\n * Holds a <mxGraph> for displaying the diagram. The graph\n * is created in <setGraphContainer>.\n */\nmxEditor.prototype.graph = null;\n\n/**\n * Variable: graphRenderHint\n *\n * Holds the render hint used for creating the\n * graph in <setGraphContainer>. See <mxGraph>.\n * Default is null.\n */\nmxEditor.prototype.graphRenderHint = null;\n\n/**\n * Variable: toolbar\n *\n * Holds a <mxDefaultToolbar> for displaying the toolbar. The\n * toolbar is created in <setToolbarContainer>.\n */\nmxEditor.prototype.toolbar = null;\n\n/**\n * Variable: status\n *\n * DOM container that holds the statusbar. Default is null.\n * Use <setStatusContainer> to set this value.\n */\nmxEditor.prototype.status = null;\n\n/**\n * Variable: popupHandler\n *\n * Holds a <mxDefaultPopupMenu> for displaying\n * popupmenus.\n */\nmxEditor.prototype.popupHandler = null;\n\n/**\n * Variable: undoManager\n *\n * Holds an <mxUndoManager> for the command history.\n */\nmxEditor.prototype.undoManager = null;\n\n/**\n * Variable: keyHandler\n *\n * Holds a <mxDefaultKeyHandler> for handling keyboard events.\n * The handler is created in <setGraphContainer>.\n */\nmxEditor.prototype.keyHandler = null;\n\n/**\n * Group: Actions and Options\n */\n\n/**\n * Variable: actions\n *\n * Maps from actionnames to actions, which are functions taking\n * the editor and the cell as arguments. Use <addAction>\n * to add or replace an action and <execute> to execute an action\n * by name, passing the cell to be operated upon as the second\n * argument.\n */\nmxEditor.prototype.actions = null;\n\n/**\n * Variable: dblClickAction\n *\n * Specifies the name of the action to be executed\n * when a cell is double clicked. Default is 'edit'.\n *\n * To handle a singleclick, use the following code.\n *\n * (code)\n * editor.graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event');\n *   var cell = evt.getProperty('cell');\n *\n *   if (cell != null && !e.isConsumed())\n *   {\n *     // Do something useful with cell...\n *     e.consume();\n *   }\n * });\n * (end)\n */\nmxEditor.prototype.dblClickAction = 'edit';\n\n/**\n * Variable: swimlaneRequired\n *\n * Specifies if new cells must be inserted\n * into an existing swimlane. Otherwise, cells\n * that are not swimlanes can be inserted as\n * top-level cells. Default is false.\n */\nmxEditor.prototype.swimlaneRequired = false;\n\n/**\n * Variable: disableContextMenu\n *\n * Specifies if the context menu should be disabled in the graph container.\n * Default is true.\n */\nmxEditor.prototype.disableContextMenu = true;\n\n/**\n * Group: Templates\n */\n\n/**\n * Variable: insertFunction\n *\n * Specifies the function to be used for inserting new\n * cells into the graph. This is assigned from the\n * <mxDefaultToolbar> if a vertex-tool is clicked.\n */\nmxEditor.prototype.insertFunction = null;\n\n/**\n * Variable: forcedInserting\n *\n * Specifies if a new cell should be inserted on a single\n * click even using <insertFunction> if there is a cell\n * under the mousepointer, otherwise the cell under the\n * mousepointer is selected. Default is false.\n */\nmxEditor.prototype.forcedInserting = false;\n\n/**\n * Variable: templates\n *\n * Maps from names to protoype cells to be used\n * in the toolbar for inserting new cells into\n * the diagram.\n */\nmxEditor.prototype.templates = null;\n\n/**\n * Variable: defaultEdge\n *\n * Prototype edge cell that is used for creating\n * new edges.\n */\nmxEditor.prototype.defaultEdge = null;\n\n/**\n * Variable: defaultEdgeStyle\n *\n * Specifies the edge style to be returned in <getEdgeStyle>.\n * Default is null.\n */\nmxEditor.prototype.defaultEdgeStyle = null;\n\n/**\n * Variable: defaultGroup\n *\n * Prototype group cell that is used for creating\n * new groups.\n */\nmxEditor.prototype.defaultGroup = null;\n\n/**\n * Variable: groupBorderSize\n *\n * Default size for the border of new groups. If null,\n * then then <mxGraph.gridSize> is used. Default is\n * null.\n */\nmxEditor.prototype.groupBorderSize = null;\n\n/**\n * Group: Backend Integration\n */\n\n/**\n * Variable: filename\n *\n * Contains the URL of the last opened file as a string.\n * Default is null.\n */\nmxEditor.prototype.filename = null;\n\n/**\n * Variable: lineFeed\n *\n * Character to be used for encoding linefeeds in <save>. Default is '&#xa;'.\n */\nmxEditor.prototype.linefeed = '&#xa;';\n\n/**\n * Variable: postParameterName\n *\n * Specifies if the name of the post parameter that contains the diagram\n * data in a post request to the server. Default is 'xml'.\n */\nmxEditor.prototype.postParameterName = 'xml';\n\n/**\n * Variable: escapePostData\n *\n * Specifies if the data in the post request for saving a diagram\n * should be converted using encodeURIComponent. Default is true.\n */\nmxEditor.prototype.escapePostData = true;\n\n/**\n * Variable: urlPost\n *\n * Specifies the URL to be used for posting the diagram\n * to a backend in <save>.\n */\nmxEditor.prototype.urlPost = null;\n\n/**\n * Variable: urlImage\n *\n * Specifies the URL to be used for creating a bitmap of\n * the graph in the image action.\n */\nmxEditor.prototype.urlImage = null;\n\n/**\n * Group: Autolayout\n */\n\n/**\n * Variable: horizontalFlow\n *\n * Specifies the direction of the flow\n * in the diagram. This is used in the\n * layout algorithms. Default is false,\n * ie. vertical flow.\n */\nmxEditor.prototype.horizontalFlow = false;\n\n/**\n * Variable: layoutDiagram\n *\n * Specifies if the top-level elements in the\n * diagram should be layed out using a vertical\n * or horizontal stack depending on the setting\n * of <horizontalFlow>. The spacing between the\n * swimlanes is specified by <swimlaneSpacing>.\n * Default is false.\n *\n * If the top-level elements are swimlanes, then\n * the intra-swimlane layout is activated by\n * the <layoutSwimlanes> switch.\n */\nmxEditor.prototype.layoutDiagram = false;\n\n/**\n * Variable: swimlaneSpacing\n *\n * Specifies the spacing between swimlanes if\n * automatic layout is turned on in\n * <layoutDiagram>. Default is 0.\n */\nmxEditor.prototype.swimlaneSpacing = 0;\n\n/**\n * Variable: maintainSwimlanes\n *\n * Specifies if the swimlanes should be kept at the same\n * width or height depending on the setting of\n * <horizontalFlow>.  Default is false.\n *\n * For horizontal flows, all swimlanes\n * have the same height and for vertical flows, all swimlanes\n * have the same width. Furthermore, the swimlanes are\n * automatically \"stacked\" if <layoutDiagram> is true.\n */\nmxEditor.prototype.maintainSwimlanes = false;\n\n/**\n * Variable: layoutSwimlanes\n *\n * Specifies if the children of swimlanes should\n * be layed out, either vertically or horizontally\n * depending on <horizontalFlow>.\n * Default is false.\n */\nmxEditor.prototype.layoutSwimlanes = false;\n\n/**\n * Group: Attribute Cycling\n */\n\n/**\n * Variable: cycleAttributeValues\n *\n * Specifies the attribute values to be cycled when\n * inserting new swimlanes. Default is an empty\n * array.\n */\nmxEditor.prototype.cycleAttributeValues = null;\n\n/**\n * Variable: cycleAttributeIndex\n *\n * Index of the last consumed attribute index. If a new\n * swimlane is inserted, then the <cycleAttributeValues>\n * at this index will be used as the value for\n * <cycleAttributeName>. Default is 0.\n */\nmxEditor.prototype.cycleAttributeIndex = 0;\n\n/**\n * Variable: cycleAttributeName\n *\n * Name of the attribute to be assigned a <cycleAttributeValues>\n * when inserting new swimlanes. Default is 'fillColor'.\n */\nmxEditor.prototype.cycleAttributeName = 'fillColor';\n\n/**\n * Group: Windows\n */\n\n/**\n * Variable: tasks\n *\n * Holds the <mxWindow> created in <showTasks>.\n */\nmxEditor.prototype.tasks = null;\n\n/**\n * Variable: tasksWindowImage\n *\n * Icon for the tasks window.\n */\nmxEditor.prototype.tasksWindowImage = null;\n\n/**\n * Variable: tasksTop\n *\n * Specifies the top coordinate of the tasks window in pixels.\n * Default is 20.\n */\nmxEditor.prototype.tasksTop = 20;\n\n/**\n * Variable: help\n *\n * Holds the <mxWindow> created in <showHelp>.\n */\nmxEditor.prototype.help = null;\n\n/**\n * Variable: helpWindowImage\n *\n * Icon for the help window.\n */\nmxEditor.prototype.helpWindowImage = null;\n\n/**\n * Variable: urlHelp\n *\n * Specifies the URL to be used for the contents of the\n * Online Help window. This is usually specified in the\n * resources file under urlHelp for language-specific\n * online help support.\n */\nmxEditor.prototype.urlHelp = null;\n\n/**\n * Variable: helpWidth\n *\n * Specifies the width of the help window in pixels.\n * Default is 300.\n */\nmxEditor.prototype.helpWidth = 300;\n\n/**\n * Variable: helpHeight\n *\n * Specifies the height of the help window in pixels.\n * Default is 260.\n */\nmxEditor.prototype.helpHeight = 260;\n\n/**\n * Variable: propertiesWidth\n *\n * Specifies the width of the properties window in pixels.\n * Default is 240.\n */\nmxEditor.prototype.propertiesWidth = 240;\n\n/**\n * Variable: propertiesHeight\n *\n * Specifies the height of the properties window in pixels.\n * If no height is specified then the window will be automatically\n * sized to fit its contents. Default is null.\n */\nmxEditor.prototype.propertiesHeight = null;\n\n/**\n * Variable: movePropertiesDialog\n *\n * Specifies if the properties dialog should be automatically\n * moved near the cell it is displayed for, otherwise the\n * dialog is not moved. This value is only taken into\n * account if the dialog is already visible. Default is false.\n */\nmxEditor.prototype.movePropertiesDialog = false;\n\n/**\n * Variable: validating\n *\n * Specifies if <mxGraph.validateGraph> should automatically be invoked after\n * each change. Default is false.\n */\nmxEditor.prototype.validating = false;\n\n/**\n * Variable: modified\n *\n * True if the graph has been modified since it was last saved.\n */\nmxEditor.prototype.modified = false;\n\n/**\n * Function: isModified\n *\n * Returns <modified>.\n */\nmxEditor.prototype.isModified = function ()\n{\n\treturn this.modified;\n};\n\n/**\n * Function: setModified\n *\n * Sets <modified> to the specified boolean value.\n */\nmxEditor.prototype.setModified = function (value)\n{\n\tthis.modified = value;\n};\n\n/**\n * Function: addActions\n *\n * Adds the built-in actions to the editor instance.\n *\n * save - Saves the graph using <urlPost>.\n * print - Shows the graph in a new print preview window.\n * show - Shows the graph in a new window.\n * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n * refresh - Refreshes the graph's display.\n * cut - Copies the current selection into the clipboard\n * and removes it from the graph.\n * copy - Copies the current selection into the clipboard.\n * paste - Pastes the clipboard into the graph.\n * delete - Removes the current selection from the graph.\n * group - Puts the current selection into a new group.\n * ungroup - Removes the selected groups and selects the children.\n * undo - Undoes the last change on the graph model.\n * redo - Redoes the last change on the graph model.\n * zoom - Sets the zoom via a dialog.\n * zoomIn - Zooms into the graph.\n * zoomOut - Zooms out of the graph\n * actualSize - Resets the scale and translation on the graph.\n * fit - Changes the scale so that the graph fits into the window.\n * showProperties - Shows the properties dialog.\n * selectAll - Selects all cells.\n * selectNone - Clears the selection.\n * selectVertices - Selects all vertices.\n * selectEdges = Selects all edges.\n * edit - Starts editing the current selection cell.\n * enterGroup - Drills down into the current selection cell.\n * exitGroup - Moves up in the drilling hierachy\n * home - Moves to the topmost parent in the drilling hierarchy\n * selectPrevious - Selects the previous cell.\n * selectNext - Selects the next cell.\n * selectParent - Selects the parent of the selection cell.\n * selectChild - Selects the first child of the selection cell.\n * collapse - Collapses the currently selected cells.\n * expand - Expands the currently selected cells.\n * bold - Toggle bold text style.\n * italic - Toggle italic text style.\n * underline - Toggle underline text style.\n * alignCellsLeft - Aligns the selection cells at the left.\n * alignCellsCenter - Aligns the selection cells in the center.\n * alignCellsRight - Aligns the selection cells at the right.\n * alignCellsTop - Aligns the selection cells at the top.\n * alignCellsMiddle - Aligns the selection cells in the middle.\n * alignCellsBottom - Aligns the selection cells at the bottom.\n * alignFontLeft - Sets the horizontal text alignment to left.\n * alignFontCenter - Sets the horizontal text alignment to center.\n * alignFontRight - Sets the horizontal text alignment to right.\n * alignFontTop - Sets the vertical text alignment to top.\n * alignFontMiddle - Sets the vertical text alignment to middle.\n * alignFontBottom - Sets the vertical text alignment to bottom.\n * toggleTasks - Shows or hides the tasks window.\n * toggleHelp - Shows or hides the help window.\n * toggleOutline - Shows or hides the outline window.\n * toggleConsole - Shows or hides the console window.\n */\nmxEditor.prototype.addActions = function ()\n{\n\tthis.addAction('save', function(editor)\n\t{\n\t\teditor.save();\n\t});\n\n\tthis.addAction('print', function(editor)\n\t{\n\t\tvar preview = new mxPrintPreview(editor.graph, 1);\n\t\tpreview.open();\n\t});\n\n\tthis.addAction('show', function(editor)\n\t{\n\t\tmxUtils.show(editor.graph, null, 10, 10);\n\t});\n\n\tthis.addAction('exportImage', function(editor)\n\t{\n\t\tvar url = editor.getUrlImage();\n\n\t\tif (url == null || mxClient.IS_LOCAL)\n\t\t{\n\t\t\teditor.execute('show');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar node = mxUtils.getViewXml(editor.graph, 1);\n\t\t\tvar xml = mxUtils.getXml(node, '\\n');\n\n\t\t\tmxUtils.submit(url, editor.postParameterName + '=' +\n\t\t\t\tencodeURIComponent(xml), document, '_blank');\n\t\t}\n\t});\n\n\tthis.addAction('refresh', function(editor)\n\t{\n\t\teditor.graph.refresh();\n\t});\n\n\tthis.addAction('cut', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.cut(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('copy', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.copy(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('paste', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.paste(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('delete', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCells();\n\t\t}\n\t});\n\n\tthis.addAction('group', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCell(editor.groupCells());\n\t\t}\n\t});\n\n\tthis.addAction('ungroup', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCells(editor.graph.ungroupCells());\n\t\t}\n\t});\n\n\tthis.addAction('removeFromParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCellsFromParent();\n\t\t}\n\t});\n\n\tthis.addAction('undo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.undo();\n\t\t}\n\t});\n\n\tthis.addAction('redo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.redo();\n\t\t}\n\t});\n\n\tthis.addAction('zoomIn', function(editor)\n\t{\n\t\teditor.graph.zoomIn();\n\t});\n\n\tthis.addAction('zoomOut', function(editor)\n\t{\n\t\teditor.graph.zoomOut();\n\t});\n\n\tthis.addAction('actualSize', function(editor)\n\t{\n\t\teditor.graph.zoomActual();\n\t});\n\n\tthis.addAction('fit', function(editor)\n\t{\n\t\teditor.graph.fit();\n\t});\n\n\tthis.addAction('showProperties', function(editor, cell)\n\t{\n\t\teditor.showProperties(cell);\n\t});\n\n\tthis.addAction('selectAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectAll();\n\t\t}\n\t});\n\n\tthis.addAction('selectNone', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.clearSelection();\n\t\t}\n\t});\n\n\tthis.addAction('selectVertices', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectVertices();\n\t\t}\n\t});\n\n\tthis.addAction('selectEdges', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectEdges();\n\t\t}\n\t});\n\n\tthis.addAction('edit', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled() &&\n\t\t\teditor.graph.isCellEditable(cell))\n\t\t{\n\t\t\teditor.graph.startEditingAtCell(cell);\n\t\t}\n\t});\n\n\tthis.addAction('toBack', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('toFront', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('enterGroup', function(editor, cell)\n\t{\n\t\teditor.graph.enterGroup(cell);\n\t});\n\n\tthis.addAction('exitGroup', function(editor)\n\t{\n\t\teditor.graph.exitGroup();\n\t});\n\n\tthis.addAction('home', function(editor)\n\t{\n\t\teditor.graph.home();\n\t});\n\n\tthis.addAction('selectPrevious', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectPreviousCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectNext', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectNextCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectParentCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectChild', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectChildCell();\n\t\t}\n\t});\n\n\tthis.addAction('collapse', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('collapseAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(true, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('expand', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('expandAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(false, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('bold', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_BOLD);\n\t\t}\n\t});\n\n\tthis.addAction('italic', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_ITALIC);\n\t\t}\n\t});\n\n\tthis.addAction('underline', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_UNDERLINE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsLeft', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_LEFT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontLeft', function(editor)\n\t{\n\n\t\teditor.graph.setCellStyles(\n\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\tmxConstants.ALIGN_LEFT);\n\t});\n\n\tthis.addAction('alignFontCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('zoom', function(editor)\n\t{\n\t\tvar current = editor.graph.getView().scale*100;\n\t\tvar scale = parseFloat(mxUtils.prompt(\n\t\t\tmxResources.get(editor.askZoomResource) ||\n\t\t\teditor.askZoomResource,\n\t\t\tcurrent))/100;\n\n\t\tif (!isNaN(scale))\n\t\t{\n\t\t\teditor.graph.getView().setScale(scale);\n\t\t}\n\t});\n\n\tthis.addAction('toggleTasks', function(editor)\n\t{\n\t\tif (editor.tasks != null)\n\t\t{\n\t\t\teditor.tasks.setVisible(!editor.tasks.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showTasks();\n\t\t}\n\t});\n\n\tthis.addAction('toggleHelp', function(editor)\n\t{\n\t\tif (editor.help != null)\n\t\t{\n\t\t\teditor.help.setVisible(!editor.help.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showHelp();\n\t\t}\n\t});\n\n\tthis.addAction('toggleOutline', function(editor)\n\t{\n\t\tif (editor.outline == null)\n\t\t{\n\t\t\teditor.showOutline();\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.outline.setVisible(!editor.outline.isVisible());\n\t\t}\n\t});\n\n\tthis.addAction('toggleConsole', function(editor)\n\t{\n\t\tmxLog.setVisible(!mxLog.isVisible());\n\t});\n};\n\n/**\n * Function: configure\n *\n * Configures the editor using the specified node. To load the\n * configuration from a given URL the following code can be used to obtain\n * the XML node.\n *\n * (code)\n * var node = mxUtils.load(url).getDocumentElement();\n * (end)\n *\n * Parameters:\n *\n * node - XML node that contains the configuration.\n */\nmxEditor.prototype.configure = function (node)\n{\n\tif (node != null)\n\t{\n\t\t// Creates a decoder for the XML data\n\t\t// and uses it to configure the editor\n\t\tvar dec = new mxCodec(node.ownerDocument);\n\t\tdec.decode(node, this);\n\n\t\t// Resets the counters, modified state and\n\t\t// command history\n\t\tthis.resetHistory();\n\t}\n};\n\n/**\n * Function: resetFirstTime\n *\n * Resets the cookie that is used to remember if the editor has already\n * been used.\n */\nmxEditor.prototype.resetFirstTime = function ()\n{\n\tdocument.cookie =\n\t\t'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n};\n\n/**\n * Function: resetHistory\n *\n * Resets the command history, modified state and counters.\n */\nmxEditor.prototype.resetHistory = function ()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.undoManager.clear();\n\tthis.ignoredChanges = 0;\n\tthis.setModified(false);\n};\n\n/**\n * Function: addAction\n *\n * Binds the specified actionname to the specified function.\n *\n * Parameters:\n *\n * actionname - String that specifies the name of the action\n * to be added.\n * funct - Function that implements the new action. The first\n * argument of the function is the editor it is used\n * with, the second argument is the cell it operates\n * upon.\n *\n * Example:\n * (code)\n * editor.addAction('test', function(editor, cell)\n * {\n * \t\tmxUtils.alert(\"test \"+cell);\n * });\n * (end)\n */\nmxEditor.prototype.addAction = function (actionname, funct)\n{\n\tthis.actions[actionname] = funct;\n};\n\n/**\n * Function: execute\n *\n * Executes the function with the given name in <actions> passing the\n * editor instance and given cell as the first and second argument. All\n * additional arguments are passed to the action as well. This method\n * contains a try-catch block and displays an error message if an action\n * causes an exception. The exception is re-thrown after the error\n * message was displayed.\n *\n * Example:\n *\n * (code)\n * editor.execute(\"showProperties\", cell);\n * (end)\n */\nmxEditor.prototype.execute = function (actionname, cell, evt)\n{\n\tvar action = this.actions[actionname];\n\n\tif (action != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Creates the array of arguments by replacing the actionname\n\t\t\t// with the editor instance in the args of this function\n\t\t\tvar args = arguments;\n\t\t\targs[0] = this;\n\n\t\t\t// Invokes the function on the editor using the args\n\t\t\taction.apply(this, args);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxUtils.error('Cannot execute ' + actionname +\n\t\t\t\t': ' + e.message, 280, true);\n\n\t\t\tthrow e;\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxUtils.error('Cannot find action '+actionname, 280, true);\n\t}\n};\n\n/**\n * Function: addTemplate\n *\n * Adds the specified template under the given name in <templates>.\n */\nmxEditor.prototype.addTemplate = function (name, template)\n{\n\tthis.templates[name] = template;\n};\n\n/**\n * Function: getTemplate\n *\n * Returns the template for the given name.\n */\nmxEditor.prototype.getTemplate = function (name)\n{\n\treturn this.templates[name];\n};\n\n/**\n * Function: createGraph\n *\n * Creates the <graph> for the editor. The graph is created with no\n * container and is initialized from <setGraphContainer>.\n */\nmxEditor.prototype.createGraph = function ()\n{\n\tvar graph = new mxGraph(null, null, this.graphRenderHint);\n\n\t// Enables rubberband, tooltips, panning\n\tgraph.setTooltips(true);\n\tgraph.setPanning(true);\n\n\t// Overrides the dblclick method on the graph to\n\t// invoke the dblClickAction for a cell and reset\n\t// the selection tool in the toolbar\n\tthis.installDblClickHandler(graph);\n\n\t// Installs the command history\n\tthis.installUndoHandler(graph);\n\n\t// Installs the handlers for the root event\n\tthis.installDrillHandler(graph);\n\n\t// Installs the handler for validation\n\tthis.installChangeHandler(graph);\n\n\t// Installs the handler for calling the\n\t// insert function and consume the\n\t// event if an insert function is defined\n\tthis.installInsertHandler(graph);\n\n\t// Redirects the function for creating the\n\t// popupmenu items\n\tgraph.popupMenuHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(menu, cell, evt)\n\t\t{\n\t\t\treturn this.createPopupMenu(menu, cell, evt);\n\t\t});\n\n\t// Redirects the function for creating\n\t// new connections in the diagram\n\tgraph.connectionHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(source, target)\n\t\t{\n\t\t\treturn this.createEdge(source, target);\n\t\t});\n\n\t// Maintains swimlanes and installs autolayout\n\tthis.createSwimlaneManager(graph);\n\tthis.createLayoutManager(graph);\n\n\treturn graph;\n};\n\n/**\n * Function: createSwimlaneManager\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.createSwimlaneManager = function (graph)\n{\n\tvar swimlaneMgr = new mxSwimlaneManager(graph, false);\n\n\tswimlaneMgr.isHorizontal = mxUtils.bind(this, function()\n\t{\n\t\treturn this.horizontalFlow;\n\t});\n\n\tswimlaneMgr.isEnabled = mxUtils.bind(this, function()\n\t{\n\t\treturn this.maintainSwimlanes;\n\t});\n\n\treturn swimlaneMgr;\n};\n\n/**\n * Function: createLayoutManager\n *\n * Creates a layout manager for the swimlane and diagram layouts, that\n * is, the locally defined inter- and intraswimlane layouts.\n */\nmxEditor.prototype.createLayoutManager = function (graph)\n{\n\tvar layoutMgr = new mxLayoutManager(graph);\n\n\tvar self = this; // closure\n\tlayoutMgr.getLayout = function(cell)\n\t{\n\t\tvar layout = null;\n\t\tvar model = self.graph.getModel();\n\n\t\tif (model.getParent(cell) != null)\n\t\t{\n\t\t\t// Executes the swimlane layout if a child of\n\t\t\t// a swimlane has been changed. The layout is\n\t\t\t// lazy created in createSwimlaneLayout.\n\t\t\tif (self.layoutSwimlanes &&\n\t\t\t\tgraph.isSwimlane(cell))\n\t\t\t{\n\t\t\t\tif (self.swimlaneLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.swimlaneLayout = self.createSwimlaneLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.swimlaneLayout;\n\t\t\t}\n\n\t\t\t// Executes the diagram layout if the modified\n\t\t\t// cell is a top-level cell. The layout is\n\t\t\t// lazy created in createDiagramLayout.\n\t\t\telse if (self.layoutDiagram &&\n\t\t\t\t(graph.isValidRoot(cell) ||\n\t\t\t\tmodel.getParent(model.getParent(cell)) == null))\n\t\t\t{\n\t\t\t\tif (self.diagramLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.diagramLayout = self.createDiagramLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.diagramLayout;\n\t\t\t}\n\t\t}\n\n\t\treturn layout;\n\t};\n\n\treturn layoutMgr;\n};\n\n/**\n * Function: setGraphContainer\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.setGraphContainer = function (container)\n{\n\tif (this.graph.container == null)\n\t{\n\t\t// Creates the graph instance inside the given container and render hint\n\t\t//this.graph = new mxGraph(container, null, this.graphRenderHint);\n\t\tthis.graph.init(container);\n\n\t\t// Install rubberband selection as the last\n\t\t// action handler in the chain\n\t\tthis.rubberband = new mxRubberband(this.graph);\n\n\t\t// Disables the context menu\n\t\tif (this.disableContextMenu)\n\t\t{\n\t\t\tmxEvent.disableContextMenu(container);\n\t\t}\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: installDblClickHandler\n *\n * Overrides <mxGraph.dblClick> to invoke <dblClickAction>\n * on a cell and reset the selection tool in the toolbar.\n */\nmxEditor.prototype.installDblClickHandler = function (graph)\n{\n\t// Installs a listener for double click events\n\tgraph.addListener(mxEvent.DOUBLE_CLICK,\n\t\tmxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar cell = evt.getProperty('cell');\n\n\t\t\tif (cell != null &&\n\t\t\t\tgraph.isEnabled() &&\n\t\t\t\tthis.dblClickAction != null)\n\t\t\t{\n\t\t\t\tthis.execute(this.dblClickAction, cell);\n\t\t\t\tevt.consume();\n\t\t\t}\n\t\t})\n\t);\n};\n\n/**\n * Function: installUndoHandler\n *\n * Adds the <undoManager> to the graph model and the view.\n */\nmxEditor.prototype.installUndoHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tvar edit = evt.getProperty('edit');\n\t\tthis.undoManager.undoableEditHappened(edit);\n\t});\n\n\tgraph.getModel().addListener(mxEvent.UNDO, listener);\n\tgraph.getView().addListener(mxEvent.UNDO, listener);\n\n\t// Keeps the selection state in sync\n\tvar undoHandler = function(sender, evt)\n\t{\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\tgraph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n\t};\n\n\tthis.undoManager.addListener(mxEvent.UNDO, undoHandler);\n\tthis.undoManager.addListener(mxEvent.REDO, undoHandler);\n};\n\n/**\n * Function: installDrillHandler\n *\n * Installs listeners for dispatching the <root> event.\n */\nmxEditor.prototype.installDrillHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t});\n\n\tgraph.getView().addListener(mxEvent.DOWN, listener);\n\tgraph.getView().addListener(mxEvent.UP, listener);\n};\n\n/**\n * Function: installChangeHandler\n *\n * Installs the listeners required to automatically validate\n * the graph. On each change of the root, this implementation\n * fires a <root> event.\n */\nmxEditor.prototype.installChangeHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Updates the modified state\n\t\tthis.setModified(true);\n\n\t\t// Automatically validates the graph\n\t\t// after each change\n\t\tif (this.validating == true)\n\t\t{\n\t\t\tgraph.validateGraph();\n\t\t}\n\n\t\t// Checks if the root has been changed\n\t\tvar changes = evt.getProperty('edit').changes;\n\n\t\tfor (var i = 0; i < changes.length; i++)\n\t\t{\n\t\t\tvar change = changes[i];\n\n\t\t\tif (change instanceof mxRootChange ||\n\t\t\t\t(change instanceof mxValueChange &&\n\t\t\t\tchange.cell == this.graph.model.root) ||\n\t\t\t\t(change instanceof mxCellAttributeChange &&\n\t\t\t\tchange.cell == this.graph.model.root))\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\tgraph.getModel().addListener(mxEvent.CHANGE, listener);\n};\n\n/**\n * Function: installInsertHandler\n *\n * Installs the handler for invoking <insertFunction> if\n * one is defined.\n */\nmxEditor.prototype.installInsertHandler = function (graph)\n{\n\tvar self = this; // closure\n\tvar insertHandler =\n\t{\n\t\tmouseDown: function(sender, me)\n\t\t{\n\t\t\tif (self.insertFunction != null &&\n\t\t\t\t!me.isPopupTrigger() &&\n\t\t\t\t(self.forcedInserting ||\n\t\t\t\tme.getState() == null))\n\t\t\t{\n\t\t\t\tself.graph.clearSelection();\n\t\t\t\tself.insertFunction(me.getEvent(), me.getCell());\n\n\t\t\t\t// Consumes the rest of the events\n\t\t\t\t// for this gesture (down, move, up)\n\t\t\t\tthis.isActive = true;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseMove: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseUp: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tthis.isActive = false;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t}\n\t};\n\n\tgraph.addMouseListener(insertHandler);\n};\n\n/**\n * Function: createDiagramLayout\n *\n * Creates the layout instance used to layout the\n * swimlanes in the diagram.\n */\nmxEditor.prototype.createDiagramLayout = function ()\n{\n\tvar gs = this.graph.gridSize;\n\tvar layout = new mxStackLayout(this.graph, !this.horizontalFlow,\n\t\t this.swimlaneSpacing, 2*gs, 2*gs);\n\n\t// Overrides isIgnored to only take into account swimlanes\n\tlayout.isVertexIgnored = function(cell)\n\t{\n\t\treturn !layout.graph.isSwimlane(cell);\n\t};\n\n\treturn layout;\n};\n\n/**\n * Function: createSwimlaneLayout\n *\n * Creates the layout instance used to layout the\n * children of each swimlane.\n */\nmxEditor.prototype.createSwimlaneLayout = function ()\n{\n\treturn new mxCompactTreeLayout(this.graph, this.horizontalFlow);\n};\n\n/**\n * Function: createToolbar\n *\n * Creates the <toolbar> with no container.\n */\nmxEditor.prototype.createToolbar = function ()\n{\n\treturn new mxDefaultToolbar(null, this);\n};\n\n/**\n * Function: setToolbarContainer\n *\n * Initializes the toolbar for the given container.\n */\nmxEditor.prototype.setToolbarContainer = function (container)\n{\n\tthis.toolbar.init(container);\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: setStatusContainer\n *\n * Creates the <status> using the specified container.\n *\n * This implementation adds listeners in the editor to\n * display the last saved time and the current filename\n * in the status bar.\n *\n * Parameters:\n *\n * container - DOM node that will contain the statusbar.\n */\nmxEditor.prototype.setStatusContainer = function (container)\n{\n\tif (this.status == null)\n\t{\n\t\tthis.status = container;\n\n\t\t// Prints the last saved time in the status bar\n\t\t// when files are saved\n\t\tthis.addListener(mxEvent.SAVE, mxUtils.bind(this, function()\n\t\t{\n\t\t\tvar tstamp = new Date().toLocaleString();\n\t\t\tthis.setStatus((mxResources.get(this.lastSavedResource) ||\n\t\t\t\tthis.lastSavedResource)+': '+tstamp);\n\t\t}));\n\n\t\t// Updates the statusbar to display the filename\n\t\t// when new files are opened\n\t\tthis.addListener(mxEvent.OPEN, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.setStatus((mxResources.get(this.currentFileResource) ||\n\t\t\t\tthis.currentFileResource)+': '+this.filename);\n\t\t}));\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: setStatus\n *\n * Display the specified message in the status bar.\n *\n * Parameters:\n *\n * message - String the specified the message to\n * be displayed.\n */\nmxEditor.prototype.setStatus = function (message)\n{\n\tif (this.status != null && message != null)\n\t{\n\t\tthis.status.innerHTML = message;\n\t}\n};\n\n/**\n * Function: setTitleContainer\n *\n * Creates a listener to update the inner HTML of the\n * specified DOM node with the value of <getTitle>.\n *\n * Parameters:\n *\n * container - DOM node that will contain the title.\n */\nmxEditor.prototype.setTitleContainer = function (container)\n{\n\tthis.addListener(mxEvent.ROOT, mxUtils.bind(this, function(sender)\n\t{\n\t\tcontainer.innerHTML = this.getTitle();\n\t}));\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: treeLayout\n *\n * Executes a vertical or horizontal compact tree layout\n * using the specified cell as an argument. The cell may\n * either be a group or the root of a tree.\n *\n * Parameters:\n *\n * cell - <mxCell> to use in the compact tree layout.\n * horizontal - Optional boolean to specify the tree's\n * orientation. Default is true.\n */\nmxEditor.prototype.treeLayout = function (cell, horizontal)\n{\n\tif (cell != null)\n\t{\n\t\tvar layout = new mxCompactTreeLayout(this.graph, horizontal);\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: getTitle\n *\n * Returns the string value for the current root of the\n * diagram.\n */\nmxEditor.prototype.getTitle = function ()\n{\n\tvar title = '';\n\tvar graph = this.graph;\n\tvar cell = graph.getCurrentRoot();\n\n\twhile (cell != null &&\n\t\t   graph.getModel().getParent(\n\t\t\t\tgraph.getModel().getParent(cell)) != null)\n\t{\n\t\t// Append each label of a valid root\n\t\tif (graph.isValidRoot(cell))\n\t\t{\n\t\t\ttitle = ' > ' +\n\t\t\tgraph.convertValueToString(cell) + title;\n\t\t}\n\n\t\tcell = graph.getModel().getParent(cell);\n\t}\n\n\tvar prefix = this.getRootTitle();\n\n\treturn prefix + title;\n};\n\n/**\n * Function: getRootTitle\n *\n * Returns the string value of the root cell in\n * <mxGraph.model>.\n */\nmxEditor.prototype.getRootTitle = function ()\n{\n\tvar root = this.graph.getModel().getRoot();\n\treturn this.graph.convertValueToString(root);\n};\n\n/**\n * Function: undo\n *\n * Undo the last change in <graph>.\n */\nmxEditor.prototype.undo = function ()\n{\n\tthis.undoManager.undo();\n};\n\n/**\n * Function: redo\n *\n * Redo the last change in <graph>.\n */\nmxEditor.prototype.redo = function ()\n{\n\tthis.undoManager.redo();\n};\n\n/**\n * Function: groupCells\n *\n * Invokes <createGroup> to create a new group cell and the invokes\n * <mxGraph.groupCells>, using the grid size of the graph as the spacing\n * in the group's content area.\n */\nmxEditor.prototype.groupCells = function ()\n{\n\tvar border = (this.groupBorderSize != null) ?\n\t\tthis.groupBorderSize :\n\t\tthis.graph.gridSize;\n\treturn this.graph.groupCells(this.createGroup(), border);\n};\n\n/**\n * Function: createGroup\n *\n * Creates and returns a clone of <defaultGroup> to be used\n * as a new group cell in <group>.\n */\nmxEditor.prototype.createGroup = function ()\n{\n\tvar model = this.graph.getModel();\n\n\treturn model.cloneCell(this.defaultGroup);\n};\n\n/**\n * Function: open\n *\n * Opens the specified file synchronously and parses it using\n * <readGraphModel>. It updates <filename> and fires an <open>-event after\n * the file has been opened. Exceptions should be handled as follows:\n *\n * (code)\n * try\n * {\n *   editor.open(filename);\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot open ' + filename +\n *     ': ' + e.message, 280, true);\n * }\n * (end)\n *\n * Parameters:\n *\n * filename - URL of the file to be opened.\n */\nmxEditor.prototype.open = function (filename)\n{\n\tif (filename != null)\n\t{\n\t\tvar xml = mxUtils.load(filename).getXml();\n\t\tthis.readGraphModel(xml.documentElement);\n\t\tthis.filename = filename;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.OPEN, 'filename', filename));\n\t}\n};\n\n/**\n * Function: readGraphModel\n *\n * Reads the specified XML node into the existing graph model and resets\n * the command history and modified state.\n */\nmxEditor.prototype.readGraphModel = function (node)\n{\n\tvar dec = new mxCodec(node.ownerDocument);\n\tdec.decode(node, this.graph.getModel());\n\tthis.resetHistory();\n};\n\n/**\n * Function: save\n *\n * Posts the string returned by <writeGraphModel> to the given URL or the\n * URL returned by <getUrlPost>. The actual posting is carried out by\n * <postDiagram>. If the URL is null then the resulting XML will be\n * displayed using <mxUtils.popup>. Exceptions should be handled as\n * follows:\n *\n * (code)\n * try\n * {\n *   editor.save();\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot save : ' + e.message, 280, true);\n * }\n * (end)\n */\nmxEditor.prototype.save = function (url, linefeed)\n{\n\t// Gets the URL to post the data to\n\turl = url || this.getUrlPost();\n\n\t// Posts the data if the URL is not empty\n\tif (url != null && url.length > 0)\n\t{\n\t\tvar data = this.writeGraphModel(linefeed);\n\t\tthis.postDiagram(url, data);\n\n\t\t// Resets the modified flag\n\t\tthis.setModified(false);\n\t}\n\n\t// Dispatches a save event\n\tthis.fireEvent(new mxEventObject(mxEvent.SAVE, 'url', url));\n};\n\n/**\n * Function: postDiagram\n *\n * Hook for subclassers to override the posting of a diagram\n * represented by the given node to the given URL. This fires\n * an asynchronous <post> event if the diagram has been posted.\n *\n * Example:\n *\n * To replace the diagram with the diagram in the response, use the\n * following code.\n *\n * (code)\n * editor.addListener(mxEvent.POST, function(sender, evt)\n * {\n *   // Process response (replace diagram)\n *   var req = evt.getProperty('request');\n *   var root = req.getDocumentElement();\n *   editor.graph.readGraphModel(root)\n * });\n * (end)\n */\nmxEditor.prototype.postDiagram = function (url, data)\n{\n\tif (this.escapePostData)\n\t{\n\t\tdata = encodeURIComponent(data);\n\t}\n\n\tmxUtils.post(url, this.postParameterName+'='+data,\n\t\tmxUtils.bind(this, function(req)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.POST,\n\t\t\t\t'request', req, 'url', url, 'data', data));\n\t\t})\n\t);\n};\n\n/**\n * Function: writeGraphModel\n *\n * Hook to create the string representation of the diagram. The default\n * implementation uses an <mxCodec> to encode the graph model as\n * follows:\n *\n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(this.graph.getModel());\n * return mxUtils.getXml(node, this.linefeed);\n * (end)\n *\n * Parameters:\n *\n * linefeed - Optional character to be used as the linefeed. Default is\n * <linefeed>.\n */\nmxEditor.prototype.writeGraphModel = function (linefeed)\n{\n\tlinefeed = (linefeed != null) ? linefeed : this.linefeed;\n\tvar enc = new mxCodec();\n\tvar node = enc.encode(this.graph.getModel());\n\n\treturn mxUtils.getXml(node, linefeed);\n};\n\n/**\n * Function: getUrlPost\n *\n * Returns the URL to post the diagram to. This is used\n * in <save>. The default implementation returns <urlPost>,\n * adding <code>?draft=true</code>.\n */\nmxEditor.prototype.getUrlPost = function ()\n{\n\treturn this.urlPost;\n};\n\n/**\n * Function: getUrlImage\n *\n * Returns the URL to create the image with. This is typically\n * the URL of a backend which accepts an XML representation\n * of a graph view to create an image. The function is used\n * in the image action to create an image. This implementation\n * returns <urlImage>.\n */\nmxEditor.prototype.getUrlImage = function ()\n{\n\treturn this.urlImage;\n};\n\n/**\n * Function: swapStyles\n *\n * Swaps the styles for the given names in the graph's\n * stylesheet and refreshes the graph.\n */\nmxEditor.prototype.swapStyles = function (first, second)\n{\n\tvar style = this.graph.getStylesheet().styles[second];\n\tthis.graph.getView().getStylesheet().putCellStyle(\n\t\tsecond, this.graph.getStylesheet().styles[first]);\n\tthis.graph.getStylesheet().putCellStyle(first, style);\n\tthis.graph.refresh();\n};\n\n/**\n * Function: showProperties\n *\n * Creates and shows the properties dialog for the given\n * cell. The content area of the dialog is created using\n * <createProperties>.\n */\nmxEditor.prototype.showProperties = function (cell)\n{\n\tcell = cell || this.graph.getSelectionCell();\n\n\t// Uses the root node for the properties dialog\n\t// if not cell was passed in and no cell is\n\t// selected\n\tif (cell == null)\n\t{\n\t\tcell = this.graph.getCurrentRoot();\n\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.graph.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (cell != null)\n\t{\n\t\t// Makes sure there is no in-place editor in the\n\t\t// graph and computes the location of the dialog\n\t\tthis.graph.stopEditing(true);\n\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar x = offset.x+10;\n\t\tvar y = offset.y;\n\n\t\t// Avoids moving the dialog if it is alredy open\n\t\tif (this.properties != null && !this.movePropertiesDialog)\n\t\t{\n\t\t\tx = this.properties.getX();\n\t\t\ty = this.properties.getY();\n\t\t}\n\n\t\t// Places the dialog near the cell for which it\n\t\t// displays the properties\n\t\telse\n\t\t{\n\t\t\tvar bounds = this.graph.getCellBounds(cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tx += bounds.x+Math.min(200, bounds.width);\n\t\t\t\ty += bounds.y;\n\t\t\t}\n\t\t}\n\n\t\t// Hides the existing properties dialog and creates a new one with the\n\t\t// contents created in the hook method\n\t\tthis.hideProperties();\n\t\tvar node = this.createProperties(cell);\n\n\t\tif (node != null)\n\t\t{\n\t\t\t// Displays the contents in a window and stores a reference to the\n\t\t\t// window for later hiding of the window\n\t\t\tthis.properties = new mxWindow(mxResources.get(this.propertiesResource) ||\n\t\t\t\tthis.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n\t\t\tthis.properties.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: isPropertiesVisible\n *\n * Returns true if the properties dialog is currently visible.\n */\nmxEditor.prototype.isPropertiesVisible = function ()\n{\n\treturn this.properties != null;\n};\n\n/**\n * Function: createProperties\n *\n * Creates and returns the DOM node that represents the contents\n * of the properties dialog for the given cell. This implementation\n * works for user objects that are XML nodes and display all the\n * node attributes in a form.\n */\nmxEditor.prototype.createProperties = function (cell)\n{\n\tvar model = this.graph.getModel();\n\tvar value = model.getValue(cell);\n\n\tif (mxUtils.isNode(value))\n\t{\n\t\t// Creates a form for the user object inside\n\t\t// the cell\n\t\tvar form = new mxForm('properties');\n\n\t\t// Adds a readonly field for the cell id\n\t\tvar id = form.addText('ID', cell.getId());\n\t\tid.setAttribute('readonly', 'true');\n\n\t\tvar geo = null;\n\t\tvar yField = null;\n\t\tvar xField = null;\n\t\tvar widthField = null;\n\t\tvar heightField = null;\n\n\t\t// Adds fields for the location and size\n\t\tif (model.isVertex(cell))\n\t\t{\n\t\t\tgeo = model.getGeometry(cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tyField = form.addText('top', geo.y);\n\t\t\t\txField = form.addText('left', geo.x);\n\t\t\t\twidthField = form.addText('width', geo.width);\n\t\t\t\theightField = form.addText('height', geo.height);\n\t\t\t}\n\t\t}\n\n\t\t// Adds a field for the cell style\n\t\tvar tmp = model.getStyle(cell);\n\t\tvar style = form.addText('Style', tmp || '');\n\n\t\t// Creates textareas for each attribute of the\n\t\t// user object within the cell\n\t\tvar attrs = value.attributes;\n\t\tvar texts = [];\n\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\t// Creates a textarea with more lines for\n\t\t\t// the cell label\n\t\t\tvar val = attrs[i].value;\n\t\t\ttexts[i] = form.addTextarea(attrs[i].nodeName, val,\n\t\t\t\t(attrs[i].nodeName == 'label') ? 4 : 2);\n\t\t}\n\n\t\t// Adds an OK and Cancel button to the dialog\n\t\t// contents and implements the respective\n\t\t// actions below\n\n\t\t// Defines the function to be executed when the\n\t\t// OK button is pressed in the dialog\n\t\tvar okFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\n\t\t\t// Supports undo for the changes on the underlying\n\t\t\t// XML structure / XML node attribute changes.\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\n\t\t\t\t\tgeo.x = parseFloat(xField.value);\n\t\t\t\t\tgeo.y = parseFloat(yField.value);\n\t\t\t\t\tgeo.width = parseFloat(widthField.value);\n\t\t\t\t\tgeo.height = parseFloat(heightField.value);\n\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\n\t\t\t\t// Applies the style\n\t\t\t\tif (style.value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, style.value);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, null);\n\t\t\t\t}\n\n\t\t\t\t// Creates an undoable change for each\n\t\t\t\t// attribute and executes it using the\n\t\t\t\t// model, which will also make the change\n\t\t\t\t// part of the current transaction\n\t\t\t\tfor (var i=0; i<attrs.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar edit = new mxCellAttributeChange(\n\t\t\t\t\t\tcell, attrs[i].nodeName,\n\t\t\t\t\t\ttexts[i].value);\n\t\t\t\t\tmodel.execute(edit);\n\t\t\t\t}\n\n\t\t\t\t// Checks if the graph wants cells to\n\t\t\t\t// be automatically sized and updates\n\t\t\t\t// the size as an undoable step if\n\t\t\t\t// the feature is enabled\n\t\t\t\tif (this.graph.isAutoSizeCell(cell))\n\t\t\t\t{\n\t\t\t\t\tthis.graph.updateCellSize(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t});\n\n\t\t// Defines the function to be executed when the\n\t\t// Cancel button is pressed in the dialog\n\t\tvar cancelFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t});\n\n\t\tform.addButtons(okFunction, cancelFunction);\n\n\t\treturn form.table;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: hideProperties\n *\n * Hides the properties dialog.\n */\nmxEditor.prototype.hideProperties = function ()\n{\n\tif (this.properties != null)\n\t{\n\t\tthis.properties.destroy();\n\t\tthis.properties = null;\n\t}\n};\n\n/**\n * Function: showTasks\n *\n * Shows the tasks window. The tasks window is created using <createTasks>. The\n * default width of the window is 200 pixels, the y-coordinate of the location\n * can be specifies in <tasksTop> and the x-coordinate is right aligned with a\n * 20 pixel offset from the right border. To change the location of the tasks\n * window, the following code can be used:\n *\n * (code)\n * var oldShowTasks = mxEditor.prototype.showTasks;\n * mxEditor.prototype.showTasks = function()\n * {\n *   oldShowTasks.apply(this, arguments); // \"supercall\"\n *\n *   if (this.tasks != null)\n *   {\n *     this.tasks.setLocation(10, 10);\n *   }\n * };\n * (end)\n */\nmxEditor.prototype.showTasks = function ()\n{\n\tif (this.tasks == null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '4px';\n\t\tdiv.style.paddingLeft = '20px';\n\t\tvar w = document.body.clientWidth;\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.tasksResource) ||\n\t\t\tthis.tasksResource,\n\t\t\tdiv, w - 220, this.tasksTop, 200);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\t// Installs a function to update the contents\n\t\t// of the tasks window on every change of the\n\t\t// model, selection or root.\n\t\tvar funct = mxUtils.bind(this, function(sender)\n\t\t{\n\t\t\tmxEvent.release(div);\n\t\t\tdiv.innerHTML = '';\n\t\t\tthis.createTasks(div);\n\t\t});\n\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.addListener(mxEvent.ROOT, funct);\n\n\t\t// Assigns the icon to the tasks window\n\t\tif (this.tasksWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.tasksWindowImage);\n\t\t}\n\n\t\tthis.tasks = wnd;\n\t\tthis.createTasks(div);\n\t}\n\n\tthis.tasks.setVisible(true);\n};\n\n/**\n * Function: refreshTasks\n *\n * Updates the contents of the tasks window using <createTasks>.\n */\nmxEditor.prototype.refreshTasks = function (div)\n{\n\tif (this.tasks != null)\n\t{\n\t\tvar div = this.tasks.content;\n\t\tmxEvent.release(div);\n\t\tdiv.innerHTML = '';\n\t\tthis.createTasks(div);\n\t}\n};\n\n/**\n * Function: createTasks\n *\n * Updates the contents of the given DOM node to\n * display the tasks associated with the current\n * editor state. This is invoked whenever there\n * is a possible change of state in the editor.\n * Default implementation is empty.\n */\nmxEditor.prototype.createTasks = function (div)\n{\n\t// override\n};\n\n/**\n * Function: showHelp\n *\n * Shows the help window. If the help window does not exist\n * then it is created using an iframe pointing to the resource\n * for the <code>urlHelp</code> key or <urlHelp> if the resource\n * is undefined.\n */\nmxEditor.prototype.showHelp = function (tasks)\n{\n\tif (this.help == null)\n\t{\n\t\tvar frame = document.createElement('iframe');\n\t\tframe.setAttribute('src', mxResources.get('urlHelp') || this.urlHelp);\n\t\tframe.setAttribute('height', '100%');\n\t\tframe.setAttribute('width', '100%');\n\t\tframe.setAttribute('frameBorder', '0');\n\t\tframe.style.backgroundColor = 'white';\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\n\t\tvar wnd = new mxWindow(mxResources.get(this.helpResource) || this.helpResource,\n\t\t\tframe, (w-this.helpWidth)/2, (h-this.helpHeight)/3, this.helpWidth, this.helpHeight);\n\t\twnd.setMaximizable(true);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\twnd.setResizable(true);\n\n\t\t// Assigns the icon to the help window\n\t\tif (this.helpWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.helpWindowImage);\n\t\t}\n\n\t\t// Workaround for ignored iframe height 100% in FF\n\t\tif (mxClient.IS_NS)\n\t\t{\n\t\t\tvar handler = function(sender)\n\t\t\t{\n\t\t\t\tvar h = wnd.div.offsetHeight;\n\t\t\t\tframe.setAttribute('height', (h-26)+'px');\n\t\t\t};\n\n\t\t\twnd.addListener(mxEvent.RESIZE_END, handler);\n\t\t\twnd.addListener(mxEvent.MAXIMIZE, handler);\n\t\t\twnd.addListener(mxEvent.NORMALIZE, handler);\n\t\t\twnd.addListener(mxEvent.SHOW, handler);\n\t\t}\n\n\t\tthis.help = wnd;\n\t}\n\n\tthis.help.setVisible(true);\n};\n\n/**\n * Function: showOutline\n *\n * Shows the outline window. If the window does not exist, then it is\n * created using an <mxOutline>.\n */\nmxEditor.prototype.showOutline = function ()\n{\n\tvar create = this.outline == null;\n\n\tif (create)\n\t{\n\t\tvar div = document.createElement('div');\n\n\t\tdiv.style.overflow = 'hidden';\n\t\tdiv.style.position = 'relative';\n\t\tdiv.style.width = '100%';\n\t\tdiv.style.height = '100%';\n\t\tdiv.style.background = 'white';\n\t\tdiv.style.cursor = 'move';\n\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdiv.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n\t\t}\n\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.outlineResource) ||\n\t\t\tthis.outlineResource,\n\t\t\tdiv, 600, 480, 200, 200, false);\n\n\t\t// Creates the outline in the specified div\n\t\t// and links it to the existing graph\n\t\tvar outline = new mxOutline(this.graph, div);\n\t\twnd.setClosable(true);\n\t\twnd.setResizable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\twnd.addListener(mxEvent.RESIZE_END, function()\n\t\t{\n\t\t\toutline.update();\n\t\t});\n\n\t\tthis.outline = wnd;\n\t\tthis.outline.outline = outline;\n\t}\n\n\t// Finally shows the outline\n\tthis.outline.setVisible(true);\n\tthis.outline.outline.update(true);\n};\n\n/**\n * Function: setMode\n *\n * Puts the graph into the specified mode. The following modenames are\n * supported:\n *\n * select - Selects using the left mouse button, new connections\n * are disabled.\n * connect - Selects using the left mouse button or creates new\n * connections if mouse over cell hotspot. See <mxConnectionHandler>.\n * pan - Pans using the left mouse button, new connections are disabled.\n */\nmxEditor.prototype.setMode = function(modename)\n{\n\tif (modename == 'select')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(false);\n\t}\n\telse if (modename == 'connect')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(true);\n\t}\n\telse if (modename == 'pan')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = true;\n\t\tthis.graph.setConnectable(false);\n\t}\n};\n\n/**\n * Function: createPopupMenu\n *\n * Uses <popupHandler> to create the menu in the graph's\n * panning handler. The redirection is setup in\n * <setToolbarContainer>.\n */\nmxEditor.prototype.createPopupMenu = function (menu, cell, evt)\n{\n\tthis.popupHandler.createMenu(this, menu, cell, evt);\n};\n\n/**\n * Function: createEdge\n *\n * Uses <defaultEdge> as the prototype for creating new edges\n * in the connection handler of the graph. The style of the\n * edge will be overridden with the value returned by\n * <getEdgeStyle>.\n */\nmxEditor.prototype.createEdge = function (source, target)\n{\n\t// Clones the defaultedge prototype\n\tvar e = null;\n\n\tif (this.defaultEdge != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\te = model.cloneCell(this.defaultEdge);\n\t}\n\telse\n\t{\n\t\te = new mxCell('');\n\t\te.setEdge(true);\n\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\te.setGeometry(geo);\n\t}\n\n\t// Overrides the edge style\n\tvar style = this.getEdgeStyle();\n\n\tif (style != null)\n\t{\n\t\te.setStyle(style);\n\t}\n\n\treturn e;\n};\n\n/**\n * Function: getEdgeStyle\n *\n * Returns a string identifying the style of new edges.\n * The function is used in <createEdge> when new edges\n * are created in the graph.\n */\nmxEditor.prototype.getEdgeStyle = function ()\n{\n\treturn this.defaultEdgeStyle;\n};\n\n/**\n * Function: consumeCycleAttribute\n *\n * Returns the next attribute in <cycleAttributeValues>\n * or null, if not attribute should be used in the\n * specified cell.\n */\nmxEditor.prototype.consumeCycleAttribute = function (cell)\n{\n\treturn (this.cycleAttributeValues != null &&\n\t\tthis.cycleAttributeValues.length > 0 &&\n\t\tthis.graph.isSwimlane(cell)) ?\n\t\tthis.cycleAttributeValues[this.cycleAttributeIndex++ %\n\t\t\tthis.cycleAttributeValues.length] : null;\n};\n\n/**\n * Function: cycleAttribute\n *\n * Uses the returned value from <consumeCycleAttribute>\n * as the value for the <cycleAttributeName> key in\n * the given cell's style.\n */\nmxEditor.prototype.cycleAttribute = function (cell)\n{\n\tif (this.cycleAttributeName != null)\n\t{\n\t\tvar value = this.consumeCycleAttribute(cell);\n\n\t\tif (value != null)\n\t\t{\n\t\t\tcell.setStyle(cell.getStyle()+';'+\n\t\t\t\tthis.cycleAttributeName+'='+value);\n\t\t}\n\t}\n};\n\n/**\n * Function: addVertex\n *\n * Adds the given vertex as a child of parent at the specified\n * x and y coordinate and fires an <addVertex> event.\n */\nmxEditor.prototype.addVertex = function (parent, vertex, x, y)\n{\n\tvar model = this.graph.getModel();\n\n\twhile (parent != null && !this.graph.isValidDropTarget(parent))\n\t{\n\t\tparent = model.getParent(parent);\n\t}\n\n\tparent = (parent != null) ? parent : this.graph.getSwimlaneAt(x, y);\n\tvar scale = this.graph.getView().scale;\n\n\tvar geo = model.getGeometry(vertex);\n\tvar pgeo = model.getGeometry(parent);\n\n\tif (this.graph.isSwimlane(vertex) &&\n\t\t!this.graph.swimlaneNesting)\n\t{\n\t\tparent = null;\n\t}\n\telse if (parent == null && this.swimlaneRequired)\n\t{\n\t\treturn null;\n\t}\n\telse if (parent != null && pgeo != null)\n\t{\n\t\t// Keeps vertex inside parent\n\t\tvar state = this.graph.getView().getState(parent);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tx -= state.origin.x * scale;\n\t\t\ty -= state.origin.y * scale;\n\n\t\t\tif (this.graph.isConstrainedMoving)\n\t\t\t{\n\t\t\t\tvar width = geo.width;\n\t\t\t\tvar height = geo.height;\n\t\t\t\tvar tmp = state.x+state.width;\n\n\t\t\t\tif (x+width > tmp)\n\t\t\t\t{\n\t\t\t\t\tx -= x+width - tmp;\n\t\t\t\t}\n\n\t\t\t\ttmp = state.y+state.height;\n\n\t\t\t\tif (y+height > tmp)\n\t\t\t\t{\n\t\t\t\t\ty -= y+height - tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (pgeo != null)\n\t\t{\n\t\t\tx -= pgeo.x*scale;\n\t\t\ty -= pgeo.y*scale;\n\t\t}\n\t}\n\n\tgeo = geo.clone();\n\tgeo.x = this.graph.snap(x / scale -\n\t\tthis.graph.getView().translate.x -\n\t\tthis.graph.gridSize/2);\n\tgeo.y = this.graph.snap(y / scale -\n\t\tthis.graph.getView().translate.y -\n\t\tthis.graph.gridSize/2);\n\tvertex.setGeometry(geo);\n\n\tif (parent == null)\n\t{\n\t\tparent = this.graph.getDefaultParent();\n\t}\n\n\tthis.cycleAttribute(vertex);\n\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_ADD_VERTEX,\n\t\t\t'vertex', vertex, 'parent', parent));\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvertex = this.graph.addCell(vertex, parent);\n\n\t\tif (vertex != null)\n\t\t{\n\t\t\tthis.graph.constrainChild(vertex);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_VERTEX, 'vertex', vertex));\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\n\tif (vertex != null)\n\t{\n\t\tthis.graph.setSelectionCell(vertex);\n\t\tthis.graph.scrollCellToVisible(vertex);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.AFTER_ADD_VERTEX, 'vertex', vertex));\n\t}\n\n\treturn vertex;\n};\n\n/**\n * Function: destroy\n *\n * Removes the editor and all its associated resources. This does not\n * normally need to be called, it is called automatically when the window\n * unloads.\n */\nmxEditor.prototype.destroy = function ()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tif (this.tasks != null)\n\t\t{\n\t\t\tthis.tasks.destroy();\n\t\t}\n\n\t\tif (this.outline != null)\n\t\t{\n\t\t\tthis.outline.destroy();\n\t\t}\n\n\t\tif (this.properties != null)\n\t\t{\n\t\t\tthis.properties.destroy();\n\t\t}\n\n\t\tif (this.keyHandler != null)\n\t\t{\n\t\t\tthis.keyHandler.destroy();\n\t\t}\n\n\t\tif (this.rubberband != null)\n\t\t{\n\t\t\tthis.rubberband.destroy();\n\t\t}\n\n\t\tif (this.toolbar != null)\n\t\t{\n\t\t\tthis.toolbar.destroy();\n\t\t}\n\n\t\tif (this.graph != null)\n\t\t{\n\t\t\tthis.graph.destroy();\n\t\t}\n\n\t\tthis.status = null;\n\t\tthis.templates = null;\n\t}\n};\n\n__mxOutput.mxEditor = typeof mxEditor !== 'undefined' ? mxEditor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCodecRegistry =\n{\n\t/**\n\t * Class: mxCodecRegistry\n\t *\n\t * Singleton class that acts as a global registry for codecs.\n\t *\n\t * Adding an <mxCodec>:\n\t *\n\t * 1. Define a default codec with a new instance of the \n\t * object to be handled.\n\t *\n\t * (code)\n\t * var codec = new mxObjectCodec(new mxGraphModel());\n\t * (end)\n\t *\n\t * 2. Define the functions required for encoding and decoding\n\t * objects.\n\t *\n\t * (code)\n\t * codec.encode = function(enc, obj) { ... }\n\t * codec.decode = function(dec, node, into) { ... }\n\t * (end)\n\t *\n\t * 3. Register the codec in the <mxCodecRegistry>.\n\t *\n\t * (code)\n\t * mxCodecRegistry.register(codec);\n\t * (end)\n\t *\n\t * <mxObjectCodec.decode> may be used to either create a new \n\t * instance of an object or to configure an existing instance, \n\t * in which case the into argument points to the existing\n\t * object. In this case, we say the codec \"configures\" the\n\t * object.\n\t * \n\t * Variable: codecs\n\t *\n\t * Maps from constructor names to codecs.\n\t */\n\tcodecs: [],\n\t\n\t/**\n\t * Variable: aliases\n\t *\n\t * Maps from classnames to codecnames.\n\t */\n\taliases: [],\n\n\t/**\n\t * Function: register\n\t *\n\t * Registers a new codec and associates the name of the template\n\t * constructor in the codec with the codec object.\n\t *\n\t * Parameters:\n\t *\n\t * codec - <mxObjectCodec> to be registered.\n\t */\n\tregister: function(codec)\n\t{\n\t\tif (codec != null)\n\t\t{\n\t\t\tvar name = codec.getName();\n\t\t\tmxCodecRegistry.codecs[name] = codec;\n\t\t\t\n\t\t\tvar classname = mxUtils.getFunctionName(codec.template.constructor);\n\n\t\t\tif (classname != name)\n\t\t\t{\n\t\t\t\tmxCodecRegistry.addAlias(classname, name);\n\t\t\t}\n\t\t}\n\n\t\treturn codec;\n\t},\n\n\t/**\n\t * Function: addAlias\n\t *\n\t * Adds an alias for mapping a classname to a codecname.\n\t */\n\taddAlias: function(classname, codecname)\n\t{\n\t\tmxCodecRegistry.aliases[classname] = codecname;\n\t},\n\n\t/**\n\t * Function: getCodec\n\t *\n\t * Returns a codec that handles objects that are constructed\n\t * using the given constructor.\n\t *\n\t * Parameters:\n\t *\n\t * ctor - JavaScript constructor function. \n\t */\n\tgetCodec: function(ctor)\n\t{\n\t\tvar codec = null;\n\t\t\n\t\tif (ctor != null)\n\t\t{\n\t\t\tvar name = mxUtils.getFunctionName(ctor);\n\t\t\tvar tmp = mxCodecRegistry.aliases[name];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tname = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tcodec = mxCodecRegistry.codecs[name];\n\t\t\t\n\t\t\t// Registers a new default codec for the given constructor\n\t\t\t// if no codec has been previously defined.\n\t\t\tif (codec == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tcodec = new mxObjectCodec(new ctor());\n\t\t\t\t\tmxCodecRegistry.register(codec);\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn codec;\n\t}\n\n};\n\n__mxOutput.mxCodecRegistry = typeof mxCodecRegistry !== 'undefined' ? mxCodecRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCodec\n *\n * XML codec for JavaScript object graphs. See <mxObjectCodec> for a\n * description of the general encoding/decoding scheme. This class uses the\n * codecs registered in <mxCodecRegistry> for encoding/decoding each object.\n * \n * References:\n * \n * In order to resolve references, especially forward references, the mxCodec\n * constructor must be given the document that contains the referenced\n * elements.\n *\n * Examples:\n *\n * The following code is used to encode a graph model.\n *\n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = mxUtils.getXml(result);\n * (end)\n * \n * Example:\n * \n * Using the code below, an XML document is decoded into an existing model. The\n * document may be obtained using one of the functions in mxUtils for loading\n * an XML file, eg. <mxUtils.get>, or using <mxUtils.parseXml> for parsing an\n * XML string.\n * \n * (code)\n * var doc = mxUtils.parseXml(xmlString);\n * var codec = new mxCodec(doc);\n * codec.decode(doc.documentElement, graph.getModel());\n * (end)\n * \n * Example:\n * \n * This example demonstrates parsing a list of isolated cells into an existing\n * graph model. Note that the cells do not have a parent reference so they can\n * be added anywhere in the cell hierarchy after parsing.\n * \n * (code)\n * var xml = '<root><mxCell id=\"2\" value=\"Hello,\" vertex=\"1\"><mxGeometry x=\"20\" y=\"20\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"3\" value=\"World!\" vertex=\"1\"><mxGeometry x=\"200\" y=\"150\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"4\" value=\"\" edge=\"1\" source=\"2\" target=\"3\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root>';\n * var doc = mxUtils.parseXml(xml);\n * var codec = new mxCodec(doc);\n * var elt = doc.documentElement.firstChild;\n * var cells = [];\n * \n * while (elt != null)\n * {\n *   cells.push(codec.decode(elt));\n *   elt = elt.nextSibling;\n * }\n * \n * graph.addCells(cells);\n * (end)\n * \n * Example:\n * \n * Using the following code, the selection cells of a graph are encoded and the\n * output is displayed in a dialog box.\n * \n * (code)\n * var enc = new mxCodec();\n * var cells = graph.getSelectionCells();\n * mxUtils.alert(mxUtils.getPrettyXml(enc.encode(cells)));\n * (end)\n * \n * Newlines in the XML can be converted to <br>, in which case a '<br>' argument\n * must be passed to <mxUtils.getXml> as the second argument.\n * \n * Debugging:\n * \n * For debugging I/O you can use the following code to get the sequence of\n * encoded objects:\n * \n * (code)\n * var oldEncode = mxCodec.prototype.encode;\n * mxCodec.prototype.encode = function(obj)\n * {\n *   mxLog.show();\n *   mxLog.debug('mxCodec.encode: obj='+mxUtils.getFunctionName(obj.constructor));\n *   \n *   return oldEncode.apply(this, arguments);\n * };\n * (end)\n * \n * Note that the I/O system adds object codecs for new object automatically. For\n * decoding those objects, the constructor should be written as follows:\n * \n * (code)\n * var MyObj = function(name)\n * {\n *   // ...\n * };\n * (end)\n * \n * Constructor: mxCodec\n *\n * Constructs an XML encoder/decoder for the specified\n * owner document.\n *\n * Parameters:\n *\n * document - Optional XML document that contains the data.\n * If no document is specified then a new document is created\n * using <mxUtils.createXmlDocument>.\n */\nfunction mxCodec(document)\n{\n\tthis.document = document || mxUtils.createXmlDocument();\n\tthis.objects = [];\n};\n\n/**\n * Variable: document\n *\n * The owner document of the codec.\n */\nmxCodec.prototype.document = null;\n\n/**\n * Variable: objects\n *\n * Maps from IDs to objects.\n */\nmxCodec.prototype.objects = null;\n\n/**\n * Variable: elements\n * \n * Lookup table for resolving IDs to elements.\n */\nmxCodec.prototype.elements = null;\n\n/**\n * Variable: encodeDefaults\n *\n * Specifies if default values should be encoded. Default is false.\n */\nmxCodec.prototype.encodeDefaults = false;\n\n\n/**\n * Function: putObject\n * \n * Assoiates the given object with the given ID and returns the given object.\n * \n * Parameters\n * \n * id - ID for the object to be associated with.\n * obj - Object to be associated with the ID.\n */\nmxCodec.prototype.putObject = function(id, obj)\n{\n\tthis.objects[id] = obj;\n\t\n\treturn obj;\n};\n\n/**\n * Function: getObject\n *\n * Returns the decoded object for the element with the specified ID in\n * <document>. If the object is not known then <lookup> is used to find an\n * object. If no object is found, then the element with the respective ID\n * from the document is parsed using <decode>.\n */\nmxCodec.prototype.getObject = function(id)\n{\n\tvar obj = null;\n\n\tif (id != null)\n\t{\n\t\tobj = this.objects[id];\n\t\t\n\t\tif (obj == null)\n\t\t{\n\t\t\tobj = this.lookup(id);\n\t\t\t\n\t\t\tif (obj == null)\n\t\t\t{\n\t\t\t\tvar node = this.getElementById(id);\n\t\t\t\t\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tobj = this.decode(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: lookup\n *\n * Hook for subclassers to implement a custom lookup mechanism for cell IDs.\n * This implementation always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * };\n * (end)\n *\n * Parameters:\n *\n * id - ID of the object to be returned.\n */\nmxCodec.prototype.lookup = function(id)\n{\n\treturn null;\n};\n\n/**\n * Function: getElementById\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.getElementById = function(id)\n{\n\tthis.updateElements();\n\t\n\treturn this.elements[id];\n};\n\n/**\n * Function: updateElements\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.updateElements = function()\n{\n\tif (this.elements == null)\n\t{\n\t\tthis.elements = new Object();\n\t\t\n\t\tif (this.document.documentElement != null)\n\t\t{\n\t\t\tthis.addElement(this.document.documentElement);\n\t\t}\n\t}\n};\n\n/**\n * Function: addElement\n *\n * Adds the given element to <elements> if it has an ID.\n */\nmxCodec.prototype.addElement = function(node)\n{\n\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tif (this.elements[id] == null)\n\t\t\t{\n\t\t\t\tthis.elements[id] = node;\n\t\t\t}\n\t\t\telse if (this.elements[id] != node)\n\t\t\t{\n\t\t\t\tthrow new Error(id + ': Duplicate ID');\n\t\t\t}\n\t\t}\n\t}\n\t\n\tnode = node.firstChild;\n\t\n\twhile (node != null)\n\t{\n\t\tthis.addElement(node);\n\t\tnode = node.nextSibling;\n\t}\n};\n\n/**\n * Function: getId\n *\n * Returns the ID of the specified object. This implementation\n * calls <reference> first and if that returns null handles\n * the object as an <mxCell> by returning their IDs using\n * <mxCell.getId>. If no ID exists for the given cell, then\n * an on-the-fly ID is generated using <mxCellPath.create>.\n *\n * Parameters:\n *\n * obj - Object to return the ID for.\n */\nmxCodec.prototype.getId = function(obj)\n{\n\tvar id = null;\n\t\n\tif (obj != null)\n\t{\n\t\tid = this.reference(obj);\n\t\t\n\t\tif (id == null && obj instanceof mxCell)\n\t\t{\n\t\t\tid = obj.getId();\n\t\t\t\n\t\t\tif (id == null)\n\t\t\t{\n\t\t\t\t// Uses an on-the-fly Id\n\t\t\t\tid = mxCellPath.create(obj);\n\t\t\t\t\n\t\t\t\tif (id.length == 0)\n\t\t\t\t{\n\t\t\t\t\tid = 'root';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn id;\n};\n\n/**\n * Function: reference\n *\n * Hook for subclassers to implement a custom method\n * for retrieving IDs from objects. This implementation\n * always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.reference = function(obj)\n * {\n *   return obj.getCustomId();\n * };\n * (end)\n *\n * Parameters:\n *\n * obj - Object whose ID should be returned.\n */\nmxCodec.prototype.reference = function(obj)\n{\n\treturn null;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns the resulting\n * XML node.\n *\n * Parameters:\n *\n * obj - Object to be encoded. \n */\nmxCodec.prototype.encode = function(obj)\n{\n\tvar node = null;\n\t\n\tif (obj != null && obj.constructor != null)\n\t{\n\t\tvar enc = mxCodecRegistry.getCodec(obj.constructor);\n\t\t\n\t\tif (enc != null)\n\t\t{\n\t\t\tnode = enc.encode(this, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxUtils.isNode(obj))\n\t\t\t{\n\t\t\t\tnode = mxUtils.importNode(this.document, obj, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t    \t\tmxLog.warn('mxCodec.encode: No codec for ' + mxUtils.getFunctionName(obj.constructor));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Decodes the given XML node. The optional \"into\"\n * argument specifies an existing object to be\n * used. If no object is given, then a new instance\n * is created using the constructor from the codec.\n *\n * The function returns the passed in object or\n * the new instance if no object was given.\n *\n * Parameters:\n *\n * node - XML node to be decoded.\n * into - Optional object to be decodec into.\n */\nmxCodec.prototype.decode = function(node, into)\n{\n\tthis.updateElements();\n\tvar obj = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar ctor = null;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tctor = window[node.nodeName];\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t\t\n\t\tvar dec = mxCodecRegistry.getCodec(ctor);\n\t\t\n\t\tif (dec != null)\n\t\t{\n\t\t\tobj = dec.decode(this, node, into);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj = node.cloneNode(true);\n\t\t\tobj.removeAttribute('as');\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: encodeCell\n *\n * Encoding of cell hierarchies is built-into the core, but\n * is a higher-level function that needs to be explicitely\n * used by the respective object encoders (eg. <mxModelCodec>,\n * <mxChildChangeCodec> and <mxRootChangeCodec>). This\n * implementation writes the given cell and its children as a\n * (flat) sequence into the given node. The children are not\n * encoded if the optional includeChildren is false. The\n * function is in charge of adding the result into the\n * given node and has no return value.\n *\n * Parameters:\n *\n * cell - <mxCell> to be encoded.\n * node - Parent XML node to add the encoded cell into.\n * includeChildren - Optional boolean indicating if the\n * function should include all descendents. Default is true. \n */\nmxCodec.prototype.encodeCell = function(cell, node, includeChildren)\n{\n\tnode.appendChild(this.encode(cell));\n\t\n\tif (includeChildren == null || includeChildren)\n\t{\n\t\tvar childCount = cell.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.encodeCell(cell.getChildAt(i), node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellCodec\n * \n * Returns true if the given codec is a cell codec. This uses\n * <mxCellCodec.isCellCodec> to check if the codec is of the\n * given type.\n */\nmxCodec.prototype.isCellCodec = function(codec)\n{\n\tif (codec != null && typeof(codec.isCellCodec) == 'function')\n\t{\n\t\treturn codec.isCellCodec();\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: decodeCell\n *\n * Decodes cells that have been encoded using inversion, ie.\n * where the user object is the enclosing node in the XML,\n * and restores the group and graph structure in the cells.\n * Returns a new <mxCell> instance that represents the\n * given node.\n *\n * Parameters:\n *\n * node - XML node that contains the cell data.\n * restoreStructures - Optional boolean indicating whether\n * the graph structure should be restored by calling insert\n * and insertEdge on the parent and terminals, respectively.\n * Default is true.\n */\nmxCodec.prototype.decodeCell = function(node, restoreStructures)\n{\n\trestoreStructures = (restoreStructures != null) ? restoreStructures : true;\n\tvar cell = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\t// Tries to find a codec for the given node name. If that does\n\t\t// not return a codec then the node is the user object (an XML node\n\t\t// that contains the mxCell, aka inversion).\n\t\tvar decoder = mxCodecRegistry.getCodec(node.nodeName);\n\t\t\n\t\t// Tries to find the codec for the cell inside the user object.\n\t\t// This assumes all node names inside the user object are either\n\t\t// not registered or they correspond to a class for cells.\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tvar child = node.firstChild;\n\t\t\t\n\t\t\twhile (child != null && !this.isCellCodec(decoder))\n\t\t\t{\n\t\t\t\tdecoder = mxCodecRegistry.getCodec(child.nodeName);\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tdecoder = mxCodecRegistry.getCodec(mxCell);\n\t\t}\n\n\t\tcell = decoder.decode(this, node);\n\t\t\n\t\tif (restoreStructures)\n\t\t{\n\t\t\tthis.insertIntoGraph(cell);\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: insertIntoGraph\n *\n * Inserts the given cell into its parent and terminal cells.\n */\nmxCodec.prototype.insertIntoGraph = function(cell)\n{\n\tvar parent = cell.parent;\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\n\t// Fixes possible inconsistencies during insert into graph\n\tcell.setTerminal(null, false);\n\tcell.setTerminal(null, true);\n\tcell.parent = null;\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent == cell)\n\t\t{\n\t\t\tthrow new Error(parent.id + ': Self Reference');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent.insert(cell);\n\t\t}\n\t}\n\n\tif (source != null)\n\t{\n\t\tsource.insertEdge(cell, true);\n\t}\n\n\tif (target != null)\n\t{\n\t\ttarget.insertEdge(cell, false);\n\t}\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the attribute on the specified node to value. This is a\n * helper method that makes sure the attribute and value arguments\n * are not null.\n *\n * Parameters:\n *\n * node - XML node to set the attribute for.\n * attributes - Attributename to be set.\n * value - New value of the attribute.\n */\nmxCodec.prototype.setAttribute = function(node, attribute, value)\n{\n\tif (attribute != null && value != null)\n\t{\n\t\tnode.setAttribute(attribute, value);\n\t}\n};\n\n__mxOutput.mxCodec = typeof mxCodec !== 'undefined' ? mxCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxObjectCodec\n *\n * Generic codec for JavaScript objects that implements a mapping between\n * JavaScript objects and XML nodes that maps each field or element to an\n * attribute or child node, and vice versa.\n * \n * Atomic Values:\n * \n * Consider the following example.\n * \n * (code)\n * var obj = new Object();\n * obj.foo = \"Foo\";\n * obj.bar = \"Bar\";\n * (end)\n * \n * This object is encoded into an XML node using the following.\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(obj);\n * (end)\n * \n * The output of the encoding may be viewed using <mxLog> as follows.\n * \n * (code)\n * mxLog.show();\n * mxLog.debug(mxUtils.getPrettyXml(node));\n * (end)\n * \n * Finally, the result of the encoding looks as follows.\n * \n * (code)\n * <Object foo=\"Foo\" bar=\"Bar\"/>\n * (end)\n * \n * In the above output, the foo and bar fields have been mapped to attributes\n * with the same names, and the name of the constructor was used for the\n * nodename.\n * \n * Booleans:\n *\n * Since booleans are numbers in JavaScript, all boolean values are encoded\n * into 1 for true and 0 for false. The decoder also accepts the string true\n * and false for boolean values.\n * \n * Objects:\n * \n * The above scheme is applied to all atomic fields, that is, to all non-object\n * fields of an object. For object fields, a child node is created with a\n * special attribute that contains the fieldname. This special attribute is\n * called \"as\" and hence, as is a reserved word that should not be used for a\n * fieldname.\n * \n * Consider the following example where foo is an object and bar is an atomic\n * property of foo.\n * \n * (code)\n * var obj = {foo: {bar: \"Bar\"}};\n * (end)\n * \n * This will be mapped to the following XML structure by mxObjectCodec.\n * \n * (code)\n * <Object>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Object>\n * (end)\n * \n * In the above output, the inner Object node contains the as-attribute that\n * specifies the fieldname in the enclosing object. That is, the field foo was\n * mapped to a child node with an as-attribute that has the value foo.\n * \n * Arrays:\n * \n * Arrays are special objects that are either associative, in which case each\n * key, value pair is treated like a field where the key is the fieldname, or\n * they are a sequence of atomic values and objects, which is mapped to a\n * sequence of child nodes. For object elements, the above scheme is applied\n * without the use of the special as-attribute for creating each child. For\n * atomic elements, a special add-node is created with the value stored in the\n * value-attribute.\n * \n * For example, the following array contains one atomic value and one object\n * with a field called bar. Furthermore it contains two associative entries\n * called bar with an atomic value, and foo with an object value.\n * \n * (code)\n * var obj = [\"Bar\", {bar: \"Bar\"}];\n * obj[\"bar\"] = \"Bar\";\n * obj[\"foo\"] = {bar: \"Bar\"};\n * (end)\n * \n * This array is represented by the following XML nodes.\n * \n * (code)\n * <Array bar=\"Bar\">\n *   <add value=\"Bar\"/>\n *   <Object bar=\"Bar\"/>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Array>\n * (end)\n * \n * The Array node name is the name of the constructor. The additional\n * as-attribute in the last child contains the key of the associative entry,\n * whereas the second last child is part of the array sequence and does not\n * have an as-attribute.\n * \n * References:\n * \n * Objects may be represented as child nodes or attributes with ID values,\n * which are used to lookup the object in a table within <mxCodec>. The\n * <isReference> function is in charge of deciding if a specific field should\n * be encoded as a reference or not. Its default implementation returns true if\n * the fieldname is in <idrefs>, an array of strings that is used to configure\n * the <mxObjectCodec>.\n * \n * Using this approach, the mapping does not guarantee that the referenced\n * object itself exists in the document. The fields that are encoded as\n * references must be carefully chosen to make sure all referenced objects\n * exist in the document, or may be resolved by some other means if necessary.\n * \n * For example, in the case of the graph model all cells are stored in a tree\n * whose root is referenced by the model's root field. A tree is a structure\n * that is well suited for an XML representation, however, the additional edges\n * in the graph model have a reference to a source and target cell, which are\n * also contained in the tree. To handle this case, the source and target cell\n * of an edge are treated as references, whereas the children are treated as\n * objects. Since all cells are contained in the tree and no edge references a\n * source or target outside the tree, this setup makes sure all referenced\n * objects are contained in the document.\n * \n * In the case of a tree structure we must further avoid infinite recursion by\n * ignoring the parent reference of each child. This is done by returning true\n * in <isExcluded>, whose default implementation uses the array of excluded\n * fieldnames passed to the mxObjectCodec constructor.\n * \n * References are only used for cells in mxGraph. For defining other\n * referencable object types, the codec must be able to work out the ID of an\n * object. This is done by implementing <mxCodec.reference>. For decoding a\n * reference, the XML node with the respective id-attribute is fetched from the\n * document, decoded, and stored in a lookup table for later reference. For\n * looking up external objects, <mxCodec.lookup> may be implemented.\n * \n * Expressions:\n * \n * For decoding JavaScript expressions, the add-node may be used with a text\n * content that contains the JavaScript expression. For example, the following\n * creates a field called foo in the enclosing object and assigns it the value\n * of <mxConstants.ALIGN_LEFT>.\n * \n * (code)\n * <Object>\n *   <add as=\"foo\">mxConstants.ALIGN_LEFT</add>\n * </Object>\n * (end)\n * \n * The resulting object has a field called foo with the value \"left\". Its XML\n * representation looks as follows.\n * \n * (code)\n * <Object foo=\"left\"/>\n * (end)\n * \n * This means the expression is evaluated at decoding time and the result of\n * the evaluation is stored in the respective field. Valid expressions are all\n * JavaScript expressions, including function definitions, which are mapped to\n * functions on the resulting object.\n * \n * Expressions are only evaluated if <allowEval> is true.\n * \n * Constructor: mxObjectCodec\n *\n * Constructs a new codec for the specified template object.\n * The variables in the optional exclude array are ignored by\n * the codec. Variables in the optional idrefs array are\n * turned into references in the XML. The optional mapping\n * may be used to map from variable names to XML attributes.\n * The argument is created as follows:\n *\n * (code)\n * var mapping = new Object();\n * mapping['variableName'] = 'attribute-name';\n * (end)\n *\n * Parameters:\n *\n * template - Prototypical instance of the object to be\n * encoded/decoded.\n * exclude - Optional array of fieldnames to be ignored.\n * idrefs - Optional array of fieldnames to be converted to/from\n * references.\n * mapping - Optional mapping from field- to attributenames.\n */\nfunction mxObjectCodec(template, exclude, idrefs, mapping)\n{\n\tthis.template = template;\n\t\n\tthis.exclude = (exclude != null) ? exclude : [];\n\tthis.idrefs = (idrefs != null) ? idrefs : [];\n\tthis.mapping = (mapping != null) ? mapping : [];\n\t\n\tthis.reverse = new Object();\n\t\n\tfor (var i in this.mapping)\n\t{\n\t\tthis.reverse[this.mapping[i]] = i;\n\t}\n};\n\n/**\n * Variable: allowEval\n *\n * Static global switch that specifies if expressions in arrays are allowed.\n * Default is false. NOTE: Enabling this carries a possible security risk.\n */\nmxObjectCodec.allowEval = false;\n\n/**\n * Variable: template\n *\n * Holds the template object associated with this codec.\n */\nmxObjectCodec.prototype.template = null;\n\n/**\n * Variable: exclude\n *\n * Array containing the variable names that should be\n * ignored by the codec.\n */\nmxObjectCodec.prototype.exclude = null;\n\n/**\n * Variable: idrefs\n *\n * Array containing the variable names that should be\n * turned into or converted from references. See\n * <mxCodec.getId> and <mxCodec.getObject>.\n */\nmxObjectCodec.prototype.idrefs = null;\n\n/**\n * Variable: mapping\n *\n * Maps from from fieldnames to XML attribute names.\n */\nmxObjectCodec.prototype.mapping = null;\n\n/**\n * Variable: reverse\n *\n * Maps from from XML attribute names to fieldnames.\n */\nmxObjectCodec.prototype.reverse = null;\n\n/**\n * Function: getName\n * \n * Returns the name used for the nodenames and lookup of the codec when\n * classes are encoded and nodes are decoded. For classes to work with\n * this the codec registry automatically adds an alias for the classname\n * if that is different than what this returns. The default implementation\n * returns the classname of the template class.\n */\nmxObjectCodec.prototype.getName = function()\n{\n\treturn mxUtils.getFunctionName(this.template.constructor);\n};\n\n/**\n * Function: cloneTemplate\n * \n * Returns a new instance of the template for this codec.\n */\nmxObjectCodec.prototype.cloneTemplate = function()\n{\n\treturn new this.template.constructor();\n};\n\n/**\n * Function: getFieldName\n * \n * Returns the fieldname for the given attributename.\n * Looks up the value in the <reverse> mapping or returns\n * the input if there is no reverse mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getFieldName = function(attributename)\n{\n\tif (attributename != null)\n\t{\n\t\tvar mapped = this.reverse[attributename];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tattributename = mapped;\n\t\t}\n\t}\n\t\n\treturn attributename;\n};\n\n/**\n * Function: getAttributeName\n * \n * Returns the attributename for the given fieldname.\n * Looks up the value in the <mapping> or returns\n * the input if there is no mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getAttributeName = function(fieldname)\n{\n\tif (fieldname != null)\n\t{\n\t\tvar mapped = this.mapping[fieldname];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tfieldname = mapped;\n\t\t}\n\t}\n\t\n\treturn fieldname;\n};\n\n/**\n * Function: isExcluded\n *\n * Returns true if the given attribute is to be ignored by the codec. This\n * implementation returns true if the given fieldname is in <exclude> or\n * if the fieldname equals <mxObjectIdentity.FIELD_NAME>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field.\n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isExcluded = function(obj, attr, value, write)\n{\n\treturn attr == mxObjectIdentity.FIELD_NAME ||\n\t\tmxUtils.indexOf(this.exclude, attr) >= 0;\n};\n\n/**\n * Function: isReference\n *\n * Returns true if the given fieldname is to be treated\n * as a textual reference (ID). This implementation returns\n * true if the given fieldname is in <idrefs>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field. \n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isReference = function(obj, attr, value, write)\n{\n\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns a node\n * representing then given object. Calls <beforeEncode>\n * after creating the node and <afterEncode> with the \n * resulting node after processing.\n *\n * Enc is a reference to the calling encoder. It is used\n * to encode complex objects and create references.\n *\n * This implementation encodes all variables of an\n * object according to the following rules:\n *\n * - If the variable name is in <exclude> then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getId>\n * is used to replace the object with its ID.\n * - The variable name is mapped using <mapping>.\n * - If obj is an array and the variable name is numeric\n * (ie. an index) then it is not encoded.\n * - If the value is an object, then the codec is used to\n * create a child node with the variable name encoded into\n * the \"as\" attribute.\n * - Else, if <encodeDefaults> is true or the value differs\n * from the template value, then ...\n * - ... if obj is not an array, then the value is mapped to\n * an attribute.\n * - ... else if obj is an array, the value is mapped to an\n * add child with a value attribute or a text child node,\n * if the value is a function.\n *\n * If no ID exists for a variable in <idrefs> or if an object\n * cannot be encoded, a warning is issued using <mxLog.warn>.\n *\n * Returns the resulting XML node that represents the given\n * object.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n */\nmxObjectCodec.prototype.encode = function(enc, obj)\n{\n\tvar node = enc.document.createElement(this.getName());\n\t\n\tobj = this.beforeEncode(enc, obj, node);\n\tthis.encodeObject(enc, obj, node);\n\t\n\treturn this.afterEncode(enc, obj, node);\n};\n\t\n/**\n * Function: encodeObject\n *\n * Encodes the value of each member in then given obj into the given node using\n * <encodeValue>.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeObject = function(enc, obj, node)\n{\n\tenc.setAttribute(node, 'id', enc.getId(obj));\n\t\n    for (var i in obj)\n    {\n\t\tvar name = i;\n\t\tvar value = obj[name];\n\t\t\n    \tif (value != null && !this.isExcluded(obj, name, value, true))\n    \t{\n    \t\tif (mxUtils.isInteger(name))\n    \t\t{\n    \t\t\tname = null;\n    \t\t}\n    \t\t\n    \t\tthis.encodeValue(enc, obj, name, value, node);\n    \t}\n    }\n};\n\n/**\n * Function: encodeValue\n * \n * Converts the given value according to the mappings\n * and id-refs in this codec and uses <writeAttribute>\n * to write the attribute into the given node.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object whose property is going to be encoded.\n * name - XML node that contains the encoded object.\n * value - Value of the property to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeValue = function(enc, obj, name, value, node)\n{\n\tif (value != null)\n\t{\n\t\tif (this.isReference(obj, name, value, true))\n\t\t{\n\t\t\tvar tmp = enc.getId(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.encode: No ID for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tvar defaultValue = this.template[name];\n\t\t\n\t\t// Checks if the value is a default value and\n\t\t// the name is correct\n\t\tif (name == null || enc.encodeDefaults || defaultValue != value)\n\t\t{\n\t\t\tname = this.getAttributeName(name);\n\t\t\tthis.writeAttribute(enc, obj, name, value, node);\t\n\t\t}\n\t}\n};\n\n/**\n * Function: writeAttribute\n * \n * Writes the given value into node using <writePrimitiveAttribute>\n * or <writeComplexAttribute> depending on the type of the value.\n */\nmxObjectCodec.prototype.writeAttribute = function(enc, obj, name, value, node)\n{\n\tif (typeof(value) != 'object' /* primitive type */)\n\t{\n\t\tthis.writePrimitiveAttribute(enc, obj, name, value, node);\n\t}\n\telse /* complex type */\n\t{\n\t\tthis.writeComplexAttribute(enc, obj, name, value, node);\n\t}\n};\n\n/**\n * Function: writePrimitiveAttribute\n * \n * Writes the given value as an attribute of the given node.\n */\nmxObjectCodec.prototype.writePrimitiveAttribute = function(enc, obj, name, value, node)\n{\n\tvalue = this.convertAttributeToXml(enc, obj, name, value, node);\n\t\n\tif (name == null)\n\t{\n\t\tvar child = enc.document.createElement('add');\n\t\t\n\t\tif (typeof(value) == 'function')\n\t\t{\n    \t\tchild.appendChild(enc.document.createTextNode(value));\n    \t}\n    \telse\n    \t{\n    \t\tenc.setAttribute(child, 'value', value);\n    \t}\n    \t\n\t\tnode.appendChild(child);\n\t}\n\telse if (typeof(value) != 'function')\n\t{\n    \tenc.setAttribute(node, name, value);\n\t}\t\t\n};\n\t\n/**\n * Function: writeComplexAttribute\n * \n * Writes the given value as a child node of the given node.\n */\nmxObjectCodec.prototype.writeComplexAttribute = function(enc, obj, name, value, node)\n{\n\tvar child = enc.encode(value);\n\t\n\tif (child != null)\n\t{\n\t\tif (name != null)\n\t\t{\n    \t\tchild.setAttribute('as', name);\n    \t}\n    \t\n    \tnode.appendChild(child);\n\t}\n\telse\n\t{\n\t\tmxLog.warn('mxObjectCodec.encode: No node for ' + this.getName() + '.' + name + ': ' + value);\n\t}\n};\n\n/**\n * Function: convertAttributeToXml\n * \n * Converts true to \"1\" and false to \"0\" is <isBooleanAttribute> returns true.\n * All other values are not converted.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value to be converted.\n */\nmxObjectCodec.prototype.convertAttributeToXml = function(enc, obj, name, value)\n{\n\t// Makes sure to encode boolean values as numeric values\n\tif (this.isBooleanAttribute(enc, obj, name, value))\n\t{\t\n\t\t// Checks if the value is true (do not use the value as is, because\n\t\t// this would check if the value is not null, so 0 would be true)\n\t\tvalue = (value == true) ? '1' : '0';\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isBooleanAttribute\n * \n * Returns true if the given object attribute is a boolean value.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value of the attribute to be converted.\n */\nmxObjectCodec.prototype.isBooleanAttribute = function(enc, obj, name, value)\n{\n\treturn (typeof(value.length) == 'undefined' && (value == true || value == false));\n};\n\n/**\n * Function: convertAttributeFromXml\n * \n * Converts booleans and numeric values to the respective types. Values are\n * numeric if <isNumericAttribute> returns true.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.convertAttributeFromXml = function(dec, attr, obj)\n{\n\tvar value = attr.value;\n\t\n\tif (this.isNumericAttribute(dec, attr, obj))\n\t{\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value) || !isFinite(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isNumericAttribute\n * \n * Returns true if the given XML attribute is or should be a numeric value.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.isNumericAttribute = function(dec, attr, obj)\n{\n\t// Handles known numeric attributes for generic objects\n\tvar result = (obj.constructor == mxGeometry &&\n\t\t(attr.name == 'x' || attr.name == 'y' ||\n\t\tattr.name == 'width' || attr.name == 'height')) ||\n\t\t(obj.constructor == mxPoint &&\n\t\t(attr.name == 'x' || attr.name == 'y')) ||\n\t\tmxUtils.isNumeric(attr.value);\n\t\n\treturn result;\n};\n\n/**\n * Function: beforeEncode\n *\n * Hook for subclassers to pre-process the object before\n * encoding. This returns the input object. The return\n * value of this function is used in <encode> to perform\n * the default encoding into the given node.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node to encode the object into.\n */\nmxObjectCodec.prototype.beforeEncode = function(enc, obj, node)\n{\n\treturn obj;\n};\n\n/**\n * Function: afterEncode\n *\n * Hook for subclassers to post-process the node\n * for the given object after encoding and return the\n * post-processed node. This implementation returns \n * the input node. The return value of this method\n * is returned to the encoder from <encode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that represents the default encoding.\n */\nmxObjectCodec.prototype.afterEncode = function(enc, obj, node)\n{\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Parses the given node into the object or returns a new object\n * representing the given node.\n *\n * Dec is a reference to the calling decoder. It is used to decode\n * complex objects and resolve references.\n *\n * If a node has an id attribute then the object cache is checked for the\n * object. If the object is not yet in the cache then it is constructed\n * using the constructor of <template> and cached in <mxCodec.objects>.\n *\n * This implementation decodes all attributes and childs of a node\n * according to the following rules:\n *\n * - If the variable name is in <exclude> or if the attribute name is \"id\"\n * or \"as\" then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getObject> is used\n * to replace the reference with an object.\n * - The variable name is mapped using a reverse <mapping>.\n * - If the value has a child node, then the codec is used to create a\n * child object with the variable name taken from the \"as\" attribute.\n * - If the object is an array and the variable name is empty then the\n * value or child object is appended to the array.\n * - If an add child has no value or the object is not an array then\n * the child text content is evaluated using <mxUtils.eval>.\n *\n * For add nodes where the object is not an array and the variable name\n * is defined, the default mechanism is used, allowing to override/add\n * methods as follows:\n *\n * (code)\n * <Object>\n *   <add as=\"hello\"><![CDATA[\n *     function(arg1) {\n *       mxUtils.alert('Hello '+arg1);\n *     }\n *   ]]></add>\n * </Object>\n * (end) \n *\n * If no object exists for an ID in <idrefs> a warning is issued\n * using <mxLog.warn>.\n *\n * Returns the resulting object that represents the given XML node\n * or the object given to the method as the into parameter.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * into - Optional objec to encode the node into.\n */\nmxObjectCodec.prototype.decode = function(dec, node, into)\n{\n\tvar id = node.getAttribute('id');\n\tvar obj = dec.objects[id];\n\t\n\tif (obj == null)\n\t{\n\t\tobj = into || this.cloneTemplate();\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.putObject(id, obj);\n\t\t}\n\t}\n\t\n\tnode = this.beforeDecode(dec, node, obj);\n\tthis.decodeNode(dec, node, obj);\n\t\n    return this.afterDecode(dec, node, obj);\n};\t\n\n/**\n * Function: decodeNode\n * \n * Calls <decodeAttributes> and <decodeChildren> for the given node.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeNode = function(dec, node, obj)\n{\n\tif (node != null)\n\t{\n\t\tthis.decodeAttributes(dec, node, obj);\n\t\tthis.decodeChildren(dec, node, obj);\n\t}\n};\n\n/**\n * Function: decodeAttributes\n * \n * Decodes all attributes of the given node using <decodeAttribute>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeAttributes = function(dec, node, obj)\n{\n\tvar attrs = node.attributes;\n\t\n\tif (attrs != null)\n\t{\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\tthis.decodeAttribute(dec, attrs[i], obj);\n\t\t}\n\t}\n};\n\n/**\n * Function: isIgnoredAttribute\n * \n * Returns true if the given attribute should be ignored. This implementation\n * returns true if the attribute name is \"as\" or \"id\".\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.isIgnoredAttribute = function(dec, attr, obj)\n{\n\treturn attr.nodeName == 'as' || attr.nodeName == 'id';\n};\n\n/**\n * Function: decodeAttribute\n * \n * Reads the given attribute into the specified object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.decodeAttribute = function(dec, attr, obj)\n{\n\tif (!this.isIgnoredAttribute(dec, attr, obj))\n\t{\n\t\tvar name = attr.nodeName;\n\t\t\n\t\t// Converts the string true and false to their boolean values.\n\t\t// This may require an additional check on the obj to see if\n\t\t// the existing field is a boolean value or uninitialized, in\n\t\t// which case we may want to convert true and false to a string.\n\t\tvar value = this.convertAttributeFromXml(dec, attr, obj);\n\t\tvar fieldname = this.getFieldName(name);\n\t\t\n\t\tif (this.isReference(obj, fieldname, value, false))\n\t\t{\n\t\t\tvar tmp = dec.getObject(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.decode: No object for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tif (!this.isExcluded(obj, name, value, false))\n\t\t{\n\t\t\t//mxLog.debug(mxUtils.getFunctionName(obj.constructor)+'.'+name+'='+value);\n\t\t\tobj[name] = value;\n\t\t}\n\t}\n};\n\n/**\n * Function: decodeChildren\n * \n * Decodes all children of the given node using <decodeChild>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChildren = function(dec, node, obj)\n{\n\tvar child = node.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar tmp = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_ELEMENT &&\n\t\t\t!this.processInclude(dec, child, obj))\n\t\t{\n\t\t\tthis.decodeChild(dec, child, obj);\n\t\t}\n\t\t\n\t\tchild = tmp;\n\t}\n};\n\n/**\n * Function: decodeChild\n * \n * Reads the specified child into the given object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * child - XML child element to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChild = function(dec, child, obj)\n{\n\tvar fieldname = this.getFieldName(child.getAttribute('as'));\n\t\n\tif (fieldname == null || !this.isExcluded(obj, fieldname, child, false))\n\t{\n\t\tvar template = this.getFieldTemplate(obj, fieldname, child);\n\t\tvar value = null;\n\t\t\n\t\tif (child.nodeName == 'add')\n\t\t{\n\t\t\tvalue = child.getAttribute('value');\n\t\t\t\n\t\t\tif (value == null && mxObjectCodec.allowEval)\n\t\t\t{\n\t\t\t\tvalue = mxUtils.eval(mxUtils.getTextContent(child));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvalue = dec.decode(child, template);\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tthis.addObjectValue(obj, fieldname, value, template);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tthrow new Error(e.message + ' for ' + child.nodeName);\n\t\t}\n\t}\n};\n\n/**\n * Function: getFieldTemplate\n * \n * Returns the template instance for the given field. This returns the\n * value of the field, null if the value is an array or an empty collection\n * if the value is a collection. The value is then used to populate the\n * field for a new instance. For strongly typed languages it may be\n * required to override this to return the correct collection instance\n * based on the encoded child.\n */\t\nmxObjectCodec.prototype.getFieldTemplate = function(obj, fieldname, child)\n{\n\tvar template = obj[fieldname];\n\t\n\t// Non-empty arrays are replaced completely\n    if (template instanceof Array && template.length > 0)\n    {\n        template = null;\n    }\n    \n    return template;\n};\n\n/**\n * Function: addObjectValue\n * \n * Sets the decoded child node as a value of the given object. If the\n * object is a map, then the value is added with the given fieldname as a\n * key. If the fieldname is not empty, then setFieldValue is called or\n * else, if the object is a collection, the value is added to the\n * collection. For strongly typed languages it may be required to\n * override this with the correct code to add an entry to an object.\n */\t\nmxObjectCodec.prototype.addObjectValue = function(obj, fieldname, value, template)\n{\n\tif (value != null && value != template)\n\t{\n\t\tif (fieldname != null && fieldname.length > 0)\n\t\t{\n\t\t\tobj[fieldname] = value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj.push(value);\n\t\t}\n\t\t//mxLog.debug('Decoded '+mxUtils.getFunctionName(obj.constructor)+'.'+fieldname+': '+value);\n\t}\n};\n\n/**\n * Function: processInclude\n *\n * Returns true if the given node is an include directive and\n * executes the include by decoding the XML document. Returns\n * false if the given node is not an include directive.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the encoding/decoding process.\n * node - XML node to be checked.\n * into - Optional object to pass-thru to the codec.\n */\nmxObjectCodec.prototype.processInclude = function(dec, node, into)\n{\n\tif (node.nodeName == 'include')\n\t{\n\t\tvar name = node.getAttribute('name');\n\t\t\n\t\tif (name != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar xml = mxUtils.load(name).getDocumentElement();\n\t\t\t\t\n\t\t\t\tif (xml != null)\n\t\t\t\t{\n\t\t\t\t\tdec.decode(xml, into);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: beforeDecode\n *\n * Hook for subclassers to pre-process the node for\n * the specified object and return the node to be\n * used for further processing by <decode>.\n * The object is created based on the template in the \n * calling method and is never null. This implementation\n * returns the input node. The return value of this\n * function is used in <decode> to perform\n * the default decoding into the given object.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Object to encode the node into.\n */\nmxObjectCodec.prototype.beforeDecode = function(dec, node, obj)\n{\n\treturn node;\n};\n\n/**\n * Function: afterDecode\n *\n * Hook for subclassers to post-process the object after\n * decoding. This implementation returns the given object\n * without any changes. The return value of this method\n * is returned to the decoder from <decode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * node - XML node to be decoded.\n * obj - Object that represents the default decoding.\n */\nmxObjectCodec.prototype.afterDecode = function(dec, node, obj)\n{\n\treturn obj;\n};\n\n__mxOutput.mxObjectCodec = typeof mxObjectCodec !== 'undefined' ? mxObjectCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxCellCodec\n\t *\n\t * Codec for <mxCell>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - children\n\t * - edges\n\t * - overlays\n\t * - mxTransient\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t * - source\n\t * - target\n\t * \n\t * Transient fields can be added using the following code:\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).exclude.push('name_of_field');\n\t * \n\t * To subclass <mxCell>, replace the template and add an alias as\n\t * follows.\n\t * \n\t * (code)\n\t * function CustomCell(value, geometry, style)\n\t * {\n\t *   mxCell.apply(this, arguments);\n\t * }\n\t * \n\t * mxUtils.extend(CustomCell, mxCell);\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).template = new CustomCell();\n\t * mxCodecRegistry.addAlias('CustomCell', 'mxCell');\n\t * (end)\n\t */\n\tvar codec = new mxObjectCodec(new mxCell(),\n\t\t['children', 'edges', 'overlays', 'mxTransient'],\n\t\t['parent', 'source', 'target']);\n\n\t/**\n\t * Function: isCellCodec\n\t *\n\t * Returns true since this is a cell codec.\n\t */\n\tcodec.isCellCodec = function()\n\t{\n\t\treturn true;\n\t};\n\n\t/**\n\t * Overidden to disable conversion of value to number.\n\t */\n\tcodec.isNumericAttribute = function(dec, attr, obj)\n\t{\n\t\treturn attr.nodeName !== 'value' && mxObjectCodec.prototype.isNumericAttribute.apply(this, arguments);\n\t};\n\t\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes user objects that are XML nodes.\n\t */ \n\tcodec.isExcluded = function(obj, attr, value, isWrite)\n\t{\n\t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n\t\t\t(isWrite && attr == 'value' &&\n\t\t\tvalue.nodeType == mxConstants.NODETYPE_ELEMENT);\n\t};\n\t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes an <mxCell> and wraps the XML up inside the\n\t * XML of the user object (inversion).\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (obj.value != null && obj.value.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Wraps the graphical annotation up in the user object (inversion)\n\t\t\t// by putting the result of the default encoding into a clone of the\n\t\t\t// user object (node type 1) and returning this cloned user object.\n\t\t\tvar tmp = node;\n\t\t\tnode = mxUtils.importNode(enc.document, obj.value, true);\n\t\t\tnode.appendChild(tmp);\n\t\t\t\n\t\t\t// Moves the id attribute to the outermost XML node, namely the\n\t\t\t// node which denotes the object boundaries in the file.\n\t\t\tvar id = tmp.getAttribute('id');\n\t\t\tnode.setAttribute('id', id);\n\t\t\ttmp.removeAttribute('id');\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes an <mxCell> and uses the enclosing XML node as\n\t * the user object for the cell (inversion).\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tvar inner = node.cloneNode(true);\n\t\tvar classname = this.getName();\n\t\t\n\t\tif (node.nodeName != classname)\n\t\t{\n\t\t\t// Passes the inner graphical annotation node to the\n\t\t\t// object codec for further processing of the cell.\n\t\t\tvar tmp = node.getElementsByTagName(classname)[0];\n\t\t\t\n\t\t\tif (tmp != null && tmp.parentNode == node)\n\t\t\t{\n\t\t\t\tmxUtils.removeWhitespace(tmp, true);\n\t\t\t\tmxUtils.removeWhitespace(tmp, false);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\tinner = tmp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinner = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the user object out of the XML node\n\t\t\tobj.value = node.cloneNode(true);\n\t\t\tvar id = obj.value.getAttribute('id');\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tobj.setId(id);\n\t\t\t\tobj.value.removeAttribute('id');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses ID from XML file as ID for cell in model\n\t\t\tobj.setId(node.getAttribute('id'));\n\t\t}\n\t\t\t\n\t\t// Preprocesses and removes all Id-references in order to use the\n\t\t// correct encoder (this) for the known references to cells (all).\n\t\tif (inner != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.idrefs.length; i++)\n\t\t\t{\n\t\t\t\tvar attr = this.idrefs[i];\n\t\t\t\tvar ref = inner.getAttribute(attr);\n\t\t\t\t\n\t\t\t\tif (ref != null)\n\t\t\t\t{\n\t\t\t\t\tinner.removeAttribute(attr);\n\t\t\t\t\tvar object = dec.objects[ref] || dec.lookup(ref);\n\t\t\t\t\t\n\t\t\t\t\tif (object == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Needs to decode forward reference\n\t\t\t\t\t\tvar element = dec.getElementById(ref);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (element != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar decoder = mxCodecRegistry.codecs[element.nodeName] || this;\n\t\t\t\t\t\t\tobject = decoder.decode(dec, element);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj[attr] = object;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn inner;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxCellCodec = typeof mxCellCodec !== 'undefined' ? mxCellCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxModelCodec\n\t *\n\t * Codec for <mxGraphModel>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphModel());\n\n\t/**\n\t * Function: encodeObject\n\t *\n\t * Encodes the given <mxGraphModel> by writing a (flat) XML sequence of\n\t * cell nodes as produced by the <mxCellCodec>. The sequence is\n\t * wrapped-up in a node with the name root.\n\t */\n\tcodec.encodeObject = function(enc, obj, node)\n\t{\n\t\tvar rootNode = enc.document.createElement('root');\n\t\tenc.encodeCell(obj.getRoot(), rootNode);\n\t\tnode.appendChild(rootNode);\n\t};\n\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'root')\n\t\t{\n\t\t\tthis.decodeRoot(dec, child, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t\t}\n\t};\n\n\t/**\n\t * Function: decodeRoot\n\t *\n\t * Reads the cells into the graph model. All cells\n\t * are children of the root element in the node.\n\t */\n\tcodec.decodeRoot = function(dec, root, model)\n\t{\n\t\tvar rootCell = null;\n\t\tvar tmp = root.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tvar cell = dec.decodeCell(tmp);\n\t\t\t\n\t\t\tif (cell != null && cell.getParent() == null)\n\t\t\t{\n\t\t\t\trootCell = cell;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\n\t\t// Sets the root on the model if one has been decoded\n\t\tif (rootCell != null)\n\t\t{\n\t\t\tmodel.setRoot(rootCell);\n\t\t}\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxModelCodec = typeof mxModelCodec !== 'undefined' ? mxModelCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxRootChangeCodec\n\t *\n\t * Codec for <mxRootChange>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - root\n\t */\n\tvar codec = new mxObjectCodec(new mxRootChange(),\n\t\t['model', 'previous', 'root']);\n\n\t/**\n\t * Function: onEncode\n\t *\n\t * Encodes the child recursively.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tenc.encodeCell(obj.root, node);\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the optional children as cells\n\t * using the respective decoder.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.root = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.root;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxRootChangeCodec = typeof mxRootChangeCodec !== 'undefined' ? mxRootChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxChildChangeCodec\n\t *\n\t * Codec for <mxChildChange>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - previousIndex\n\t * - child\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t */\n\tvar codec = new mxObjectCodec(new mxChildChange(),\n\t\t['model', 'child', 'previousIndex'],\n\t\t['parent', 'previous']);\n\n\t/**\n\t * Function: isReference\n\t *\n\t * Returns true for the child attribute if the child\n\t * cell had a previous parent or if we're reading the\n\t * child as an attribute rather than a child node, in\n\t * which case it's always a reference.\n\t */\n\tcodec.isReference = function(obj, attr, value, isWrite)\n\t{\n\t\tif (attr == 'child' && (!isWrite || obj.model.contains(obj.previous)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n\t};\n\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes references to parent or previous if not in the model.\n\t */\n  \tcodec.isExcluded = function(obj, attr, value, write)\n  \t{\n  \t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n  \t\t\t(write && value != null && (attr == 'previous' ||\n  \t\t\tattr == 'parent') && !obj.model.contains(value));\n  \t};\n  \t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes the child recusively and adds the result\n\t * to the given node.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (this.isReference(obj, 'child', obj.child, true))\n\t\t{\n\t\t\t// Encodes as reference (id)\n\t\t\tnode.setAttribute('child', enc.getId(obj.child));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// At this point, the encoder is no longer able to know which cells\n\t\t\t// are new, so we have to encode the complete cell hierarchy and\n\t\t\t// ignore the ones that are already there at decoding time. Note:\n\t\t\t// This can only be resolved by moving the notify event into the\n\t\t\t// execute of the edit.\n\t\t\tenc.encodeCell(obj.child, node);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the any child nodes as using the respective\n\t * codec from the registry.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.child = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\t\n\t\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\t// Ignores all existing cells because those do not need to\n\t\t\t\t\t// be re-inserted into the model. Since the encoded version\n\t\t\t\t\t// of these cells contains the new parent, this would leave\n\t\t\t\t\t// to an inconsistent state on the model (ie. a parent\n\t\t\t\t\t// change without a call to parentForCellChanged).\n\t\t\t\t\tvar id = tmp.getAttribute('id');\n\t\t\t\t\t\n\t\t\t\t\tif (dec.lookup(id) == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar childRef = node.getAttribute('child');\n\t\t\tobj.child = dec.getObject(childRef);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores object state in the child change.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Cells are decoded here after a complete transaction so the previous\n\t\t// parent must be restored on the cell for the case where the cell was\n\t\t// added. This is needed for the local model to identify the cell as a\n\t\t// new cell and register the ID.\n        if (obj.child != null)\n        {\n            if (obj.child.parent != null && obj.previous != null &&\n                obj.child.parent != obj.previous)\n            {\n                obj.previous = obj.child.parent;\n            }\n\n            obj.child.parent = obj.previous;\n            obj.previous = obj.parent;\n            obj.previousIndex = obj.index;\n        }\n\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxChildChangeCodec = typeof mxChildChangeCodec !== 'undefined' ? mxChildChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxTerminalChangeCodec\n\t *\n\t * Codec for <mxTerminalChange>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t *\n\t * Reference Fields:\n\t *\n\t * - cell\n\t * - terminal\n\t */\n\tvar codec = new mxObjectCodec(new mxTerminalChange(),\n\t\t['model', 'previous'], ['cell', 'terminal']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.terminal;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxTerminalChangeCodec = typeof mxTerminalChangeCodec !== 'undefined' ? mxTerminalChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGenericChangeCodec\n *\n * Codec for <mxValueChange>s, <mxStyleChange>s, <mxGeometryChange>s,\n * <mxCollapseChange>s and <mxVisibleChange>s. This class is created\n * and registered dynamically at load time and used implicitly\n * via <mxCodec> and the <mxCodecRegistry>.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n *\n * Reference Fields:\n *\n * - cell\n * \n * Constructor: mxGenericChangeCodec\n *\n * Factory function that creates a <mxObjectCodec> for\n * the specified change and fieldname.\n *\n * Parameters:\n *\n * obj - An instance of the change object.\n * variable - The fieldname for the change data.\n */\nvar mxGenericChangeCodec = function(obj, variable)\n{\n\tvar codec = new mxObjectCodec(obj,  ['model', 'previous'], ['cell']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Allows forward references in sessions. This is a workaround\n\t\t// for the sequence of edits in mxGraph.moveCells and cellsAdded.\n\t\tif (mxUtils.isNode(obj.cell))\n\t\t{\n\t\t\tobj.cell = dec.decodeCell(obj.cell, false);\n\t\t}\n\n\t\tobj.previous = obj[variable];\n\n\t\treturn obj;\n\t};\n\t\n\treturn codec;\n};\n\n// Registers the codecs\nmxCodecRegistry.register(mxGenericChangeCodec(new mxValueChange(), 'value'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxStyleChange(), 'style'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxGeometryChange(), 'geometry'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCollapseChange(), 'collapsed'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxVisibleChange(), 'visible'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCellAttributeChange(), 'value'));\n\n__mxOutput.mxGenericChangeCodec = typeof mxGenericChangeCodec !== 'undefined' ? mxGenericChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphCodec\n\t *\n\t * Codec for <mxGraph>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - graphListeners\n\t * - eventListeners\n\t * - view\n\t * - container\n\t * - cellRenderer\n\t * - editor\n\t * - selection\n\t */\n\treturn new mxObjectCodec(new mxGraph(),\n\t\t['graphListeners', 'eventListeners', 'view', 'container',\n\t\t'cellRenderer', 'editor', 'selection']);\n\n}());\n\n__mxOutput.mxGraphCodec = typeof mxGraphCodec !== 'undefined' ? mxGraphCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphViewCodec\n\t *\n\t * Custom encoder for <mxGraphView>s. This class is created\n\t * and registered dynamically at load time and used implicitly via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only writes views\n\t * into a XML format that can be used to create an image for\n\t * the graph, that is, it contains absolute coordinates with\n\t * computed perimeters, edge styles and cell styles.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphView());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes the given <mxGraphView> using <encodeCell>\n\t * starting at the model's root. This returns the\n\t * top-level graph node of the recursive encoding.\n\t */\n\tcodec.encode = function(enc, view)\n\t{\n\t\treturn this.encodeCell(enc, view,\n\t\t\tview.graph.getModel().getRoot());\n\t};\n\n\t/**\n\t * Function: encodeCell\n\t *\n\t * Recursively encodes the specifed cell. Uses layer\n\t * as the default nodename. If the cell's parent is\n\t * null, then graph is used for the nodename. If\n\t * <mxGraphModel.isEdge> returns true for the cell,\n\t * then edge is used for the nodename, else if\n\t * <mxGraphModel.isVertex> returns true for the cell,\n\t * then vertex is used for the nodename.\n\t *\n\t * <mxGraph.getLabel> is used to create the label\n\t * attribute for the cell. For graph nodes and vertices\n\t * the bounds are encoded into x, y, width and height.\n\t * For edges the points are encoded into a points\n\t * attribute as a space-separated list of comma-separated\n\t * coordinate pairs (eg. x0,y0 x1,y1 ... xn,yn). All\n\t * values from the cell style are added as attribute\n\t * values to the node. \n\t */\n\tcodec.encodeCell = function(enc, view, cell)\n\t{\n\t\tvar model = view.graph.getModel();\n\t\tvar state = view.getState(cell);\n\t\tvar parent = model.getParent(cell);\n\t\t\n\t\tif (parent == null || state != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\tvar geo = view.graph.getCellGeometry(cell);\n\t\t\tvar name = null;\n\t\t\t\n\t\t\tif (parent == model.getRoot())\n\t\t\t{\n\t\t\t\tname = 'layer';\n\t\t\t}\n\t\t\telse if (parent == null)\n\t\t\t{\n\t\t\t\tname = 'graph';\n\t\t\t}\n\t\t\telse if (model.isEdge(cell))\n\t\t\t{\n\t\t\t\tname = 'edge';\n\t\t\t}\n\t\t\telse if (childCount > 0 && geo != null)\n\t\t\t{\n\t\t\t\tname = 'group';\n\t\t\t}\n\t\t\telse if (model.isVertex(cell))\n\t\t\t{\n\t\t\t\tname = 'vertex';\n\t\t\t}\n\t\t\t\n\t\t\tif (name != null)\n\t\t\t{\n\t\t\t\tvar node = enc.document.createElement(name);\n\t\t\t\tvar lab = view.graph.getLabel(cell);\n\t\t\t\t\n\t\t\t\tif (lab != null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('label', view.graph.getLabel(cell));\n\t\t\t\t\t\n\t\t\t\t\tif (view.graph.isHtmlLabel(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('html', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tif (parent == null)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = view.getGraphBounds();\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(bounds.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(bounds.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(bounds.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(bounds.height));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tnode.setAttribute('scale', view.scale);\n\t\t\t\t}\n\t\t\t\telse if (state != null && geo != null)\n\t\t\t\t{\n\t\t\t\t\t// Writes each key, value in the style pair to an attribute\n\t\t\t\t    for (var i in state.style)\n\t\t\t\t    {\n\t\t\t\t    \tvar value = state.style[i];\n\t\t\n\t\t\t\t    \t// Tries to turn objects and functions into strings\n\t\t\t\t\t    if (typeof(value) == 'function' &&\n\t\t\t\t\t\t\ttypeof(value) == 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t    \tvalue = mxStyleRegistry.getName(value);\n\t\t\t\t        }\n\t\t\t\t    \t\n\t\t\t\t    \tif (value != null &&\n\t\t\t\t    \t\ttypeof(value) != 'function' &&\n\t\t\t\t\t\t\ttypeof(value) != 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute(i, value);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t\tvar abs = state.absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the list of points into one attribute\n\t\t\t\t\tif (abs != null && abs.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pts = Math.round(abs[0].x) + ',' + Math.round(abs[0].y);\n\t\t\n\t\t\t\t\t\tfor (var i=1; i<abs.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts += ' ' + Math.round(abs[i].x) + ',' +\n\t\t\t\t\t\t\t\tMath.round(abs[i].y);\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\tnode.setAttribute('points', pts);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Writes the bounds into 4 attributes\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(state.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(state.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(state.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(state.height));\t\t\t\t\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar offset = state.absoluteOffset;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the offset into 2 attributes\n\t\t\t\t\tif (offset != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (offset.x != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dx', Math.round(offset.x));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (offset.y != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dy', Math.round(offset.y));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tfor (var i=0; i<childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar childNode = this.encodeCell(enc,\n\t\t\t\t\t\t\tview, model.getChildAt(cell, i));\n\t\t\t\t\t\n\t\t\t\t\tif (childNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxGraphViewCodec = typeof mxGraphViewCodec !== 'undefined' ? mxGraphViewCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheetCodec\n *\n * Codec for <mxStylesheet>s. This class is created and registered\n * dynamically at load time and used implicitly via <mxCodec>\n * and the <mxCodecRegistry>.\n */\nvar mxStylesheetCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxStylesheet());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes a stylesheet. See <decode> for a description of the\n\t * format.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\tvar node = enc.document.createElement(this.getName());\n\t\t\n\t\tfor (var i in obj.styles)\n\t\t{\n\t\t\tvar style = obj.styles[i];\n\t\t\tvar styleNode = enc.document.createElement('add');\n\t\t\t\n\t\t\tif (i != null)\n\t\t\t{\n\t\t\t\tstyleNode.setAttribute('as', i);\n\t\t\t\t\n\t\t\t\tfor (var j in style)\n\t\t\t\t{\n\t\t\t\t\tvar value = this.getStringValue(j, style[j]);\n\t\t\t\t\t\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar entry = enc.document.createElement('add');\n\t\t\t\t\t\tentry.setAttribute('value', value);\n\t\t\t\t\t\tentry.setAttribute('as', j);\n\t\t\t\t\t\tstyleNode.appendChild(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (styleNode.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tnode.appendChild(styleNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t    return node;\n\t};\n\n\t/**\n\t * Function: getStringValue\n\t *\n\t * Returns the string for encoding the given value.\n\t */\n\tcodec.getStringValue = function(key, value)\n\t{\n\t\tvar type = typeof(value);\n\t\t\n\t\tif (type == 'function')\n\t\t{\n\t\t\tvalue = mxStyleRegistry.getName(value);\n\t\t}\n\t\telse if (type == 'object')\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new style.\n\t *\n\t * Attributes:\n\t *\n\t * as - Name of the style.\n\t * extend - Name of the style to inherit from.\n\t *\n\t * Each node contains another sequence of add and remove nodes with the following\n\t * attributes:\n\t *\n\t * as - Name of the style (see <mxConstants>).\n\t * value - Value for the style.\n\t *\n\t * Instead of the value-attribute, one can put Javascript expressions into\n\t * the node as follows if <mxStylesheetCodec.allowEval> is true:\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t *\n\t * A remove node will remove the entry with the name given in the as-attribute\n\t * from the style.\n\t * \n\t * Example:\n\t *\n\t * (code)\n\t * <mxStylesheet as=\"stylesheet\">\n\t *   <add as=\"text\">\n\t *     <add as=\"fontSize\" value=\"12\"/>\n\t *   </add>\n\t *   <add as=\"defaultVertex\" extend=\"text\">\n\t *     <add as=\"shape\" value=\"rectangle\"/>\n\t *   </add>\n\t * </mxStylesheet>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar obj = into || new this.template.constructor();\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.objects[id] = obj;\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tif (!this.processInclude(dec, node, obj) && node.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\n\t\t\t\tif (as != null)\n\t\t\t\t{\n\t\t\t\t\tvar extend = node.getAttribute('extend');\n\t\t\t\t\tvar style = (extend != null) ? mxUtils.clone(obj.styles[extend]) : null;\n\t\t\t\t\t\n\t\t\t\t\tif (style == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (extend != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxLog.warn('mxStylesheetCodec.decode: stylesheet ' +\n\t\t\t\t\t\t\t\textend + ' not found to extend');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstyle = new Object();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar entry = node.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (entry != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (entry.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t \tvar key = entry.getAttribute('as');\n\t\t\t\t\t\t \t\n\t\t\t\t\t\t \tif (entry.nodeName == 'add')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \tvar text = mxUtils.getTextContent(entry);\n\t\t\t\t\t\t\t \tvar value = null;\n\t\t\t\t\t\t\t \t\n\t\t\t\t\t\t\t \tif (text != null && text.length > 0 && mxStylesheetCodec.allowEval)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = mxUtils.eval(text);\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t \telse\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = entry.getAttribute('value');\n\t\t\t\t\t\t\t \t\t\n\t\t\t\t\t\t\t \t\tif (mxUtils.isNumeric(value))\n\t\t\t\t\t\t\t \t\t{\n\t\t\t\t\t\t\t\t\t\tvalue = parseFloat(value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t \t}\n\n\t\t\t\t\t\t\t \tif (value != null)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tstyle[key] = value;\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \telse if (entry.nodeName == 'remove')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t \t\tdelete style[key];\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tentry = entry.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj.putCellStyle(as, style);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input.\n */\nmxStylesheetCodec.allowEval = true;\n\n__mxOutput.mxStylesheetCodec = typeof mxStylesheetCodec !== 'undefined' ? mxStylesheetCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultKeyHandlerCodec\n\t *\n\t * Custom codec for configuring <mxDefaultKeyHandler>s. This class is created\n\t * and registered dynamically at load time and used implicitly via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing key handlers, it does not encode or create key handlers.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultKeyHandler());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Binds a keystroke to an actionname.\n\t *\n\t * Attributes:\n\t *\n\t * as - Keycode.\n\t * action - Actionname to execute in editor.\n\t * control - Optional boolean indicating if\n\t * \t\tthe control key must be pressed.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <mxDefaultKeyHandler as=\"keyHandler\">\n\t *   <add as=\"88\" control=\"true\" action=\"cut\"/>\n\t *   <add as=\"67\" control=\"true\" action=\"copy\"/>\n\t *   <add as=\"86\" control=\"true\" action=\"paste\"/>\n\t * </mxDefaultKeyHandler>\n\t * (end)\n\t *\n\t * The keycodes are for the x, c and v keys.\n\t *\n\t * See also: <mxDefaultKeyHandler.bindAction>,\n\t * http://www.js-examples.com/page/tutorials__key_codes.html\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (!this.processInclude(dec, node, into) &&\n\t\t\t\t\tnode.nodeName == 'add')\n\t\t\t\t{\n\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\tvar control = node.getAttribute('control');\n\t\t\t\t\t\n\t\t\t\t\tinto.bindAction(as, action, control);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultKeyHandlerCodec = typeof mxDefaultKeyHandlerCodec !== 'undefined' ? mxDefaultKeyHandlerCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbarCodec\n *\n * Custom codec for configuring <mxDefaultToolbar>s. This class is created\n * and registered dynamically at load time and used implicitly via\n * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n * data for existing toolbars handlers, it does not encode or create toolbars.\n */\nvar mxDefaultToolbarCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxDefaultToolbar());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new item to the toolbar. See below for attributes.\n\t * separator - Adds a vertical separator. No attributes.\n\t * hr - Adds a horizontal separator. No attributes.\n\t * br - Adds a linefeed. No attributes. \n\t *\n\t * Attributes:\n\t *\n\t * as - Resource key for the label.\n\t * action - Name of the action to execute in enclosing editor.\n\t * mode - Modename (see below).\n\t * template - Template name for cell insertion.\n\t * style - Optional style to override the template style.\n\t * icon - Icon (relative/absolute URL).\n\t * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n\t * id - Optional ID to be used for the created DOM element.\n\t * toggle - Optional 0 or 1 to disable toggling of the element. Default is\n\t * 1 (true).\n\t *\n\t * The action, mode and template attributes are mutually exclusive. The\n\t * style can only be used with the template attribute. The add node may\n\t * contain another sequence of add nodes with as and action attributes\n\t * to create a combo box in the toolbar. If the icon is specified then\n\t * a list of the child node is expected to have its template attribute\n\t * set and the action is ignored instead.\n\t * \n\t * Nodes with a specified template may define a function to be used for\n\t * inserting the cloned template into the graph. Here is an example of such\n\t * a node:\n\t * \n\t * (code)\n\t * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n\t *   function (editor, cell, evt, targetCell)\n\t *   {\n\t *     var pt = mxUtils.convertPoint(\n\t *       editor.graph.container, mxEvent.getClientX(evt),\n\t *         mxEvent.getClientY(evt));\n\t *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * In the above function, editor is the enclosing <mxEditor> instance, cell\n\t * is the clone of the template, evt is the mouse event that represents the\n\t * drop and targetCell is the cell under the mousepointer where the drop\n\t * occurred. The targetCell is retrieved using <mxGraph.getCellAt>.\n\t *\n\t * Futhermore, nodes with the mode attribute may define a function to\n\t * be executed upon selection of the respective toolbar icon. In the\n\t * example below, the default edge style is set when this specific\n\t * connect-mode is activated:\n\t *\n\t * (code)\n\t * <add as=\"connect\" mode=\"connect\"><![CDATA[\n\t *   function (editor)\n\t *   {\n\t *     if (editor.defaultEdge != null)\n\t *     {\n\t *       editor.defaultEdge.style = 'straightEdge';\n\t *     }\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * Both functions require <mxDefaultToolbarCodec.allowEval> to be set to true.\n\t *\n\t * Modes:\n\t *\n\t * select - Left mouse button used for rubberband- & cell-selection.\n\t * connect - Allows connecting vertices by inserting new edges.\n\t * pan - Disables selection and switches to panning on the left button.\n\t *\n\t * Example:\n\t *\n\t * To add items to the toolbar:\n\t * \n\t * (code)\n\t * <mxDefaultToolbar as=\"toolbar\">\n\t *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n\t *   <br/><hr/>\n\t *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n\t *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n\t * </mxDefaultToolbar>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\tif (!this.processInclude(dec, node, into))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (node.nodeName == 'separator')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.addSeparator();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'br')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addBreak();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'hr')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addLine();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'add')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\t\t\t\tvar icon = node.getAttribute('icon');\n\t\t\t\t\t\t\tvar pressedIcon = node.getAttribute('pressedIcon');\n\t\t\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\t\t\tvar mode = node.getAttribute('mode');\n\t\t\t\t\t\t\tvar template = node.getAttribute('template');\n\t\t\t\t\t\t\tvar toggle = node.getAttribute('toggle') != '0';\n\t\t\t\t\t\t\tvar text = mxUtils.getTextContent(node);\n\t\t\t\t\t\t\tvar elt = null;\n\n\t\t\t\t\t\t\tif (action != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telt = into.addItem(as, icon, action, pressedIcon);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (mode != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar funct = (mxDefaultToolbarCodec.allowEval) ? mxUtils.eval(text) : null;\n\t\t\t\t\t\t\t\telt = into.addMode(as, icon, mode, pressedIcon, funct);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (template != null || (text != null && text.length > 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar cell = editor.templates[template];\n\t\t\t\t\t\t\t\tvar style = node.getAttribute('style');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (cell != null && style != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcell = editor.graph.cloneCell(cell);\n\t\t\t\t\t\t\t\t\tcell.setStyle(style);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar insertFunction = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (text != null && text.length > 0 && mxDefaultToolbarCodec.allowEval)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tinsertFunction = mxUtils.eval(text);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\telt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar children = mxUtils.getChildNodes(node);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (children.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (icon == null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar combo = into.addActionCombo(as);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(combo, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar act = child.getAttribute('action');\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addActionOption(combo, lab, act);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar select = null;\n\t\t\t\t\t\t\t\t\t\tvar create = function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar template = editor.templates[select.value];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (template != null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar clone = template.clone();\n\t\t\t\t\t\t\t\t\t\t\t\tvar style = select.options[select.selectedIndex].cellStyle;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif (style != null)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tclone.setStyle(style);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn clone;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmxLog.warn('Template '+template+' not found');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar img = into.addPrototype(as, icon, create, null, null, toggle);\n\t\t\t\t\t\t\t\t\t\tselect = into.addCombo();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Selects the toolbar icon if a selection change\n\t\t\t\t\t\t\t\t\t\t// is made in the corresponding combobox.\n\t\t\t\t\t\t\t\t\t\tmxEvent.addListener(select, 'change', function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.selectMode(img, function(evt)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar pt = mxUtils.convertPoint(editor.graph.container,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn editor.addVertex(null, funct(), pt.x, pt.y);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.noReset = false;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Adds the entries to the combobox\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(select, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = child.getAttribute('template');\n\t\t\t\t\t\t\t\t\t\t\t\tvar option = into.addOption(select, lab, tmp || template);\n\t\t\t\t\t\t\t\t\t\t\t\toption.cellStyle = child.getAttribute('style');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Assigns an ID to the created element to access it later.\n\t\t\t\t\t\t\tif (elt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar id = node.getAttribute('id');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (id != null && id.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\telt.setAttribute('id', id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input\n */\nmxDefaultToolbarCodec.allowEval = true;\n\n__mxOutput.mxDefaultToolbarCodec = typeof mxDefaultToolbarCodec !== 'undefined' ? mxDefaultToolbarCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultPopupMenuCodec\n\t *\n\t * Custom codec for configuring <mxDefaultPopupMenu>s. This class is created\n\t * and registered dynamically at load time and used implicitly via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing popup menus, it does not encode or create menus. Note\n\t * that this codec only passes the configuration node to the popup menu,\n\t * which uses the config to dynamically create menus. See\n\t * <mxDefaultPopupMenu.createMenu>.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultPopupMenu());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Uses the given node as the config for <mxDefaultPopupMenu>.\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar inc = node.getElementsByTagName('include')[0];\n\t\t\n\t\tif (inc != null)\n\t\t{\n\t\t\tthis.processInclude(dec, inc, into);\n\t\t}\n\t\telse if (into != null)\n\t\t{\n\t\t\tinto.config = node;\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultPopupMenuCodec = typeof mxDefaultPopupMenuCodec !== 'undefined' ? mxDefaultPopupMenuCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxEditorCodec\n\t *\n\t * Codec for <mxEditor>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - modified\n\t * - lastSnapshot\n\t * - ignoredChanges\n\t * - undoManager\n\t * - graphContainer\n\t * - toolbarContainer\n\t */\n\tvar codec = new mxObjectCodec(new mxEditor(),\n\t\t['modified', 'lastSnapshot', 'ignoredChanges',\n\t\t'undoManager', 'graphContainer', 'toolbarContainer']);\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the ui-part of the configuration node by reading\n\t * a sequence of the following child nodes and attributes\n\t * and passes the control to the default decoding mechanism:\n\t *\n\t * Child Nodes:\n\t *\n\t * stylesheet - Adds a CSS stylesheet to the document.\n\t * resource - Adds the basename of a resource bundle.\n\t * add - Creates or configures a known UI element.\n\t *\n\t * These elements may appear in any order given that the\n\t * graph UI element is added before the toolbar element\n\t * (see Known Keys).\n\t *\n\t * Attributes:\n\t *\n\t * as - Key for the UI element (see below).\n\t * element - ID for the element in the document.\n\t * style - CSS style to be used for the element or window.\n\t * x - X coordinate for the new window.\n\t * y - Y coordinate for the new window.\n\t * width - Width for the new window.\n\t * height - Optional height for the new window.\n\t * name - Name of the stylesheet (absolute/relative URL).\n\t * basename - Basename of the resource bundle (see <mxResources>).\n\t *\n\t * The x, y, width and height attributes are used to create a new\n\t * <mxWindow> if the element attribute is not specified in an add\n\t * node. The name and basename are only used in the stylesheet and\n\t * resource nodes, respectively.\n\t *\n\t * Known Keys:\n\t *\n\t * graph - Main graph element (see <mxEditor.setGraphContainer>).\n\t * title - Title element (see <mxEditor.setTitleContainer>).\n\t * toolbar - Toolbar element (see <mxEditor.setToolbarContainer>).\n\t * status - Status bar element (see <mxEditor.setStatusContainer>).\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <ui>\n\t *   <stylesheet name=\"css/process.css\"/>\n\t *   <resource basename=\"resources/app\"/>\n\t *   <add as=\"graph\" element=\"graph\"\n\t *     style=\"left:70px;right:20px;top:20px;bottom:40px\"/>\n\t *   <add as=\"status\" element=\"status\"/>\n\t *   <add as=\"toolbar\" x=\"10\" y=\"20\" width=\"54\"/>\n\t * </ui>\n\t * (end)\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Assigns the specified templates for edges\n\t\tvar defaultEdge = node.getAttribute('defaultEdge');\n\t\t\n\t\tif (defaultEdge != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultEdge');\n\t\t\tobj.defaultEdge = obj.templates[defaultEdge];\n\t\t}\n\n\t\t// Assigns the specified templates for groups\n\t\tvar defaultGroup = node.getAttribute('defaultGroup');\n\t\t\n\t\tif (defaultGroup != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultGroup');\n\t\t\tobj.defaultGroup = obj.templates[defaultGroup];\n\t\t}\n\n\t\treturn obj;\n\t};\n\t\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'Array')\n\t\t{\n\t\t\tvar role = child.getAttribute('as');\n\t\t\t\n\t\t\tif (role == 'templates')\n\t\t\t{\n\t\t\t\tthis.decodeTemplates(dec, child, obj);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (child.nodeName == 'ui')\n\t\t{\n\t\t\tthis.decodeUi(dec, child, obj);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t};\n\t\t\n\t/**\n\t * Function: decodeUi\n\t *\n\t * Decodes the ui elements from the given node.\n\t */\n\tcodec.decodeUi = function(dec, node, editor)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = tmp.getAttribute('as');\n\t\t\t\tvar elt = tmp.getAttribute('element');\n\t\t\t\tvar style = tmp.getAttribute('style');\n\t\t\t\tvar element = null;\n\n\t\t\t\tif (elt != null)\n\t\t\t\t{\n\t\t\t\t\telement = document.getElementById(elt);\n\t\t\t\t\t\n\t\t\t\t\tif (element != null && style != null)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.style.cssText += ';' + style;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar x = parseInt(tmp.getAttribute('x'));\n\t\t\t\t\tvar y = parseInt(tmp.getAttribute('y'));\n\t\t\t\t\tvar width = tmp.getAttribute('width');\n\t\t\t\t\tvar height = tmp.getAttribute('height');\n\n\t\t\t\t\t// Creates a new window around the element\n\t\t\t\t\telement = document.createElement('div');\n\t\t\t\t\telement.style.cssText = style;\n\t\t\t\t\t\n\t\t\t\t\tvar wnd = new mxWindow(mxResources.get(as) || as,\n\t\t\t\t\t\telement, x, y, width, height, false, true);\n\t\t\t\t\twnd.setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// TODO: Make more generic\n\t\t\t\tif (as == 'graph')\n\t\t\t\t{\n\t\t\t\t\teditor.setGraphContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'toolbar')\n\t\t\t\t{\n\t\t\t\t\teditor.setToolbarContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'title')\n\t\t\t\t{\n\t\t\t\t\teditor.setTitleContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'status')\n\t\t\t\t{\n\t\t\t\t\teditor.setStatusContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'map')\n\t\t\t\t{\n\t\t\t\t\teditor.setMapContainer(element);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'resource')\n\t\t\t{\n\t\t\t\tmxResources.add(tmp.getAttribute('basename'));\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'stylesheet')\n\t\t\t{\n\t\t\t\tmxClient.link('stylesheet', tmp.getAttribute('name'));\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\t\n\t};\n\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeTemplates = function(dec, node, editor)\n\t{\n\t\tif (editor.templates == null)\n\t\t{\n\t\t\teditor.templates = [];\n\t\t}\n\t\t\n\t\tvar children = mxUtils.getChildNodes(node);\n\t\tfor (var j=0; j<children.length; j++)\n\t\t{\n\t\t\tvar name = children[j].getAttribute('as');\n\t\t\tvar child = children[j].firstChild;\n\t\t\t\n\t\t\twhile (child != null && child.nodeType != 1)\n\t\t\t{\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\t// LATER: Only single cells means you need\n\t\t\t\t// to group multiple cells within another\n\t\t\t\t// cell. This should be changed to support\n\t\t\t\t// arrays of cells, or the wrapper must\n\t\t\t\t// be automatically handled in this class.\n\t\t\t\teditor.templates[name] = dec.decodeCell(child);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxEditorCodec = typeof mxEditorCodec !== 'undefined' ? mxEditorCodec : undefined;\nreturn __mxOutput;\n};\n}));"],"sourceRoot":""}